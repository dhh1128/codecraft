<?xml version='1.0' encoding='utf-8'?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:ns0="http://wordpress.org/export/1.2/" xmlns:ns2="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
<title>Codecraft</title>
<link>http://codecraft.co</link>
<description>software = science + art + people</description>
<pubDate>Wed, 11 Sep 2024 13:20:41 +0000</pubDate>
<language>en</language>
<ns0:wxr_version>1.2</ns0:wxr_version>
<ns0:base_site_url>http://wordpress.com/</ns0:base_site_url>
<ns0:base_blog_url>http://codecraft.co</ns0:base_blog_url>
<ns0:author>
  <ns0:author_id>4597088</ns0:author_id>
  <ns0:author_login>dhh11289</ns0:author_login>
  <ns0:author_email>daniel.hardman@gmail.com</ns0:author_email>
  <ns0:author_display_name>Daniel Hardman</ns0:author_display_name>
  <ns0:author_first_name>Daniel</ns0:author_first_name>
  <ns0:author_last_name>Hardman</ns0:author_last_name>
</ns0:author>
<generator>http://wordpress.com/</generator>
<image>
		<url>http://0.gravatar.com/blavatar/649ae60b54b8f1fd39cf4c14e76b7d2478068ac58595ab0ff2a1682dc57e42ef?s=96&amp;d=http%3A%2F%2Fs0.wp.com%2Fi%2Fbuttonw-com.png</url>
		<title>Codecraft</title>
		<link>http://codecraft.co</link>
	</image>
	<item>
  <title>shared-wsdl</title>
  <link>http://codecraft.co/2008/07/29/decoupling-interfaces-as-versions-evolve-part-1/shared-wsdl/</link>
  <pubDate>Wed, 30 Jul 2008 03:53:44 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2008/07/shared-wsdl.png</guid>
  <ns0:post_id>18</ns0:post_id>
  <ns0:post_date>2008-07-29 20:53:44</ns0:post_date>
  <ns0:post_name>shared-wsdl</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2008/07/shared-wsdl.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2008/07/shared-wsdl.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:758;s:6:"height";i:470;s:14:"hwstring_small";s:23:"height='79' width='128'";s:4:"file";s:86:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2008/07/shared-wsdl.png";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>shared-wsdl1</title>
  <link>http://codecraft.co/2008/07/29/decoupling-interfaces-as-versions-evolve-part-1/shared-wsdl1/</link>
  <pubDate>Wed, 30 Jul 2008 03:57:55 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2008/07/shared-wsdl1.png</guid>
  <ns0:post_id>20</ns0:post_id>
  <ns0:post_date>2008-07-29 20:57:55</ns0:post_date>
  <ns0:post_name>shared-wsdl1</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2008/07/shared-wsdl1.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2008/07/shared-wsdl1.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:758;s:6:"height";i:470;s:14:"hwstring_small";s:23:"height='79' width='128'";s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2008/07/shared-wsdl1.png";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>com-versioning</title>
  <link>http://codecraft.co/2008/07/29/decoupling-interfaces-as-versions-evolve-part-1/com-versioning/</link>
  <pubDate>Wed, 30 Jul 2008 04:01:58 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2008/07/com-versioning.png</guid>
  <ns0:post_id>21</ns0:post_id>
  <ns0:post_date>2008-07-29 21:01:58</ns0:post_date>
  <ns0:post_name>com-versioning</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2008/07/com-versioning.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2008/07/com-versioning.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:667;s:6:"height";i:388;s:14:"hwstring_small";s:23:"height='74' width='128'";s:4:"file";s:89:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2008/07/com-versioning.png";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>traditional-pros-and-cons</title>
  <link>http://codecraft.co/2008/07/29/decoupling-interfaces-as-versions-evolve-part-1/traditional-pros-and-cons/</link>
  <pubDate>Wed, 30 Jul 2008 05:00:07 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2008/07/traditional-pros-and-cons.png</guid>
  <ns2:encoded>Traditional Approach - Pros and Cons</ns2:encoded>
  <ns0:post_id>37</ns0:post_id>
  <ns0:post_date>2008-07-29 22:00:07</ns0:post_date>
  <ns0:post_name>traditional-pros-and-cons</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2008/07/traditional-pros-and-cons.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:724;s:6:"height";i:425;s:14:"hwstring_small";s:23:"height='75' width='128'";s:4:"file";s:100:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2008/07/traditional-pros-and-cons.png";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2008/07/traditional-pros-and-cons.png</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>alternative</title>
  <link>http://codecraft.co/2008/08/19/decoupling-interfaces-as-versions-evolve-part-3/alternative/</link>
  <pubDate>Wed, 30 Jul 2008 05:18:00 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2008/07/alternative.png</guid>
  <ns0:post_id>45</ns0:post_id>
  <ns0:post_date>2008-07-29 22:18:00</ns0:post_date>
  <ns0:post_name>alternative</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2008/07/alternative.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2008/07/alternative.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:731;s:6:"height";i:480;s:14:"hwstring_small";s:23:"height='84' width='128'";s:4:"file";s:86:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2008/07/alternative.png";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>trycast</title>
  <link>http://codecraft.co/2008/08/19/decoupling-interfaces-as-versions-evolve-part-3/trycast/</link>
  <pubDate>Wed, 30 Jul 2008 05:19:01 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2008/07/trycast.png</guid>
  <ns0:post_id>46</ns0:post_id>
  <ns0:post_date>2008-07-29 22:19:01</ns0:post_date>
  <ns0:post_name>trycast</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2008/07/trycast.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2008/07/trycast.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:752;s:6:"height";i:452;s:14:"hwstring_small";s:23:"height='76' width='128'";s:4:"file";s:82:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2008/07/trycast.png";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>alternative-pros-and-cons</title>
  <link>http://codecraft.co/2008/08/19/decoupling-interfaces-as-versions-evolve-part-3/alternative-pros-and-cons/</link>
  <pubDate>Wed, 30 Jul 2008 05:33:23 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2008/07/alternative-pros-and-cons.png</guid>
  <ns0:post_id>55</ns0:post_id>
  <ns0:post_date>2008-07-29 22:33:23</ns0:post_date>
  <ns0:post_name>alternative-pros-and-cons</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2008/07/alternative-pros-and-cons.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2008/07/alternative-pros-and-cons.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:727;s:6:"height";i:453;s:14:"hwstring_small";s:23:"height='79' width='128'";s:4:"file";s:100:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2008/07/alternative-pros-and-cons.png";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>photo-of-daniel.jpg</title>
  <link>http://codecraft.co/photo-of-danieljpg/</link>
  <pubDate>Wed, 30 Jul 2008 05:47:05 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2008/07/photo-of-daniel.jpg</guid>
  <ns2:encoded>http://codecraft.co/wp-content/uploads/2008/07/photo-of-daniel.jpg</ns2:encoded>
  <ns0:post_id>65</ns0:post_id>
  <ns0:post_date>2008-07-29 22:47:05</ns0:post_date>
  <ns0:post_name>photo-of-danieljpg</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2008/07/photo-of-daniel.jpg</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2008/07/photo-of-daniel.jpg</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>photo-of-daniel1</title>
  <link>http://codecraft.co/about/photo-of-daniel1/</link>
  <pubDate>Wed, 30 Jul 2008 05:52:28 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2008/07/photo-of-daniel1.jpg</guid>
  <ns0:post_id>67</ns0:post_id>
  <ns0:post_date>2008-07-29 22:52:28</ns0:post_date>
  <ns0:post_name>photo-of-daniel1</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2008/07/photo-of-daniel1.jpg</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2008/07/photo-of-daniel1.jpg</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:341;s:6:"height";i:401;s:14:"hwstring_small";s:22:"height='96' width='81'";s:4:"file";s:91:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2008/07/photo-of-daniel1.jpg";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>6621199759_91d3cfc0fd</title>
  <link>http://codecraft.co/2012/06/20/high-value-questions/6621199759_91d3cfc0fd/</link>
  <pubDate>Wed, 20 Jun 2012 20:21:35 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2012/06/6621199759_91d3cfc0fd.jpg</guid>
  <ns0:post_id>155</ns0:post_id>
  <ns0:post_date>2012-06-20 13:21:35</ns0:post_date>
  <ns0:post_name>6621199759_91d3cfc0fd</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2012/06/6621199759_91d3cfc0fd.jpg</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/06/6621199759_91d3cfc0fd.jpg</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";s:3:"500";s:6:"height";s:3:"500";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:96:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/06/6621199759_91d3cfc0fd.jpg";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>block diagram - discoverer product</title>
  <link>http://codecraft.co/2012/06/21/example-rpcd-interaction/screenshot-at-2012-06-21-095813/</link>
  <pubDate>Thu, 21 Jun 2012 15:59:36 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2012/06/screenshot-at-2012-06-21-095813.png</guid>
  <ns0:post_id>218</ns0:post_id>
  <ns0:post_date>2012-06-21 08:59:36</ns0:post_date>
  <ns0:post_name>screenshot-at-2012-06-21-095813</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2012/06/screenshot-at-2012-06-21-095813.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/06/screenshot-at-2012-06-21-095813.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";s:3:"711";s:6:"height";s:3:"565";s:14:"hwstring_small";s:23:"height='96' width='120'";s:4:"file";s:106:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/06/screenshot-at-2012-06-21-095813.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>bigger-mugshot</title>
  <link>http://codecraft.co/about/bigger-mugshot/</link>
  <pubDate>Wed, 15 Aug 2012 04:04:57 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2008/07/bigger-mugshot.png</guid>
  <ns0:post_id>265</ns0:post_id>
  <ns0:post_date>2012-08-14 21:04:57</ns0:post_date>
  <ns0:post_name>bigger-mugshot</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2008/07/bigger-mugshot.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:244;s:6:"height";i:398;s:14:"hwstring_small";s:22:"height='96' width='58'";s:4:"file";s:89:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2008/07/bigger-mugshot.png";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2008/07/bigger-mugshot.png</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>fractal</title>
  <link>http://codecraft.co/fractal/</link>
  <pubDate>Thu, 30 Aug 2012 18:20:46 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2012/08/fractal1.png</guid>
  <ns0:post_id>333</ns0:post_id>
  <ns0:post_date>2012-08-30 11:20:46</ns0:post_date>
  <ns0:post_name>fractal</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2012/08/fractal1.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/08/fractal1.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:240;s:6:"height";i:240;s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:83:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/08/fractal1.png";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>blog-background</title>
  <link>http://codecraft.co/blog-background/</link>
  <pubDate>Thu, 30 Aug 2012 18:21:11 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2012/08/blog-background.png</guid>
  <ns0:post_id>334</ns0:post_id>
  <ns0:post_date>2012-08-30 11:21:11</ns0:post_date>
  <ns0:post_name>blog-background</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2012/08/blog-background.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/08/blog-background.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:736;s:6:"height";i:229;s:14:"hwstring_small";s:23:"height='39' width='128'";s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/08/blog-background.png";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
  </item>
<item>
  <title>bush-fail</title>
  <link>http://codecraft.co/2012/09/03/good-code-plans-for-problems/bush-fail/</link>
  <pubDate>Mon, 03 Sep 2012 18:09:21 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2012/09/bush-fail.jpg</guid>
  <ns0:post_id>360</ns0:post_id>
  <ns0:post_date>2012-09-03 11:09:21</ns0:post_date>
  <ns0:post_name>bush-fail</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2012/09/bush-fail.jpg</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:523;s:6:"height";i:480;s:14:"hwstring_small";s:23:"height='96' width='104'";s:4:"file";s:84:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/09/bush-fail.jpg";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/09/bush-fail.jpg</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>6637427465_2fb4695630</title>
  <link>http://codecraft.co/2012/06/20/high-value-questions/6637427465_2fb4695630/</link>
  <pubDate>Mon, 03 Sep 2012 20:50:27 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2012/09/6637427465_2fb4695630.jpg</guid>
  <ns0:post_id>369</ns0:post_id>
  <ns0:post_date>2012-09-03 13:50:27</ns0:post_date>
  <ns0:post_name>6637427465_2fb4695630</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2012/09/6637427465_2fb4695630.jpg</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:500;s:6:"height";i:500;s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:96:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/09/6637427465_2fb4695630.jpg";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/09/6637427465_2fb4695630.jpg</ns0:meta_value>
  </ns0:postmeta>
  </item>
<item>
  <title>6863155588_5d71447a96_n</title>
  <link>http://codecraft.co/2012/09/03/6-0-syndrome/6863155588_5d71447a96_n/</link>
  <pubDate>Mon, 03 Sep 2012 23:00:02 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2012/09/6863155588_5d71447a96_n.jpg</guid>
  <ns0:post_id>374</ns0:post_id>
  <ns0:post_date>2012-09-03 16:00:02</ns0:post_date>
  <ns0:post_name>6863155588_5d71447a96_n</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2012/09/6863155588_5d71447a96_n.jpg</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/09/6863155588_5d71447a96_n.jpg</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:320;s:6:"height";i:213;s:14:"hwstring_small";s:23:"height='85' width='128'";s:4:"file";s:98:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/09/6863155588_5d71447a96_n.jpg";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>guest post</title>
  <link>http://codecraft.co/2012/09/23/code-isnt-art/guest-post/</link>
  <pubDate>Sun, 23 Sep 2012 23:43:20 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2012/09/guest-post.png</guid>
  <ns0:post_id>553</ns0:post_id>
  <ns0:post_date>2012-09-23 17:43:20</ns0:post_date>
  <ns0:post_name>guest-post</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2012/09/guest-post.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/09/guest-post.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:183;s:6:"height";i:40;s:14:"hwstring_small";s:23:"height='27' width='128'";s:4:"file";s:85:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/09/guest-post.png";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>sign-fail</title>
  <link>http://codecraft.co/2012/09/27/coding-standards/sign-fail/</link>
  <pubDate>Thu, 27 Sep 2012 04:25:46 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2012/09/sign-fail.png</guid>
  <ns0:post_id>580</ns0:post_id>
  <ns0:post_date>2012-09-26 22:25:46</ns0:post_date>
  <ns0:post_name>sign-fail</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2012/09/sign-fail.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/09/sign-fail.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:285;s:6:"height";i:525;s:14:"hwstring_small";s:22:"height='96' width='52'";s:4:"file";s:84:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/09/sign-fail.png";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Screen Shot 2012-10-02 at 10.10.04 PM</title>
  <link>http://codecraft.co/2012/10/03/why-i-dont-blog-about-great-code/screen-shot-2012-10-02-at-10-10-04-pm/</link>
  <pubDate>Wed, 03 Oct 2012 04:11:26 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2012/10/screen-shot-2012-10-02-at-10-10-04-pm.png</guid>
  <ns0:post_id>620</ns0:post_id>
  <ns0:post_date>2012-10-02 22:11:26</ns0:post_date>
  <ns0:post_name>screen-shot-2012-10-02-at-10-10-04-pm</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2012/10/screen-shot-2012-10-02-at-10-10-04-pm.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/10/screen-shot-2012-10-02-at-10-10-04-pm.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:508;s:6:"height";i:226;s:14:"hwstring_small";s:23:"height='56' width='128'";s:4:"file";s:112:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/10/screen-shot-2012-10-02-at-10-10-04-pm.png";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>solo shot</title>
  <link>http://codecraft.co/about/img_1000/</link>
  <pubDate>Thu, 18 Oct 2012 00:16:22 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2008/07/img_1000.jpg</guid>
  <ns0:post_id>720</ns0:post_id>
  <ns0:post_date>2012-10-17 18:16:22</ns0:post_date>
  <ns0:post_name>img_1000</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2008/07/img_1000.jpg</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2008/07/img_1000.jpg</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:4:{s:5:"width";i:2212;s:6:"height";i:3318;s:4:"file";s:83:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2008/07/img_1000.jpg";s:10:"image_meta";a:10:{s:8:"aperture";d:2.79999999999999982236431605997495353221893310546875;s:6:"credit";s:0:"";s:6:"camera";s:12:"Canon EOS 7D";s:7:"caption";s:0:"";s:17:"created_timestamp";i:1348556743;s:9:"copyright";s:0:"";s:12:"focal_length";i:44;s:3:"iso";s:3:"160";s:13:"shutter_speed";d:0.06666666666666666574148081281236954964697360992431640625;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Screen Shot 2012-12-09 at 12.27.01 PM</title>
  <link>http://codecraft.co/2012/12/10/george-and-the-flood/screen-shot-2012-12-09-at-12-27-01-pm/</link>
  <pubDate>Sun, 09 Dec 2012 19:33:31 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2012/12/screen-shot-2012-12-09-at-12-27-01-pm.png</guid>
  <ns0:post_id>866</ns0:post_id>
  <ns0:post_date>2012-12-09 12:33:31</ns0:post_date>
  <ns0:post_name>screen-shot-2012-12-09-at-12-27-01-pm</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2012/12/screen-shot-2012-12-09-at-12-27-01-pm.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/12/screen-shot-2012-12-09-at-12-27-01-pm.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:725;s:6:"height";i:440;s:4:"file";s:112:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/12/screen-shot-2012-12-09-at-12-27-01-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Screen Shot 2012-12-09 at 12.28.05 PM</title>
  <link>http://codecraft.co/2012/12/10/george-and-the-flood/screen-shot-2012-12-09-at-12-28-05-pm/</link>
  <pubDate>Sun, 09 Dec 2012 19:34:15 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2012/12/screen-shot-2012-12-09-at-12-28-05-pm.png</guid>
  <ns0:post_id>867</ns0:post_id>
  <ns0:post_date>2012-12-09 12:34:15</ns0:post_date>
  <ns0:post_name>screen-shot-2012-12-09-at-12-28-05-pm</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2012/12/screen-shot-2012-12-09-at-12-28-05-pm.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/12/screen-shot-2012-12-09-at-12-28-05-pm.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:961;s:6:"height";i:457;s:4:"file";s:112:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/12/screen-shot-2012-12-09-at-12-28-05-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Screen Shot 2012-12-09 at 12.28.43 PM</title>
  <link>http://codecraft.co/2012/12/10/george-and-the-flood/screen-shot-2012-12-09-at-12-28-43-pm/</link>
  <pubDate>Sun, 09 Dec 2012 19:35:00 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2012/12/screen-shot-2012-12-09-at-12-28-43-pm.png</guid>
  <ns0:post_id>868</ns0:post_id>
  <ns0:post_date>2012-12-09 12:35:00</ns0:post_date>
  <ns0:post_name>screen-shot-2012-12-09-at-12-28-43-pm</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2012/12/screen-shot-2012-12-09-at-12-28-43-pm.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/12/screen-shot-2012-12-09-at-12-28-43-pm.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:714;s:6:"height";i:359;s:4:"file";s:112:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/12/screen-shot-2012-12-09-at-12-28-43-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
  </item>
<item>
  <title>Venn diagram: const and mutable</title>
  <link>http://codecraft.co/2013/01/02/how-sutters-wrong-about-const-in-cpp-11/screen-shot-2013-01-01-at-1-25-14-pm/</link>
  <pubDate>Tue, 01 Jan 2013 20:29:29 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2013/01/screen-shot-2013-01-01-at-1-25-14-pm.png</guid>
  <ns0:post_id>888</ns0:post_id>
  <ns0:post_date>2013-01-01 13:29:29</ns0:post_date>
  <ns0:post_name>screen-shot-2013-01-01-at-1-25-14-pm</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2013/01/screen-shot-2013-01-01-at-1-25-14-pm.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/01/screen-shot-2013-01-01-at-1-25-14-pm.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:429;s:6:"height";i:295;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/01/screen-shot-2013-01-01-at-1-25-14-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>pipeline</title>
  <link>http://codecraft.co/2013/01/08/3-commandments-of-performance-optimization/pipeline/</link>
  <pubDate>Thu, 03 Jan 2013 07:19:47 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2013/01/pipeline.png</guid>
  <ns0:post_id>901</ns0:post_id>
  <ns0:post_date>2013-01-03 00:19:47</ns0:post_date>
  <ns0:post_name>pipeline</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2013/01/pipeline.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/01/pipeline.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:500;s:6:"height";i:500;s:4:"file";s:83:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/01/pipeline.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>time_management</title>
  <link>http://codecraft.co/2013/01/24/interrupting-my-interruptions/time_management/</link>
  <pubDate>Thu, 24 Jan 2013 06:09:17 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2013/01/time_management.png</guid>
  <ns0:post_id>943</ns0:post_id>
  <ns0:post_date>2013-01-23 23:09:17</ns0:post_date>
  <ns0:post_name>time_management</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2013/01/time_management.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/01/time_management.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:630;s:6:"height";i:280;s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/01/time_management.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Screen Shot 2013-02-01 at 8.20.20 AM</title>
  <link>http://codecraft.co/2012/10/30/tech-debt-leverage-and-grandmas-envelope/screen-shot-2013-02-01-at-8-20-20-am/</link>
  <pubDate>Fri, 01 Feb 2013 15:21:22 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2012/10/screen-shot-2013-02-01-at-8-20-20-am.png</guid>
  <ns0:post_id>965</ns0:post_id>
  <ns0:post_date>2013-02-01 08:21:22</ns0:post_date>
  <ns0:post_name>screen-shot-2013-02-01-at-8-20-20-am</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2012/10/screen-shot-2013-02-01-at-8-20-20-am.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/10/screen-shot-2013-02-01-at-8-20-20-am.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:300;s:6:"height";i:222;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/10/screen-shot-2013-02-01-at-8-20-20-am.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Screen Shot 2013-02-04 at 9.42.59 PM</title>
  <link>http://codecraft.co/2013/02/05/smart-geeks-think-like-cheerleaders/screen-shot-2013-02-04-at-9-42-59-pm/</link>
  <pubDate>Tue, 05 Feb 2013 04:44:12 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2013/02/screen-shot-2013-02-04-at-9-42-59-pm.png</guid>
  <ns0:post_id>969</ns0:post_id>
  <ns0:post_date>2013-02-04 21:44:12</ns0:post_date>
  <ns0:post_name>screen-shot-2013-02-04-at-9-42-59-pm</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2013/02/screen-shot-2013-02-04-at-9-42-59-pm.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/02/screen-shot-2013-02-04-at-9-42-59-pm.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:500;s:6:"height";i:300;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/02/screen-shot-2013-02-04-at-9-42-59-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>meditation</title>
  <link>http://codecraft.co/2013/02/15/the-power-of-simplicity/screen-shot-2013-02-14-at-10-12-29-pm/</link>
  <pubDate>Fri, 15 Feb 2013 05:13:46 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2013/02/screen-shot-2013-02-14-at-10-12-29-pm.png</guid>
  <ns0:post_id>989</ns0:post_id>
  <ns0:post_date>2013-02-14 22:13:46</ns0:post_date>
  <ns0:post_name>screen-shot-2013-02-14-at-10-12-29-pm</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2013/02/screen-shot-2013-02-14-at-10-12-29-pm.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/02/screen-shot-2013-02-14-at-10-12-29-pm.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:500;s:6:"height";i:330;s:4:"file";s:112:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/02/screen-shot-2013-02-14-at-10-12-29-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Screen Shot 2013-02-21 at 9.14.21 AM</title>
  <link>http://codecraft.co/2013/02/21/architects-manage-risk-like-a-vegas-bookie/screen-shot-2013-02-21-at-9-14-21-am/</link>
  <pubDate>Thu, 21 Feb 2013 16:19:47 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2013/02/screen-shot-2013-02-21-at-9-14-21-am.png</guid>
  <ns0:post_id>1004</ns0:post_id>
  <ns0:post_date>2013-02-21 09:19:47</ns0:post_date>
  <ns0:post_name>screen-shot-2013-02-21-at-9-14-21-am</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2013/02/screen-shot-2013-02-21-at-9-14-21-am.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/02/screen-shot-2013-02-21-at-9-14-21-am.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:576;s:6:"height";i:417;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/02/screen-shot-2013-02-21-at-9-14-21-am.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Kevin Kelleher - 2013-03-12 08:13:57</title>
  <link>http://codecraft.co/?post_type=feedback&amp;p=1047</link>
  <pubDate>Tue, 12 Mar 2013 14:13:57 +0000</pubDate>
  <guid isPermaLink="false">http://codecraft.co/?post_type=feedback&amp;p=1047</guid>
  <ns2:encoded>Hi - I read your post on Learned Helplessness and went from there to read a few others. It's good stuff that you write, and I'd like to read all the posts on your blog, but I don't see a good way to navigate to the beginning and then back toward the present from there.

Is there an archive or index page for your blog?
&lt;!--more--&gt;
AUTHOR: Kevin Kelleher
AUTHOR EMAIL: kkelleher@homesite.com
AUTHOR URL: 
SUBJECT: [Codecraft] Contact
IP: 65.198.125.155
Array
(
    [Name] =&amp;gt; Kevin Kelleher
    [Email] =&amp;gt; kkelleher@homesite.com
    [Website] =&amp;gt; 
    [Comment] =&amp;gt; Hi - I read your post on Learned Helplessness and went from there to read a few others. It's good stuff that you write, and I'd like to read all the posts on your blog, but I don't see a good way to navigate to the beginning and then back toward the present from there.

Is there an archive or index page for your blog?



)
</ns2:encoded>
  <ns0:post_id>1047</ns0:post_id>
  <ns0:post_date>2013-03-12 08:13:57</ns0:post_date>
  <ns0:post_name>f88faa44d8891c1fb87582b8fb60242b</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>feedback</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_feedback_author</ns0:meta_key>
    <ns0:meta_value>Kevin Kelleher</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_feedback_author_email</ns0:meta_key>
    <ns0:meta_value>kkelleher@homesite.com</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_feedback_author_url</ns0:meta_key>
    <ns0:meta_value />
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_feedback_subject</ns0:meta_key>
    <ns0:meta_value>[Codecraft] Contact</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_feedback_ip</ns0:meta_key>
    <ns0:meta_value>65.198.125.155</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_feedback_contact_form_url</ns0:meta_key>
    <ns0:meta_value>http://codecraft.co/contact/</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_feedback_all_fields</ns0:meta_key>
    <ns0:meta_value>a:4:{s:4:"Name";s:14:"Kevin Kelleher";s:5:"Email";s:22:"kkelleher@homesite.com";s:7:"Website";s:0:"";s:7:"Comment";s:327:"Hi - I read your post on Learned Helplessness and went from there to read a few others. It's good stuff that you write, and I'd like to read all the posts on your blog, but I don't see a good way to navigate to the beginning and then back toward the present from there.

Is there an archive or index page for your blog?


";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_feedback_extra_fields</ns0:meta_key>
    <ns0:meta_value>a:0:{}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_feedback_email</ns0:meta_key>
    <ns0:meta_value>a:4:{s:2:"to";a:1:{i:0;s:24:"daniel.hardman@gmail.com";}s:7:"subject";s:19:"[Codecraft] Contact";s:7:"message";s:540:"Name: Kevin Kelleher
Email: kkelleher@homesite.com
Comment: Hi - I read your post on Learned Helplessness and went from there to read a few others. It's good stuff that you write, and I'd like to read all the posts on your blog, but I don't see a good way to navigate to the beginning and then back toward the present from there.

Is there an archive or index page for your blog?

Time: Tuesday March 12, 2013 at 8:13 am
IP Address: 65.198.125.155
Contact Form URL: http://codecraft.co/contact/
Sent by an unverified visitor to your site.";s:7:"headers";s:156:"From: Kevin Kelleher &lt;wordpress@techknowledgeme.wordpress.com&gt;
Reply-To: Kevin Kelleher &lt;kkelleher@homesite.com&gt;
Content-Type: text/plain; charset="UTF-8"";}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>langpop</title>
  <link>http://codecraft.co/2013/03/22/programming-language-popularity-inde/langpop/</link>
  <pubDate>Fri, 22 Mar 2013 20:30:22 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2013/03/langpop.png</guid>
  <ns0:post_id>1075</ns0:post_id>
  <ns0:post_date>2013-03-22 14:30:22</ns0:post_date>
  <ns0:post_name>langpop</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2013/03/langpop.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/03/langpop.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:500;s:6:"height";i:372;s:4:"file";s:82:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/03/langpop.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Issam - 2013-04-02 17:34:07</title>
  <link>http://codecraft.co/?post_type=feedback&amp;p=1087</link>
  <pubDate>Tue, 02 Apr 2013 23:34:07 +0000</pubDate>
  <guid isPermaLink="false">http://codecraft.co/?post_type=feedback&amp;p=1087</guid>
  <ns2:encoded>Hi 

I'm  Issam Lahlali.  the Product Manager for CppDepend tool.

CppDepend is a static analysis tool based on Clang that simplifies managing C\C++ code quality and provides a highly flexible code query framework. It offers some unique functionalities that no product in its category can provide.Please find more detailed features here: http://www.cppdepend.com/Features.aspx.

If you are interested to that kind of tools, I’ll be pleased to offer you a pro licence, so that you can try CppDepend and blog about it if you find it useful.

Best Regards!
Issam.
&lt;!--more--&gt;
AUTHOR: Issam
AUTHOR EMAIL: issamvb@gmail.com
AUTHOR URL: http://www.cppdepend.com
SUBJECT: [Codecraft] Contact
IP: 41.251.85.192
Array
(
    [Name] =&amp;gt; Issam
    [Email] =&amp;gt; issamvb@gmail.com
    [Website] =&amp;gt; http://www.cppdepend.com
    [Comment] =&amp;gt; Hi 

I'm  Issam Lahlali.  the Product Manager for CppDepend tool.

CppDepend is a static analysis tool based on Clang that simplifies managing C\C++ code quality and provides a highly flexible code query framework. It offers some unique functionalities that no product in its category can provide.Please find more detailed features here: http://www.cppdepend.com/Features.aspx.

If you are interested to that kind of tools, I’ll be pleased to offer you a pro licence, so that you can try CppDepend and blog about it if you find it useful.

Best Regards!
Issam.
)
</ns2:encoded>
  <ns0:post_id>1087</ns0:post_id>
  <ns0:post_date>2013-04-02 17:34:07</ns0:post_date>
  <ns0:post_name>e1ddd666682114bd0ab0e3bb1670aa93</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>feedback</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_feedback_author</ns0:meta_key>
    <ns0:meta_value>Issam</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_feedback_author_email</ns0:meta_key>
    <ns0:meta_value>issamvb@gmail.com</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_feedback_author_url</ns0:meta_key>
    <ns0:meta_value>http://www.cppdepend.com</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_feedback_subject</ns0:meta_key>
    <ns0:meta_value>[Codecraft] Contact</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_feedback_ip</ns0:meta_key>
    <ns0:meta_value>41.251.85.192</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_feedback_contact_form_url</ns0:meta_key>
    <ns0:meta_value>http://codecraft.co/contact/</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_feedback_all_fields</ns0:meta_key>
    <ns0:meta_value>a:4:{s:4:"Name";s:5:"Issam";s:5:"Email";s:17:"issamvb@gmail.com";s:7:"Website";s:24:"http://www.cppdepend.com";s:7:"Comment";s:571:"Hi 

I'm  Issam Lahlali.  the Product Manager for CppDepend tool.

CppDepend is a static analysis tool based on Clang that simplifies managing C\C++ code quality and provides a highly flexible code query framework. It offers some unique functionalities that no product in its category can provide.Please find more detailed features here: http://www.cppdepend.com/Features.aspx.

If you are interested to that kind of tools, I’ll be pleased to offer you a pro licence, so that you can try CppDepend and blog about it if you find it useful.

Best Regards!
Issam.";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_feedback_extra_fields</ns0:meta_key>
    <ns0:meta_value>a:0:{}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_feedback_email</ns0:meta_key>
    <ns0:meta_value>a:4:{s:2:"to";a:1:{i:0;s:24:"daniel.hardman@gmail.com";}s:7:"subject";s:19:"[Codecraft] Contact";s:7:"message";s:804:"Name: Issam
Email: issamvb@gmail.com
Website: http://www.cppdepend.com
Comment: Hi 

I'm  Issam Lahlali.  the Product Manager for CppDepend tool.

CppDepend is a static analysis tool based on Clang that simplifies managing C\C++ code quality and provides a highly flexible code query framework. It offers some unique functionalities that no product in its category can provide.Please find more detailed features here: http://www.cppdepend.com/Features.aspx.

If you are interested to that kind of tools, I’ll be pleased to offer you a pro licence, so that you can try CppDepend and blog about it if you find it useful.

Best Regards!
Issam.

Time: Tuesday April 2, 2013 at 5:34 pm
IP Address: 41.251.85.192
Contact Form URL: http://codecraft.co/contact/

Sent by a verified WordPress.com user.";s:7:"headers";s:133:"From: Issam &lt;wordpress@techknowledgeme.wordpress.com&gt;
Reply-To: Issam &lt;issamvb@gmail.com&gt;
Content-Type: text/plain; charset="UTF-8"";}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>3-fingers</title>
  <link>http://codecraft.co/2013/08/09/the-third-half-of-computational-economics/3-fingers/</link>
  <pubDate>Fri, 09 Aug 2013 17:25:11 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2013/08/3-fingers.jpg</guid>
  <ns0:post_id>1252</ns0:post_id>
  <ns0:post_date>2013-08-09 11:25:11</ns0:post_date>
  <ns0:post_name>3-fingers</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2013/08/3-fingers.jpg</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/08/3-fingers.jpg</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:500;s:6:"height";i:385;s:4:"file";s:84:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/08/3-fingers.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";d:9;s:6:"credit";s:0:"";s:6:"camera";s:10:"NIKON D70s";s:7:"caption";s:0:"";s:17:"created_timestamp";i:1222791361;s:9:"copyright";s:0:"";s:12:"focal_length";s:2:"35";s:3:"iso";i:0;s:13:"shutter_speed";s:8:"0.003125";s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>baby in bath</title>
  <link>http://codecraft.co/2013/08/12/headers-babies-and-bathwater/screen-shot-2013-08-11-at-7-35-35-pm/</link>
  <pubDate>Mon, 12 Aug 2013 01:36:33 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2013/08/screen-shot-2013-08-11-at-7-35-35-pm.png</guid>
  <ns0:post_id>1264</ns0:post_id>
  <ns0:post_date>2013-08-11 19:36:33</ns0:post_date>
  <ns0:post_name>screen-shot-2013-08-11-at-7-35-35-pm</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2013/08/screen-shot-2013-08-11-at-7-35-35-pm.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/08/screen-shot-2013-08-11-at-7-35-35-pm.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:565;s:6:"height";i:496;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/08/screen-shot-2013-08-11-at-7-35-35-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>google maps zoom slider</title>
  <link>http://codecraft.co/2013/09/19/what-should-code-look-like-when-we-squint-at-it/screen-shot-2013-09-18-at-10-25-28-pm/</link>
  <pubDate>Thu, 19 Sep 2013 04:26:16 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2013/09/screen-shot-2013-09-18-at-10-25-28-pm.png</guid>
  <ns0:post_id>1326</ns0:post_id>
  <ns0:post_date>2013-09-18 22:26:16</ns0:post_date>
  <ns0:post_name>screen-shot-2013-09-18-at-10-25-28-pm</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2013/09/screen-shot-2013-09-18-at-10-25-28-pm.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/09/screen-shot-2013-09-18-at-10-25-28-pm.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:33;s:6:"height";i:228;s:4:"file";s:112:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/09/screen-shot-2013-09-18-at-10-25-28-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>gokart</title>
  <link>http://codecraft.co/2013/09/30/steve-jackson-lead-with-passion/gokart/</link>
  <pubDate>Wed, 25 Sep 2013 15:17:31 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2013/09/gokart.png</guid>
  <ns0:post_id>1350</ns0:post_id>
  <ns0:post_date>2013-09-25 09:17:31</ns0:post_date>
  <ns0:post_name>gokart</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2013/09/gokart.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/09/gokart.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:500;s:6:"height";i:145;s:4:"file";s:81:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/09/gokart.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>steve-tolman</title>
  <link>http://codecraft.co/2013/09/30/steve-jackson-lead-with-passion/steve-tolman/</link>
  <pubDate>Wed, 25 Sep 2013 15:40:56 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2013/09/steve-tolman.png</guid>
  <ns0:post_id>1352</ns0:post_id>
  <ns0:post_date>2013-09-25 09:40:56</ns0:post_date>
  <ns0:post_name>steve-tolman</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2013/09/steve-tolman.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/09/steve-tolman.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:140;s:6:"height";i:154;s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/09/steve-tolman.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Screen Shot 2013-12-07 at 4.16.32 PM</title>
  <link>http://codecraft.co/2013/12/09/a-comedy-of-carelessness/screen-shot-2013-12-07-at-4-16-32-pm/</link>
  <pubDate>Sun, 08 Dec 2013 00:07:20 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2013/12/screen-shot-2013-12-07-at-4-16-32-pm.png</guid>
  <ns0:post_id>2095</ns0:post_id>
  <ns0:post_date>2013-12-07 17:07:20</ns0:post_date>
  <ns0:post_name>screen-shot-2013-12-07-at-4-16-32-pm</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2013/12/screen-shot-2013-12-07-at-4-16-32-pm.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/12/screen-shot-2013-12-07-at-4-16-32-pm.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:794;s:6:"height";i:55;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/12/screen-shot-2013-12-07-at-4-16-32-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Screen Shot 2013-12-07 at 4.31.19 PM</title>
  <link>http://codecraft.co/2013/12/09/a-comedy-of-carelessness/screen-shot-2013-12-07-at-4-31-19-pm/</link>
  <pubDate>Sun, 08 Dec 2013 00:08:16 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2013/12/screen-shot-2013-12-07-at-4-31-19-pm.png</guid>
  <ns0:post_id>2096</ns0:post_id>
  <ns0:post_date>2013-12-07 17:08:16</ns0:post_date>
  <ns0:post_name>screen-shot-2013-12-07-at-4-31-19-pm</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2013/12/screen-shot-2013-12-07-at-4-31-19-pm.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/12/screen-shot-2013-12-07-at-4-31-19-pm.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:317;s:6:"height";i:157;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/12/screen-shot-2013-12-07-at-4-31-19-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Screen Shot 2013-12-07 at 4.31.40 PM</title>
  <link>http://codecraft.co/2013/12/09/a-comedy-of-carelessness/screen-shot-2013-12-07-at-4-31-40-pm/</link>
  <pubDate>Sun, 08 Dec 2013 00:08:19 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2013/12/screen-shot-2013-12-07-at-4-31-40-pm.png</guid>
  <ns0:post_id>2097</ns0:post_id>
  <ns0:post_date>2013-12-07 17:08:19</ns0:post_date>
  <ns0:post_name>screen-shot-2013-12-07-at-4-31-40-pm</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2013/12/screen-shot-2013-12-07-at-4-31-40-pm.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/12/screen-shot-2013-12-07-at-4-31-40-pm.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:608;s:6:"height";i:94;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/12/screen-shot-2013-12-07-at-4-31-40-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>cropped-blog-background.png</title>
  <link>http://codecraft.co/cropped-blog-background-png/</link>
  <pubDate>Thu, 13 Feb 2014 04:42:04 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2012/08/cropped-blog-background.png</guid>
  <ns2:encoded>http://codecraft.co/wp-content/uploads/2012/08/cropped-blog-background.png</ns2:encoded>
  <ns0:post_id>4496</ns0:post_id>
  <ns0:post_date>2014-02-12 21:42:04</ns0:post_date>
  <ns0:post_name>cropped-blog-background-png</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2012/08/cropped-blog-background.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/08/cropped-blog-background.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:6:{s:5:"width";i:736;s:6:"height";i:229;s:4:"file";s:98:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2012/08/cropped-blog-background.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"parent_attachment_id";i:334;}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Screen Shot 2014-05-15 at 1.47.38 AM</title>
  <link>http://codecraft.co/2014/05/15/why-you-should-be-proficient-in-a-tool-like-vim-or-emacs/screen-shot-2014-05-15-at-1-47-38-am/</link>
  <pubDate>Thu, 15 May 2014 07:48:18 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2014/05/screen-shot-2014-05-15-at-1-47-38-am.png</guid>
  <ns0:post_id>5591</ns0:post_id>
  <ns0:post_date>2014-05-15 01:48:18</ns0:post_date>
  <ns0:post_name>screen-shot-2014-05-15-at-1-47-38-am</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2014/05/screen-shot-2014-05-15-at-1-47-38-am.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2014/05/screen-shot-2014-05-15-at-1-47-38-am.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:682;s:6:"height";i:833;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2014/05/screen-shot-2014-05-15-at-1-47-38-am.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>4241886426_2e9dd510a6</title>
  <link>http://codecraft.co/2014/07/28/mountains-molehills-and-markedness/4241886426_2e9dd510a6/</link>
  <pubDate>Sun, 27 Jul 2014 07:11:30 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2014/07/4241886426_2e9dd510a6.jpg</guid>
  <ns0:post_id>5750</ns0:post_id>
  <ns0:post_date>2014-07-27 01:11:30</ns0:post_date>
  <ns0:post_name>4241886426_2e9dd510a6</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2014/07/4241886426_2e9dd510a6.jpg</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2014/07/4241886426_2e9dd510a6.jpg</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:500;s:6:"height";i:375;s:4:"file";s:96:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2014/07/4241886426_2e9dd510a6.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>kindle layout</title>
  <link>http://codecraft.co/?attachment_id=5755</link>
  <pubDate>Sun, 27 Jul 2014 07:59:33 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2014/07/screen-shot-2014-07-27-at-1-49-48-am.png</guid>
  <ns0:post_id>5755</ns0:post_id>
  <ns0:post_date>2014-07-27 01:59:33</ns0:post_date>
  <ns0:post_name>screen-shot-2014-07-27-at-1-49-48-am</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2014/07/screen-shot-2014-07-27-at-1-49-48-am.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2014/07/screen-shot-2014-07-27-at-1-49-48-am.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:2012;s:6:"height";i:1344;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2014/07/screen-shot-2014-07-27-at-1-49-48-am.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>screen real estate at 640xsomething</title>
  <link>http://codecraft.co/?attachment_id=5756</link>
  <pubDate>Sun, 27 Jul 2014 08:00:51 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2014/07/screen-shot-2014-07-27-at-1-54-46-am.png</guid>
  <ns0:post_id>5756</ns0:post_id>
  <ns0:post_date>2014-07-27 02:00:51</ns0:post_date>
  <ns0:post_name>screen-shot-2014-07-27-at-1-54-46-am</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2014/07/screen-shot-2014-07-27-at-1-54-46-am.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2014/07/screen-shot-2014-07-27-at-1-54-46-am.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:1834;s:6:"height";i:1290;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2014/07/screen-shot-2014-07-27-at-1-54-46-am.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>more realistic screen layout</title>
  <link>http://codecraft.co/?attachment_id=5757</link>
  <pubDate>Sun, 27 Jul 2014 08:02:10 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2014/07/screen-shot-2014-07-27-at-1-55-20-am.png</guid>
  <ns0:post_id>5757</ns0:post_id>
  <ns0:post_date>2014-07-27 02:02:10</ns0:post_date>
  <ns0:post_name>screen-shot-2014-07-27-at-1-55-20-am</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2014/07/screen-shot-2014-07-27-at-1-55-20-am.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2014/07/screen-shot-2014-07-27-at-1-55-20-am.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:2822;s:6:"height";i:1400;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2014/07/screen-shot-2014-07-27-at-1-55-20-am.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>flamenco wings [ changó ], Flickr</title>
  <link>http://codecraft.co/2014/08/06/in-which-warnings-evolve-wings/5876849912_6e0a74ee6d_z/</link>
  <pubDate>Wed, 06 Aug 2014 02:03:49 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2014/08/5876849912_6e0a74ee6d_z.jpg</guid>
  <ns0:post_id>5774</ns0:post_id>
  <ns0:post_date>2014-08-05 20:03:49</ns0:post_date>
  <ns0:post_name>5876849912_6e0a74ee6d_z</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2014/08/5876849912_6e0a74ee6d_z.jpg</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:640;s:6:"height";i:427;s:4:"file";s:98:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2014/08/5876849912_6e0a74ee6d_z.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:15:"Riccardo Romano";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:15:"Riccardo Romano";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2014/08/5876849912_6e0a74ee6d_z.jpg</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Currency Table at XE.com</title>
  <link>http://codecraft.co/2014/10/08/a-better-way-to-put-data-in-code/screen-shot-2014-10-08-at-1-12-43-pm/</link>
  <pubDate>Wed, 08 Oct 2014 19:13:31 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2014/10/screen-shot-2014-10-08-at-1-12-43-pm.png</guid>
  <ns0:post_id>5895</ns0:post_id>
  <ns0:post_date>2014-10-08 13:13:31</ns0:post_date>
  <ns0:post_name>screen-shot-2014-10-08-at-1-12-43-pm</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2014/10/screen-shot-2014-10-08-at-1-12-43-pm.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2014/10/screen-shot-2014-10-08-at-1-12-43-pm.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:1398;s:6:"height";i:844;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2014/10/screen-shot-2014-10-08-at-1-12-43-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Scene from "The Imitation Game"</title>
  <link>http://codecraft.co/2015/03/04/rockstars/screen-shot-2015-03-05-at-6-52-57-pm/</link>
  <pubDate>Fri, 06 Mar 2015 01:53:57 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2015/03/screen-shot-2015-03-05-at-6-52-57-pm.png</guid>
  <ns0:post_id>6021</ns0:post_id>
  <ns0:post_date>2015-03-05 18:53:57</ns0:post_date>
  <ns0:post_name>screen-shot-2015-03-05-at-6-52-57-pm</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2015/03/screen-shot-2015-03-05-at-6-52-57-pm.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2015/03/screen-shot-2015-03-05-at-6-52-57-pm.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:1658;s:6:"height";i:696;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2015/03/screen-shot-2015-03-05-at-6-52-57-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>superstar</title>
  <link>http://codecraft.co/2015/03/04/rockstars/superstar/</link>
  <pubDate>Fri, 06 Mar 2015 02:29:50 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2015/03/superstar.png</guid>
  <ns0:post_id>6027</ns0:post_id>
  <ns0:post_date>2015-03-05 19:29:50</ns0:post_date>
  <ns0:post_name>superstar</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2015/03/superstar.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2015/03/superstar.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:1227;s:6:"height";i:289;s:4:"file";s:84:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2015/03/superstar.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>security questions</title>
  <link>http://codecraft.co/2015/04/08/a-grumble-about-buckets/screen-shot-2015-04-08-at-11-26-44-am/</link>
  <pubDate>Wed, 08 Apr 2015 18:55:15 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2015/04/screen-shot-2015-04-08-at-11-26-44-am.png</guid>
  <ns0:post_id>6054</ns0:post_id>
  <ns0:post_date>2015-04-08 12:55:15</ns0:post_date>
  <ns0:post_name>screen-shot-2015-04-08-at-11-26-44-am</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2015/04/screen-shot-2015-04-08-at-11-26-44-am.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2015/04/screen-shot-2015-04-08-at-11-26-44-am.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:686;s:6:"height";i:590;s:4:"file";s:112:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2015/04/screen-shot-2015-04-08-at-11-26-44-am.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Bibifi Scoreboard</title>
  <link>http://codecraft.co/2015/06/15/my-bibifi-adventure/screen-shot-2015-06-13-at-4-17-03-pm/</link>
  <pubDate>Sat, 13 Jun 2015 22:18:27 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2015/06/screen-shot-2015-06-13-at-4-17-03-pm.png</guid>
  <ns0:post_id>6072</ns0:post_id>
  <ns0:post_date>2015-06-13 16:18:27</ns0:post_date>
  <ns0:post_name>screen-shot-2015-06-13-at-4-17-03-pm</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2015/06/screen-shot-2015-06-13-at-4-17-03-pm.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2015/06/screen-shot-2015-06-13-at-4-17-03-pm.png</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:1478;s:6:"height";i:1152;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2015/06/screen-shot-2015-06-13-at-4-17-03-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Screen Shot 2015-06-13 at 4.26.26 PM</title>
  <link>http://codecraft.co/2015/06/15/my-bibifi-adventure/screen-shot-2015-06-13-at-4-26-26-pm/</link>
  <pubDate>Sat, 13 Jun 2015 22:27:23 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2015/06/screen-shot-2015-06-13-at-4-26-26-pm.png</guid>
  <ns0:post_id>6077</ns0:post_id>
  <ns0:post_date>2015-06-13 16:27:23</ns0:post_date>
  <ns0:post_name>screen-shot-2015-06-13-at-4-26-26-pm</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2015/06/screen-shot-2015-06-13-at-4-26-26-pm.png</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:1420;s:6:"height";i:848;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2015/06/screen-shot-2015-06-13-at-4-26-26-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2015/06/screen-shot-2015-06-13-at-4-26-26-pm.png</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Descartes-reflex</title>
  <link>http://codecraft.co/2016/01/01/on-pains-and-brains/descartes-reflex/</link>
  <pubDate>Fri, 01 Jan 2016 20:42:34 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2016/01/descartes-reflex.jpeg</guid>
  <ns0:post_id>6224</ns0:post_id>
  <ns0:post_date>2016-01-01 13:42:34</ns0:post_date>
  <ns0:post_name>descartes-reflex</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2016/01/descartes-reflex.jpeg</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2016/01/descartes-reflex.jpeg</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:418;s:6:"height";i:442;s:4:"file";s:92:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2016/01/descartes-reflex.jpeg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>dataneversleeps_2-0_v2</title>
  <link>http://codecraft.co/2013/04/09/big-crud-isnt-big-data/dataneversleeps_2-0_v2/</link>
  <pubDate>Wed, 09 Mar 2016 00:24:37 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2013/04/dataneversleeps_2-0_v2.jpg</guid>
  <ns0:post_id>6282</ns0:post_id>
  <ns0:post_date>2016-03-08 17:24:37</ns0:post_date>
  <ns0:post_name>dataneversleeps_2-0_v2</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2013/04/dataneversleeps_2-0_v2.jpg</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:5:{s:5:"width";i:810;s:6:"height";i:1287;s:4:"file";s:97:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/04/dataneversleeps_2-0_v2.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:1;s:8:"keywords";a:0:{}}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/04/dataneversleeps_2-0_v2.jpg</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Michael - 2018-01-29 11:17:38</title>
  <link>http://codecraft.co/?post_type=feedback&amp;p=6421</link>
  <pubDate>Mon, 29 Jan 2018 18:17:38 +0000</pubDate>
  <guid isPermaLink="false">https://codecraft.co/?post_type=feedback&amp;p=6421</guid>
  <ns2:encoded>Hey,

I think your code is pretty cool and I'd love to use it.

I did not see a license anywhere on your website and I've been told that legally speaking no one can use it for any reason without permission from the author. (I think these things are annoying legal gobbledygook, but legal gobbledygook can be tough to escape from.)

Can I include your code in my project?

Thank,
Michael
&lt;!--more--&gt;
AUTHOR: Michael
AUTHOR EMAIL: mtepfer1@gmail.com
AUTHOR URL: 
SUBJECT: [Codecraft] Contact
IP: 209.58.139.15
Array
(
    [1_Name] =&amp;gt; Michael
    [2_Email] =&amp;gt; mtepfer1@gmail.com
    [3_Website] =&amp;gt; 
    [4_Comment] =&amp;gt; Hey,

I think your code is pretty cool and I'd love to use it.

I did not see a license anywhere on your website and I've been told that legally speaking no one can use it for any reason without permission from the author. (I think these things are annoying legal gobbledygook, but legal gobbledygook can be tough to escape from.)

Can I include your code in my project?

Thank,
Michael
)
</ns2:encoded>
  <ns0:post_id>6421</ns0:post_id>
  <ns0:post_date>2018-01-29 11:17:38</ns0:post_date>
  <ns0:post_name>e0a279faf335cc48e60f798e3709b720</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>feedback</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_feedback_email</ns0:meta_key>
    <ns0:meta_value>a:2:{s:2:"to";a:1:{i:0;s:24:"daniel.hardman@gmail.com";}s:7:"message";s:753:"&lt;b&gt;Name:&lt;/b&gt; Michael&lt;br /&gt;&lt;br /&gt;
&lt;b&gt;Email:&lt;/b&gt; mtepfer1@gmail.com&lt;br /&gt;&lt;br /&gt;
&lt;b&gt;Website:&lt;/b&gt; &lt;br /&gt;&lt;br /&gt;
&lt;b&gt;Comment:&lt;/b&gt; Hey,&lt;br /&gt;
&lt;br /&gt;
I think your code is pretty cool and I'd love to use it.&lt;br /&gt;
&lt;br /&gt;
I did not see a license anywhere on your website and I've been told that legally speaking no one can use it for any reason without permission from the author. (I think these things are annoying legal gobbledygook, but legal gobbledygook can be tough to escape from.)&lt;br /&gt;
&lt;br /&gt;
Can I include your code in my project?&lt;br /&gt;
&lt;br /&gt;
Thank,&lt;br /&gt;
Michael&lt;br /&gt;&lt;br /&gt;

Time: Mon, Jan 29, 2018 at 11:17 am&lt;br /&gt;
IP Address: 209.58.139.15&lt;br /&gt;
Contact Form URL: https://codecraft.co/contact/&lt;br /&gt;

Sent by a verified WordPress.com user.";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_feedback_extra_fields</ns0:meta_key>
    <ns0:meta_value>a:0:{}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>danie-franco-o1PKM7-8AH4-unsplash</title>
  <link>http://codecraft.co/2013/07/25/features-are-not-chunks-of-code/danie-franco-o1pkm7-8ah4-unsplash/</link>
  <pubDate>Sun, 07 Nov 2021 18:30:18 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.files.wordpress.com/2013/07/danie-franco-o1pkm7-8ah4-unsplash.jpg</guid>
  <ns0:post_id>6794</ns0:post_id>
  <ns0:post_date>2021-11-07 11:30:18</ns0:post_date>
  <ns0:post_name>danie-franco-o1pkm7-8ah4-unsplash</ns0:post_name>
  <ns0:post_type>attachment</ns0:post_type>
  <ns0:attachment_url>https://codecraft.co/wp-content/uploads/2013/07/danie-franco-o1pkm7-8ah4-unsplash.jpg</ns0:attachment_url>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attached_file</ns0:meta_key>
    <ns0:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/07/danie-franco-o1pkm7-8ah4-unsplash.jpg</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_wp_attachment_metadata</ns0:meta_key>
    <ns0:meta_value>a:6:{s:5:"width";i:5731;s:6:"height";i:3821;s:4:"file";s:108:"/home/wpcom/public_html/wp-content/blogs.dir/2f0/4361534/files/2013/07/danie-franco-o1pkm7-8ah4-unsplash.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:2920811;}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>About Me</title>
  <link>http://codecraft.co/about/</link>
  <pubDate>Tue, 29 Jul 2008 19:09:57 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false" />
  <ns2:encoded>&lt;a href="http://codecraft.co/wp-content/uploads/2008/07/img_1000.jpg"&gt;&lt;img class="alignright size-medium wp-image-720" style="margin-left:10px;" title="solo shot" src="http://codecraft.co/wp-content/uploads/2008/07/img_1000.jpg?w=200" alt="" width="200" height="300" /&gt;&lt;/a&gt;I currently work at &lt;a href="http://bluecoat.com" target="_blank"&gt;Blue Coat Systems&lt;/a&gt;, doing research on how to use expert systems and machine learning to recognize malware and other important forms of content on the Internet.

In the past, I worked at &lt;a href="http://www.adaptivecomputing.com/" target="_blank"&gt;Adaptive Computing&lt;/a&gt;, where I helped create intelligent, policy-driven management software for HPC and cloud. The gig before that was &lt;a href="http://www.perfectsearch.com" target="_blank"&gt;Perfect Search&lt;/a&gt; -- makers of the world's fastest and most scalable search technology. Really. Google, eat your heart out. :-) Further back, I contributed to a cool web 2.0 incubator project -- goEverywhere. Personal desktop in the cloud--a great idea that was cancelled during a CEO transition... Sigh. I also spent 10 years working as a developer and software architect at &lt;a href="http://www.symantec.com" target="symc"&gt;Symantec Corporation&lt;/a&gt;, where I was responsible for the &lt;a href="http://www.symantec.com/business/products/overview.jsp?pcid=pcat_storage&amp;amp;pvid=1602_1" target="symc"&gt;Backup Exec System Recovery&lt;/a&gt; and &lt;a href="http://www.symantec.com/norton/ghost" target="symc"&gt;Norton Ghost/Norton Save and Restore&lt;/a&gt; products.

I also founded and served as CEO and later CTO of Lifescape, LLC, which operated &lt;a href="http://www.ourstory.com" target="ourstory"&gt;OurStory.com&lt;/a&gt;, a life-documenting service that combines rich media, powerful automation, and some cool 2.0 mash-up features. We sold the site in 2010.

I have an MBA from &lt;a href="http://www.byu.edu" target="byu"&gt;Brigham Young University&lt;/a&gt;'s &lt;a href="http://marriott.byu.edu" target="byu"&gt;Marriott School&lt;/a&gt;, an MA in computational linguistics, and a BA in Spanish.

I am a native of Oshkosh, Wisconsin. Go, Badgers! Go, Packers!

Please connect to me: &lt;a href="https://plus.google.com/116979598453066085599/" rel="author"&gt;Google +&lt;/a&gt; | &lt;a href="https://twitter.com/dhh1128"&gt;Twitter: @dhh1128&lt;/a&gt; | &lt;a href="https://amazon.com/author/danielhardman"&gt;Amazon author page&lt;/a&gt; | &lt;a href="https://sivanea.com/"&gt;Literary blog&lt;/a&gt; | &lt;a href="http://www.linkedin.com/in/danielhardman/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="http://www.facebook.com/sivaneaman"&gt;Facebook&lt;/a&gt;
&lt;p style="padding-left:30px;"&gt;&lt;a title="More about me..." href="http://about.me/daniel.hardman" target="_blank"&gt;about.me/daniel.hardman&lt;/a&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>2</ns0:post_id>
  <ns0:post_date>2008-07-29 19:09:57</ns0:post_date>
  <ns0:post_name>about</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>page</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>sharing_disabled</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>switch_like_status</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  </item>
<item>
  <title>Decoupling Interfaces As Versions Evolve, Part 1</title>
  <link>http://codecraft.co/2008/07/29/decoupling-interfaces-as-versions-evolve-part-1/</link>
  <pubDate>Wed, 30 Jul 2008 04:11:32 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.wordpress.com/?p=3</guid>
  <ns2:encoded>&lt;em&gt;This is part 1 of a series. You can read &lt;a title="Decoupling Interfaces as Versions Evolve, Part 2" href="http://codecraft.co/2008/08/19/decoupling-interfaces-as-versions-evolve-part-2/"&gt;part 2&lt;/a&gt; and &lt;a title="Decoupling Interfaces as Versions Evolve, Part 3" href="http://codecraft.co/2008/08/19/decoupling-interfaces-as-versions-evolve-part-3/"&gt;part 3&lt;/a&gt; as well.&lt;/em&gt;
&lt;h3&gt;The Goal&lt;/h3&gt;
Software interfaces were invented to promote &lt;a href="http://en.wikipedia.org/wiki/Encapsulation_(classes_-_computers)" target="wikipedia"&gt;encapsulation&lt;/a&gt; and &lt;a href="http://www.cs.unc.edu/~stotts/COMP145/modules.html" target="_blank"&gt;loose coupling&lt;/a&gt;. In theory this enables developing and deploying without undue interdependence, which is a &lt;em&gt;very&lt;/em&gt; good thing.

"Why the 'in theory' caveat?", I hear you saying. "Surely interfaces deliver on their promise..."

Well, yes and no. Interfaces certainly provide a nifty mechanism for information hiding if your scope of concern is a tidy programming problem over the horizon of one implementation. That's just the sort of scenario that CS academics love to use to teach their acolytes.

But most commercial software development is done in a messier world. Versioning interfaces can cause enough headaches to water down their benefits considerably, and mainstream software development tools have not done enough to address the issue.
&lt;h3&gt;Immutability and Versioning&lt;/h3&gt;
Current thinking on interface versioning calls for an interface to be immutable; each change to its semantics (as manifest in an .idl, a .h, or a .wsdl, for example) should cause a change to the interface number/name/guid. Consumers of an interface bind to a specific interface version to allow compile-time validation of interface usage. Modern IDEs typically leverage early binding to provide extra goodies like autocomplete, UML class diagrams, and doc comment generation.

This immutability is less than perfect. In non-ivory-tower development, it is common to alter the semantics of an interface dozens or hundreds of times during a given dev cycle as a team converges on the final implementation. Bob adds the &lt;code&gt;DoNothing()&lt;/code&gt; and &lt;code&gt;DoSomething()&lt;/code&gt; functions to &lt;code&gt;IWidget&lt;/code&gt; on day 1, then realizes a week later that he also needs &lt;code&gt;DoSomethingElse()&lt;/code&gt; for a corner case he hadn't fully explored. On week 23, he decides to collapse the &lt;em&gt;DoSomething&lt;/em&gt; functions both to &lt;code&gt;DoSomethingEx()&lt;/code&gt; because by then the differences between them feel like they should be generalized.

If all code were written by Bob as part of a single cohesive deliverable, this evolution would be uninteresting. But suppose that on week 15, Sally gets a snapshot of Bob's .idl, and begins to build a new component to interact with &lt;code&gt;IWidget&lt;/code&gt;. It is critical that Sally's expectations about &lt;code&gt;IWidget&lt;/code&gt; semantics line up with Bob's.

What makes this ugly is that in today's highly distributed, highly oursourced, complex projects, Bob may not actually know that Sally is using his .idl. He may think it's okay to keep cheating on interface immutability. Either Bob has to be obsessive about versioning his interface with each change -- ending up with IWidget497 by the end of the project -- or else Sally is forced to communicate with Bob that she is using his interface and needs it to be stable. Neither alternative is very attractive.
&lt;h3&gt;Evolution Isn't Always Forward&lt;/h3&gt;
Best practice is usually to require that &lt;code&gt;IWidget5&lt;/code&gt; be a strict superset of &lt;code&gt;IWidget4&lt;/code&gt;. Despite enthusiastic lip service, practical considerations force us to cheat here as well. A security vulnerability forces us to start encrypting the string we return from a function. A change to the underlying OS forces us to throw an exception on a function that used to be exceptionless. Over time the assumptions about semantics attached to an interface accumulate enough drift that it is impractical to ever treat an &lt;code&gt;IWidget9&lt;/code&gt; as an instance of &lt;code&gt;IWidget2&lt;/code&gt;. How does Sally know when that threshold has been passed by Bob?
&lt;h3&gt;And What About Deployment and Upgrade?&lt;/h3&gt;
If you want to tease out mistakes in interface versioning, just poke at the deployment and upgrade scenarios you're going to support. Do you require that a central manager be at least as new as all the components it's managing? Or worse, do you require the whole system to be at the same revision level? In theory, this should be unnecessary; producers (managees) are free to expose functionality in new interfaces that older consumers (managers) don’t know about, and consumers can progressively downcast until they find a mutually supported interface, so it ought to be possible to have free variation in versions. However, in practice in rich, interdependent fabrics of services, the same actor may simultaneously provide one interface while consuming another, and the intermingled dependencies often cause ISVs to force broader upgrades than a customer would like. My favorite recent, real-world example of deployment problems is the infamous &lt;a href="http://episteme.arstechnica.com/eve/forums/a/tpc/f/99609816/m/494009191831" target="ms"&gt;IE7 dwmapi.dll problem&lt;/a&gt; (see also &lt;a href="http://blogs.misdn.com/nikolad/articles/427101.aspx" target="ms"&gt;this useful discussion&lt;/a&gt; of the problem).

[caption id="attachment_37" align="alignnone" width="128"]&lt;a href="http://codecraft.co/wp-content/uploads/2008/07/traditional-pros-and-cons.png"&gt;&lt;img class="size-thumbnail wp-image-37" alt="" src="http://codecraft.co/wp-content/uploads/2008/07/traditional-pros-and-cons.png?w=128" width="128" height="75" /&gt;&lt;/a&gt; Traditional Approach - Pros and Cons[/caption]
&lt;h3&gt;What Can Be Done?&lt;/h3&gt;
So if interfaces don't provide as much separation of concerns as we wish, how do we cope?

Well, one alternative to traditional interface versioning is to do “late binding”. Only the most general characteristics of language syntax are validated when code is written; whether a particular object has a particular property of a particular data type is not tested until code actually executes. This is how interpreted languages like Python, PHP, and javascript work. It provides tremendous flexibility, and it is often the solution of choice in the free-wheeling, ad hoc universe of general web apps. I am a big fan, in many cases. I love the way &lt;a href="http://en.wikipedia.org/wiki/Representational_State_Transfer" target="wikipedia"&gt;RESTful interfaces&lt;/a&gt; support ad-hoc connections, for example.

But late binding is not a panacea. For one thing, late binding typically means that development tools can't help you validate your usage very much. You end up writing and maintaining a lot of manual glue. For another, QA teams often push back against late-bound solutions because it increases the testing burden. Where a compiler could effectively validate millions of potential code paths at compile time for early bound code, testers struggle to achieve similar coverage. Result: bugs discovered later in the process. There is also a cost in performance and robustness that typically deters ISVs building standard enterprise or consumer applications.

There are subtler costs as well. When you late bind, you still have to use the interface you ultimately invoke, and the knowledge about how to use it has to be baked into the code ahead of time. It may not be baked in in the same way -- maybe you use reflection or &lt;code&gt;GetProcAddress&lt;/code&gt; to find the &lt;code&gt;DoSomething&lt;/code&gt; function you're after -- but to late bind an interface, you have to early bind all the logic that handles the cases where &lt;code&gt;GetProcAddress&lt;/code&gt; fails.

Another disadvantage of late binding is that you introduce a new dependency -- this time on the supporting infrastructure. Maybe you're using a great SOAP toolkit for PHP and that toolkit makes it easy to late bind to a web service. But now you depend on your SOAP toolkit. What if another actor in your system doesn't have the same version of the toolkit?

What we'd like is a mechanism that combines the predictability and robust tool support of the traditional approach to interface versioning with the flexibility of late binding to get the best of both worlds. In &lt;a href="http://codecraft.co/2008/08/19/decoupling-interfaces-as-versions-evolve-part-2/"&gt;part 2&lt;/a&gt; of this series, I'll look at some approaches to that goal, and discuss why they still leave me unsatisfied. In &lt;a title="Decoupling Interfaces as Versions Evolve, Part 3" href="http://codecraft.co/2008/08/19/decoupling-interfaces-as-versions-evolve-part-3/"&gt;part 3&lt;/a&gt;, I'll offer my own solution.</ns2:encoded>
  <ns0:post_id>3</ns0:post_id>
  <ns0:post_date>2008-07-29 21:11:32</ns0:post_date>
  <ns0:post_name>decoupling-interfaces-as-versions-evolve-part-1</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="com">COM</category>
  <category domain="post_tag" nicename="idl">IDL</category>
  <category domain="post_tag" nicename="interfaces">interfaces</category>
  <category domain="post_tag" nicename="loose-coupling">loose coupling</category>
  <category domain="post_tag" nicename="rest">REST</category>
  <category domain="post_tag" nicename="soa">SOA</category>
  <category domain="category" nicename="software-architecture">Software Architecture</category>
  <category domain="post_tag" nicename="wsdl">WSDL</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>5</ns0:comment_id>
    <ns0:comment_author>Decoupling Interfaces as Versions Evolve, Part 2 &amp;laquo; Software, Wetware, Webware</ns0:comment_author>
    <ns0:comment_author_url>http://techknowledgeme.wordpress.com/2008/08/19/decoupling-interfaces-as-versions-evolve-part-2/</ns0:comment_author_url>
    <ns0:comment_date>2008-08-19 11:10:44</ns0:comment_date>
    <ns0:comment_content>[...] Interfaces as Versions Evolve, Part&amp;nbsp;2    This is part 2 of a series. You can read part 1 and part 3 as [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>6</ns0:comment_id>
    <ns0:comment_author>Decoupling Interfaces as Versions Evolve, Part 3 &amp;laquo; Software, Wetware, Webware</ns0:comment_author>
    <ns0:comment_author_url>http://techknowledgeme.wordpress.com/2008/08/19/decoupling-interfaces-as-versions-evolve-part-3/</ns0:comment_author_url>
    <ns0:comment_date>2008-08-19 11:27:41</ns0:comment_date>
    <ns0:comment_content>[...] Interfaces as Versions Evolve, Part&amp;nbsp;3    This is part 3 of a series. You can read part 1 and part 2 as [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2504</ns0:comment_id>
    <ns0:comment_author>Headers, babies, and bathwater | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/08/12/headers-babies-and-bathwater/</ns0:comment_author_url>
    <ns0:comment_date>2013-08-12 11:02:36</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] Compile the headers (not just the impl) into the final binaries to facilitate semantic versioning. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16585</ns0:comment_id>
    <ns0:comment_author>On Forests and Trees | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/09/02/on-forests-and-trees/</ns0:comment_author_url>
    <ns0:comment_date>2015-09-02 08:49:03</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] codebase; to the extent that AOP is awkward, we are generalizing against the grain of our tools. Poor flexibility in interface evolution is endemic in nearly every programming framework; for no good reason, it prevents us from [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Decoupling Interfaces as Versions Evolve, Part 3</title>
  <link>http://codecraft.co/2008/08/19/decoupling-interfaces-as-versions-evolve-part-3/</link>
  <pubDate>Tue, 19 Aug 2008 18:27:28 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.wordpress.com/?p=24</guid>
  <ns2:encoded>&lt;em&gt;This is part 3 of a series. You can read &lt;a href="http://techknowledgeme.wordpress.com/2008/07/29/decoupling-interfaces-as-versions-evolve-part-1/"&gt;part 1&lt;/a&gt; and &lt;a href="http://techknowledgeme.wordpress.com/2008/07/30/decoupling-interfaces-as-versions-evolve-part-2/"&gt;part 2&lt;/a&gt; as well.&lt;/em&gt;
&lt;h3&gt;Quick Review&lt;/h3&gt;
We want all the encapsulation and data hiding benefits that interfaces provide. We want to be able to version our interfaces so consumers can depend on them reliably, but we don't want the producer and consumer of an interface to have to coordinate tightly. We don't want the producer of an interface to have to version so often that there's a built-in disincentive to follow best practice. And we want all the compiler and IDE benefits that early binding typically offers to a programmer.

I claim that no current solution really provides all of this -- not COM, not SOAP-based web services, not late-bound REST web services.

Fear not. 

&lt;h3&gt;Summary of Solution&lt;/h3&gt;
&lt;ol&gt;
	&lt;li&gt;The provider of an interface and the consumer of an interface each conform to a compiler-enforceable contract (.wsdl/.idl/etc.), but unlike the traditional approach, these contracts are allowed to differ.&lt;/li&gt;
	&lt;li&gt;The test of whether the two interfaces are compatible is not done by traditional casting, but by testing the contents of the two sides for semantic equivalence – a consumer has a compatible interface if it is a &lt;em&gt;semantic&lt;/em&gt; subset of the provider’s.&lt;/li&gt;
	&lt;li&gt;The consumer is required to write wrapper classes that forward from its own interface to that of the provider. (Using a language that supports reflection, like Java or C#, makes this task trivial).&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;

[caption id="attachment_45" align="alignnone" width="128" caption="Alternative Approach"]&lt;a href="http://codecraft.co/wp-content/uploads/2008/07/alternative.png"&gt;&lt;img class="size-thumbnail wp-image-45" src="http://codecraft.co/wp-content/uploads/2008/07/alternative.png?w=128" alt="Alternative Approach" width="128" height="84" /&gt;&lt;/a&gt;[/caption]&lt;/h3&gt;
&lt;h3&gt;The Gory Details&lt;/h3&gt;
This solution could be built on top of COM, RPC-over-soap-style web services, or a RESTful service interface more analogous to document-oriented web services. Other environments such as CORBA/EJB may also be candidates, though I am less familiar with the details there.

Most SOAP comm pipelines get a remote object and deserialize it to a tightly bound object type in a single step, using a type cast as a runtime check that the remote source meets the calling code’s expectations. Such code would have to change so a remote object is fetched and deserialized in an initial step, and subsequently, the standard cast is replaced with a function that creates a wrapper object from the local interface if compatibility tests pass.

[caption id="attachment_46" align="alignnone" width="128" caption="TryCast Pseudocode"]&lt;a href="http://codecraft.co/wp-content/uploads/2008/07/trycast.png"&gt;&lt;img class="size-thumbnail wp-image-46" src="http://codecraft.co/wp-content/uploads/2008/07/trycast.png?w=128" alt="TryCast Pseudocode" width="128" height="76" /&gt;&lt;/a&gt;[/caption]

In COM code, the analogous initial step must return an IUnknown; the second step consists of composing the semantic union of all interfaces the IUnknown supports, and then using that überinterface as the basis for compatibility testing. Since IUnknown does not support enumeration, the semantic union of all interfaces in an IUnknown would require a list of possible IIDs to perform a series of QueryInterface calls, or a low-level analysis of the object’s vtable.

In a RESTful document-oriented web service, a URL returns an xml document that describes an arbitrary object using structural elements that do not vary across returned object type. For example, instead of
&lt;blockquote&gt;&lt;code&gt;&amp;lt;book&amp;gt;&amp;lt;title&amp;gt;Dragon’s Egg&amp;lt;/title&amp;gt;&amp;lt;author&amp;gt;&amp;lt;fname&amp;gt;Stephen&amp;lt;/fname&amp;gt;&amp;lt;lname&amp;gt;King&amp;lt;/lname&amp;gt;&amp;lt;/book&amp;gt;&lt;/code&gt;&lt;/blockquote&gt;
you have
&lt;blockquote&gt;&lt;code&gt;&amp;lt;doc&amp;gt;&amp;lt;prop name=”title” type=”string”&amp;gt;Dragon’s Egg&amp;lt;/prop&amp;gt;&amp;lt;prop name=”author”&amp;gt;Stephen King&amp;lt;/prop&amp;gt;&amp;lt;/doc&amp;gt;
&lt;/code&gt;&lt;/blockquote&gt;
or something similar. This conveys the object’s semantic constraints along with its data, much like sending a table definition along with a tuple in response to a DB query. The initial step of deserialization constructs a generic object; the second step tests compatibility against the semantic constraints embedded directly in the document and constructs an instance of a wrapper class on success.

It’s important to distinguish between read-only and read-write usage patterns in this mechanism. Consumers of an interface that only intend to display data are infinitely backward compatible if the runtime check for semantic compatibility passes, regardless of the version numbers/guids in play under a given scenario, because the wrapper classes depend on an interface mapping that’s generated dynamically at runtime. However, if a consumer of an object wants to update its state at the source, the wrapper class must contain every property that the provider will require – or else the provider must set such properties either before serving the object or when the update is requested. Using wrapper classes rather than the traditional generated SOAP stubs is an important element of this mechanism because this allows mods to objects that a client does not fully understand.

[caption id="attachment_55" align="alignnone" width="128" caption="New Approach - Pros and Cons"]&lt;a href="http://codecraft.co/wp-content/uploads/2008/07/alternative-pros-and-cons.png"&gt;&lt;img class="size-thumbnail wp-image-55" src="http://codecraft.co/wp-content/uploads/2008/07/alternative-pros-and-cons.png?w=128" alt="New Approach - Pros and Cons" width="128" height="79" /&gt;&lt;/a&gt;[/caption]</ns2:encoded>
  <ns0:post_id>24</ns0:post_id>
  <ns0:post_date>2008-08-19 11:27:28</ns0:post_date>
  <ns0:post_name>decoupling-interfaces-as-versions-evolve-part-3</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="com">COM</category>
  <category domain="post_tag" nicename="idl">IDL</category>
  <category domain="post_tag" nicename="loose-coupling">loose coupling</category>
  <category domain="post_tag" nicename="soa">SOA</category>
  <category domain="category" nicename="software-architecture">Software Architecture</category>
  <category domain="post_tag" nicename="versioning">versioning</category>
  <category domain="post_tag" nicename="wsdl">WSDL</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>766</ns0:comment_id>
    <ns0:comment_author>Decoupling Interfaces as Versions Evolve, Part 2 &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2008/08/19/decoupling-interfaces-as-versions-evolve-part-2/</ns0:comment_author_url>
    <ns0:comment_date>2013-02-21 11:58:39</ns0:comment_date>
    <ns0:comment_content>[...] is part 2 of a series. You can read part 1 and part 3 as [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>765</ns0:comment_id>
    <ns0:comment_author>Decoupling Interfaces As Versions Evolve, Part 1 &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2008/07/29/decoupling-interfaces-as-versions-evolve-part-1/</ns0:comment_author_url>
    <ns0:comment_date>2013-02-21 11:54:59</ns0:comment_date>
    <ns0:comment_content>[...] look at some approaches to that goal, and discuss why they still leave me unsatisfied. In part 3, I&amp;#8217;ll offer my own [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Decoupling Interfaces as Versions Evolve, Part 2</title>
  <link>http://codecraft.co/2008/08/19/decoupling-interfaces-as-versions-evolve-part-2/</link>
  <pubDate>Tue, 19 Aug 2008 18:10:37 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.wordpress.com/?p=48</guid>
  <ns2:encoded>&lt;em&gt;This is part 2 of a series. You can read &lt;a href="http://techknowledgeme.wordpress.com/2008/07/29/decoupling-interfaces-as-versions-evolve-part-1/"&gt;part 1&lt;/a&gt; and &lt;a title="Decoupling Interfaces as Versions Evolve, Part 3" href="http://codecraft.co/2008/08/19/decoupling-interfaces-as-versions-evolve-part-3/"&gt;part 3&lt;/a&gt; as well.&lt;/em&gt;
&lt;h3&gt;Alternative Approaches to Interface Versioning&lt;/h3&gt;
Lublinsky wrote a great article about interface versioning a while back (see page 38 of &lt;a href="http://www.msarchitecturejournal.com/pdf/Journal11.pdf" target="ms"&gt;this issue of Microsoft's Architecture Journal&lt;/a&gt;). This describes the state-of-the-art thinking about interface versioning in the web services world. Essentially he recommends versioning each method in an interface separately. (Sounds a lot like Win32's approach of adding &lt;em&gt;...Ex&lt;/em&gt; to every function when the original behavior no longer sufficed...) This approach is based on the insight that many parts of an interface will be stable for long periods of time, and that the most common kind of change to an interface is an addition. By increasing the granularity of the versioning, incompatibilities are less likely to arise for spurious reasons. This solves the classic problem where a .wsdl describes a dozen classes, a client uses only the first three, and yet the client breaks when something in the fourth class changes. However, it proliferates .wsdls and points of presence.

Another important discussion of this issue is &lt;a href="http://www.theserverside.net/tt/articles/showarticle.tss?id=SOAVersioningCovenant" target="soa"&gt;"A SOA Versioning Covenant", by Rocky Lhotka&lt;/a&gt;. This is an excellent review of the problem. (Note that the Lublinsky article, which is newer, discusses the covenant idea briefly.) Essentially Lhotka recommends that all objects accept messages (parameter lists to functions, recast as documents or self-contained packages of information); since each logical function will always have the signature &lt;code&gt;DoSomething(message)&lt;/code&gt;, the need to version interfaces goes away as long as changes just involve new message types. Instead, the messages are versioned using schema capabilities. Lhotka further recommends changing from contract-oriented thinking (X is required) to a covenant (If you do X, I will do Y). This approach has some of the same benefits as the invention, but it still relies on versioning a full interface rather than the subset someone wishes to use, and the difficulty of managing versions of messages is ignored.

Although both of these treatments (and the sources they cite in their own reviews of the problem) are nifty, they leave me unsatisfied. The bottom line is that I want to evolve interfaces whenever it makes sense, without worrying about breaking people -- and I also want people who use my interface to be able to do so with confidence.

Tune in to &lt;a title="Decoupling Interfaces as Versions Evolve, Part 3" href="http://codecraft.co/2008/08/19/decoupling-interfaces-as-versions-evolve-part-3/"&gt;part 3&lt;/a&gt; of this series for my proposed solution.</ns2:encoded>
  <ns0:post_id>48</ns0:post_id>
  <ns0:post_date>2008-08-19 11:10:37</ns0:post_date>
  <ns0:post_name>decoupling-interfaces-as-versions-evolve-part-2</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="com">COM</category>
  <category domain="post_tag" nicename="idl">IDL</category>
  <category domain="post_tag" nicename="interfaces">interfaces</category>
  <category domain="post_tag" nicename="loose-coupling">loose coupling</category>
  <category domain="post_tag" nicename="rest">REST</category>
  <category domain="post_tag" nicename="soa">SOA</category>
  <category domain="category" nicename="software-architecture">Software Architecture</category>
  <category domain="post_tag" nicename="wsdl">WSDL</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>764</ns0:comment_id>
    <ns0:comment_author>Decoupling Interfaces As Versions Evolve, Part 1 &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2008/07/29/decoupling-interfaces-as-versions-evolve-part-1/</ns0:comment_author_url>
    <ns0:comment_date>2013-02-21 11:54:55</ns0:comment_date>
    <ns0:comment_content>[...] to interface versioning with the flexibility of late binding to get the best of both worlds. In part 2 of this series, I&amp;#8217;ll look at some approaches to that goal, and discuss why they still leave [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>812</ns0:comment_id>
    <ns0:comment_author>Julie</ns0:comment_author>
    <ns0:comment_author_email>julie.jones@pobox.com</ns0:comment_author_email>
    <ns0:comment_date>2013-03-08 17:40:07</ns0:comment_date>
    <ns0:comment_content>Such a timely post. I am right in the middle of moving a distributed system from a custom RPC style communication to a messaging system. My current thought is to at least use the document mechanism to at least allow some compatibility among components running different versions. I am looking forward to part 3.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>815</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-03-08 18:32:54</ns0:comment_date>
    <ns0:comment_content>Synchronicity! I just wrote my first RabbitMQ client last week. Great minds think alike! :-)</ns0:comment_content>
    <ns0:comment_parent>812</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
</item>
<item>
  <title>Why Weakened Dev Teams Suffer From NIH Syndrome</title>
  <link>http://codecraft.co/2008/07/30/weakened-dev-teams-nih/</link>
  <pubDate>Wed, 30 Jul 2008 23:25:02 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.wordpress.com/?p=57</guid>
  <ns2:encoded>&lt;em&gt;(NIH = Not Invented Here)&lt;/em&gt;

So here's the situation. Product Management says feature X must be built. Development scopes the feature and discovers that the "right" solution involves using code developed elsewhere. But unfortunately, the other team's code uses different assumptions and will take some extra time to shoehorn into the new context. In other words, the right solution is too costly.

If a development team doesn't have an architect who can advocate for the right solution based on first principles, then it uses the tried-and-true scope/schedule/resources lever (about its only negotiating tool) to push back.

The problem is that in this scenario, product management isn't really forced to come to terms with the long term strategic consequences of doing things wrong. So the scope is adjusted, or the schedule is adjusted, or the resources are adjusted -- but only enough to rescue the feature, not enough to do it right.

As a result, dev has to invent a half-baked alternative to the other team's solution. Ad nauseum.

We look at the dev team and say that they have "Not Invented Here" Syndrome, because they never seem to use the solutions that other teams have built. In many cases, the real problem is that the Product Management and Dev don't have an architect mediating and looking at the situation from the standpoint of maximizing the ROI of strategic technology investments.</ns2:encoded>
  <ns0:post_id>57</ns0:post_id>
  <ns0:post_date>2008-07-30 16:25:02</ns0:post_date>
  <ns0:post_name>weakened-dev-teams-nih</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="architecture">architecture</category>
  <category domain="post_tag" nicename="development-process">development process</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="nih">NIH</category>
  <category domain="post_tag" nicename="product-management">product management</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>6622</ns0:comment_id>
    <ns0:comment_author>Lacunas Everywhere | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/16/lacunas-everywhere/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-16 13:58:37</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] (or printer detection, or timezone handling, or whatever), and you worry about somebody else re-inventing the wheel. (Imagine if you could assert that no functions having the same semantics and intent as yours get [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Why People Are Part of A Software Architecture</title>
  <link>http://codecraft.co/2008/06/25/why-people-are-part-of-a-software-architecture/</link>
  <pubDate>Wed, 25 Jun 2008 22:51:51 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.wordpress.com/?p=62</guid>
  <ns2:encoded>I've been reading an interesting book -- &lt;a href="http://books.google.com/books?id=7nF6nuLC7m4C&amp;amp;printsec=frontcover&amp;amp;dq=beyond+software+architecture&amp;amp;ei=0_CQSNHgHqXKjgGPsO31Dg&amp;amp;sig=ACfU3U0yo_wtkIjvxJKzoz6HE8HS3ZtO_Q" target="luke"&gt;Beyond Software Architecture&lt;/a&gt;, by &lt;a target="luke" href="http://www.lukehohmann.com/"&gt;Luke Hohmann&lt;/a&gt;. In his first chapter he discusses the more people- and business-related aspects of architecture, and makes the following points:
&lt;ul&gt;
	&lt;li&gt;Systems are designed to manage people dependencies, not just esoteric "code" dependencies.&lt;/li&gt;
	&lt;li&gt;Systems are designed by people with non-technical motivations.&lt;/li&gt;
&lt;/ul&gt;

Point well taken.

&lt;img align="right" src="http://farm7.staticflickr.com/6101/6230395373_1d7576f8ce_d.jpg" alt="Schrödinger's Cat, from http://www.flickr.com/photos/drlovecherry/" /&gt;I wanted to chime in with one additional observation. An architecture and the people who actively develop and maintain it are difficult to separate. I'd argue that a company that owns the source code of a so-called "architecture" but that has no engineer that understands it doesn't really have an architecture -- as with &lt;a href="http://en.wikipedia.org/wiki/Schroedinger%27s_cat"&gt;Schrödinger's cat&lt;/a&gt;, the human observer matters.

A stark example of this has cropped up several times as I've done M&amp;amp;A work during my career. I have seen less technical executives repeatedly assume that the source code of a system = the system. In other words, they think people are fungible and an architecture can be purchased and transferred *only* by shifting source. In practice, that assumption causes problems. The boundaries around modules don't always exist cleanly in files and directories on disk; sometimes they are more of a mental construct in the minds of those who build and service them. If you grab a wad of source and plop it down in front of people who've never worked with it before, the institutional knowledge that contextualized the system in the minds of its creators is missing. This is why a mediocre engineer well-versed in the context of a given architecture is likely to be more productive than a world-class engineer dropped into the architecture cold. It is also why layoffs and RIFs are more dangerous than you'd guess by simply looking at raw staffing numbers.</ns2:encoded>
  <ns0:post_id>62</ns0:post_id>
  <ns0:post_date>2008-06-25 15:51:51</ns0:post_date>
  <ns0:post_name>why-people-are-part-of-a-software-architecture</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="architecture">architecture</category>
  <category domain="post_tag" nicename="development-process">development process</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>26</ns0:comment_id>
    <ns0:comment_author>Role-Play Centered Design &amp;laquo; Software, Wetware, Webware</ns0:comment_author>
    <ns0:comment_author_url>http://techknowledgeme.wordpress.com/2012/06/20/role-play-centered-design/</ns0:comment_author_url>
    <ns0:comment_date>2012-06-25 09:29:24</ns0:comment_date>
    <ns0:comment_content>[...] is wrong. software &amp;#8211; people != software. Any thoughtful veteran of the industry can tell you stories about why this is so. Engineers who [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>116</ns0:comment_id>
    <ns0:comment_author>Lynn Bendixsen: Listen. &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2012/10/02/lynn-bendixsen-listen/</ns0:comment_author_url>
    <ns0:comment_date>2012-10-02 15:47:59</ns0:comment_date>
    <ns0:comment_content>[...] you believe that people are an integral part of the software discipline, or that you should understand those who interact with your product, then listening is a critical [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>561</ns0:comment_id>
    <ns0:comment_author>Interrupting my interruptions &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/01/24/interrupting-my-interruptions/</ns0:comment_author_url>
    <ns0:comment_date>2013-01-24 11:48:41</ns0:comment_date>
    <ns0:comment_content>[...] they could hire much cheaper and quieter employees. As I&amp;#8217;ve said repeatedly on this blog, people are part of architecture, and interacting with teammates is both a tool and an end unto itself. Those meetings I&amp;#8217;m [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4825</ns0:comment_id>
    <ns0:comment_author>Workflows, People and Processes</ns0:comment_author>
    <ns0:comment_author_url>http://trevharmon.staging.wpengine.com/workflows-people-processes/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-10 13:36:45</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] almost every process out there (aside from some automated production), humans form an important part. The process is in place because it is solving a human-provided &amp;#8220;problem.&amp;#8221; In many [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4726</ns0:comment_id>
    <ns0:comment_author>Workflows, People and Processes</ns0:comment_author>
    <ns0:comment_author_url>http://www.informationsecuritybuzz.com/workflows-people-processes/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-05 03:52:54</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] almost every process out there (aside from some automated production), humans form an important part. The process is in place because it is solving a human-provided “problem.” In many cases, it is [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>17435</ns0:comment_id>
    <ns0:comment_author>On pains and brains | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2016/01/01/on-pains-and-brains/</ns0:comment_author_url>
    <ns0:comment_date>2016-01-01 14:30:12</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] of thinking, in which I initially focus on technical details, but come to zen only as I recognize the role of people in software architecture, has repeated several times in my career, but I guess I needed to discover it [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14323</ns0:comment_id>
    <ns0:comment_author>&amp;#8220;Rockstar Developers&amp;#8221; are a dangerous myth | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/03/04/rockstars/</ns0:comment_author_url>
    <ns0:comment_date>2015-03-05 20:15:30</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] all the people in the value chain of your software, and doing the hard, unrewarding detail work to guarantee that their needs are addressed throughout [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14917</ns0:comment_id>
    <ns0:comment_author>A grumble about buckets | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/04/08/a-grumble-about-buckets/</ns0:comment_author_url>
    <ns0:comment_date>2015-04-08 13:39:27</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] If you&amp;#8217;re going to force all choices into a few predefined buckets, you better provide buckets that match the needs of your users. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>6625</ns0:comment_id>
    <ns0:comment_author>Lacunas Everywhere | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/16/lacunas-everywhere/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-16 13:58:43</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] problem, I think, is caused by our industry undervaluing the human dimension of software development. We are taught to analyze and create context-free grammars. That&amp;#8217;s a [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Annotating the Web</title>
  <link>http://codecraft.co/2008/09/05/annotating-the-web/</link>
  <pubDate>Fri, 05 Sep 2008 15:26:06 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.wordpress.com/?p=91</guid>
  <ns2:encoded>Bookmarks just remember a location. That's kind of nifty, but even with all the power of &lt;a target="del" href="http://del.icio.us"&gt;del.icio.us&lt;/a&gt; or a similar service, it's not something that keeps me awake at night with enthusiasm.

Why don't we move beyond simple bookmarks? Let's let people remember what they were thinking when they read a particular piece of content. Let's figure out a way to annotate web pages so that if you come back to that same page, your annotations show up again.

Annotations could take the form of text (with all the hypertext and multimedia features of html itself), ink (to scribble or draw on top of a page, circle key elements, etc.), audio... Annotations could be a layer on top of a web page -- something you could toggle on or off. You could even share your annotations with someone else so they could turn on your layer or compare yours to theirs.

Imagine this in an educational setting. An instructor wants you to read an essay about existentialism in &lt;cite&gt;Waiting for Godot&lt;/cite&gt;. The instructor takes a few minutes to highlight the parts of the essay that she finds particularly interesting -- underlining a couple sentences, jotting a note about a section that's out of sync with her own research, etc. When you read the essay, you can turn on the instructor's criticism of the essay and add your own. Maybe other classmates can share their ideas with you as well.

To make this maximally powerful, you'd want to be able to anchor your comments to particular slices of content on the page. Over time, if the content of the page or the rendering of the page changed, you'd want your annotations to adapt. Example: you disagree with an author who claims that "peptide bonds are a boring subject that any first-year biology student can afford to sleep through." You highlight that sentence on the page, bring up a context menu with a right-click or control-click, and on the menu one of the options is "annotate." You create your annotation much the same way you'd create a bookmark. (You could also anchor annotations to graphics or other elements on the page pretty easily.)

You visit the same page 3 weeks later. The .css behind the page is different now, and the content has been extended (e.g., it's a blog and a dozen people have commented). And you're using a different browser, on a different OS, possibly in high contrast / large font mode where you were in normal mode before. The point is, visually the page looks completely different. But the annotation engine searches for the anchor text for your annotation, finds it, and basically offers a tooltip to pop your annotation at the correct location on the page.

(By the way, the annotation mechanism I'm describing here might be a more interesting way to accumulate blog comments than the current way which is email thread-like. Instead of reproducing the salient portion of an earlier thread contributor's text in your own, and then adding your words after, just anchor your annotation to the relevant portion of existing content...)

Lastly, imagine what we could do if we allowed a user to enumerate all their annotations. Annotations could be organized by key word of the page they apply to (and, to make them even more findable, by key word in their anchor text). A simple query to the annotation back end server would give you a sort of personal knowlege base on any subject.

&lt;b&gt;Update&lt;/b&gt;: I went out and did a little research and found that some of the features I'm dreaming of already exist. If you're interested, check out &lt;a target="wikipedia" href="http://en.wikipedia.org/wiki/Web_annotation"&gt;this article&lt;/a&gt; on wikipedia.</ns2:encoded>
  <ns0:post_id>91</ns0:post_id>
  <ns0:post_date>2008-09-05 08:26:06</ns0:post_date>
  <ns0:post_name>annotating-the-web</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>What is a "Software Architect?"</title>
  <link>http://codecraft.co/2008/09/10/what-is-a-software-architect/</link>
  <pubDate>Wed, 10 Sep 2008 16:09:51 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.wordpress.com/?p=95</guid>
  <ns2:encoded>When people ask me what I do for a living, I usually say I'm a computer guy and leave it there. But if they want more detail, I tell them I'm a software architect. When I give that answer, I often wonder if I sound pretentious, like those who say "sanitation engineer" instead of "garbage man." Do those who ask the question think a "software architect" is just a fancy way of saying "computer programmer?"

Well, although I am a programmer of sorts, what I do is different enough from standard computer programming to require a different name.

An architect is responsible for the strategic health of a technology portfolio. "Health" embraces many different considerations, such as how maintainable the code is, how easily it can adapt to changing business requirements, how technically differentiated it is from the can-do assets of competitors, whether the portfolio makes appropriate use of (and embodies/generates) trade secrets and patents, how performant and scalable it is and whether those characteristics are a good match for the "sweet spot" customers, obsolescence, and so forth.

The overall goal of the architecture function is to maximize dev ROI and technical competitive advantage over the long run.

[caption id="" align="alignright" width="500"]&lt;img title="An architect lays out a vision..." src="http://farm6.staticflickr.com/5291/5424759413_5c80125755_d.jpg" alt="" width="500" height="420" /&gt; An architect lays out a vision. Photo Credit: mootown (flickr.com).[/caption]

By its very nature, architecture is broad in scope and overlaps with many other disciplines. Because it concerns itself with fragility, boundary conditions, and theoretical limits, it needs to interact with design and actual code, and architects must be proficient engineers. Because it cares about supporting potential uses beyond the confines of a specific release, architecture must consider the market landscape from both a business and a technological perspective, and it must understand when short-term compromises carry long-term risks.

The duties of a software architect include:

1. Meet with Product Management and executives to understand their business/market vision. Use this understanding to inform a perspective on the relative value of various technical tradeoffs.

2. Be a keeper of a technical vision/roadmap that supports the business/market vision optimally. Give feedback, based on that vision, about the technical tradeoffs implied by various potential business plans before those plans are codified into a plan of record, or before they are accepted as a change request.

3. Articulate to engineering the technical guidelines that should inform a new release, including the considerations behind various tradeoffs -- and get formal buyoff from both engineering and PM on those guidelines. Participate in design reviews to guarantee that appropriate tradeoffs are honored and embodied correctly.

4. Do forward-looking research and proof-of-concept work to drive risk out of potential directions on the technical roadmap.

5. Identify/sponsor/promote/create high-value innovation. ("High-value" is evaluated against vision...)

6. HR-related stuff: Provide leadership and mentoring to other engineers. Evangelize the technology portfolio to other stakeholders (internal and external). Vett IP for patents and M&amp;amp;A. Be a voice. Etc.

Of these duties, items 1, 2, and 3 sometimes get lost or watered down if an architect is just a senior engineer. In that sort of environment, PM may convey a vision to dev without involving architects. As a result, the team has conversations about feasibility or cost of implementing, but rarely if ever about whether a requirement is a good idea in the first place. Whether a requirement is a good idea is more than just a question of whether customers want it, whether it can generate revenue, and whether it can be built -- it also must take into account things like technical opportunity cost, long-term baggage, effect on the expertise and focus of the engineers who will build it, technical differentiation, and so forth.

It also might be worth highlighting &lt;a href="http://techknowledgeme.wordpress.com/2012/06/26/what-a-software-architect-is-not/"&gt;some things that I *don't* consider part of an architect's job&lt;/a&gt;, for the sake of clarity. I'll do that in a separate post.</ns2:encoded>
  <ns0:post_id>95</ns0:post_id>
  <ns0:post_date>2008-09-10 09:09:51</ns0:post_date>
  <ns0:post_name>what-is-a-software-architect</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="software-architect">software architect</category>
  <category domain="category" nicename="software-architecture">Software Architecture</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>29</ns0:comment_id>
    <ns0:comment_author>What a Software Architect is NOT &amp;laquo; Software, Wetware, Webware</ns0:comment_author>
    <ns0:comment_author_url>http://techknowledgeme.wordpress.com/2012/06/26/what-a-software-architect-is-not/</ns0:comment_author_url>
    <ns0:comment_date>2012-06-26 09:04:23</ns0:comment_date>
    <ns0:comment_content>[...] another post, I defined the role of a software architect. This post points out some duties that are not [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>What makes high-value questions?</title>
  <link>http://codecraft.co/2012/06/20/high-value-questions/</link>
  <pubDate>Wed, 20 Jun 2012 20:44:44 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.wordpress.com/?p=159</guid>
  <ns2:encoded>&lt;a href="http://www.perfectsearchcorp.com"&gt;Perfect Search&lt;/a&gt; (where I used to work) makes a search engine that performs/scales orders of magnitude better than competitors like Solr/Lucene with hadoop, FAST, Autonomy, and Google Search Appliances. This makes them a best-of-breed tool for many big data problems. They can do on one box what it would take competitors an entire rack of hardware to pull off. And usually that one box still runs an order of magnitude faster.

[caption id="attachment_369" align="aligncenter" width="500"]&lt;a href="http://codecraft.co/wp-content/uploads/2012/09/6637427465_2fb4695630.jpg"&gt;&lt;img class="size-full wp-image-369" alt="semantic network for &amp;quot;big data&amp;quot;" src="http://codecraft.co/wp-content/uploads/2012/09/6637427465_2fb4695630.jpg" width="500" height="500" /&gt;&lt;/a&gt; photo credit: metaroll (Flickr)[/caption]

Despite the compelling value, sales have ramped more slowly than Perfect Search would like (ain't it always the case...). Some reasons have to do with marketing, but I've recently had another insight that feels compelling to me.

My insight is this: &lt;em&gt;high-value questions demand insight, not fact retrieval&lt;/em&gt;.

This might seem like old hat. After all, there's a reason why business intelligence is a market segment unto itself, and why &lt;a href="http://thetrendpoint.com/2012/04/ibm-betting-big-bucks-on-data-analytics-software/" target="_blank"&gt;IBM is betting its corporate future on analytics&lt;/a&gt;. I think BI is going after the right kind of thing, but a lot of that community has lost its way and become little more than glorified reporting.

Here's why.

&lt;strong&gt;Question categories&lt;/strong&gt;

Questions that are interesting in the information age have answers that fall into three broad categories:
&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;Unknowable&lt;/strong&gt;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Known&lt;/strong&gt;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Discoverable&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;em&gt;Why is chocolate so awesome&lt;/em&gt;? &lt;strong&gt;Unknowable&lt;/strong&gt;.

&lt;em&gt;What is the population of Bangladesh&lt;/em&gt;? &lt;strong&gt;Known&lt;/strong&gt;.

&lt;em&gt;How can I sell more widgets to housewives between the ages of 25 and 40&lt;/em&gt;? &lt;strong&gt;Discoverable&lt;/strong&gt;.

For structured data, the preferred way to get known answers is a DBMS (or a noSQL DB, maybe). For unstructured data, Google's full text indexing is state-of-the-art (and Perfect Search's is a quantum improvement). But nowadays, looking up known answers is passé. The world needs tools to do it, but the technology is not especially interesting.

&lt;strong&gt;Do our BI tools discover anything?&lt;/strong&gt;

The central value proposition of big data is inseparably connected to &lt;strong&gt;discoverable&lt;/strong&gt; answers. &lt;em&gt;These gems are fundamentally different from facts waiting to be sliced; they're rational guesses based on deduction and supported by rigorous data analysis.&lt;/em&gt;

In other words, if we're not building big data solutions that hypothesize rather than report, we're underdelivering. We call it &lt;em&gt;data science&lt;/em&gt;, right? Isn't the scientific method all about hypotheses and testing?

Business intelligence products and services that show pretty dashboards or reports are not really delivering insight; they're exposing information and depending on the human intelligence in the minds of the users to provide the hypotheses and analysis that turns it into insight. Sometimes that happens, if a graph shows something interesting and noteworthy--but a lot of times, minutiae overwhelms, and BI is a waste of the customer's money.

Enterprise search struggles, as an industry, because it's trying to sell drill bits to customers who want holes, and it's forgotten that it's the hole, not the bit, that makes the customer passionate (thanks Zig Ziglar for the analogy). In other words, it is also depending on the customer to provide analysis that turns data into insight.

&lt;strong&gt;A new kind of big data technology&lt;/strong&gt;

We can do better.

I propose a new kind of data analytics product/process/service that implements the scientific method on big data. &lt;a href="https://docs.google.com/presentation/pub?id=1zz4sq1924gfbs4734h4Tc0oKkhXkbitF1iyF07dwhxo&amp;amp;start=false&amp;amp;loop=false&amp;amp;delayms=3000" target="_blank"&gt;Click here&lt;/a&gt; for an overview presentation.
&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://blog.neolane.com/conversational-marketing/big-data/" target="_blank"&gt;Transforming Big Data Into Actionable Insight [Infographic]&lt;/a&gt; (neolane.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.itproportal.com/2013/05/13/making-sense-of-big-data-and-its-role-in-your-business/" target="_blank"&gt;Making sense of big data and its role in your business&lt;/a&gt; (itproportal.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>159</ns0:post_id>
  <ns0:post_date>2012-06-20 13:44:44</ns0:post_date>
  <ns0:post_name>high-value-questions</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="bi">BI</category>
  <category domain="post_tag" nicename="big-data">big data</category>
  <category domain="post_tag" nicename="business-intelligence">business intelligence</category>
  <category domain="post_tag" nicename="db">db</category>
  <category domain="post_tag" nicename="hadoop">hadoop</category>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <category domain="post_tag" nicename="lucene">lucene</category>
  <category domain="post_tag" nicename="nosql">nosql</category>
  <category domain="post_tag" nicename="search">search</category>
  <category domain="post_tag" nicename="solr">solr</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>reddit</ns0:meta_key>
    <ns0:meta_value>a:2:{s:5:"count";i:0;s:4:"time";i:1412812287;}</ns0:meta_value>
  </ns0:postmeta>
  </item>
<item>
  <title>Role-Play Centered Design</title>
  <link>http://codecraft.co/2012/06/20/role-play-centered-design/</link>
  <pubDate>Thu, 21 Jun 2012 00:11:38 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.wordpress.com/?p=203</guid>
  <ns2:encoded>User-centered design (UCD) is important. I hope I've been a good advocate for it during my career. Its basic tenet is that software should be constructed as much as possible according to how users think and work, not according to techie considerations. (A seminal book on this topic is &lt;a href="http://www.amazon.com/dp/0465067107/ref=rdr_ext_tmb"&gt;The Design of Everyday Things&lt;/a&gt;, by Donald Norman.) At its best, UCD promotes an alignment between technology and customer pain points that keeps software's value proposition compelling. Even on a bad day, UCD makes software a lot more pleasant to use.

However, UCD rarely yields all potential benefits, which is why I'd like to suggest a specialized form of UCD for many software teams. I'll dub this idea "Role-Play Centered Design" (RPCD, prounounced /ˈrɪpˌsɪd/) because of the way the various parts of the system come to life. (This idea is similar to--though conceived independently from--the concepts in &lt;a title="The use of improvisational role-play in user centered design processes" href="http://dl.acm.org/citation.cfm?id=1772520" target="_blank"&gt;this article&lt;/a&gt; from the proceedings of HCI '07.)

[caption id="" align="alignnone" width="500"]&lt;a href="http://www.flickr.com/photos/thearches/6257521499/"&gt;&lt;img alt="" src="http://farm7.staticflickr.com/6151/6257521499_10eb09fd45_d.jpg" width="500" height="357" /&gt;&lt;/a&gt; Role plays can help you build software -- not just entertain. Photo credit: TheArches (Flickr)[/caption]

&lt;strong&gt;Manifesto&lt;/strong&gt;

RPCD is distinguished from ordinary UCD by three key tenets.
&lt;ol&gt;
	&lt;li&gt;The "system" includes people.&lt;/li&gt;
	&lt;li&gt;Specifics are non-negotiable.&lt;/li&gt;
	&lt;li&gt;The best way to understand is to "be" the system.&lt;/li&gt;
&lt;/ol&gt;
Let me justify each of these ideas, and then I'll give an example of an RPCD process at work.

&lt;strong&gt;The "system" includes people.&lt;/strong&gt;
&lt;p style="padding-left:30px;"&gt;Most architectural and UML diagrams focus on software and/or hardware entities. The user's role in the system is implicit. Even among users of &lt;a href="http://en.wikipedia.org/wiki/Activity_diagram"&gt;activity diagrams&lt;/a&gt;, most workflow is computer rather than human.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;This is wrong. &lt;a href="/2008/06/25/why-people-are-part-of-a-software-architecture/"&gt;software - people != software&lt;/a&gt;. Any thoughtful veteran of the industry can tell you stories about why this is so. Engineers who accept the flawed premise that only the computer side of software needs to be designed are already handicapping their UCD fatally. The system built by a software team includes people -- individual users, a community, support personnel, sales folks, professional services, maintainers of docs on a web site, etc. If you let an engineer construct "the system" with no serious thought to the people, you often end up with misalignments that make it irritating to understand/use/configure/support, expensive to maintain, or even impossible to sell.&lt;/p&gt;
&lt;strong&gt;Specifics are non-negotiable.&lt;/strong&gt;
&lt;p style="padding-left:30px;"&gt;The devil really is in the details, and if you don't solve detailed problems, you won't solve problems at all. The design of a system is therefore best driven by specifics--even if the specifics are only postulated. Specifics are best exemplified by use cases, and role playing forces specifics into use cases.&lt;/p&gt;
&lt;strong&gt;The best way to understand is to "be" the system.&lt;/strong&gt;
&lt;p style="padding-left:30px;"&gt;&lt;a href="/2012/06/25/what-role-are-you-playing-in-rpcd/"&gt;You should "be" the software in the system, and you should "be" the people as well&lt;/a&gt;.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;When a human being actually interviews someone in the same way an automated wizard eventually will, you learn things. The human reorders the questions or short-circuits part of the interview because she knows it's unnecessary. Or the human gets frustrated at how needlessly cumbersome a particular part of the process is. Or the human asks some intelligent questions that you never considered. When two humans interact to model what's eventually going to be a formal protocol, you confront asynchronicity and error handling in ways that UML or whiteboards don't.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;Modeling the system in role plays also has some other profound long-term advantages that go far beyond just what you learn. I'll discuss these in a different post.&lt;/p&gt;
In my &lt;a href="/2012/06/21/example-rpcd-interaction/"&gt;next post&lt;/a&gt;, I'll give an example about how RPCD works.
&lt;p style="padding-left:30px;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;List all the people that interact with or help create your software. If your list has less than four or five unique roles, think some more. Hint: see &lt;a title="Users Aren’t The Only People In Your Software" href="http://codecraft.co/2012/09/04/users-arent-the-only-people-in-your-software/"&gt;&lt;span style="color:#000080;"&gt;this post&lt;/span&gt;&lt;/a&gt;.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>203</ns0:post_id>
  <ns0:post_date>2012-06-20 17:11:38</ns0:post_date>
  <ns0:post_name>role-play-centered-design</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="agile">agile</category>
  <category domain="post_tag" nicename="architecture">architecture</category>
  <category domain="category" nicename="better-programming-language">better programming language</category>
  <category domain="post_tag" nicename="design">design</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="hci">hci</category>
  <category domain="post_tag" nicename="manifestos">manifestos</category>
  <category domain="post_tag" nicename="rpcd">rpcd</category>
  <category domain="post_tag" nicename="ucd">ucd</category>
  <category domain="post_tag" nicename="uml">uml</category>
  <category domain="post_tag" nicename="ux">ux</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:62:"http://farm7.staticflickr.com/6151/6257521499_10eb09fd45_d.jpg";s:6:"images";a:1:{s:62:"http://farm7.staticflickr.com/6151/6257521499_10eb09fd45_d.jpg";a:6:{s:8:"file_url";s:62:"http://farm7.staticflickr.com/6151/6257521499_10eb09fd45_d.jpg";s:5:"width";s:3:"500";s:6:"height";s:3:"357";s:4:"type";s:5:"image";s:4:"area";s:6:"178500";s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";s:1:"1";s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-06-21 00:19:57";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>reddit</ns0:meta_key>
    <ns0:meta_value>a:2:{s:5:"count";i:0;s:4:"time";i:1422178451;}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>22</ns0:comment_id>
    <ns0:comment_author>Example RPCD Interaction &amp;laquo; Software, Wetware, Webware</ns0:comment_author>
    <ns0:comment_author_url>http://techknowledgeme.wordpress.com/2012/06/21/example-rpcd-interaction/</ns0:comment_author_url>
    <ns0:comment_date>2012-06-21 08:56:43</ns0:comment_date>
    <ns0:comment_content>[...] my last post on RPCD, I explained its key tenets. In this one, I&amp;#8217;ll imagine one way to put it into [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>23</ns0:comment_id>
    <ns0:comment_author>Long-Term Benefits of RPCD &amp;laquo; Software, Wetware, Webware</ns0:comment_author>
    <ns0:comment_author_url>http://techknowledgeme.wordpress.com/2012/06/21/long-term-benefits-of-rpcd/</ns0:comment_author_url>
    <ns0:comment_date>2012-06-21 10:24:28</ns0:comment_date>
    <ns0:comment_content>[...] a previous post, I wrote about a methodology for designing software that has role-playing at it&amp;#8217;s heart. If [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>25</ns0:comment_id>
    <ns0:comment_author>What Role Are You Playing in RPCD? &amp;laquo; Software, Wetware, Webware</ns0:comment_author>
    <ns0:comment_author_url>http://techknowledgeme.wordpress.com/2012/06/25/what-role-are-you-playing-in-rpcd/</ns0:comment_author_url>
    <ns0:comment_date>2012-06-25 09:10:38</ns0:comment_date>
    <ns0:comment_content>[...] you role play in RPCD, you could be standing in for either software, or a flesh-and-blood human being. As RPCD explicitly [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>56</ns0:comment_id>
    <ns0:comment_author>Evolving Software Politics &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2012/09/11/evolving-software-politic/</ns0:comment_author_url>
    <ns0:comment_date>2012-09-11 11:01:22</ns0:comment_date>
    <ns0:comment_content>[...] python and &amp;#8220;convention over configuration&amp;#8220;&amp;#8211;both liberal favorites. My idea that teams should deploy evolving software by assigning humans to role play architectural components, and...&amp;#8211;that&amp;#8217;s about as ultra liberal as it [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>60</ns0:comment_id>
    <ns0:comment_author>Evolving Software Politics &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2012/09/11/evolving-software-politics/</ns0:comment_author_url>
    <ns0:comment_date>2012-09-13 01:38:16</ns0:comment_date>
    <ns0:comment_content>[...] python and &amp;#8220;convention over configuration&amp;#8220;&amp;#8211;both liberal favorites. My idea that teams should deploy evolving software by assigning humans to role play architectural components, and...&amp;#8211;that&amp;#8217;s about as ultra liberal as it gets.    Take Our [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>73</ns0:comment_id>
    <ns0:comment_author>Progressive Disclosure Everywhere &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2012/09/16/progressive-disclosure-everywhere/</ns0:comment_author_url>
    <ns0:comment_date>2012-09-16 17:15:27</ns0:comment_date>
    <ns0:comment_content>[...] in programming languages, and in the software craft in general. I explored one in the series on role-play centered design. I&amp;#8217;ll disclose some more ideas &amp;#8230; progressively &amp;#8230; in other posts. [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>225</ns0:comment_id>
    <ns0:comment_author>Baby Steps &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2012/10/24/baby-steps/</ns0:comment_author_url>
    <ns0:comment_date>2012-10-24 19:02:45</ns0:comment_date>
    <ns0:comment_content>[...] If you worry that it would be too expensive to code up two alternate solutions, consider using role-play centered design to let humans substitute for key modules with almost zero [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14924</ns0:comment_id>
    <ns0:comment_author>A grumble about buckets | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/04/08/a-grumble-about-buckets/</ns0:comment_author_url>
    <ns0:comment_date>2015-04-08 13:39:52</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] to provide a glitzy facade. If we&amp;#8217;re going to force users into buckets, let&amp;#8217;s give some careful thought to the buckets we offer&amp;#8211;and let&amp;#8217;s make sure we have a way of discovering and tracking whether our buckets are [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>6835</ns0:comment_id>
    <ns0:comment_author>Thoughts On Bridging the &amp;#8220;Lacuna Humana&amp;#8221; | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/21/bridging-the-lacuna-humana/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-21 08:49:11</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] encountered the notion of Human-Centered Design (HCD)&amp;#8211;but maybe not the new-fangled idea of Role-Play Centered Design (RPCD). First we had Test-Driven Development (TDD); then we got Behavior-Driven Development (BDD). [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Example RPCD Interaction</title>
  <link>http://codecraft.co/2012/06/21/example-rpcd-interaction/</link>
  <pubDate>Thu, 21 Jun 2012 15:56:31 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.wordpress.com/?p=214</guid>
  <ns2:encoded>In my &lt;a href="/2012/06/20/role-play-centered-design/"&gt;last post on RPCD&lt;/a&gt;, I explained its key tenets. In this one, I'll imagine one way to put it into practice.

Suppose a team is chartered to build a tool that locates birth mothers of adopted children. The team's received some vague marching orders ("make it as easy as possible; we want to sell this as a service on facebook and the iTunes app store"). Maybe they're using "agile" methods or even full-blown XP to guarantee that the customer's viewpoint is represented, and that small units of work are fully processed into releasable systems on a regular basis. Or maybe they're doing traditional waterfall, with an elaborate design phase followed by a long implementation.

Regardless, adding RPCD to this team's behaviors might result in interactions like the following:

&lt;strong&gt;Step 1. Team discusses charter.&lt;/strong&gt; They frame the charter in terms of a concrete use case. Since they don't have a specific "real-life" customer to talk to, they postulate one. It might look like this:
&lt;p style="padding-left:30px;"&gt;Rafael just turned 18. He knows he was adopted, and he wants to find his birth mother. He knows he was born in Portland, OR on Sep 3, 1993, that his birth mother's name was "Cindy" or "Cynthia", and that his birth mother might have been a twin. He will interact with this product via an app on Facebook.&lt;/p&gt;
&lt;strong&gt;Step 2. Team imagines how the problem would be solved with people only&lt;/strong&gt;, assuming that money and time is no object, and that a "white gloves" treatment is the goal. This analysis helps crystallize roles for later role play. For example:
&lt;p style="padding-left:30px;"&gt;Rafael (role = client) requests the services of a "birthmother locator" firm. The firm immediately sends an intake interviewer, Summer (role = liason) to Rafael's home. Summer records all of Rafael's contact info so she can interact with him in the future, clarifies Rafael's goals, and records all information Rafael can contribute. Summer then returns to the office and arranges for Jenny (role = case mgr) to convene a group to work on Rafael's case. The group consists of Summer and Jenny, plus Oscar (role = researcher) and Mike (role = gopher). Oscar and Mike are to begin work immediately and to report back on a daily basis. After two days, Oscar has identified 62 women whose life facts might overlap with what is known about Rafael's birth mother. Summer contacts Rafael to report status and ask a follow-up question: does Rafael know whether his birth mother was athletic? Rafael says yes, he thinks she might have been a swimmer. Based on Rafael's confidence in this new info, Oscar decides to narrows the search to women who appeared in high school yearbooks within +/- 5 years of 1993 and who were involved in sports. He dispatches Mike to get some HS yearbooks. He also looks in yearbooks for any girls who have a peer in the same grade, with the same last name. After three more days, Oscar has narrowed the list of candidates to two. He reports back to Summer and Jenny. Summer presents the list of candidates to Rafael and asks if he'd like them to contact the women. Rafael says no; he'll do the final part himself. Rafael is delighted with the results and the "white gloves" treatment, and happily pays for services rendered. Summer asks him to be a reference customer, and he agrees. In fact, Rafael is so happy he can't wait to tell all of his friends about the cool service.&lt;/p&gt;
&lt;strong&gt;Step 3. Team builds a diagram of the system&lt;/strong&gt;, using boxes for the roles that people play. The draft a "job description" for each role.

&lt;strong&gt;Step 4. Team assigns roles to team members&lt;/strong&gt;. "Fred, you're going to pretend the client. Sally, you get to be the liason..."

&lt;strong&gt;Step 5. The system is deployed and goes live -- in "role play" mode.&lt;/strong&gt;
&lt;p style="padding-left:30px;"&gt;Yes, you read right. After some very early design work that can probably complete in an hour or so, the system goes into "production". Not in its final form. Not with ultra-high standards. But in a form that allows the team to learn and refine through repeated role plays. These role plays vett the roles and the model that the team has postulated.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;Role play #1 is a walk-through of exactly the scenario that the team just imagined. Fred (playing Rafael) walks to a computer, pretends to be using an app on Facebook, and says "Okay, I'm now pressing enter to submit my request." Then Sally (playing Summer) looks at a computer screen and says, "Oh, I see that we have a new potential client. I'll go visit him." Already, some interesting questions should be coming to the team's mind: &lt;em&gt;Will clients be happy to be contacted by the app/service as soon as a liason like Summer is available? If so, what info should the "request help" form require so the client can be contacted? Or could a wizard automate Summer's job? How about a chat with an online representative? Do different clients need different priorities, so that if Summer is busy when a new request arrives, she knows whether to be interrupted? Does a case manager like Jenny have to assign Summer before Summer will pay attention? &lt;/em&gt;The team works through these questions and continues with role play #1. Lots more questions come up as they get to the work of the researcher and the gopher. &lt;em&gt;What resources will researchers have? What is the latency of getting info from those resources? How much will it cost to access those resources? Who bills the customer for expenses, and what accounting procedure must be followed? Should researchers report breakthroughs as they occur, or only once a day?&lt;/em&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;After the team works through the role play #1, it should have some intuition about which parts of the system are going to be easiest to automate. It should also have a long and ever-growing list of questions. Not all of the questions are of equal value. The team should look for ones that have major ramifications on the user experience and the scope of work, and explore those first.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;Exploration takes the form of additional role plays. Since Fred was assigned the role of Rafael, his job is critical. He gets to introduce variation into the system. He shouldn't go hog-wild all at once ("Can you bring me a pizza with your next status report?"). But he might do something like try to call his liason after a pretend hour has elapsed, to find out if any status report is available. &lt;em&gt;That&lt;/em&gt; should cause the team some debate and head-scratching. :-) What if he asks to be notified by text in the middle of the night, no matter the hour, with new developments?&lt;/p&gt;
&lt;strong&gt;Step 6. Boundaries between automated and human components of the system are clarified&lt;/strong&gt;. More traditional design work begins.

&lt;strong&gt;Step 7. The team returns to role plays whenever additional clarity is needed&lt;/strong&gt;.

&lt;strong&gt;Step 8. When "the system" is delivered, it is always done as both code AND people&lt;/strong&gt;. This means at the end of an iteration, for example, you don't just provide a build with no bugs. You provide a role play of the system. This role play is more than a canned demo; it is an interactive demo, with people filling roles that code is not yet mature enough to handle. By viewing delivery of a "system" as delivery of a code+people ecosystem, the team is forced to consider things like how tech support will be staffed, how help will be delivered, and so forth.</ns2:encoded>
  <ns0:post_id>214</ns0:post_id>
  <ns0:post_date>2012-06-21 08:56:31</ns0:post_date>
  <ns0:post_name>example-rpcd-interaction</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="agile">agile</category>
  <category domain="post_tag" nicename="architecture">architecture</category>
  <category domain="post_tag" nicename="design">design</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="rpcd">rpcd</category>
  <category domain="post_tag" nicename="ucd">ucd</category>
  <category domain="post_tag" nicename="use-cases">use cases</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";s:1:"0";s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-06-21 16:09:15";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>reddit</ns0:meta_key>
    <ns0:meta_value>a:2:{s:5:"count";i:0;s:4:"time";i:1412753815;}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>21</ns0:comment_id>
    <ns0:comment_author>Role-Play Centered Design &amp;laquo; Software, Wetware, Webware</ns0:comment_author>
    <ns0:comment_author_url>http://techknowledgeme.wordpress.com/2012/06/20/role-play-centered-design/</ns0:comment_author_url>
    <ns0:comment_date>2012-06-21 08:56:40</ns0:comment_date>
    <ns0:comment_content>[...] my next post, I&amp;#8217;ll give an example about how RPCD works. Like this:LikeOne blogger likes [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>24</ns0:comment_id>
    <ns0:comment_author>Long-Term Benefits of RPCD &amp;laquo; Software, Wetware, Webware</ns0:comment_author>
    <ns0:comment_author_url>http://techknowledgeme.wordpress.com/2012/06/21/long-term-benefits-of-rpcd/</ns0:comment_author_url>
    <ns0:comment_date>2012-06-21 10:24:30</ns0:comment_date>
    <ns0:comment_content>[...] for designing software that has role-playing at it&amp;#8217;s heart. If you take a look at the example RPCD interaction, I think some benefits will be immediately [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4875</ns0:comment_id>
    <ns0:comment_author>Why you should use an IDE instead of vim or emacs | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/05/13/why-you-should-use-an-ide-instead-of-vim-or-emacs/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-13 10:16:16</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] model people and their behaviors [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Long-Term Benefits of RPCD</title>
  <link>http://codecraft.co/2012/06/21/long-term-benefits-of-rpcd/</link>
  <pubDate>Thu, 21 Jun 2012 17:24:21 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.wordpress.com/?p=234</guid>
  <ns2:encoded>In a &lt;a href="/2012/06/20/role-play-centered-design/"&gt;previous post&lt;/a&gt;, I wrote about a methodology for designing software that has role-playing at its heart. If you take a look at the &lt;a href="http://techknowledgeme.wordpress.com/2012/06/21/example-rpcd-interaction/"&gt;example RPCD interaction&lt;/a&gt;, I think some benefits will immediately become apparent.

But there are subtler advantages that might not be obvious:

&lt;strong&gt;The system never needs to wait for functional code to be deployable.&lt;/strong&gt;

As soon as you have a set of reasonably clear roles defined, and at least one specific use case, you can observe the system in action. Granted, you're observing people instead of software, but the full complexity and dynamism springs to life right before your eyes. People can hold clipboards and use checklists to model how wizards populate databases; they can move post-notes on a whiteboard to explore organizational algorithms. Seeing &lt;em&gt;in toto&lt;/em&gt;, from the beginning, is incredibly useful.

&lt;img src="http://farm3.staticflickr.com/2722/4439276478_8bb7a50ab8_d.jpg" alt="checklist, from http://www.flickr.com/photos/alancleaver/" /&gt;

The first deployments you do are demos. I am a big fan of demos; you should demo something at the end of every sprint or milestone, to guarantee that you've actually accomplished something useful and that it's aligned with the needs of stakeholders. But with RPCD, you take demos to a whole new level, because your demos become &lt;em&gt;interactive&lt;/em&gt;. If sales asks "What happens when the user pushes the big red button?", you don't have to say, "Sorry, we can't demo that today." You walk over to the person modeling the UI, push the red button on the piece of paper or the whiteboard that they're holding, and let the system chug.

Later in the evolution of code, when most parts of the system are automated, the roles that humans still have to model give you critical information. Are these roles something that you ought to &lt;em&gt;permanently&lt;/em&gt; delegate to human intelligence? Is the wizard you expected to build so complex and error-prone that online chat with a human is a better option, at least in this release? Perhaps you should hire an online chat person as a component of your system, take the risk out of the near-term release, and then study the behavior of that person intensely to learn how to automate in the next release... If your system has always used humans for cogs, adapting it in this way will be natural, not a major departure from expectations.

Another possible insight is that roles where humans are forced to continue to work represent the &lt;em&gt;high-value&lt;/em&gt; aspects of the problem. Solve those problems, and customers will &lt;em&gt;really&lt;/em&gt; love you, because you've radically changed their work.

&lt;strong&gt;The needs of &lt;em&gt;all&lt;/em&gt; humans interacting with the system are inherently "baked in" and obvious, instead of being implicit.&lt;/strong&gt;

UCD says to center your design on the user. But so often we forget support, sales, IT, executive management, and so forth. If you're writing an app for the iPad that uses social ranking to recommend shows airing in the next hour on cable channels, you probably have a team of data managers that maintains current listings for all channels, and a team of backroom IT that keeps your DB running. These people are part of the system; if one day your data center dies, and no IT people show up to fix it, or one day your channel listings goes stale and no data manager steps in to solve the problem, you don't have a product.

These people should all have roles in your role plays, and by regularly representing them, you can't help but make better decisions. Overhead and cost centers become obvious. Risks jump out at you.

&lt;strong&gt;The clumsiness of certain touch points becomes obvious.&lt;/strong&gt;

Or in other words, user feedback and usability testing are built in, because actual people, not abstract boxes on your system, are interacting from the very beginning.
</ns2:encoded>
  <ns0:post_id>234</ns0:post_id>
  <ns0:post_date>2012-06-21 10:24:21</ns0:post_date>
  <ns0:post_name>long-term-benefits-of-rpcd</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="design">design</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="rpcd">rpcd</category>
  <category domain="post_tag" nicename="ucd">ucd</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:62:"http://farm3.staticflickr.com/2722/4439276478_8bb7a50ab8_d.jpg";s:6:"images";a:1:{s:62:"http://farm3.staticflickr.com/2722/4439276478_8bb7a50ab8_d.jpg";a:6:{s:8:"file_url";s:62:"http://farm3.staticflickr.com/2722/4439276478_8bb7a50ab8_d.jpg";s:5:"width";s:3:"500";s:6:"height";s:3:"334";s:4:"type";s:5:"image";s:4:"area";s:6:"167000";s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";s:1:"1";s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-06-21 17:24:21";}</ns0:meta_value>
  </ns0:postmeta>
  </item>
<item>
  <title>What Role Are You Playing in RPCD?</title>
  <link>http://codecraft.co/2012/06/25/what-role-are-you-playing-in-rpcd/</link>
  <pubDate>Mon, 25 Jun 2012 16:10:32 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.wordpress.com/?p=242</guid>
  <ns2:encoded>When you role play in &lt;a href="/2012/06/20/role-play-centered-design/"&gt;RPCD&lt;/a&gt;, you could be standing in for either software, or a flesh-and-blood human being. As RPCD explicitly acknowledges, both are part of your final system.

A key insight of RPCD is that the distinction between these two entities is a lot less meaningful than we usually think. Most software is created to solve a problem that ordinary human beings are already addressing in some fashion. In fact, I might go so far as to say that this is true of all software. The quick exceptions that come to mind just take a little more pondering to map. Biometric scanners? Just a replacement for humans judging whether a person matches that photo on their driver's license. RFID tags? Just making the human inventory team's job easier. Firmware in high-speed switches on the internet backbone? Just a step or two removed from postmen and switchboard operators. Word processors and IMEs? Just a replacement for a transcriptionist. Signal analyzers for &lt;a href="http://setiathome.berkeley.edu/" target="_blank"&gt;SETI&lt;/a&gt;? Genome sequencers? Protein folders for &lt;a href="http://folding.stanford.edu/English/HomePage" target="_blank"&gt;Folding@Home&lt;/a&gt;? Just substitutes for human researchers.

[caption id="" align="alignnone" width="450"]&lt;a href="http://www.flickr.com/photos/armymedicine/7060713807/"&gt;&lt;img class=" " src="http://farm8.staticflickr.com/7136/7060713807_553ea103cd_d.jpg" alt="human researcher" width="450" height="297" /&gt;&lt;/a&gt; photo credit: armymedicine (Flickr)[/caption]

Even if you're playing a role that you're sure will ultimately be encapsulated in a tidy software abstraction, RPCD helps you remember that the problem that entity solves is ultimately a &lt;em&gt;human&lt;/em&gt; problem. We don't pay engineers the big bucks to make computers happy.</ns2:encoded>
  <ns0:post_id>242</ns0:post_id>
  <ns0:post_date>2012-06-25 09:10:32</ns0:post_date>
  <ns0:post_name>what-role-are-you-playing-in-rpcd</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="design">design</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="rpcd">rpcd</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:62:"http://farm8.staticflickr.com/7136/7060713807_553ea103cd_d.jpg";s:6:"images";a:1:{s:62:"http://farm8.staticflickr.com/7136/7060713807_553ea103cd_d.jpg";a:6:{s:8:"file_url";s:62:"http://farm8.staticflickr.com/7136/7060713807_553ea103cd_d.jpg";s:5:"width";s:3:"500";s:6:"height";s:3:"330";s:4:"type";s:5:"image";s:4:"area";s:6:"165000";s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";s:1:"1";s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-06-25 16:14:02";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>27</ns0:comment_id>
    <ns0:comment_author>Role-Play Centered Design &amp;laquo; Software, Wetware, Webware</ns0:comment_author>
    <ns0:comment_author_url>http://techknowledgeme.wordpress.com/2012/06/20/role-play-centered-design/</ns0:comment_author_url>
    <ns0:comment_date>2012-06-25 09:29:26</ns0:comment_date>
    <ns0:comment_content>[...] You should &amp;quot;be&amp;quot; the software in the system, and you should &amp;quot;be&amp;quot; the people as we.... [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>7533</ns0:comment_id>
    <ns0:comment_author>best food storage companies</ns0:comment_author>
    <ns0:comment_author_email>katekaplan@aol.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://hdrtrici.buzznet.com/user/journal/17816601/verify-out-some-movers-right/</ns0:comment_author_url>
    <ns0:comment_date>2014-08-06 07:38:14</ns0:comment_date>
    <ns0:comment_content>Customers handle their own anti-freeze, flsh bulbs, and lighter 
fluid. If its taken you 5, 10 or 15 years to get into the condition youre in now, then trust me, a stroll just 
isnt enough. While dragging on your screen with your mouse and holding 
shift, you can pull the layer or selected object 45 degrees in any direction.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1407332295</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
</item>
<item>
  <title>What a Software Architect is NOT</title>
  <link>http://codecraft.co/2012/06/26/what-a-software-architect-is-not/</link>
  <pubDate>Tue, 26 Jun 2012 15:56:58 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.wordpress.com/?p=249</guid>
  <ns2:encoded>In &lt;a href="/2008/09/10/what-is-a-software-architect/"&gt;another post&lt;/a&gt;, I defined the role of a software architect. This post points out some duties that are not necessarily part of his or her job, for clarity.

[caption id="" align="alignright" width="240"]&lt;a href="http://www.flickr.com/photos/usfsregion5/3770093556/"&gt;&lt;img class="  " title="An architect is not a lead engineer or a foreman..." src="http://farm4.staticflickr.com/3567/3770093556_30c3c38029_n_d.jpg" alt="foreman" width="240" height="320" align="right" /&gt;&lt;/a&gt; A foreman--vital but usually not the same person as the architect. Photo credit: USFS Region 5 (Flickr).[/caption]

* An architect is not necessarily a lead engineer. Lead engineers translate architectural guidelines and vision into implementation, not just in the design phase, but all the way through RTM. Lead engineers work for dev managers and are accountable directly to them. Lead engineers might have a technical director pay grade, but whether they are asked to function as architects is a separate question. When lead engineers push back, it's usually about whether an implementation works or is reasonable, not about whether a vision is the right one. Lead engineers may "own" a particular facet of the technology portfolio through multiple release cycles, and this cross-release perspective is architect-like. However, lead engineers are far less likely to radically question the value of what they own than an architect, because an architect is looking at a bigger picture over a longer horizon. When Bill Gates told every MS employee to drop what they were doing and spend a month thinking about the Internet because the company wasn't "getting it," he was being an architect. The lead engineers on all the projects and components that ultimately got ditched so MS could go chase the web wave would never have done that.

* An architect is not a dev manager or dev director. Dev management coordinates the work of a team that delivers product to spec. Dev management scopes work and speaks with authority on whether something is doable with what schedule and what resources. Dev management is extremely focused on release cycles. If we were constructing buildings, dev managers would be foremen -- reading blueprints, hiring and monitoring subcontractors, cutting checks, giving status reports. A dev director or Sr. Dev Director would be the general contractor. But neither the general contractor nor the foremen would decide to put an elevator shaft in a different spot without talking to the architect who calculated the load-bearing capacity of the walls. Like lead engineers, dev management should understand technical guidelines provided by an architect, and should be accountable to work within them, pushing back to the architect as necessary. This is parallel and analogous to the push-back that dev management provides to PM when the schedule is threatened.

* An architect is not a product manager. A product manager proxies customers and builds business plans for releases of products. A product manager says with authority, "This is what the market wants, and we can make X selling it." These business plans should represent our best understanding of revenue-maximizing choices. But without an architect to provide feedback, these plans typically have a one-release horizon -- whatever maximizes revenue in the next release is assumed to be best. Or else we have a long-term business perspective, but implementers receive little guidance about technical tradeoffs that are aligned with an appropriate evolutionary path; the technology becomes a patchwork quilt of kludges and dead-ends that is progressively more expensive to enhance and less useful as a competitive weapon.</ns2:encoded>
  <ns0:post_id>249</ns0:post_id>
  <ns0:post_date>2012-06-26 08:56:58</ns0:post_date>
  <ns0:post_name>what-a-software-architect-is-not</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="development">development</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="software-architect">software architect</category>
  <category domain="category" nicename="software-architecture">Software Architecture</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>reddit</ns0:meta_key>
    <ns0:meta_value>a:2:{s:5:"count";i:0;s:4:"time";i:1412812605;}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>28</ns0:comment_id>
    <ns0:comment_author>What is a &amp;#8220;Software Architect?&amp;#8221; &amp;laquo; Software, Wetware, Webware</ns0:comment_author>
    <ns0:comment_author_url>http://techknowledgeme.wordpress.com/2008/09/10/what-is-a-software-architect/</ns0:comment_author_url>
    <ns0:comment_date>2012-06-26 08:58:53</ns0:comment_date>
    <ns0:comment_content>[...] also might be worth highlighting some things that I *don&amp;#8217;t* consider part of an architect&amp;#8217;s job, for the sake of clarity. I&amp;#8217;ll do that in a separate post. Like this:LikeBe the first to like [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>How Software Is Like Biology</title>
  <link>http://codecraft.co/2012/08/14/how-software-is-like-biology/</link>
  <pubDate>Tue, 14 Aug 2012 22:14:38 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.wordpress.com/?p=260</guid>
  <ns2:encoded>No, I'm not going to talk about genetic algorithms. (Not yet, anyway.)

[caption id="" align="alignright" width="151"]&lt;a href="http://www.flickr.com/photos/dullhunk/439737660/"&gt;&lt;img class=" " title="DNA" src="http://farm1.staticflickr.com/176/439737660_7505789a45_m_d.jpg" alt="" width="151" height="178" /&gt;&lt;/a&gt; DNA ~ subroutines. Photo credit: dullhunk on Flickr.[/caption]

Consider the scope of concerns (roughly maps onto need for expertise) of various folks that do biological science for a living. You have organic chemists. They might not know much about why zebra mussel infestation is a problem in the Great Lakes, but they can tell you all kinds of things about why cellular respiration works or how prions replicate. You have cellular biologists, who know all about protein transcription, meiosis, and telomeres. At higher levels of abstraction/generalization, you need experts on tissues, organs, or entire organisms -- and beyond them, you need folks who study speciation, ecosystems, genetic drift in populations...

Same deal with computers. At the lowest level, there are hardware folks who are all about making the chip or the bus efficient. Then there are algorithm specialists who will hone a sort or a data structure till it hums. Their expertise is critical, but not sufficient. You also need folks who are good at building well-encapsulated classes (cell membrane ~ encapsulation; nucleus ~ private methods; abstract factories = ribosomes... interesting...), folks who understand libraries (tissues/organs), folks who can see how each library and class fits into a coherent application (organism). Many analyses of software stop at the application level, but you can keep going: distributed applications clump in "herds"; herds participate in even larger and more complex (eco)systems that suffer from predation, evolution, and all the rest.

Morals to the story?
&lt;ol&gt;
	&lt;li&gt;Just as not all great biological scientists are experts in protein transcription, &lt;a href="http://charlesknutson.net/blog/2010/10/25/puzzle-solving-not-the-driving-function-of-software-construction/"&gt;not all great computer pros are experts at low-level algorithms and data structures&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;Biology has a lot to teach us about building stable systems. There's a reason organisms develop defense mechanisms, excretory capabilities, etc. Apps that evolve without analogs will die. Next time you are solving a tricky computer problem, ask yourself how biology solves the equivalent...&lt;/li&gt;
&lt;/ol&gt;</ns2:encoded>
  <ns0:post_id>260</ns0:post_id>
  <ns0:post_date>2012-08-14 15:14:38</ns0:post_date>
  <ns0:post_name>how-software-is-like-biology</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="architecture">architecture</category>
  <category domain="post_tag" nicename="biology">biology</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="science">science</category>
  <category domain="category" nicename="software-architecture">Software Architecture</category>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:0:"";s:6:"images";a:1:{s:62:"http://farm1.staticflickr.com/176/439737660_7505789a45_m_d.jpg";a:6:{s:8:"file_url";s:62:"http://farm1.staticflickr.com/176/439737660_7505789a45_m_d.jpg";s:5:"width";i:204;s:6:"height";i:240;s:4:"type";s:5:"image";s:4:"area";i:48960;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-08-14 22:15:55";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  </item>
<item>
  <title>What Is "Good Code"?</title>
  <link>http://codecraft.co/2012/08/26/what-is-good-code/</link>
  <pubDate>Mon, 27 Aug 2012 04:09:01 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.wordpress.com/?p=268</guid>
  <ns2:encoded>This is one of those questions that I often ask when I am interviewing a computer programmer job applicant, trying to get a sense for an engineer's maturity with the craft. (And for the record, I don't think the question has a "right" answer. Certainly there is no ideal one-sentence response.)

Sometimes I get answers like this:
&lt;ul&gt;
	&lt;li&gt;"Whatever gets the job done."&lt;/li&gt;
	&lt;li&gt;"Whatever sells."&lt;/li&gt;
	&lt;li&gt;"Whatever solves the customer problem."&lt;/li&gt;
&lt;/ul&gt;
[caption id="" align="aligncenter" width="358"]&lt;a href="http://www.flickr.com/photos/usfbps/4607151156/"&gt;&lt;img class="   " title="Interview Questions" alt="" src="http://farm5.staticflickr.com/4027/4607151156_d8b9c7554d_o.jpg" width="358" height="239" /&gt;&lt;/a&gt; Answering tough interview questions. Photo credit: bpsusf (Flickr).[/caption]

Such answers tell me that an engineer is practical, business-aware, and customer-focused--all useful traits. &lt;a title="Earned Pragmatism" href="http://codecraft.co/2013/01/18/earned-pragmatism/"&gt;Pragmatism is usually learned in the economic school of hard knocks&lt;/a&gt;, and it's a critical perspective that should never be forgotten. But I don't get a warm fuzzy from pure pragmatism; it lacks vision or love of craft.

Another kind of answer focuses on cleverness:
&lt;ul&gt;
	&lt;li&gt;"I wrote a burst sort once that could beat stdlib qsort. It's counterintuitive, I know, but the way burst sort works cache..."&lt;/li&gt;
	&lt;li&gt;"You wouldn't believe how much you can say with a 3-line statement in python..."&lt;/li&gt;
&lt;/ul&gt;
An engineer with this type of perspective also has praiseworthy qualities--an appreciation for elegance, a desire to achieve. But I find these answers unsatisfying as well. For one thing, the statements are &lt;em&gt;lonely&lt;/em&gt;; notice how little they imply about who will build upon or use the finished product. In this vein, I love Martin Fowler's warning in &lt;a title="Refactoring" href="http://martinfowler.com/books/refactoring.html" target="_blank"&gt;Refactoring&lt;/a&gt;:
&lt;blockquote&gt;"Any fool can write code that a computer can understand. Good programmers write code that humans can understand."&lt;/blockquote&gt;
I'll also include a "miscellaneous" response category, which encompasses stuff like:
&lt;ul&gt;
	&lt;li&gt;"Good code has to be scalable, make efficient use of resources, optimize for good performance, ..."&lt;/li&gt;
	&lt;li&gt;"Good code is maintainable and testable."&lt;/li&gt;
	&lt;li&gt;"KISS -- keep it simple, stupid."&lt;/li&gt;
&lt;/ul&gt;
All true (the first statement less than the other two, IMO), but all less than fully satisfying.

So what answer &lt;em&gt;would&lt;/em&gt; impress me?

Albert Einstein &lt;a title="supposedly" href="http://quoteinvestigator.com/2011/05/13/einstein-simple/#more-2363" target="_blank"&gt;supposedly&lt;/a&gt; said, "Make things as simple as possible, but not simpler." Well, I think good code is quite a complicated subject, and the first thing that would impress me is an acknowledgement that I've posed a very difficult question indeed.

Since I've already mentioned one of my favorite quotes about simplicity, I think I'll mention the other here, as well. Oliver Wendell Holmes: "I would not &lt;em&gt;give a fig&lt;/em&gt; for the simplicity this side of complexity, but I would give my life for the simplicity on the other side of complexity."

Holmes was talking, I believe, about wrestling with a difficult, multifaceted problem, and distilling it down to its essence only after all its dimensions are fully understood.

I'm going to post a few observations on what I think constitutes good code in coming days. These will be glimpses of zen that I've occasionally stumbled upon on the "other side of complexity" as I've wrestled with the craft through my career.

I'll be curious to know what you think, as well.
&lt;p style="text-align:right;"&gt;&lt;em&gt;(Read more posts in my "&lt;a href="/category/good-code/"&gt;What is 'Good Code'?&lt;/a&gt;" series...)&lt;/em&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>268</ns0:post_id>
  <ns0:post_date>2012-08-26 21:09:01</ns0:post_date>
  <ns0:post_name>what-is-good-code</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="code">code</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="quality">quality</category>
  <category domain="post_tag" nicename="simplicity">simplicity</category>
  <category domain="category" nicename="software-architecture">Software Architecture</category>
  <category domain="post_tag" nicename="vision">vision</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>43</ns0:comment_id>
    <ns0:comment_author>Good Code Is Balanced &amp;laquo; Software, Wetware, Webware</ns0:comment_author>
    <ns0:comment_author_url>http://techknowledgeme.wordpress.com/2012/08/27/good-code-is-balanced/</ns0:comment_author_url>
    <ns0:comment_date>2012-08-27 09:55:53</ns0:comment_date>
    <ns0:comment_content>[...] my first post about what constitutes &amp;#8220;good code,&amp;#8221; I claimed we were dealing with a complex question. This is why I distrust short [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>46</ns0:comment_id>
    <ns0:comment_author>Good Code Is Named Right &amp;laquo; Software, Wetware, Webware</ns0:comment_author>
    <ns0:comment_author_url>http://techknowledgeme.wordpress.com/2012/08/28/good-code-is-named-right/</ns0:comment_author_url>
    <ns0:comment_date>2012-08-28 10:04:27</ns0:comment_date>
    <ns0:comment_content>[...] post in my &amp;#8220;What is &amp;#8216;Good Code&amp;#8217;?&amp;#8221; [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>47</ns0:comment_id>
    <ns0:comment_author>Good Code Is Optimized &amp;laquo; Software, Wetware, Webware</ns0:comment_author>
    <ns0:comment_author_url>http://techknowledgeme.wordpress.com/2012/08/27/good-code-is-optimized/</ns0:comment_author_url>
    <ns0:comment_date>2012-08-28 10:05:26</ns0:comment_date>
    <ns0:comment_content>[...] post in my &amp;#8220;What is &amp;#8216;Good Code&amp;#8217;?&amp;#8221; [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>114</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-10-01 10:24:48</ns0:comment_date>
    <ns0:comment_content>Just ran across a tweet by @trev_harmon. It dovetails so nicely with the Martin Fowler quote that I just had to repeat it: Dear communicators: I don't care if you understand complex thoughts or concepts, but rather if I do after listening to you. #simplify</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4948</ns0:comment_id>
    <ns0:comment_author>Why you should be proficient in a tool like vim or emacs | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/05/15/why-you-should-be-proficient-in-a-tool-like-vim-or-emacs/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-15 08:46:14</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] assembly first, and then migrated through C to C++&amp;#8211;and how that foundation helps them write better code than a young upstart who learned first in [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Contact</title>
  <link>http://codecraft.co/contact/</link>
  <pubDate>Wed, 29 Aug 2012 21:12:44 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.wordpress.com/?page_id=314</guid>
  <ns2:encoded>If you have a comment or question that doesn't relate to a specific post, I'd be delighted to hear from you.

[contact-form][contact-field label='Name' type='name' required='1'/][contact-field label='Email' type='email' required='1'/][contact-field label='Website' type='url'/][contact-field label='Comment' type='textarea' required='1'/][/contact-form]</ns2:encoded>
  <ns0:post_id>314</ns0:post_id>
  <ns0:post_date>2012-08-29 14:12:44</ns0:post_date>
  <ns0:post_name>contact</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>page</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>sharing_disabled</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>switch_like_status</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_g_feedback_shortcode_d62c464153ad9a215e267c2465919460ee2cfd3f</ns0:meta_key>
    <ns0:meta_value>[contact-field label='Name' type='name' required='1'/][contact-field label='Email' type='email' required='1'/][contact-field label='Website' type='url'/][contact-field label='Comment' type='textarea' required='1'/]</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_g_feedback_shortcode_atts_d62c464153ad9a215e267c2465919460ee2cfd3f</ns0:meta_key>
    <ns0:meta_value>a:17:{s:2:"to";s:24:"daniel.hardman@gmail.com";s:7:"subject";s:19:"[Codecraft] Contact";s:12:"show_subject";s:2:"no";s:6:"widget";i:0;s:14:"block_template";N;s:19:"block_template_part";N;s:2:"id";i:314;s:18:"submit_button_text";s:6:"Submit";s:14:"customThankyou";s:0:"";s:21:"customThankyouHeading";s:26:"Your message has been sent";s:21:"customThankyouMessage";s:30:"Thank you for your submission!";s:22:"customThankyouRedirect";s:0:"";s:10:"jetpackCRM";b:1;s:9:"className";N;s:9:"postToUrl";N;s:14:"salesforceData";N;s:12:"hiddenFields";N;}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_g_feedback_shortcode</ns0:meta_key>
    <ns0:meta_value>[contact-field label='Name' type='name' required='1'/][contact-field label='Email' type='email' required='1'/][contact-field label='Website' type='url'/][contact-field label='Comment' type='textarea' required='1'/]</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_g_feedback_shortcode_924ebafb05d60781c67977c70eb10be514c666b4</ns0:meta_key>
    <ns0:meta_value>[contact-field label='Name' type='name' required='1'/][contact-field label='Email' type='email' required='1'/][contact-field label='Website' type='url'/][contact-field label='Comment' type='textarea' required='1'/]</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_g_feedback_shortcode_atts_924ebafb05d60781c67977c70eb10be514c666b4</ns0:meta_key>
    <ns0:meta_value>a:17:{s:2:"to";s:24:"daniel.hardman@gmail.com";s:7:"subject";s:19:"[Codecraft] Contact";s:12:"show_subject";s:2:"no";s:6:"widget";i:0;s:14:"block_template";N;s:19:"block_template_part";N;s:2:"id";i:314;s:18:"submit_button_text";s:6:"Submit";s:14:"customThankyou";s:0:"";s:21:"customThankyouHeading";s:26:"Your message has been sent";s:21:"customThankyouMessage";s:30:"Thank you for your submission!";s:22:"customThankyouRedirect";s:0:"";s:10:"jetpackCRM";b:1;s:9:"className";N;s:9:"postToUrl";N;s:14:"salesforceData";N;s:12:"hiddenFields";N;}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Steve Jackson: Invest in culture.</title>
  <link>http://codecraft.co/?p=446</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=446</guid>
  <ns0:post_id>446</ns0:post_id>
  <ns0:post_date>2012-09-13 13:04:36</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Eric Foutz: Find a way.</title>
  <link>http://codecraft.co/?p=448</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=448</guid>
  <ns2:encoded>tests, certification, squaw peak</ns2:encoded>
  <ns0:post_id>448</ns0:post_id>
  <ns0:post_date>2012-09-13 02:14:23</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Moray King: Choose the right algorithm.</title>
  <link>http://codecraft.co/?p=454</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=454</guid>
  <ns2:encoded>"faceting is not a big data algorithm"</ns2:encoded>
  <ns0:post_id>454</ns0:post_id>
  <ns0:post_date>2012-09-13 02:16:19</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Andrew Paxie: Refuse to make enemies.</title>
  <link>http://codecraft.co/?p=458</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=458</guid>
  <ns0:post_id>458</ns0:post_id>
  <ns0:post_date>2012-09-13 02:18:02</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Steve Fairbanks: Know the competition.</title>
  <link>http://codecraft.co/?p=462</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=462</guid>
  <ns0:post_id>462</ns0:post_id>
  <ns0:post_date>2012-09-13 02:19:19</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>James Russell: Simplicity = power.</title>
  <link>http://codecraft.co/?p=463</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=463</guid>
  <ns0:post_id>463</ns0:post_id>
  <ns0:post_date>2012-09-13 02:21:33</ns0:post_date>
  <ns0:post_name>james-russell-simplicty-power</ns0:post_name>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>L.D. Weller: Help the channel.</title>
  <link>http://codecraft.co/?p=464</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=464</guid>
  <ns0:post_id>464</ns0:post_id>
  <ns0:post_date>2012-09-13 02:22:01</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Battlescars</title>
  <link>http://codecraft.co/?p=467</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=467</guid>
  <ns2:encoded>This post inaugurates a new series in which I describe tuition that I've paid at the school of hard knocks -- times when I learned something by muddling around and generally making mistakes until I figured something out.</ns2:encoded>
  <ns0:post_id>467</ns0:post_id>
  <ns0:post_date>2012-09-13 09:01:48</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Ken Ebert: Institutionalize humor.</title>
  <link>http://codecraft.co/?p=470</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=470</guid>
  <ns2:encoded>cowbell, flexible frame.

Honorable mention: Moray as VP of Marketing and alien abductions.

xref to Jackson: invest in culture.</ns2:encoded>
  <ns0:post_id>470</ns0:post_id>
  <ns0:post_date>2012-09-13 13:06:34</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>It's about messages, not objects</title>
  <link>http://codecraft.co/?p=513</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=513</guid>
  <ns2:encoded>combine this insight, from &lt;a href="http://catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/ar01s05.html"&gt;http://catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/ar01s05.html&lt;/a&gt;:

&lt;a id="id2811468"&gt;&lt;/a&gt;Brooks's Law is founded on experience that bugs tend strongly to cluster at the interfaces between code written by different people, and that communications/coordination overhead on a project tends to rise with the number of interfaces between human beings. Thus, problems scale with the number of communications paths between developers, which scales as the square of the humber of developers (more precisely, according to the formula N*(N - 1)/2 where N is the number of developers).

... Also, add in Steve Yegge's "Execution in the kingdom of nouns"

... with Alan Kay's comments at &lt;a href="http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html"&gt;http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html&lt;/a&gt;:
&lt;pre&gt;Folks --

Just a gentle reminder that I took some pains at the last OOPSLA to try to
remind everyone that Smalltalk is not only NOT its syntax or the class
library, it is not even about classes. I'm sorry that I long ago coined the
term "objects" for this topic because it gets many people to focus on the
lesser idea.

The big idea is "messaging" -- that is what the kernal of Smalltalk/Squeak
is all about (and it's something that was never quite completed in our
Xerox PARC phase). The Japanese have a small word -- ma -- for "that which
is in between" -- perhaps the nearest English equivalent is "interstitial".
The key in making great and growable systems is much more to design how its
modules communicate rather than what their internal properties and
behaviors should be. Think of the internet -- to live, it (a) has to allow
many different kinds of ideas and realizations that are beyond any single
standard and (b) to allow varying degrees of safe interoperability between
these ideas.&lt;/pre&gt;</ns2:encoded>
  <ns0:post_id>513</ns0:post_id>
  <ns0:post_date>2012-10-21 18:40:30</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>agree with Yegge's claim that code size is the problem</title>
  <link>http://codecraft.co/?p=515</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=515</guid>
  <ns2:encoded>Having studied Linus's behavior and formed a theory about why it was successful, I made a conscious decision to test this theory on my new (admittedly much less complex and ambitious) project.

But &lt;strong&gt;the first thing I did was reorganize and simplify&lt;/strong&gt; popclient a lot. Carl Harris's implementation was very sound, but exhibited a kind of unnecessary complexity common to many C programmers. He treated the code as central and the data structures as support for the code. As a result, the code was beautiful but the data structure design ad-hoc and rather ugly (at least by the high standards of this veteran LISP hacker).

&lt;strong&gt;I had another purpose for rewriting besides improving the code and the data structure design, however. That was to evolve it into something I understood completely. It's no fun to be responsible for fixing bugs in a program you don't understand.&lt;/strong&gt;

Combine with Steve Yegge's rant about code size.</ns2:encoded>
  <ns0:post_id>515</ns0:post_id>
  <ns0:post_date>2012-11-13 20:51:06</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>the simplicity beyond complexity</title>
  <link>http://codecraft.co/?p=517</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=517</guid>
  <ns2:encoded>from http://catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/ar01s07.html:
&lt;blockquote&gt;&lt;a id="id2762120"&gt;&lt;/a&gt;12. Often, the most striking and innovative solutions come from realizing that your concept of the problem was wrong.&lt;/blockquote&gt;
&lt;a id="id2762120"&gt;&lt;/a&gt;I had been trying to solve the wrong problem by continuing to develop popclient as a combined MTA/MDA with all kinds of funky local delivery modes. Fetchmail's design needed to be rethought from the ground up as a pure MTA, a part of the normal SMTP-speaking Internet mail path.

&lt;a id="id2762120"&gt;&lt;/a&gt;When you hit a wall in development—when you find yourself hard put to think past the next patch—it's often time to ask not whether you've got the right answer, but whether you're asking the right question. Perhaps the problem needs to be reframed.

&lt;a id="id2762120"&gt;&lt;/a&gt;Well, I had reframed my problem. Clearly, the right thing to do was (1) hack SMTP forwarding support into the generic driver, (2) make it the default mode, and (3) eventually throw out all the other delivery modes, especially the deliver-to-file and deliver-to-standard-output options.

&lt;a id="id2762120"&gt;&lt;/a&gt;I hesitated over step 3 for some time, fearing to upset long-time popclient users dependent on the alternate delivery mechanisms. In theory, they could immediately switch to &lt;tt&gt;.forward&lt;/tt&gt; files or their non-sendmail equivalents to get the same effects. In practice the transition might have been messy.

&lt;a id="id2762120"&gt;&lt;/a&gt;But when I did it, the benefits proved huge. The cruftiest parts of the driver code vanished. Configuration got radically simpler—no more grovelling around for the system MDA and user's mailbox, no more worries about whether the underlying OS supports file locking.

&lt;a id="id2762120"&gt;&lt;/a&gt;Also, the only way to lose mail vanished. If you specified delivery to a file and the disk got full, your mail got lost. This can't happen with SMTP forwarding because your SMTP listener won't return OK unless the message can be delivered or at least spooled for later delivery.

&lt;a id="id2762120"&gt;&lt;/a&gt;Also, performance improved (though not so you'd notice it in a single run). Another not insignificant benefit of this change was that the manual page got a lot simpler.

&lt;a id="id2762120"&gt;&lt;/a&gt;Later, I had to bring delivery via a user-specified local MDA back in order to allow handling of some obscure situations involving dynamic SLIP. But I found a much simpler way to do it.

&lt;a id="id2762120"&gt;&lt;/a&gt;The moral? Don't hesitate to throw away superannuated features when you can do it without loss of effectiveness. Antoine de Saint-Exupéry (who was an aviator and aircraft designer when he wasn't authoring classic children's books) said:
&lt;blockquote&gt;&lt;a id="id2762120"&gt;&lt;/a&gt;13. ``Perfection (in design) is achieved not when there is nothing more to add, but rather when there is nothing more to take away.''&lt;/blockquote&gt;
&lt;a id="id2762120"&gt;&lt;/a&gt;&lt;strong&gt;When your code is getting both better and simpler, that is when you &lt;em&gt;know&lt;/em&gt; it's right.&lt;/strong&gt; And in the process, the fetchmail design acquired an identity of its own, different from the ancestral popclient.</ns2:encoded>
  <ns0:post_id>517</ns0:post_id>
  <ns0:post_date>2012-09-17 12:08:48</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>preconditions for success</title>
  <link>http://codecraft.co/?p=520</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=520</guid>
  <ns2:encoded>from http://catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/ar01s10.html

&lt;a id="id2762692"&gt;&lt;/a&gt;It's fairly clear that one cannot code from the ground up in bazaar style &lt;a href="http://catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/ar01s14.html#IN"&gt;[IN]&lt;/a&gt;. One can test, debug and improve in bazaar style, but it would be very hard to &lt;em&gt;originate&lt;/em&gt; a project in bazaar mode. Linus didn't try it. I didn't either. Your nascent developer community needs to have something runnable and testable to play with.

&lt;strong&gt;When you start community-building, what you need to be able to present is a &lt;em&gt;plausible promise&lt;/em&gt;. Your program doesn't have to work particularly well. It can be crude, buggy, incomplete, and poorly documented. What it must not fail to do is (a) run, and (b) convince potential co-developers that it can be evolved into something really neat in the foreseeable future.&lt;/strong&gt;</ns2:encoded>
  <ns0:post_id>520</ns0:post_id>
  <ns0:post_date>2012-09-17 12:10:48</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>working with people</title>
  <link>http://codecraft.co/?p=522</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=522</guid>
  <ns2:encoded>From &lt;a href="http://catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/ar01s11.html"&gt;http://catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/ar01s11.html&lt;/a&gt;:

While cheap Internet was a necessary condition for the Linux model to evolve, I think it was not by itself a sufficient condition. Another vital factor was the development of a leadership style and set of cooperative customs that could allow developers to attract co-developers and get maximum leverage out of the medium.

But what is this leadership style and what are these customs? They cannot be based on power relationships—and even if they could be, leadership by coercion would not produce the results we see. Weinberg quotes the autobiography of the 19th-century Russian anarchist Pyotr Alexeyvich Kropotkin's &lt;em&gt;Memoirs of a Revolutionist&lt;/em&gt; to good effect on this subject:
&lt;blockquote&gt;Having been brought up in a serf-owner's family, I entered active life, like all young men of my time, with a great deal of confidence in the necessity of commanding, ordering, scolding, punishing and the like. But when, at an early stage, I had to manage serious enterprises and to deal with [free] men, and when each mistake would lead at once to heavy consequences, I began to appreciate the difference between acting on the principle of command and discipline and acting on the principle of common understanding. The former works admirably in a military parade, but it is worth nothing where real life is concerned, and &lt;strong&gt;the aim can be achieved only through the severe effort of many converging wills.&lt;/strong&gt;&lt;/blockquote&gt;
The ``severe effort of many converging wills'' is precisely what a project like Linux requires—and the ``principle of command'' is effectively impossible to apply among volunteers in the anarchist's paradise we call the Internet. To operate and compete effectively, hackers who want to lead collaborative projects have to learn how to recruit and energize effective communities of interest in the mode vaguely suggested by Kropotkin's ``principle of understanding''. They must learn to use Linus's Law.&lt;a href="http://catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/ar01s14.html#SP"&gt;[SP]&lt;/a&gt;</ns2:encoded>
  <ns0:post_id>522</ns0:post_id>
  <ns0:post_date>2012-09-17 12:12:39</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Lessons learned from static code analysis</title>
  <link>http://codecraft.co/?p=524</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=524</guid>
  <ns2:encoded>do a redux of this insightful article: &lt;a href="http://cacm.acm.org/magazines/2010/2/69354-a-few-billion-lines-of-code-later/fulltext"&gt;http://cacm.acm.org/magazines/2010/2/69354-a-few-billion-lines-of-code-later/fulltext&lt;/a&gt;

Talks a lot about how people enter the equation.</ns2:encoded>
  <ns0:post_id>524</ns0:post_id>
  <ns0:post_date>2012-09-17 13:56:01</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Brady Kimball: Now Beats Soon</title>
  <link>http://codecraft.co/?p=605</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=605</guid>
  <ns2:encoded>Brady writing an email to Trev right now instead of waiting to talk to him after the meeting.</ns2:encoded>
  <ns0:post_id>605</ns0:post_id>
  <ns0:post_date>2012-10-02 07:54:21</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Planning Poker</title>
  <link>http://codecraft.co/?p=607</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=607</guid>
  <ns2:encoded>Review recent experience.

Good: brief discussions, quick and broad accounting of everybody's opinions.

Bad: no formal way of accounting for confidence levels. How much learning and changing to the team will need to take place to be successful with this feature?

Analog in the "fist of five" that Jackson/Don's team used to do.

Analysis vs. Synthesis

doesn't capture overlaps or interactions (sum greater than parts); doesn't capture need to learn.

Overhead to plan vs. insight gained from the plan.</ns2:encoded>
  <ns0:post_id>607</ns0:post_id>
  <ns0:post_date>2012-10-02 13:32:11</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Specifics Drive Design</title>
  <link>http://codecraft.co/?p=609</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=609</guid>
  <ns2:encoded>humans generalize

design phase: epics, then stories. This is wrong. Specific stories, then generalized epics, then generalized stories.

hyperlink to specifics non-negotiable in rpcd.</ns2:encoded>
  <ns0:post_id>609</ns0:post_id>
  <ns0:post_date>2012-10-02 07:59:02</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Finding Great People</title>
  <link>http://codecraft.co/?p=614</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=614</guid>
  <ns2:encoded>&lt;a href="http://venturebeat.com/2012/09/25/startup-stories-recruiter/"&gt;http://venturebeat.com/2012/09/25/startup-stories-recruiter/&lt;/a&gt;

Diss Amazon's hiring practices about puzzles. Need creativity, humility (hyperlink), maturity, good mind for business.</ns2:encoded>
  <ns0:post_id>614</ns0:post_id>
  <ns0:post_date>2012-10-02 11:55:56</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Plan to Learn</title>
  <link>http://codecraft.co/?p=630</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=630</guid>
  <ns2:encoded>fire bullets, then cannonballs

account for expertise that a team needs to develop

cf post about planning poker, and about voracious learning

what must be true for this to be a big success? (Not just what tasks need to be done.)</ns2:encoded>
  <ns0:post_id>630</ns0:post_id>
  <ns0:post_date>2012-10-03 09:15:35</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>app-level VMs, single purpose</title>
  <link>http://codecraft.co/?p=632</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=632</guid>
  <ns2:encoded>&lt;a href="http://www.wired.com/wiredenterprise/2012/06/crosby-bromium-microvisor"&gt;http://www.wired.com/wiredenterprise/2012/06/crosby-bromium-microvisor&lt;/a&gt;</ns2:encoded>
  <ns0:post_id>632</ns0:post_id>
  <ns0:post_date>2012-10-03 09:33:18</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>geek speak</title>
  <link>http://codecraft.co/?p=638</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=638</guid>
  <ns2:encoded>http://imgs.xkcd.com/comics/pointers.png

http://imgs.xkcd.com/comics/not_really_into_pokemon.png</ns2:encoded>
  <ns0:post_id>638</ns0:post_id>
  <ns0:post_date>2012-10-08 20:27:41</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  </item>
<item>
  <title>lack of central control - distributed architectures</title>
  <link>http://codecraft.co/?p=641</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=641</guid>
  <ns2:encoded>The internet gets along fine without central mgmt. http://imgs.xkcd.com/comics/secretary_part_1.png</ns2:encoded>
  <ns0:post_id>641</ns0:post_id>
  <ns0:post_date>2012-10-03 10:32:11</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Short-term Thinking</title>
  <link>http://codecraft.co/?p=659</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=659</guid>
  <ns2:encoded>Use the analogy of water rising.

Talk about corporate america always optimizing next quarter's profits.</ns2:encoded>
  <ns0:post_id>659</ns0:post_id>
  <ns0:post_date>2012-10-07 13:01:26</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Actor Systems</title>
  <link>http://codecraft.co/?p=661</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=661</guid>
  <ns2:encoded>For the past year or so, I've been pondering what biology tells us about building complex, self-balancing, self-correcting systems. I have found a new type of architecture to study.

application

classic client-server (COM)

n-tier (corba)

distributed but fragile (soap)

distributed and loose (rest)

actor systems: akka. See also http://labs.oracle.com/techrep/1994/smli_tr-94-29.pdf</ns2:encoded>
  <ns0:post_id>661</ns0:post_id>
  <ns0:post_date>2012-10-08 22:09:35</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>programmer skills</title>
  <link>http://codecraft.co/?p=693</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=693</guid>
  <ns2:encoded>http://www.starling-software.com/employment/programmer-competency-matrix.html</ns2:encoded>
  <ns0:post_id>693</ns0:post_id>
  <ns0:post_date>2012-10-12 14:36:31</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  </item>
<item>
  <title>mistake of overbuilding</title>
  <link>http://codecraft.co/?p=862</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=862</guid>
  <ns0:post_id>862</ns0:post_id>
  <ns0:post_date>2012-11-30 09:10:10</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>pragmatism vs. idealism</title>
  <link>http://codecraft.co/?p=864</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=864</guid>
  <ns2:encoded>Gene Hughson and the pragmatic pledge

Premature pragmatism not good, but mature is</ns2:encoded>
  <ns0:post_id>864</ns0:post_id>
  <ns0:post_date>2012-11-30 09:11:05</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>solid</title>
  <link>http://codecraft.co/?p=929</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=929</guid>
  <ns2:encoded>&lt;a href="http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)"&gt;http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&lt;/a&gt;</ns2:encoded>
  <ns0:post_id>929</ns0:post_id>
  <ns0:post_date>2013-01-14 14:13:50</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Henry Ford's horses</title>
  <link>http://codecraft.co/?p=930</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=930</guid>
  <ns2:encoded>If I had asked people what they wanted, they would have said a faster horse. --Henry Ford (quoted in in Start With Why, p. 60)</ns2:encoded>
  <ns0:post_id>930</ns0:post_id>
  <ns0:post_date>2013-01-14 14:15:58</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>cleancoders.com</title>
  <link>http://codecraft.co/?p=932</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=932</guid>
  <ns2:encoded>&lt;a href="http://www.cleancoders.com/"&gt;http://www.cleancoders.com&lt;/a&gt; -- videos about writing clean code</ns2:encoded>
  <ns0:post_id>932</ns0:post_id>
  <ns0:post_date>2013-01-14 14:42:20</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>gossip protocols</title>
  <link>http://codecraft.co/?p=954</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=954</guid>
  <ns2:encoded>&lt;a href="http://www.allthingsdistributed.com/2013/01/epidemics.html"&gt;http://www.allthingsdistributed.com/2013/01/epidemics.html&lt;/a&gt;</ns2:encoded>
  <ns0:post_id>954</ns0:post_id>
  <ns0:post_date>2013-01-25 09:30:59</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Architects Must Code</title>
  <link>http://codecraft.co/?p=984</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=984</guid>
  <ns2:encoded>http://c2.com/cgi/wiki?ArchitectsDontCode

My rule of always, always contributing code to every release.</ns2:encoded>
  <ns0:post_id>984</ns0:post_id>
  <ns0:post_date>2013-02-08 09:19:27</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  </item>
<item>
  <title>The MAYA Principle</title>
  <link>http://codecraft.co/?p=999</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=999</guid>
  <ns2:encoded>Maya = most advanced yet acceptable

the most advanced version that's clearly recognizable is the one people will prefer.

&amp;nbsp;</ns2:encoded>
  <ns0:post_id>999</ns0:post_id>
  <ns0:post_date>2013-02-15 09:48:35</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>architects must code</title>
  <link>http://codecraft.co/?p=1049</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1049</guid>
  <ns2:encoded>&lt;a href="http://www.linkedin.com/groups/Should-architects-continue-coding-doing-1835657.S.107493565?view=&amp;amp;srchtype=discussedNews&amp;amp;gid=1835657&amp;amp;item=107493565&amp;amp;type=member&amp;amp;trk=eml-anet_dig-b_mc-ttl-cn&amp;amp;ut=0ygKzRgmKhGlE1"&gt;http://www.linkedin.com/groups/Should-architects-continue-coding-doing-1835657.S.107493565?view=&amp;amp;srchtype=discussedNews&amp;amp;gid=1835657&amp;amp;item=107493565&amp;amp;type=member&amp;amp;trk=eml-anet_dig-b_mc-ttl-cn&amp;amp;ut=0ygKzRgmKhGlE1&lt;/a&gt;</ns2:encoded>
  <ns0:post_id>1049</ns0:post_id>
  <ns0:post_date>2013-03-12 17:53:58</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Refactoring shouldn't be dangerous</title>
  <link>http://codecraft.co/?p=1158</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1158</guid>
  <ns2:encoded>danger of doing nothing - mindset of fragility, design drifts further and further from ideal

house of cards idea

compare to swapping out a carburetor in car</ns2:encoded>
  <ns0:post_id>1158</ns0:post_id>
  <ns0:post_date>2013-05-15 09:41:20</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>shaping and the pigeon project</title>
  <link>http://codecraft.co/?p=1192</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1192</guid>
  <ns2:encoded>&lt;a href="http://en.wikipedia.org/wiki/Project_Pigeon"&gt;http://en.wikipedia.org/wiki/Project_Pigeon&lt;/a&gt;</ns2:encoded>
  <ns0:post_id>1192</ns0:post_id>
  <ns0:post_date>2013-06-14 14:07:12</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Code as hypertext</title>
  <link>http://codecraft.co/?p=4494</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=4494</guid>
  <ns2:encoded>If you had to pick one aspect of the web that was truly</ns2:encoded>
  <ns0:post_id>4494</ns0:post_id>
  <ns0:post_date>2014-02-12 21:36:56</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>ide innovation idea: codepaths</title>
  <link>http://codecraft.co/?p=5533</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5533</guid>
  <ns2:encoded>like lighttable--visualize paths through code based on input conditions</ns2:encoded>
  <ns0:post_id>5533</ns0:post_id>
  <ns0:post_date>2014-05-03 12:48:48</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>programming is a team sport</title>
  <link>http://codecraft.co/?p=5535</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5535</guid>
  <ns2:encoded>basketball--ball hog
lone wolf programmer with highly customized emacs can be "so productive" -- but nobody else on his team can duplicate the setup (guy who programs by voice)</ns2:encoded>
  <ns0:post_id>5535</ns0:post_id>
  <ns0:post_date>2014-05-03 12:50:02</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>security ideas</title>
  <link>http://codecraft.co/?p=5546</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5546</guid>
  <ns2:encoded>raise transaction costs for spreaders of porn (kind of like a reverse net neutrality where reputation governs)
why don't programming languages make it hard to write malware
accountability for programs
programs that definitively list what actions they are supposed to take, at time they are compiled -- profile of the program is tamper-proof -- part of the formal public interface of the program
   programs list phases, and which actions are legal in which phases
   programs register with a security service and notify it as they transition through phases
   programs that publish their security behavior as part of their build/test cycle
   programs that list whether they have to run as root or not
broken windows invite crime in real world
single-use programs; can only be run once and then must be re-built</ns2:encoded>
  <ns0:post_id>5546</ns0:post_id>
  <ns0:post_date>2014-05-07 22:36:19</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>the power of names</title>
  <link>http://codecraft.co/?p=5644</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5644</guid>
  <ns2:encoded>abbreviations, acronymns, and intent contractions</ns2:encoded>
  <ns0:post_id>5644</ns0:post_id>
  <ns0:post_date>2014-07-16 00:25:27</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Lines, Layouts, and Luddites</title>
  <link>http://codecraft.co/?p=5754</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5754</guid>
  <ns2:encoded>We're stuck on the idea of line numbers.

Poetry does that, but not scripture. It uses stanzas or sentences, because it's laid out differently in different media.

We need a way to refer to a specific place in code. In hypertext terms, we need anchors. Big files make this worse (small files are your friends). How much time do we spend trying to align comments to the left of member variables, to keep them pretty? How about re-flowing comments or code to keep it from being to long? Modern IDEs have auto format capabilities, but I know few programmers who use this feature regularly; there are always exceptions. We have to use fixed width fonts.

[caption id="attachment_5755" align="aligncenter" width="646"]&lt;a href="https://codecraft.co/wp-content/uploads/2014/07/screen-shot-2014-07-27-at-1-49-48-am.png"&gt;&lt;img class="size-large wp-image-5755" src="http://codecraft.co/wp-content/uploads/2014/07/screen-shot-2014-07-27-at-1-49-48-am.png?w=646" alt="typical kind layout in landscape mode" width="646" height="431" /&gt;&lt;/a&gt; typical kind layout in landscape mode[/caption]

&lt;a href="https://codecraft.co/wp-content/uploads/2014/07/screen-shot-2014-07-27-at-1-54-46-am.png"&gt;&lt;img src="http://codecraft.co/wp-content/uploads/2014/07/screen-shot-2014-07-27-at-1-54-46-am.png?w=646" alt="screen real estate at 640xsomething" width="646" height="454" class="aligncenter size-large wp-image-5756" /&gt;&lt;/a&gt;

&lt;a href="https://codecraft.co/wp-content/uploads/2014/07/screen-shot-2014-07-27-at-1-55-20-am.png"&gt;&lt;img src="http://codecraft.co/wp-content/uploads/2014/07/screen-shot-2014-07-27-at-1-55-20-am.png?w=646" alt="more realistic screen layout" width="646" height="320" class="aligncenter size-large wp-image-5757" /&gt;&lt;/a&gt;

These days, most of us work with monitors like this:

[caption width="640" align="aligncenter"]&lt;img src="https://farm4.staticflickr.com/3098/2657011662_d4a51e33d0_z.jpg" width="640" height="480" class /&gt; image credit: &lt;a target="_blank" href="https://www.flickr.com/photos/rob_cornelius/2657011662/sizes/z/"&gt;Rob 'n' Rae&lt;/a&gt; (Flickr)[/caption]

...or even like this:

[caption width="640" align="aligncenter"]&lt;img src="https://farm5.staticflickr.com/4154/5444004837_797a08d009_z.jpg" width="640" height="480" class /&gt; image credit: &lt;a target="_blank" href="https://www.flickr.com/photos/damnednice/5444004837/sizes/z/"&gt;tsilb&lt;/a&gt; (Flickr)[/caption]

Jobs demoing screen rotation on first iPhone.</ns2:encoded>
  <ns0:post_id>5754</ns0:post_id>
  <ns0:post_date>2014-07-27 02:20:41</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>How to Win a Design Debate</title>
  <link>http://codecraft.co/?p=5760</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5760</guid>
  <ns2:encoded>Fait Accompli

Nathan George: I don't disagree.</ns2:encoded>
  <ns0:post_id>5760</ns0:post_id>
  <ns0:post_date>2014-07-27 02:46:02</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>why not hungarian notation</title>
  <link>http://codecraft.co/?p=5796</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5796</guid>
  <ns2:encoded>&lt;p&gt;clutter/noise (make claim about semantic density from Yegge's rant; see intent ticket)&lt;/p&gt;&lt;p&gt;undermines templates&lt;/p&gt;&lt;p&gt;object-oriented, you don't have prefixes for those anyway&lt;/p&gt;&lt;p&gt;increases maintenance cost&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>5796</ns0:post_id>
  <ns0:post_date>2014-09-10 11:26:50</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  </item>
<item>
  <title>Thoughts on the nature of intelligence</title>
  <link>http://codecraft.co/?p=5925</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5925</guid>
  <ns2:encoded>http://www.npr.org/blogs/13.7/2014/11/21/365753466/artificial-intelligence-really-is-pseudo-intelligence</ns2:encoded>
  <ns0:post_id>5925</ns0:post_id>
  <ns0:post_date>2014-11-25 11:19:12</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  </item>
<item>
  <title>Help Me Applaud</title>
  <link>http://codecraft.co/?p=5953</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5953</guid>
  <ns2:encoded>It's Oscar season. A few minutes' drive from where I live, the &lt;a href="http://www.sundance.org/festivals/sundance-film-festival" target="_blank"&gt;Sundance Film Festival&lt;/a&gt; provides a venue for showing off the new and noteworthy; not long after, the glitterati will assemble at the &lt;a href="http://www.oscars.org" target="_blank"&gt;Academy Awards&lt;/a&gt; and clap and make speeches about last year's best work in film.

I think the hoopla is a bit overblown, but it highlights a genuine value: creative, passionate, and diligent work deserves some applause.

[caption width="640" align="aligncenter"]&lt;a href="https://www.flickr.com/photos/smoorenburg/3333391203/sizes/l"&gt;&lt;img src="https://farm4.staticflickr.com/3567/3333391203_0d91381ff4_z.jpg" width="640" height="427" class /&gt;&lt;/a&gt; image credit: smoorenburg (Flickr)[/caption]

Usually, when I see superb work in the software industry, it elicits little fanfare. This is a shame, and I want to fix it.

&lt;h3&gt;Why the awards we have aren't enough&lt;/h3&gt;

"We have an analog to the Oscars!" you might say. "We have the CODiE Awards, the European IT and Software Excellence Awards, the Software System Award from the ACM, the ESI Awards for Software Excellence, the Bossie Awards..."

Those are fine, but they don't satisfy me. Here's why:
&lt;!--more--&gt;

&lt;dl&gt;
&lt;dt&gt;The &lt;strong&gt;folks in the trenches don't have much of a voice&lt;/strong&gt;, because existing awards have an elaborate and expensive process for nominating and judging.&lt;/dt&gt;
&lt;dd&gt;How many testers or engineers have spare hours to fill out applications, spare cash for nomination fees, and spare creative cycles to polish demos for the pundits? Often, the best teams are the least available for this kind of thing.
&lt;/dd&gt;
&lt;dt&gt;The awards are &lt;strong&gt;win-lose&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Why do we allow only one winner? There is no limit on the number of superb codebases we can create...&lt;/dd&gt;
&lt;dt&gt;Most awards &lt;strong&gt;go to the owners of a product, not the builders of a technology&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Who accepts the award at the fancy banquet? The CEO? How many fancy crystal statuettes are in your buddy's cube across the hall?&lt;/dd&gt;
&lt;dt&gt;Because our industry is paranoid about intellectual property, &lt;strong&gt;source code, test scripts, and other ingredients are rarely reviewed for quality&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Some may argue that this is not a problem--quality engineering can be known by its outward trappings. If demos are cool and customers like it, it must be well built.&lt;/p&gt;
&lt;p&gt;I don't buy it. Imagine if J.D. Powers identified the year's best automobiles without ever peeking under the hood or even reading parts lists...&lt;/p&gt;
&lt;p&gt;Any engineer who has squirmed during a marketing spiel knows that the veneer of quality isn't trustworthy. Quality engineering does eventually make its mark, but you can only recognize it with confidence, from the outside, if you have more than a snapshot of data. In the short term--and there is no industry more addicted to the short term than software--cheating is possible, enticing, and endemic. (This is one of the bad behaviors addressed by the &lt;a href="http://trevharmon.com/conscious-business-ethics/" title="Conscious Business Ethics Manifesto" target="_blank"&gt;Conscious Business Ethics Manifesto&lt;/a&gt; that I recently signed.)&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3&gt;A better alternative&lt;/h3&gt;

I'd like to see awards that are meaningful, but not bureaucratic or expensive. I'd like lots of deserving folks get them. And I want those awards to be meaningful to the broader community.

To that end, I've established the Codecraft Awards. There are 3: a "Codecraft Opus" award for high-quality craft, a "Codecraft Crescendo" award for heroic improvement of something that's not an opus, and a "Codecraft Maestro" award for technical leadership/vision in the projects that lead to an Opus or a Crescendo. You can read more about the awards 

The requirements to qualify for nomination are straightforward, although they're not necessarily easy. Not all nominees will receive an award, but I hope many of them will.

You can probably complete 



</ns2:encoded>
  <ns0:post_id>5953</ns0:post_id>
  <ns0:post_date>2015-01-21 21:42:52</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Awards</title>
  <link>http://codecraft.co/awards/</link>
  <pubDate>Wed, 21 Jan 2015 05:03:54 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?page_id=5965</guid>
  <ns2:encoded>The Codecraft Awards recognize software--and its core contributors--for unusually high standards of design, implementation, testing, passion, and all-around workmanship. If you know an outstanding codebase, tell us about it, and let's celebrate the achievement together.

&lt;a href="http://codecraft.co/awards/categories/" title="Categories"&gt;What categories of Codecraft Award exist?&lt;/a&gt;
What does a Codecraft Award say about its recipient?
Why do these awards matter?
How does the nomination process work? 
I'd like to nominate a person or codebase.
</ns2:encoded>
  <ns0:post_id>5965</ns0:post_id>
  <ns0:post_date>2015-01-20 22:03:54</ns0:post_date>
  <ns0:post_name>awards</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>page</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Categories</title>
  <link>http://codecraft.co/awards/categories/</link>
  <pubDate>Wed, 21 Jan 2015 05:31:40 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?page_id=5971</guid>
  <ns2:encoded>&lt;strong&gt;Opus&lt;/strong&gt;

The Codecraft Opus Award recognizes a codebase for outstanding craftsmanship in most or all of the following areas: architecture/design, coding, testing, and delivery. It is shared jointly by those people "in the trenches" who contributed blood, sweat, and tears to build something great--and those contributors are named, along with their codebase, in the citation. Because it characterizes excellence during a specific calendar year, the same codebase may receive the award more than once.

&lt;strong&gt;Crescendo&lt;/strong&gt;

The Codecraft Crescendo Award exists because many of us have a big ball of mud to clean up before we can build something awesome--and the cleanup can exhibit its own kind of awesomeness. A Crescendo recognizes a dramatic uptick in code quality--a praiseworthy refactoring effort that moves the needle in ways that make a big difference to a team's morale and prospects. Like the Opus, both a codebase and its team receive the award. Unlike the Opus, it can't be awarded repeatedly to the same recipients; we don't get to refactor forever. :-)

&lt;strong&gt;Maestro&lt;/strong&gt;

The Codecraft Maestro Award recognizes an individual for providing skilled, unselfish, and impactful leadership to a team that receives an Opus or Crescendo award.

</ns2:encoded>
  <ns0:post_id>5971</ns0:post_id>
  <ns0:post_date>2015-01-20 22:31:40</ns0:post_date>
  <ns0:post_name>categories</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>page</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>switch_like_status</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>sharing_disabled</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Nominate</title>
  <link>http://codecraft.co/awards/nominate/</link>
  <pubDate>Wed, 21 Jan 2015 05:46:54 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?page_id=5975</guid>
  <ns2:encoded>After you've read the &lt;a href="http://codecraft.co/awards/categories/" title="Categories"&gt;Categories&lt;/a&gt; and &lt;a href="http://codecraft.co/awards/qualifications/"&gt;Qualifications&lt;/a&gt; pages, you can nominate a worthy feat of engineering for an award by filling out the form below. We'll email you back with a short survey and follow-up questions.

[contact-form][contact-field label='Your Name' type='name' required='1'/][contact-field label='Your Email' type='email' required='1'/][contact-field label='Nominee (codebase)' type='name'/][contact-field label='Nominated for Calendar Year' type='text'/][contact-field label='Nominated for Award Category' type='select' required='1' options='Opus -- superb codebase,Crescendo -- dramatic improvement'/][contact-field label='Comments' type='textarea' required='1'/][/contact-form] </ns2:encoded>
  <ns0:post_id>5975</ns0:post_id>
  <ns0:post_date>2015-01-20 22:46:54</ns0:post_date>
  <ns0:post_name>nominate</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>page</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_g_feedback_shortcode</ns0:meta_key>
    <ns0:meta_value>[contact-field label='Your Name' type='name' required='1'/][contact-field label='Your Email' type='email' required='1'/][contact-field label='Nominee (codebase)' type='name'/][contact-field label='Nominated for Calendar Year' type='text'/][contact-field label='Nominated for Award Category' type='select' required='1' options='Opus -- superb codebase,Crescendo -- dramatic improvement'/][contact-field label='Comments' type='textarea' required='1'/]</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_g_feedback_shortcode_atts_9d1e111ebd79fc64a5d1cc6ebd4cd04b4f651405</ns0:meta_key>
    <ns0:meta_value>a:17:{s:2:"to";s:24:"daniel.hardman@gmail.com";s:7:"subject";s:20:"[Codecraft] Nominate";s:12:"show_subject";s:2:"no";s:6:"widget";i:0;s:14:"block_template";N;s:19:"block_template_part";N;s:2:"id";i:5975;s:18:"submit_button_text";s:6:"Submit";s:14:"customThankyou";s:0:"";s:21:"customThankyouHeading";s:26:"Your message has been sent";s:21:"customThankyouMessage";s:30:"Thank you for your submission!";s:22:"customThankyouRedirect";s:0:"";s:10:"jetpackCRM";b:1;s:9:"className";N;s:9:"postToUrl";N;s:14:"salesforceData";N;s:12:"hiddenFields";N;}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_g_feedback_shortcode_9d1e111ebd79fc64a5d1cc6ebd4cd04b4f651405</ns0:meta_key>
    <ns0:meta_value>[contact-field label='Your Name' type='name' required='1'/][contact-field label='Your Email' type='email' required='1'/][contact-field label='Nominee (codebase)' type='name'/][contact-field label='Nominated for Calendar Year' type='text'/][contact-field label='Nominated for Award Category' type='select' required='1' options='Opus -- superb codebase,Crescendo -- dramatic improvement'/][contact-field label='Comments' type='textarea' required='1'/]</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_g_feedback_shortcode_fdeaa7105fc82e689c23694629cd5d3a403e0120</ns0:meta_key>
    <ns0:meta_value>[contact-field label='Your Name' type='name' required='1'/][contact-field label='Your Email' type='email' required='1'/][contact-field label='Nominee (codebase)' type='name'/][contact-field label='Nominated for Calendar Year' type='text'/][contact-field label='Nominated for Award Category' type='select' required='1' options='Opus -- superb codebase,Crescendo -- dramatic improvement'/][contact-field label='Comments' type='textarea' required='1'/]</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_g_feedback_shortcode_atts_fdeaa7105fc82e689c23694629cd5d3a403e0120</ns0:meta_key>
    <ns0:meta_value>a:17:{s:2:"to";s:24:"daniel.hardman@gmail.com";s:7:"subject";s:20:"[Codecraft] Nominate";s:12:"show_subject";s:2:"no";s:6:"widget";i:0;s:14:"block_template";N;s:19:"block_template_part";N;s:2:"id";i:5975;s:18:"submit_button_text";s:6:"Submit";s:14:"customThankyou";s:0:"";s:21:"customThankyouHeading";s:26:"Your message has been sent";s:21:"customThankyouMessage";s:30:"Thank you for your submission!";s:22:"customThankyouRedirect";s:0:"";s:10:"jetpackCRM";b:1;s:9:"className";N;s:9:"postToUrl";N;s:14:"salesforceData";N;s:12:"hiddenFields";N;}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Qualifications</title>
  <link>http://codecraft.co/awards/qualifications/</link>
  <pubDate>Wed, 21 Jan 2015 06:14:13 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?page_id=5978</guid>
  <ns2:encoded>&lt;h3&gt;Opus&lt;/h3&gt;

Nominees for the Codecraft Opus Award must be codebases with the following characteristics:

&lt;ul&gt;
&lt;li&gt;Solves a hard problem of recognized value. (Doesn't have to deliver world peace, but can't be something frivolous like Angry Birds.)&lt;/li&gt;
&lt;li&gt;Has released publicly, at least once.&lt;/li&gt;
&lt;li&gt;Has delighted the whole value chain (engineers, business folks, and customers/users).&lt;/li&gt;
&lt;li&gt;Has 3 or more active contributors. (Could be coders, testers, etc).&lt;/li&gt;
&lt;li&gt;Has substantial size. (For example, thousands of lines of code).&lt;/li&gt;
&lt;li&gt;Demonstrates unusual craftsmanship in most or all of the following areas: architecture/design, implementation, testing, delivery. Nominees will need to provide evidence of characters such as:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Exhibits clean, consistent encapsulation.&lt;/li&gt;
&lt;li&gt;Is well organized, named, commented, and documented.&lt;/li&gt;
&lt;li&gt;Hides complexity appropriately.&lt;/li&gt;
&lt;li&gt;Has a comprehensive test automation strategy.&lt;/li&gt;
&lt;li&gt;Uses continuous integration and continuous delivery.&lt;/li&gt;
&lt;li&gt;Has few bugs / is highly stable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Crescendo&lt;/h3&gt;

Nominees for the Codecraft Crescendo Award must be codebases with the following characteristics:

&lt;ul&gt;
&lt;li&gt;Like an Opus nominee, solves a hard problem of recognized value, has released publicly, has 3 or more active contributors, and has substantial size.&lt;/li&gt;
&lt;li&gt;Has one or more long-standing, systemic problems that have created significant frustration throughout the value chain.&lt;/li&gt;
&lt;li&gt;Has been the target of an organized effort by multiple people to move the needle toward greater quality in important ways.&lt;/li&gt;
&lt;li&gt;Has multiple metrics that demonstrate that the effort to improve has yielded impressive results.&lt;/li&gt;
&lt;li&gt;Can demonstrate that the efforts have delighted key stakeholders.&lt;/li&gt;
&lt;/ul&gt;

</ns2:encoded>
  <ns0:post_id>5978</ns0:post_id>
  <ns0:post_date>2015-01-20 23:14:13</ns0:post_date>
  <ns0:post_name>qualifications</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>page</ns0:post_type>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>The ideal logging system</title>
  <link>http://codecraft.co/?p=6059</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=6059</guid>
  <ns0:post_id>6059</ns0:post_id>
  <ns0:post_date>2015-04-18 11:04:42</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
</item>
<item>
  <title>On Idealism</title>
  <link>http://codecraft.co/?p=6061</link>
  <pubDate>Sat, 18 Apr 2015 17:25:06 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=6061</guid>
  <ns2:encoded>Is it better to be idealistic or pragmatic?

For years, I've wrestled with the tension between these two values  recently read a thought-provoking book called &lt;em&gt;Orthodoxy&lt;/em&gt;, by G. K. Chesterton. As the title suggests, the book is religious. This blog is about professional topics, and I won't delve into Christian apologetics here, but the book raised an interesting philosophical question that bears directly on 
</ns2:encoded>
  <ns0:post_id>6061</ns0:post_id>
  <ns0:post_date>2015-04-18 11:25:06</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
</item>
<item>
  <title>pick the right defaults</title>
  <link>http://codecraft.co/?p=6109</link>
  <pubDate>Tue, 14 Jul 2015 21:08:40 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=6109</guid>
  <ns2:encoded>Hoare's billion dollar mistake: nullable by default

Pointers nullable by default

switch statement falls through by default

#pragma once should be the default</ns2:encoded>
  <ns0:post_id>6109</ns0:post_id>
  <ns0:post_date>2015-07-14 15:08:40</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
</item>
<item>
  <title>introducing jcircuit - practical, reusable circuit breakers</title>
  <link>http://codecraft.co/?p=6286</link>
  <pubDate />
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=6286</guid>
  <ns2:encoded>I've written a &lt;a href="https://codecraft.co/2013/01/11/dont-forget-the-circuit-breakers/"&gt;time&lt;/a&gt; or &lt;a href="https://codecraft.co/2013/05/06/why-your-software-should-cry/"&gt;two&lt;/a&gt; about the need for mechanisms to handle runaway errors. Circuit breakers are a design pattern that I first encountered in Michael Nygard's &lt;em&gt;Release It!&lt;/em&gt;, and I have seen lots of situations where they are needed. In fact, the more gray hairs I accumulate, the more I think they're crucial.

Recently, I had a project with no well defined error handling strategy, and I took some time to include circuit breakers, done right. In the past, I'd always kludged the pattern; this was my chance to do it formally, in a way that was reusable and well encapsulated.

The result is &lt;a href="https://dhh1128.github.io/jcircuit/" target="_blank"&gt;jcircuit&lt;/a&gt;--a simple java library with reasonable &lt;a href="https://dhh1128.github.io/jcircuit/apidocs/index.html"&gt;docs&lt;/a&gt; and tests, no special dependencies, and a nice performance profile. It's on &lt;a href="https://github.com/dhh1128/jcircuit"&gt;github&lt;/a&gt;, and it's published with an MIT license on &lt;a href="https://search.maven.org/#artifactdetails%7Cco.codecraft%7Cjcircuit%7C1.0%7Cjar"&gt;maven central&lt;/a&gt;. Please download, share, and contribute back (if you develop cool enhancements).

&lt;strong&gt;Lessons Learned&lt;/strong&gt;

Although the final product is satisfying, my journey to implementation was surprisingly difficult, so I wanted to share what I learned along the way.

Lesson 1: the complexity's in the policy

As I tried to develop a mental model for circuit breakers and their interfaces, I listed a bunch of use cases: break a circuit if we run out of disk space, or if we fail more than X% of the time, or if we fail more than Y times in a row, or if the network goes down, or...

What I realized was that the state machine, and the general behavior of circuit breakers, didn't vary in any of these use cases. But the transition criteria did. Thus I moved to a model where the CircuitBreaker class takes a plugin TransitionPolicy. It's in the TransitionPolicy that all interesting customization happens.

Lesson 2: two basic types of transition

More experience made me realize that all my use cases fell into two general categories: either I wanted to transition based on how successful I was at completing normal work ("open the circuit if I fail more than X% of the time", "open the circuit if I fail more than Y times in a row"), or based on some external signal in the environment ("open the circuit if I run out of disk space"

Lesson 2: beware bottlenecks

Several of the use cases that I had in mind as I designed my circuit breakers had what you might call "aggressive concurrency" -- dozens or hundreds of threads, and virtual "circuits" that might be pulsed hundreds of thousands of times a second, from anywhere in the system. Think of a circuit breaker to handle problems in logging, for example... The obvious way to protect the one-and-only internal state of a circuit breaker was to use a mutex. But I quickly realized that if I went down that path, I would be introducing a new bottleneck in the system; my error handling strategy would bog down the very system it was trying to enable, and become a new single point of failure.

The final jcircuit solution has no mutexes at all. Instead, it makes clever use of atomics. This mechanism isn't free, either--but it's much lighter than mutexes. And the cleverness I'm claiming makes even the atomics a lot lighter than you might guess.

As my thinking coalesced around my final solution, I began to see clearly that my performance concerns were &lt;em&gt;all&lt;/em&gt; tied to concurrency. It turns out that in a single-threaded world, testing the circuit is as cheap as a single conditional, and there's no need corollary to this lesson is that circuit breakers are way more interesting in a concurrent environment. I had initially expected my circuit breaker interface to be identical, regardless of whether it was used in single- or multi-threaded code. But after a bit of work, I proved to my own satisfaction that they're two different beasts, entirely. In single-threaded code, a circuit breaker ends up just being a conditional that checks state; in multithreaded code, there's more to the story.

Lesson 2: latency is okay

This might seem like an odd conclusion, but I feel like I had an epiphany when I realized that circuit breakers aren't required to be perfectly crisp. The reason is that circuit breakers are a prop or enhancement of a primary error handling strategy, not a replacement for it--and that error handling strategy can compensate briefly for latency in a circuit breaker.

Example: suppose you want to stop logging to disk when the disk fills up.</ns2:encoded>
  <ns0:post_id>6286</ns0:post_id>
  <ns0:post_date>2016-05-09 15:32:09</ns0:post_date>
  <ns0:status>draft</ns0:status>
  <ns0:post_type>post</ns0:post_type>
</item>
<item>
  <title>Good Code Is Balanced</title>
  <link>http://codecraft.co/2012/08/27/good-code-is-balanced/</link>
  <pubDate>Mon, 27 Aug 2012 16:55:49 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.wordpress.com/?p=279</guid>
  <ns2:encoded>In my &lt;a href="/2012/08/26/what-is-good-code/"&gt;first post about what constitutes "good code,"&lt;/a&gt; I claimed we were dealing with a complex question. This is why I distrust short answers.

So many competing concerns must be balanced to achieve goodness:
&lt;ul&gt;
	&lt;li&gt;Testability&lt;/li&gt;
	&lt;li&gt;Maintainability&lt;/li&gt;
	&lt;li&gt;Short-term revenue pressures&lt;/li&gt;
	&lt;li&gt;Long-term strategic value&lt;/li&gt;
	&lt;li&gt;Performance (many aspects)&lt;/li&gt;
	&lt;li&gt;Scalability (up, down, across)&lt;/li&gt;
	&lt;li&gt;Ease of use&lt;/li&gt;
	&lt;li&gt;Supportability&lt;/li&gt;
	&lt;li&gt;Conceptual integrity&lt;/li&gt;
	&lt;li&gt;Alignment with the skills, temperament, interests, and tools of the team that owns it&lt;/li&gt;
	&lt;li&gt;Cost vs. benefit (for some problems, quick and dirty is definitely "right")&lt;/li&gt;
	&lt;li&gt;Simplicity (separation of concerns)&lt;/li&gt;
&lt;/ul&gt;
More items undoubtedly belong on the list. Quite a balancing act!

[caption id="" align="aligncenter" width="320"]&lt;a href="http://www.flickr.com/photos/jaytkendall/2991130266/"&gt;&lt;img class=" " title="Balancing Act" src="http://farm4.staticflickr.com/3193/2991130266_7f315f456b_n.jpg" alt="" width="320" height="240" /&gt;&lt;/a&gt; Someone's got this "balance" thing down! Photo credit: joãokẽdal (Flickr).[/caption]
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Pick a module, application, or subsystem that you know well, and grade its code according to how much its coders emphasize a few different dimensions (e.g., performance, testability, scalability, ease of use). Do you like the balance? Are any attributes being neglected?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>279</ns0:post_id>
  <ns0:post_date>2012-08-27 09:55:49</ns0:post_date>
  <ns0:post_name>good-code-is-balanced</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="optimization">optimization</category>
  <category domain="post_tag" nicename="performance">performance</category>
  <category domain="post_tag" nicename="scalability">scalability</category>
  <category domain="post_tag" nicename="simplicity">simplicity</category>
  <category domain="post_tag" nicename="supportability">supportability</category>
  <category domain="post_tag" nicename="testability">testability</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>536</ns0:comment_id>
    <ns0:comment_author>Earned Pragmatism &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/01/18/earned-pragmatism/</ns0:comment_author_url>
    <ns0:comment_date>2013-01-18 08:53:32</ns0:comment_date>
    <ns0:comment_content>[...] you can be a pragmatist, you have to understand what&amp;#8217;s possible, what&amp;#8217;s good and bad about each alternative, and why certain considerations might trump others given a certain business context and time [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>318</ns0:comment_id>
    <ns0:comment_author>Metrics, Plumb Lines, and System Thinking &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2012/11/12/measurements-plumb-lines-and-system-thinking/</ns0:comment_author_url>
    <ns0:comment_date>2012-11-12 08:37:28</ns0:comment_date>
    <ns0:comment_content>[...] I&amp;#8217;m also a big believer in balance, as I&amp;#8217;ve written about before. Good software balances many considerations. [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>497</ns0:comment_id>
    <ns0:comment_author>3 Commandments of Performance Optimization &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/01/08/3-commandments-of-performance-optimization/</ns0:comment_author_url>
    <ns0:comment_date>2013-01-08 09:08:29</ns0:comment_date>
    <ns0:comment_content>[...] On the other hand, it is possible to be too passionate about performance; optimizing the performance of the dev team (by decreasing coding and testing time) is often a better business choice than optimizing execution speed in ways that make code more complex and harder to verify. I have encountered performance zealots disqualifying a perfectly good design on the grounds that it&amp;#8217;s not performant enough in a use case that only 2 customers on the entire planet would ever care about. Not smart. As I&amp;#8217;ve said many times, good code is balanced. [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>800</ns0:comment_id>
    <ns0:comment_author>Are You Losing Enough Battles? | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/03/05/are-you-losing-enough-battles/</ns0:comment_author_url>
    <ns0:comment_date>2013-03-05 08:35:59</ns0:comment_date>
    <ns0:comment_content>[...] It means we&amp;#8217;re grounded in reality rather than ivory tower imagination. It means we value balance and pragmatism over theoretical perfection, and it helps build a healthy regard for the needs of [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>661</ns0:comment_id>
    <ns0:comment_author>Smart Geeks Think Like Cheerleaders &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/02/05/smart-geeks-think-like-cheerleaders/</ns0:comment_author_url>
    <ns0:comment_date>2013-02-05 08:57:45</ns0:comment_date>
    <ns0:comment_content>[...] We champion the ideal implementation, programming language, product schedule, or architecture&amp;#8211;so much so that we lose momentum or balance. [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>831</ns0:comment_id>
    <ns0:comment_author>6 Strategies to Simplify Software | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/03/12/6-strategies-to-simplify-software/</ns0:comment_author_url>
    <ns0:comment_date>2013-03-12 08:57:26</ns0:comment_date>
    <ns0:comment_content>[...] and that it undergirds many deep architectural breakthroughs. In posts about pragmatism and balance, I&amp;#8217;ve quoted Oliver Wendell Holmes about the simplicity on the other side of [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2994</ns0:comment_id>
    <ns0:comment_author>Add some more extra redundancy again | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/01/15/add-some-more-extra-redundancy-again/</ns0:comment_author_url>
    <ns0:comment_date>2014-01-15 08:39:39</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] has a cost. We need to use it judiciously; good code balances many considerations. Nonetheless, I think pondering the issues above is likely to improve the robustness and aptness of [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2251</ns0:comment_id>
    <ns0:comment_author>2 Surprising Truths About The Iron Triangle | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/07/01/2-surprising-truths-about-the-iron-triangle/</ns0:comment_author_url>
    <ns0:comment_date>2013-07-01 16:39:02</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] value chain will align. You&amp;#8217;ll create virtuous cycles that perpetuate the right kinds of tradeoffs for performance, scalability, and [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2432</ns0:comment_id>
    <ns0:comment_author>Features are not chunks of code | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/07/25/features-are-not-chunks-of-code/</ns0:comment_author_url>
    <ns0:comment_date>2013-07-25 11:19:54</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] A final lesson of the feature metaphor is that it&amp;#8217;s possible to have too much of a good thing. Two beautiful eyes might lure a mate; three, not so much. Balance and proportion matter. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>6627</ns0:comment_id>
    <ns0:comment_author>Lacunas Everywhere | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/16/lacunas-everywhere/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-16 13:58:46</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] what machine code gets put in a binary&amp;#8211;even though the discipline of software development subsumes many other concerns. If you&amp;#8217;re hoping to solve human problems, your coding tools are crippled by the narrow scope [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Good Code Is Optimized</title>
  <link>http://codecraft.co/2012/08/27/good-code-is-optimized/</link>
  <pubDate>Mon, 27 Aug 2012 17:15:13 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.wordpress.com/?p=283</guid>
  <ns2:encoded>&lt;p style="text-align:right;"&gt;&lt;em&gt;(Another post in my "&lt;a href="/2012/08/26/what-is-good-code/"&gt;What is 'Good Code'?&lt;/a&gt;" series...)&lt;/em&gt;&lt;/p&gt;
Yes, optimized.

But for what?

A lot of programmers seem to think that raw speed of execution is the only possible answer. If pushed, they may admit it's also possible to optimize for minimal memory usage or minimal size of executable. Compilers have switches for that.

[caption id="" align="alignright" width="320"]&lt;a href="http://www.flickr.com/photos/lel4nd/6062809527/"&gt;&lt;img class=" " title="think outside the box..." src="http://farm7.staticflickr.com/6086/6062809527_fff6c530e4_n.jpg" alt="" width="320" height="213" /&gt;&lt;/a&gt; Get out of the box. Photo credit: lel4nd (Flickr).[/caption]

Emerson said, "A foolish consistency is the hobgoblin of little minds." In modern terms, he was deploring the lazy instinct to accept established wisdom instead of thinking outside the box. And I think optimization is one of those topics where we need a larger vision.

What about optimizing for:
&lt;ul&gt;
	&lt;li&gt;Speed of coding (sometimes programmer time is the most constrained resource...)?&lt;/li&gt;
	&lt;li&gt;Ease of use (often, low learning curve and productive users outweighs all other factors...)?&lt;/li&gt;
	&lt;li&gt;Speed of testing (sometimes provably correct is the most important success criterion...)?&lt;/li&gt;
	&lt;li&gt;Full utilization (the major promise of physical-to-virtual-to-cloud migration)?&lt;/li&gt;
	&lt;li&gt;Ease of understanding and maintenance?&lt;/li&gt;
	&lt;li&gt;Integration with external systems?&lt;/li&gt;
&lt;/ul&gt;
Selecting the criteria against which you optimize is more than a technical question. It's a strategic one, driven by business and organizational goals. Programmers who relentlessly pursue speed of execution to the exclusion of other considerations are not doing their teams or their companies a favor.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Optimize one function for ease of understanding and maintenance. Make a short list of how your choices were different than they might have been if you optimized for speed of execution.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>283</ns0:post_id>
  <ns0:post_date>2012-08-27 10:15:13</ns0:post_date>
  <ns0:post_name>good-code-is-optimized</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="integration">integration</category>
  <category domain="post_tag" nicename="maintenance">maintenance</category>
  <category domain="post_tag" nicename="optimization">optimization</category>
  <category domain="post_tag" nicename="scalability">scalability</category>
  <category domain="post_tag" nicename="testability">testability</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>14325</ns0:comment_id>
    <ns0:comment_author>&amp;#8220;Rockstar Developers&amp;#8221; are a dangerous myth | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/03/04/rockstars/</ns0:comment_author_url>
    <ns0:comment_date>2015-03-05 20:15:34</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] build is usually way more important than inventing a new and mind-bending algorithm. Addressing the need of your business to make a profit is usually a good idea, too. Perhaps the vast residual work is what Thomas Edison had in mind when [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Good Code Is Named Right</title>
  <link>http://codecraft.co/2012/08/28/good-code-is-named-right/</link>
  <pubDate>Tue, 28 Aug 2012 17:01:51 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.wordpress.com/?p=294</guid>
  <ns2:encoded>&lt;p style="text-align:right;"&gt;&lt;em&gt;&lt;span style="color:#404040;"&gt;(Another post in my "&lt;a title="What Is “Good Code”?" href="/2012/08/26/what-is-good-code/"&gt;What is 'Good Code'?&lt;/a&gt;" series...)&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
A rose by any other name may smell as sweet, but in software, the names you choose have consequences.

[caption id="" align="alignright" width="240"]&lt;a href="http://www.flickr.com/photos/johnnystiletto/51430866/"&gt;&lt;img title="rosa berberifolia" src="http://farm1.staticflickr.com/28/51430866_94b353ee35_m.jpg" alt="" width="240" height="225" /&gt;&lt;/a&gt; Rosa berberifolia. Photo credit: I Believe I Can Fry (Flickr).[/caption]

Names can confuse or cohere. In &lt;em&gt;The Mythical Man-Month&lt;/em&gt;, Fred Brooks emphasizes the need for code to have "conceptual integrity." He means that code that should embody a unifying and consistent vision, with minimal distraction or dissonance. Names of classes, functions, applications, interfaces, resources in RESTful URLs -- all are a reflection of the code's cohesiveness or its chaos.

I once worked with an engineer who liked to pull variable names out of the random hopper at the top of his brain: "apple", "banana", "ick"... Although his code provoked an occasional snort of amusement, it didn't do much to guide later readers into a productive mindset.

One way I can distinguish a mediocre engineer from a great one is by the quality of their language--particularly, the names she or he chooses. Mediocre engineers are sloppy and inconsistent in their names, because they undervalue the way their code communicates to human beings. Mediocre engineers think that comments are for humans, and code is for computers. Code, like java or C++ or ruby, doesn't communicate to computers at all, folks; it has to be turned into op-codes and 1s and 0s before a computer can use it! Code is &lt;em&gt;human language&lt;/em&gt;. Comments are like parenthetical asides in normal human speech -- needed occasionally, but annoying if they restate the obvious and distract from flow.

Good engineers understand this. It bothers them if something is called a "Controller" in the code, but it fails to implement IController. It bothers them if .ReadLine() doesn't always read a line of text from a file; when they run across such a function, they are prone to rename it ReadUpToAFullLine() so the function's semantics are obvious. If they implement a method that calculates a standard deviation, they are likely to name it something like calcStandardDeviation() instead of stdv() or calc(). (This is not about naming conventions, BTW. I don't have a problem with short forms or whatever casing convention you prefer; I'm just emphasizing clarity.) Code from great engineers says what they mean, and means what they say. Notice how Martin Fowler (a great engineer) takes this for granted as he discusses an appropriate name for a class in &lt;em&gt;Refactoring&lt;/em&gt;:
&lt;blockquote&gt;Does the price class represent an algorithm for calculating the price (in which case I prefer to call it Pricer or PricingStrategy), or does it represent a state of the movie (&lt;em&gt;Star Trek X&lt;/em&gt; is a new release). At this stage the choice of pattern (and name) reflects how you want to think about the structure. At the moment I'm thinking about this as a state of a movie. If I later decide a strategy communicates my intention better, I will refactor to do this by changing the names.&lt;/blockquote&gt;
Somewhere (maybe Scott Meyers?) I remember reading an expert's lament about people naming classes FooManager, BarManager, etc. His point was that "Manager" says little or nothing about the class's responsibilities. I agree (although I must admit I've written a few XManager classes in my time :-).

Truly&lt;em&gt; great&lt;/em&gt; engineers take the language insight of good engineers one step further. Not only do they want clear and consistent names--they want their code to resonate to a unifying metaphor.

In the early days of ecommerce (I was writing CC processing stuff in about 1996), nobody talked about "shopping carts." You just wrote code that accepted credit cards, and you kept track of what the user wanted to buy until they were ready to pay. You accumulated customer state in your session, or maybe your db, in whatever way you could cobble together. Messy. Once the shopping cart metaphor was introduced, it was easy to see how you could let a customer change quantities at the last minute, handle partial payments with different cards, apply discounts and coupons, and so forth.

The power of metaphor in code is so pervasive that it may be invisible unless you're looking for it. Good metaphor leaks from coders to their managers and marketers and support staff and tech writers--and because it explains so much, so clearly and concisely, the audience gloms onto it immediately. From there it leaks out to customers and the blogosphere, and we start taking it for granted. Which says more to you: "a software application that lets you pretend to be running a full OS with simulated hardware" or "virtual machine"? How about "self-replicating program that subverts the normal purpose of software" or "virus"?
&lt;p style="text-align:center;padding-left:30px;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Find a place in code where comments are compensating for a class, function, or variable with a less-than-ideal name, and fix it.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p style="text-align:center;padding-left:30px;"&gt;&lt;span style="color:#000080;"&gt;&lt;strong&gt;Extra Credit&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Find a place in code where you have a weak or inconsistent metaphor. List implications of that metaphor problem. Brainstorm improvements; if one of the improvements seems particularly helpful, implement it.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>294</ns0:post_id>
  <ns0:post_date>2012-08-28 10:01:51</ns0:post_date>
  <ns0:post_name>good-code-is-named-right</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="language">language</category>
  <category domain="post_tag" nicename="metaphor">metaphor</category>
  <category domain="post_tag" nicename="naming">naming</category>
  <category domain="post_tag" nicename="rest">REST</category>
  <category domain="post_tag" nicename="semantics">semantics</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>twitter_cards_summary_img_size</ns0:meta_key>
    <ns0:meta_value>a:7:{i:0;i:240;i:1;i:225;i:2;i:2;i:3;s:24:"width="240" height="225"";s:4:"bits";i:8;s:8:"channels";i:3;s:4:"mime";s:10:"image/jpeg";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>9267</ns0:comment_id>
    <ns0:comment_author>Exploring the Power of Deixis | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/09/23/exploring-the-power-of-deixis/</ns0:comment_author_url>
    <ns0:comment_date>2014-09-23 08:35:03</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] than one name for the same item), because they understand that names may be temporary, and that some names are more intrinsic than others. Again, a programming ecosystem could facilitate [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>A Quibble With Martin's "Optimize Later" Notion</title>
  <link>http://codecraft.co/2012/08/28/a-quibble-with-martins-optimize-later-notion/</link>
  <pubDate>Tue, 28 Aug 2012 19:29:23 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://techknowledgeme.wordpress.com/?p=302</guid>
  <ns2:encoded>In &lt;a href="http://martinfowler.com/books/#refactoring" target="_blank"&gt;&lt;em&gt;Refactoring&lt;/em&gt;&lt;/a&gt;, Martin Fowler (a brilliant engineer whom I greatly admire) articulates an idea that I have heard from smart engineers for a long time: &lt;em&gt;first make it work, then make it fast&lt;/em&gt;. He puts it this way:
&lt;blockquote&gt;"Until I profile I cannot tell how much time is needed for the loop to calculate or whether the loop is called often enough for it to affect the overall performance of the system. Don't worry about this while refactoring. When you optimize you will have to worry about it, but you will then be in a much better position to do something about it, and you will have more options to optimize effectively."&lt;/blockquote&gt;
I mostly agree. Certainly, premature optimization can cause lots of problems (pollute an otherwise clean design, overvalue corner cases, dilute conceptual integrity), and profiler-driven optimization (science, not black magic!) is the way to get the best results. Donald Knuth famously observed that "premature optimization is the root of all evil" -- a bit over the top, maybe, yet true often enough to give me fits.

But implicit in Fowler's advice are the following problematic notions:
&lt;ul&gt;
	&lt;li&gt;Optimization is a discrete activity from ordinary coding. Especially, it is discrete from refactoring.&lt;/li&gt;
	&lt;li&gt;Between the time that you code an original or refactored version, and the time you optimize, the existence of unoptimized code will have negligible effect on how the rest of the code's ecosystem evolves.&lt;/li&gt;
&lt;/ul&gt;
The flaws in the first notion should be obvious; optimization often requires concommitant refactoring. I won't beat that dead horse here. The second idea, however, deserves further comment.

[caption id="" align="aligncenter" width="500"]&lt;a href="http://xkcd.com/173/" target="_blank"&gt;&lt;img alt="" src="http://imgs.xkcd.com/comics/movie_seating.png" width="500" height="571" /&gt;&lt;/a&gt; Sometimes the only time to optimize is before decisions get made :-). Image credit: xkcd[/caption]

Before you get around to optimizing, what happens if programmers go looking for an API that does X, find your works-correctly-but-suboptimally function, and wrinkle their nose. "Code smell!" they cry. And they write their own function that does a binary rather than linear search, etc. They don't have time to investigate whether the original version was coded that way for a reason (and thus should simply be refactored); they just need something that works AND that is fast, and your function doesn't cut it.

I have seen this happen over and over and over again. Late optimization, while smart in many cases, must be managed (communicated, commented, evangelized, trained, reinforced, audited, planned for) carefully or else it will provoke a lot of NIH and contempt from (ironically) less savvy programmers. Result: more guck that needs refactoring.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Find a notoriously sub-optimized function in your code. Study how its existence in non-optimal form has influenced how other code has evolved.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.antognini.ch/2013/03/premature-optimization/" target="_blank"&gt;Premature Optimization&lt;/a&gt; (antognini.ch)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://michaelfeathers.typepad.com/michael_feathers_blog/2013/01/refactoring-is-sloppy.html" target="_blank"&gt;Refactoring is Sloppy&lt;/a&gt; (michaelfeathers.typepad.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>302</ns0:post_id>
  <ns0:post_date>2012-08-28 12:29:23</ns0:post_date>
  <ns0:post_name>a-quibble-with-martins-optimize-later-notion</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="early-optimization">early optimization</category>
  <category domain="post_tag" nicename="late-optimization">late optimization</category>
  <category domain="post_tag" nicename="nih">NIH</category>
  <category domain="post_tag" nicename="optimization">optimization</category>
  <category domain="post_tag" nicename="refactoring">refactoring</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>496</ns0:comment_id>
    <ns0:comment_author>3 Commandments of Performance Optimization &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/01/08/3-commandments-of-performance-optimization/</ns0:comment_author_url>
    <ns0:comment_date>2013-01-08 09:08:25</ns0:comment_date>
    <ns0:comment_content>[...] I don&amp;#8217;t think either of these extremes is healthy in all cases. I have seen programmers who chronically think about performance too late,  creating large refactoring burdens and sabotaging their company&amp;#8217;s success. Sometimes when you go from &amp;#8220;make it work&amp;#8221; to &amp;#8220;make it fast&amp;#8221; you find that all your original work is a waste, because a totally different design (even different tests, conceivably) is the only way forward; I wrote about this in &amp;#8220;A Quibble with Martin&amp;#8217;s &amp;#8216;Optimize Later&amp;#8217; Notion&amp;#8220;. [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Good Code Plans for Problems</title>
  <link>http://codecraft.co/2012/09/03/good-code-plans-for-problems/</link>
  <pubDate>Mon, 03 Sep 2012 17:43:19 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=350</guid>
  <ns2:encoded>&lt;p style="text-align:right;"&gt;&lt;em&gt;(Another post in my "&lt;a title="What Is “Good Code”?" href="/2012/08/26/what-is-good-code/"&gt;What is 'Good Code'?&lt;/a&gt;" series...)&lt;/em&gt;&lt;/p&gt;
What should you do when software doesn't work the way you expect?

[caption id="attachment_360" align="aligncenter" width="500"]&lt;a href="http://www.epicfail.com/2009/04/18/president-bush-fail/"&gt;&lt;img class="size-full wp-image-360" title="bush-fail" src="http://codecraft.co/wp-content/uploads/2012/09/bush-fail.jpg" alt="" width="500" height="458" /&gt;&lt;/a&gt; Surprising behavior. Photo credit: epicfail.com.[/caption]

You have to have a plan. The plan could bring one (or several) of the following strategies to bear:
&lt;ul&gt;
	&lt;li&gt;Reject bad input as early as possible using preconditions.&lt;/li&gt;
	&lt;li&gt;Get garbage in, put garbage out.&lt;/li&gt;
	&lt;li&gt;Throw an exception and make it someone else's problem.&lt;/li&gt;
	&lt;li&gt;Return a meaningful error.&lt;/li&gt;
	&lt;li&gt;Log the problem.&lt;/li&gt;
&lt;/ul&gt;
These choices are not equally good, IMO, and there are times when each is more or less appropriate. Perhaps I'll blog about that in another post...

Regardless of which strategy or strategies you pick, the overriding rule is: &lt;strong&gt;develop, announce, and execute a specific plan for handling problems.&lt;/strong&gt;

This rule applies at all levels of code -- low-level algorithms, modules, applications, entire software ecosystems (see &lt;a title="How Software Is Like Biology" href="/2012/08/14/how-software-is-like-biology/"&gt;my post about how software is like biology&lt;/a&gt;). The plan can be (perhaps should be) different in different places. But just as the actions of dozens of squads or platoons might need to be coordinated to take a hill, the individual choices you make about micro problem-handling should contribute to a cohesive whole at the macro level.

Notice that I've talked about "problems," not "exceptions" or "errors." Problems certainly include exceptions or errors, but using either of those narrower terms tends to confine your thinking. Exceptions are a nifty mechanism, but they don't propagate across process boundaries (at least, not without some careful planning). Sometimes a glut of warnings is a serious problem, even if no individual event rises to the level of an "error."
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;span style="color:#000080;"&gt;&lt;strong&gt;Action Item&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;span style="color:#000080;"&gt;&lt;em&gt;Evaluate the plan(s) for problem-handling in one corner of your code. Is the plan explicit and understood by all users and maintainers? Is it implemented consistently? Is it tested? Pick one thing you can do to improve the plan.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>350</ns0:post_id>
  <ns0:post_date>2012-09-03 10:43:19</ns0:post_date>
  <ns0:post_name>good-code-plans-for-problems</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="biology">biology</category>
  <category domain="post_tag" nicename="design">design</category>
  <category domain="post_tag" nicename="errors">errors</category>
  <category domain="post_tag" nicename="exceptions">exceptions</category>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:64:"http://pic.epicfail.com/wp-content/uploads/2009/04/bush-fail.jpg";s:6:"images";a:1:{s:64:"http://pic.epicfail.com/wp-content/uploads/2009/04/bush-fail.jpg";a:6:{s:8:"file_url";s:64:"http://pic.epicfail.com/wp-content/uploads/2009/04/bush-fail.jpg";s:5:"width";i:523;s:6:"height";i:480;s:4:"type";s:5:"image";s:4:"area";i:251040;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-09-03 17:43:19";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>97</ns0:comment_id>
    <ns0:comment_author>How to turn coding standards into epic fails &amp;#8212; or not &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2012/09/27/coding-standards/</ns0:comment_author_url>
    <ns0:comment_date>2012-09-27 02:04:55</ns0:comment_date>
    <ns0:comment_content>[...] follow the codebase&amp;#8217;s error and exception strategy. (Example: &amp;#8220;In C++, use RAII to guarantee exception safety. Make sure all errors are [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>150</ns0:comment_id>
    <ns0:comment_author>Why Exceptions Aren&amp;#8217;t Enough &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2012/10/09/why-exceptions-arent-enough/</ns0:comment_author_url>
    <ns0:comment_date>2012-10-09 23:14:34</ns0:comment_date>
    <ns0:comment_content>[...] (This post is a logical sequel to my earlier musings about having a coherent strategy to handle problems.) [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>517</ns0:comment_id>
    <ns0:comment_author>Don&amp;#8217;t forget the circuit breakers &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/01/11/dont-forget-the-circuit-breakers/</ns0:comment_author_url>
    <ns0:comment_date>2013-01-11 18:01:57</ns0:comment_date>
    <ns0:comment_content>[...] One design pattern that Nygard recommends was new to me, but it rang true as soon as I saw its description. Like many classic patterns, I&amp;#8217;ve implemented variations on it without knowing the terminology. I like Nygard&amp;#8217;s formulation, so I thought I&amp;#8217;d summarize it here; as I&amp;#8217;ve said before, good code plans for problems. [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1043</ns0:comment_id>
    <ns0:comment_author>Why Your Software Should Cry | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/05/06/why-your-software-should-cry/</ns0:comment_author_url>
    <ns0:comment_date>2013-05-06 11:50:57</ns0:comment_date>
    <ns0:comment_content>[...] examples like this are few and far between. It&amp;#8217;s hard enough to bake a rational error-handling strategy into software, let alone make it sophisticated enough to monitor its environment and take proactive steps to [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2914</ns0:comment_id>
    <ns0:comment_author>A Comedy of Carelessness | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/12/09/a-comedy-of-carelessness/</ns0:comment_author_url>
    <ns0:comment_date>2013-12-09 08:35:03</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] that&amp;#8217;s more like it! Plan for trouble. (It always happens, after all.) Notice the problem. Communicate it. Take steps to cope, without [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>6.0 Syndrome</title>
  <link>http://codecraft.co/2012/09/03/6-0-syndrome/</link>
  <pubDate>Mon, 03 Sep 2012 23:03:56 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=372</guid>
  <ns2:encoded>Software products get inertia. A team works on one version of the product--pours their heart and souls into it, if the team is dedicated and passionate--and eventually ships.

So what comes next?

This is a silly question, right? If you just built version 5.0, then 6.0 is next. Or maybe 5.1. Unless marketing decides to call it Contraption 2013 instead.

[caption id="attachment_374" align="aligncenter" width="320"]&lt;a href="http://www.flickr.com/photos/argonne/6863155588/"&gt;&lt;img class="size-full wp-image-374" title="6863155588_5d71447a96_n" src="http://codecraft.co/wp-content/uploads/2012/09/6863155588_5d71447a96_n.jpg" alt="" width="320" height="213" /&gt;&lt;/a&gt; A highly-evolved contraption. Photo credit: Argonne National Laboratory (Flickr).[/caption]

I'd like to suggest that it is healthy to wonder if you should build a new incarnation of your current product &lt;em&gt;at all&lt;/em&gt;. Sometimes, if you're smart, you'll realize that the answer is &lt;em&gt;no&lt;/em&gt;.

It is not crazy that the default posture of dev teams is to release a new-and-improved version as a follow-on--staffing teams, organizing marketing, communicating effectively to the market, getting sales traction, and aligning your support and professional services teams on a common axis are all expensive and time-consuming.

However, the right solution to the world's problem tomorrow might not be a slight variation on something you've already built. Companies that forget this are going to keep improving their tape decks even as CD players begin to ship. (If that reference seems archaic to you, you've proved my point yet again. CD players became a lot less compelling once personal mp3 players were a possibility...)

Clayton Christensen is famous for writing about this in &lt;em&gt;The Innovator's Dilemma&lt;/em&gt;, but I like his Blockbuster/Netflix example in &lt;em&gt;How Will You Measure Your Life&lt;/em&gt; even better.

I've seen good examples of thinking outside the box during my career. The decision at PowerQuest to invest in disk-based backup instead of building another version of PartitionMagic comes to mind. But I've also seen the opposite--blind commitment to version 5.0 and 6.0 to such a degree that teams could not innovate.

Seth Godin writes insightfully about this in &lt;em&gt;Poke the Box&lt;/em&gt;:
&lt;blockquote&gt;[Most organizations] are based on this assembly line model of scalability. &lt;em&gt;The system is the system. Don't mess with it.&lt;/em&gt; ... Now, think about Apple, Google, director James Cameron's team, Ideo, Pixar, and Electronic Arts. These are project-centric organizations. ... No projects, no organization. Coasting isn't an option because projects don't last forever. The people stick around, the posture persists, but the projects need to be refreshed.&lt;/blockquote&gt;
It feels to me like one way to encourage innovation in a software-creating org is to not assume that there will be a next version. There may be--but once this version ships, we spend at least a little time with first principles, re-validating assumptions about what can best delight customers.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Analyze where your current product fits on Clayton Christensen's model of innovation vs. mature product. Does this suggest anything to you about a need for radical (as opposed to incremental) innovation?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>372</ns0:post_id>
  <ns0:post_date>2012-09-03 16:03:56</ns0:post_date>
  <ns0:post_name>6-0-syndrome</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="innovation">innovation</category>
  <category domain="post_tag" nicename="projects">projects</category>
  <category domain="post_tag" nicename="teamwork">teamwork</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  </item>
<item>
  <title>Users Aren't The Only People In Your Software</title>
  <link>http://codecraft.co/2012/09/04/users-arent-the-only-people-in-your-software/</link>
  <pubDate>Tue, 04 Sep 2012 16:02:06 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=389</guid>
  <ns2:encoded>I'm all for a healthy focus on HCI (Human-Computer Interaction), UCD (User-Centered Design), and UX (User eXperience). (See &lt;a title="Role-Play Centered Design" href="/2012/06/20/role-play-centered-design/"&gt;my post about role-play centered design&lt;/a&gt;, for example.)

However, some insight gets lost when we think that only "end users" interact with our software, and only their experience needs to be polished.

With enterprise software, it's common for lots of people in the customer's value chain to interact with the software to one degree or another. Perhaps IT specialists use the software every day, but need to provide upper management with periodic reports or dashboards. If so, those touchpoints with upper management are &lt;em&gt;also&lt;/em&gt; a form of human-computer interaction, and &lt;em&gt;also&lt;/em&gt; deserve attention. What about the CIO who is deeply aware of C-level pressures to reduce costs in his organization? He has to somehow justify each line item in his budget. The enterprise software that gives him a convenient, compelling cost savings report is making a savvy UX move. How about the evaluators that see the product before a purchase decision is made? Does their experience matter?

It's not just the consumer side of the value chain that's studded with interesting people. On the producer side, dev and test engineers interact with the software all the time. Although their convenience is not the highest consideration, an utter disregard for their use cases can sap team morale and productivity. Less obviously, but perhaps more importantly, you have interactions between the software and your support team, your marketing team, the executives that sponsor the dev budget for the product, and so forth. If you're doing SaaS, you've got infrastructure/datacenter staff. If you're building an app, you may have content creators or maintainers. All of these people matter.

[polldaddy poll=6510201]

&amp;nbsp;
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;List 3 people besides end users that interact with your software in important ways. How well does your software communicate with them and satisfy their need to be productive and drive business value?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>389</ns0:post_id>
  <ns0:post_date>2012-09-04 09:02:06</ns0:post_date>
  <ns0:post_name>users-arent-the-only-people-in-your-software</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="hci">hci</category>
  <category domain="post_tag" nicename="ucd">ucd</category>
  <category domain="post_tag" nicename="ux">ux</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_oembed_07542d4e3c815b0def22ec02b12e6f09</ns0:meta_key>
    <ns0:meta_value>&lt;div class="embed-polldaddy"&gt;&lt;script type="text/javascript" charset="utf-8" src="https://secure.polldaddy.com/p/6510201.js"&gt;&lt;/script&gt;&lt;noscript&gt;&lt;a href="https://polldaddy.com/poll/6510201/"&gt;Which human roles do you feel are often neglected in software design?&lt;/a&gt;&lt;/noscript&gt;&lt;/div&gt;</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_oembed_time_07542d4e3c815b0def22ec02b12e6f09</ns0:meta_key>
    <ns0:meta_value>1530329956</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>50</ns0:comment_id>
    <ns0:comment_author>Role-Play Centered Design &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2012/06/20/role-play-centered-design/</ns0:comment_author_url>
    <ns0:comment_date>2012-09-05 10:10:18</ns0:comment_date>
    <ns0:comment_content>[...] your software. If your list has less than four or five unique roles, think some more. Hint: see this post. Rate this:Share this:PrintEmailTwitterDiggRedditTumblrFacebookLinkedInStumbleUponPinterestLike [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>802</ns0:comment_id>
    <ns0:comment_author>Are You Losing Enough Battles? | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/03/05/are-you-losing-enough-battles/</ns0:comment_author_url>
    <ns0:comment_date>2013-03-05 08:36:03</ns0:comment_date>
    <ns0:comment_content>[...] Losing an occasional battle keeps us humble. It means we&amp;#8217;re grounded in reality rather than ivory tower imagination. It means we value balance and pragmatism over theoretical perfection, and it helps build a healthy regard for the needs of other people. [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>667</ns0:comment_id>
    <ns0:comment_author>Smart Geeks Think Like Cheerleaders &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/02/05/smart-geeks-think-like-cheerleaders/</ns0:comment_author_url>
    <ns0:comment_date>2013-02-05 08:58:01</ns0:comment_date>
    <ns0:comment_content>[...] of these memory lapses can be viewed as failures in system thinking. The software we create, and the people that surround and permeate it, constitute a system. We will not be successful unless we create harmony in the [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2250</ns0:comment_id>
    <ns0:comment_author>2 Surprising Truths About The Iron Triangle | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/07/01/2-surprising-truths-about-the-iron-triangle/</ns0:comment_author_url>
    <ns0:comment_date>2013-07-01 16:39:00</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] healthy, and you will see your speed go up, not down. The mental models of your engineers and the entire value chain will align. You&amp;#8217;ll create virtuous cycles that perpetuate the right kinds of tradeoffs for [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>17436</ns0:comment_id>
    <ns0:comment_author>On pains and brains | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2016/01/01/on-pains-and-brains/</ns0:comment_author_url>
    <ns0:comment_date>2016-01-01 14:30:14</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] boxes for users. Even if we are UX-savvy and include &amp;#8220;users&amp;#8221;, we almost always take the other human actors in our systems for granted. When was the last time your architecture diagrams included an org [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14322</ns0:comment_id>
    <ns0:comment_author>&amp;#8220;Rockstar Developers&amp;#8221; are a dangerous myth | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/03/04/rockstars/</ns0:comment_author_url>
    <ns0:comment_date>2015-03-05 20:15:28</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] Understanding all the people in the value chain of your software, and doing the hard, unrewarding detail work to guarantee that their needs are addressed throughout the full lifecycle of what you build is usually way more important than inventing a new and mind-bending algorithm. Addressing the need of your business to make a profit is usually a good idea, too. Perhaps the vast residual work is what Thomas Edison had in mind when he said, [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14923</ns0:comment_id>
    <ns0:comment_author>A grumble about buckets | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/04/08/a-grumble-about-buckets/</ns0:comment_author_url>
    <ns0:comment_date>2015-04-08 13:39:48</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] them. I guarantee they don&amp;#8217;t have any process to triage helpful software feedback from the humans they serve. And I dare you to find any way for a Netflix customer to contact the dev team or product manager [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>6628</ns0:comment_id>
    <ns0:comment_author>Lacunas Everywhere | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/16/lacunas-everywhere/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-16 13:58:48</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] the discipline of software development subsumes many other concerns. If you&amp;#8217;re hoping to solve human problems, your coding tools are crippled by the narrow scope of the language they support. How much wasted [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>6837</ns0:comment_id>
    <ns0:comment_author>Thoughts On Bridging the &amp;#8220;Lacuna Humana&amp;#8221; | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/21/bridging-the-lacuna-humana/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-21 08:49:24</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] do. This is a gap in what languages can help human beings do. Human knowledge and behaviors are crucial outputs of dev teams. And cool add-on libraries, or even the most powerful runtimes in the world, do not change that [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Are You Designing an Apex Predator?</title>
  <link>http://codecraft.co/2012/09/06/designing-an-apex-predator/</link>
  <pubDate>Thu, 06 Sep 2012 08:41:43 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=402</guid>
  <ns2:encoded>&lt;p style="text-align:right;margin-left:250px;"&gt;&lt;span style="color:#555555;"&gt;(This post is an excerpt from my forthcoming book, &lt;em&gt;Lifeware&lt;/em&gt;. Follow my blog [see right sidebar] to catch the publication announcement.)&lt;/span&gt;&lt;/p&gt;
&lt;p style="text-align:left;"&gt;&lt;span style="color:#000000;"&gt;A paleontologist walks along a canyon. She finds part of a fossilized crocodilian skull in a layer of sandstone. She immediately knows that this creature's environment was wet and warm, with an abundance of animal and plant life at all layers in the energy pyramid. In fact, that single clue implies an entire ecosystem with an amazing amount of detail.&lt;/span&gt;&lt;/p&gt;


[caption id="" align="aligncenter" width="320"]&lt;a href="http://en.wikipedia.org/wiki/File:SaltwaterCrocodile(%27Maximo%27).jpg"&gt;&lt;img src="http://upload.wikimedia.org/wikipedia/commons/thumb/4/43/SaltwaterCrocodile%28%27Maximo%27%29.jpg/320px-SaltwaterCrocodile%28%27Maximo%27%29.jpg" alt="" width="320" height="240" /&gt;&lt;/a&gt; Crocodylus Porosus: eats competitors for lunch. Photo credit: Molly Ebersold (Wikimedia Commons)[/caption]
&lt;p style="text-align:left;"&gt;Her predictions derive from the fact that adult crocodiles are apex predators. They're at the top of a food chain which stretches down through medium-sized herbivores, omnivores, or carnivores (in modern times, a zebra or jackal, for example), to smaller omnivores and herbivores (fish, turtles), to insects and nematodes and molluscs and arachnids, to plants in a thousand varieties... At every trophic level in the energy pyramid, there's roughly 10x the biomass of the layer above it, so one crocodile implies a &lt;em&gt;lot&lt;/em&gt; of bugs and reeds and mangroves.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;Ask a kid for his favorite animal, and you're likely to hear about an apex predator: tiger, orca, polar bear, great white shark, eagle. The freedom, fearlessness, and power of these animals captures our imagination.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;Kids who grow into software engineers have an affinity for complex software "organisms" with highly developed competitive advantage. They still love apex predators.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;As my friend Chris was pointing out to me yesterday, a highly evolved design comes naturally in software. Structural engineers are constrained by gravity and tensile properties of steel to not attempt bridges across the ocean; software, on the other hand, has much fuzzier (and more poorly understood) limits.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;But here's an important lesson from biology: apex predators require a rich, layered ecosystem in which their adaptations can shine. Take a crocodile and plop it down in the middle of the Sahara or the artic tundra; how long will it survive?&lt;/p&gt;
&lt;p style="text-align:left;"&gt;Software is the same way. If you are designing an enterprise application that offers rich reporting, seamless transitions to and from the cloud, sophisticated licensing, integration with management frameworks and directory services, single sign-on, and industrial-strength security, you are designing an apex predator. That's cool. But is there enough "biomass" in the environment to sustain your killer app? The enabling environment has to include trained support and sales staff, analysts, VARs, professional IT organizations with time and budget, a friendly legal climate, whitepapers, a developer community, and so on and so on. If you don't have this, your apex predator will die. Make sure you understand the ecosystem implied by your design; addressing the environment is as much a part of the design and development as the UML diagrams and the WSDL.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;Cheating is possible. You can keep crocodiles alive in a zoo without an acre of mangrove swamp, and you can short-circuit VARs and skimp on whitepapers and so forth. But cheating is expensive and suboptimal. And even cheating requires plenty of planning and investment.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;An alternative to cheating is to not try to build your apex predator until the ecosystem evolves. Maybe you should settle for a handful of snapping turtles and a snake, until the swamp's big enough to house a crocodile. Snapping turtles might not be a bad business... This choice isn't the same as abandoning a vision--it's just realizing that ignoring the timetable of evolution may be unwise.&lt;/p&gt;
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="text-align:left;padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Look at your roadmap. Is the next round of releases going to drop an "apex predator" on the market like a crocodile in the arctic? What must be true of the ecosystem for the product to succeed, and how can you make those things true?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p style="text-align:left;"&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>402</ns0:post_id>
  <ns0:post_date>2012-09-06 01:41:43</ns0:post_date>
  <ns0:post_name>designing-an-apex-predator</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="biology">biology</category>
  <category domain="post_tag" nicename="design">design</category>
  <category domain="post_tag" nicename="evolution">evolution</category>
  <category domain="category" nicename="software-architecture">Software Architecture</category>
  <category domain="post_tag" nicename="vision">vision</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:144:"http://upload.wikimedia.org/wikipedia/commons/thumb/4/43/SaltwaterCrocodile%28%27Maximo%27%29.jpg/320px-SaltwaterCrocodile%28%27Maximo%27%29.jpg";s:6:"images";a:1:{s:144:"http://upload.wikimedia.org/wikipedia/commons/thumb/4/43/SaltwaterCrocodile%28%27Maximo%27%29.jpg/320px-SaltwaterCrocodile%28%27Maximo%27%29.jpg";a:6:{s:8:"file_url";s:144:"http://upload.wikimedia.org/wikipedia/commons/thumb/4/43/SaltwaterCrocodile%28%27Maximo%27%29.jpg/320px-SaltwaterCrocodile%28%27Maximo%27%29.jpg";s:5:"width";i:320;s:6:"height";i:240;s:4:"type";s:5:"image";s:4:"area";i:76800;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-09-06 09:08:54";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>66</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-09-15 00:26:03</ns0:comment_date>
    <ns0:comment_content>Ocean Mist theme -- standard option in wordpress. I think I customized css slightly and added a different header graphic. Everything else is out-of-the-box.</ns0:comment_content>
    <ns0:comment_parent>55</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>964</ns0:comment_id>
    <ns0:comment_author>Adios to &amp;#8220;computer programming&amp;#8221; | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/04/05/adios-to-computer-programming/</ns0:comment_author_url>
    <ns0:comment_date>2013-04-05 09:34:34</ns0:comment_date>
    <ns0:comment_content>[...] chunks of code depend on one another being alive, can poison one another&amp;#8217;s environment, must respect the constraints implied by one another&amp;#8217;s requirements. Engineers and architects and CS professors, we have to stop thinking at the level of a single [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Evolving Software Politics</title>
  <link>http://codecraft.co/2012/09/11/evolving-software-politics/</link>
  <pubDate>Tue, 11 Sep 2012 18:01:12 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=418</guid>
  <ns2:encoded>I find a lot of insight in &lt;a title="soft-con and soft-lib" href="https://plus.google.com/u/2/110981030061712822816/posts/KaSKeg4vQtz" target="_blank"&gt;Steve Yegge's suggestion&lt;/a&gt; that we think about the world views of software engineers along a conservative (risk-averse) versus liberal (change-friendly) axis. I have some quibbles, to be sure:
&lt;ul&gt;
	&lt;li&gt;I'm not sure how well Steve's labels resonate outside the U.S.&lt;/li&gt;
	&lt;li&gt;I think software conservatism is more focused on permanence than risk aversion.&lt;/li&gt;
	&lt;li&gt;I don't think programmers are all that consistent in their views. I can find evidence of both soft-con and soft-lib thinking in my own philosophies.&lt;/li&gt;
&lt;/ul&gt;
That said, I think I've evolved from a conservative to a more liberal perspective over the years. At one point in my career I got quite annoyed at C++ coders who were careless about how they used &lt;code&gt;const&lt;/code&gt;. It still bothers me a bit--but now I care about productivity more, and I buy the value of languages enforcing best practices less, than I used to. I love python and "&lt;a href="http://en.wikipedia.org/wiki/Convention_over_configuration" target="_blank"&gt;convention over configuration&lt;/a&gt;"--both liberal favorites. My idea that &lt;a title="Role-Play Centered Design" href="http://codecraft.co/2012/06/20/role-play-centered-design/" target="_blank"&gt;teams should deploy evolving software by assigning humans to role play architectural components, and see what happens&lt;/a&gt;--that's about as ultra liberal as it gets.

[polldaddy poll=6531418]

&amp;nbsp;

Why has my world view evolved?

I think I've come to agree very strongly with Steve's observation that software is impermanent. Little if any software stands the test of time. In the mid '90s I worked on some Visual Basic code that had ancient Basic modules in it, with comments from the mid 70's. I hated that code--imagine the worst features of spaghetti code, hungarian notation with obsolete data types, deep technical debt, tight coupling, poor encapsulation...--this was a poster child. The code wasn't dead, but it should have been. 20 years is too long for almost all code. (I'm adding a chapter about the profound benefits of death in my biology~software metaphor, in my forthcoming book, &lt;em&gt;Lifeware&lt;/em&gt;.)

When you accept that software is impermanent, you can relax. There doesn't have to be a centrally planned vision that remains constant over time; you can discover things as you go, and it's &lt;em&gt;all right&lt;/em&gt;.

Don't confuse this with me being lazy. I think code should be clean and cohesive; see &lt;a href="/category/good-code/" target="_blank"&gt;my posts on "good code"&lt;/a&gt; for more on that. I'm simply saying that you should embrace the idea that things change. Requirements shift. Teams go through learning curves. Staff has turnover. Products lose or gain competitive advantage. The market adjusts. Better frameworks come out. New OS features appear. And the implication of this change is that today's right answer might need some tweaking tomorrow.

Faced with that change, the ability to react quickly and calmly, to be entrepreneurial and experiment-driven, is often of greater business value than a perfect piece of code.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;List three things about your project's landscape (market, team, technology, ...) that have changed in the past year. Do any of these make earlier decisions more or less appropriate?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>418</ns0:post_id>
  <ns0:post_date>2012-09-11 11:01:12</ns0:post_date>
  <ns0:post_name>evolving-software-politics</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="change">change</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="politics">politics</category>
  <category domain="post_tag" nicename="vision">vision</category>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-09-11 18:20:38";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_oembed_14e2a24ab2e197e5aa455bf75c919a96</ns0:meta_key>
    <ns0:meta_value>&lt;div class="embed-polldaddy"&gt;&lt;script type="text/javascript" charset="utf-8" src="https://secure.polldaddy.com/p/6531418.js"&gt;&lt;/script&gt;&lt;noscript&gt;&lt;a href="https://polldaddy.com/poll/6531418/"&gt;Where would you place yourself on Yegge&amp;#039;s conservative~liberal continuum?&lt;/a&gt;&lt;/noscript&gt;&lt;/div&gt;</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_oembed_time_14e2a24ab2e197e5aa455bf75c919a96</ns0:meta_key>
    <ns0:meta_value>1521066479</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Role Models</title>
  <link>http://codecraft.co/2012/09/12/role-models/</link>
  <pubDate>Thu, 13 Sep 2012 06:06:54 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=425</guid>
  <ns2:encoded>&lt;p style="text-align:right;"&gt;&lt;em&gt;This is the inaugural post in &lt;a href="/category/role-models/"&gt;a series that highlights people who've influenced me&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
Almost everything useful that I've learned about software comes from observing great practitioners of the craft. It's my good fortune to know many.

Sometimes I've learned from overt teaching--lunchtime training sessions, discussions around whiteboards, talks at conferences, emails and blog posts...

[caption id="" align="alignright" width="284"]&lt;a href="http://en.wikipedia.org/wiki/File:Saint_Francis_of_Assisi_by_Jusepe_de_Ribera.jpg"&gt;&lt;img title="St. Francis of Assisi, by Jusepe de Ribera" src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Saint_Francis_of_Assisi_by_Jusepe_de_Ribera.jpg/474px-Saint_Francis_of_Assisi_by_Jusepe_de_Ribera.jpg" alt="" width="284" height="359" /&gt;&lt;/a&gt; "... When necessary, use words." Image credit: Jusepe de Ribera (Wikimedia Commons)[/caption]

More often, however, the deep lessons soak in over time, as I see a colleague model alignment to a value that they've internalized. Supposedly St. Francis of Assisi said, "Preach the gospel at all times. When necessary, use words." Put that in a business context; who have you known that's preached an eloquent sermon to you about the art or science of software by the way they decide, talk, or behave?

Over the next little while, I'm going to post about some of these role models, and the lessons I take from their examples.

I apologize in advance for a few things.

First, any list of mentors that I offer is going to be woefully incomplete. In three minutes of brainstorming, I already had a score of people/principles I wanted to talk about; I'll never cover everything that deserves mention. Even when I cover something, I may not be able to highlight everybody who's taught me a given principle.

Second, my memory is imperfect. I may remember something in a way that's different from a mentor's recollection--either because I experienced it differently in the first place, or because I'm starting to have senior moments. Inaccuracies are inadvertent and will be gladly corrected, if anybody can set me straight.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;span style="color:#000080;"&gt;&lt;strong&gt;Action Item&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;span style="color:#000080;"&gt;&lt;em&gt;Make your own list of mentors. I'll bet you'll be surprised at how long it gets.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>425</ns0:post_id>
  <ns0:post_date>2012-09-12 23:06:54</ns0:post_date>
  <ns0:post_name>role-models</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="education">education</category>
  <category domain="post_tag" nicename="examples">examples</category>
  <category domain="post_tag" nicename="mentors">mentors</category>
  <category domain="category" nicename="role-models">Role Models</category>
  <category domain="post_tag" nicename="training">training</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:158:"http://upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Saint_Francis_of_Assisi_by_Jusepe_de_Ribera.jpg/474px-Saint_Francis_of_Assisi_by_Jusepe_de_Ribera.jpg";s:6:"images";a:1:{s:158:"http://upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Saint_Francis_of_Assisi_by_Jusepe_de_Ribera.jpg/474px-Saint_Francis_of_Assisi_by_Jusepe_de_Ribera.jpg";a:6:{s:8:"file_url";s:158:"http://upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Saint_Francis_of_Assisi_by_Jusepe_de_Ribera.jpg/474px-Saint_Francis_of_Assisi_by_Jusepe_de_Ribera.jpg";s:5:"width";i:474;s:6:"height";i:599;s:4:"type";s:5:"image";s:4:"area";i:283926;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-09-13 07:43:55";}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Manifestos</title>
  <link>http://codecraft.co/2012/09/13/manifestos/</link>
  <pubDate>Thu, 13 Sep 2012 19:48:41 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=431</guid>
  <ns2:encoded>I signed two software manifestos yesterday.

[caption id="" align="aligncenter" width="320"]&lt;a href="http://www.flickr.com/photos/specialkrb/3805699025/"&gt;&lt;img title="Quill" src="http://farm3.staticflickr.com/2504/3805699025_d68718a091_n.jpg" alt="" width="320" height="212" /&gt;&lt;/a&gt; photo credit: SpecialKRB (Flickr)[/caption]

The &lt;a href="http://agilemanifesto.org/" target="_blank"&gt;Agile Manifesto&lt;/a&gt; is a classic. It changed the industry. Not everything about "agile" is automatically wonderful (particularly when it becomes an excuse for lazy planning), but the foundational principles are so, so true! Go. Read. Sign.

The &lt;a href="http://manifesto.softwarecraftsmanship.org/" target="_blank"&gt;Manifesto for Software Craftsmanship&lt;/a&gt; seems to deliberately emulate its predecessor's simple and pragmatic style. I also believe deeply in its principles. I think it needs a bit more defense, however.

&lt;a href="https://plus.google.com/u/0/110981030061712822816/posts/iuRbQe6EoiK" target="_blank"&gt;Steve Yegge claims&lt;/a&gt; that software conservatives love their code, and software liberals view code as a necessary evil. (LONG post; this comment is near the end. And you may need to read &lt;a href="https://plus.google.com/u/0/110981030061712822816/posts/KaSKeg4vQtz" target="_blank"&gt;his previous post&lt;/a&gt; for context, if you're not familiar with his political metaphor.)

I think he's gone too far. &lt;a href="/2012/09/11/evolving-software-politics/"&gt;I'm pretty software liberal&lt;/a&gt;. And I get the kernel of truth in the "necessary evil" idea. So much of what we write will be chucked or rewritten; it's unhealthy to imagine that every project is an opportunity for a &lt;em&gt;magnum opus&lt;/em&gt;, or to expect to be able to achieve perfection.

But I don't think that means we should devalue the craft. Even in the imperfect, muddled, transitory universe of software, it's possible to make savvy and artistic choices--or to do the opposite. When we care about craft, we find work more satisfying, and we make our corner of the universe a more hospitable place for our neighbors, which has all kinds of benefits.

Besides, love of craft is my major reason for blogging, so it must be a good thing, right? :-)
&lt;p style="text-align:center;padding-left:30px;"&gt;&lt;span style="color:#000080;"&gt;&lt;strong&gt;Action Item&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;span style="color:#000080;"&gt;&lt;em&gt;Go read the manifestos. If you're inclined, poke around for the links that let you sign.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>431</ns0:post_id>
  <ns0:post_date>2012-09-13 12:48:41</ns0:post_date>
  <ns0:post_name>manifestos</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="agile">agile</category>
  <category domain="post_tag" nicename="craft">craft</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="manifestos">manifestos</category>
  <category domain="post_tag" nicename="politics">politics</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>533</ns0:comment_id>
    <ns0:comment_author>Earned Pragmatism &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/01/18/earned-pragmatism/</ns0:comment_author_url>
    <ns0:comment_date>2013-01-18 08:53:21</ns0:comment_date>
    <ns0:comment_content>[...] one of the early torchbearers for the agile software movement. I&amp;#8217;ve written previously about signing the Agile manifesto, so I felt like I was swimming in friendly [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>12974</ns0:comment_id>
    <ns0:comment_author>A More Important Manifesto | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/01/05/a-more-important-manifesto/</ns0:comment_author_url>
    <ns0:comment_date>2015-01-05 08:39:47</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] couple years ago, I wrote about signing the Agile Manifesto and the Manifesto for Software [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Don Kleinschnitz: Put a stake in the ground.</title>
  <link>http://codecraft.co/2012/09/14/don-kleinschnitz-stake/</link>
  <pubDate>Fri, 14 Sep 2012 22:24:55 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=438</guid>
  <ns2:encoded>&lt;p style="text-align:right;"&gt;&lt;em&gt;(A post in my “&lt;a href="/category/role-models/"&gt;Role Models&lt;/a&gt;” series…)&lt;/em&gt;&lt;/p&gt;
My huddle was not going well. I'd called a meeting to debate a tricky architectural problem with other senior engineers, and consensus was scarcer than working markers for our whiteboard. We were going round and round in circles.

&lt;a href="http://www.linkedin.com/pub/don-kleinschnitz/1/779/6a4" target="_blank"&gt;Don Kleinschnitz&lt;/a&gt; walked in. It was our first interaction--he'd only been introduced to the company as our new CTO a few days before--and I wondered whether he'd help us get off the dime.

Five minutes later, the meeting was over, and the controversy was settled. Don had "put a stake in the ground," as he called it -- picked a spot and made a tangible, semi-permanent choice to anchor our behavior.

[caption id="" align="aligncenter" width="320"]&lt;a href="http://en.wikipedia.org/wiki/File:Wooden_stake_holding_guy_rope.jpg"&gt;&lt;img title="wooden stake" src="http://upload.wikimedia.org/wikipedia/commons/thumb/4/4b/Wooden_stake_holding_guy_rope.jpg/320px-Wooden_stake_holding_guy_rope.jpg" alt="" width="320" height="240" /&gt;&lt;/a&gt; A stake in the ground. :-) Photo credit: Wikimedia Commons.[/caption]

&lt;strong&gt;Answer the hard questions&lt;/strong&gt;

I don't remember the question or the answer, but I do remember some of Don's solution. He immediately pushed us from generalities into specifics--what use case, &lt;em&gt;exactly&lt;/em&gt;, would be affected by the decision? How much, &lt;em&gt;exactly&lt;/em&gt;, would tradeoffs pay or cost in either direction?

Of course we couldn't answer Don's questions very well; nothing is more certain than ambiguity in software. But Don refused to let us off the hook, because he understood that &lt;em&gt;imperfect but specific answers are better than vague generalizations. Even if you have to guess.&lt;/em&gt; (More rationale for this principle is elaborated in &lt;a title="Role-Play Centered Design" href="/2012/06/20/role-play-centered-design/" target="_blank"&gt;the RPCD manifesto&lt;/a&gt;.)

By putting a stake in the ground, Don wasn't being arrogant or unwilling to listen. He was simply recognizing that we had incomplete input, that the right answer was maybe guessable but not clear-cut, and that we'd be better off making a tangible experiment instead of debating intuitions. Maybe our answer would be wrong; if so, we'd adjust later. The cost of altering our trajectory would not be so high that it would invalidate the benefit of immediate progress.

&lt;strong&gt;Understand your assumptions&lt;/strong&gt;

I saw Don model this pattern again when he was general manager of a newly created business unit inside Symantec. We were planning the first release of a suite melded from independently acquired products; the sales force's compensation and training were in flux; our outbound marketing strategy was unknown.

I think product management gulped when Don asked them for a credible sales forecast, a granular competitive analysis, a rationalized pricing strategy, and a business case justifying the feature sets they proposed to map to line items in budgets. Who wouldn't gulp? It was a &lt;em&gt;tall&lt;/em&gt; order.

But Don wouldn't settle for finger-in-the-air answers. He dug out a set of spreadsheets from his MBA days and tweaked it. Hundreds of cells held our best-guess scores for the usefulness of features in our products and those of our competitors. Sheets captured assumptions. More sheets ran linear regressions to see if our price/performance fell in line with the industry.

He got pushback. "You've got so many assumptions that the model can't possibly be correct."

"Yes," Don would admit. "But insight, not perfect correctness, is what we're after. You get insight out of specifics. Should we give our installation's ease-of-use a 5 out of 10, or a 6? Not sure. But notice that the overall price/performance of our product doesn't change at all when we vary that number. We wouldn't know that unless we'd plugged in &lt;em&gt;something&lt;/em&gt;. Forcing ourselves to give an answer has taught us something about our assumptions."

Don's model enabled smart action in the face of tremendous uncertainty.

&lt;strong&gt;Show, don't tell&lt;/strong&gt;

Don is always tinkering with tools and processes that instill this habit in his troops. On another memorable occasion, we were wrestling with long, dry requirements documents. They were auto-generated from a requirements database, and they ran into the scores--maybe hundreds--of pages. Because they were so long, nobody liked to read them carefully. And because nobody liked to read them, they weren't producing the interlock we needed to keep five development sites aligned in a healthy way.

Don asked us to build a UI that manifested the existence of all features that would be exposed in our next release. It didn't have to &lt;em&gt;do&lt;/em&gt; anything--just display what sorts of things would be possible.

At first I thought he was crazy. I told him it would take a long time.

"Not as long as requirements docs," he said.

"It will be ugly--completely lacking in any usability."

"So? We're not trying to model the customer experience. We can throw it away. The value is in forcing ourselves to be specific about what features we have."

I built the UI. And I learned &lt;em&gt;a ton&lt;/em&gt;. A picture--even a sloppy one--is easily worth a thousand words. Especially if it's interactive.

Product managers saw the UI. After a suitable re-education so they knew not to worry about ugliness or awkward workflow, they started saying really insightful things, like: "If we expose features A and C but not B, a user who wants to do A→B→C will be frustrated." The concreteness of the UI was almost like magic.

I could go on and on about how Don lives this principle, but you get the idea: pose hard questions, get the best answers you can… then force yourself to put a stake in the ground, experiment with specifics, and learn from it.

Thanks for the lesson, Don.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;span style="color:#000080;"&gt;&lt;strong&gt;Action Item&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;span style="color:#000080;"&gt;&lt;em&gt;Consider a current (or past) design decision that's been difficult to make. How could you make the decision easier by guessing about the likelihood of a use case, the preference of a user, or other aspects of context? If you got the answer wrong, how soon would you be likely to discover your mistake, and how expensive would it be to adjust your trajectory?&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>438</ns0:post_id>
  <ns0:post_date>2012-09-14 15:24:55</ns0:post_date>
  <ns0:post_name>don-kleinschnitz-stake</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="assumptions">assumptions</category>
  <category domain="post_tag" nicename="competition">competition</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="meetings">meetings</category>
  <category domain="post_tag" nicename="planning">planning</category>
  <category domain="post_tag" nicename="pricing">pricing</category>
  <category domain="post_tag" nicename="prototypes">prototypes</category>
  <category domain="category" nicename="role-models">Role Models</category>
  <category domain="post_tag" nicename="sales">sales</category>
  <category domain="post_tag" nicename="ui">UI</category>
  <category domain="post_tag" nicename="vision">vision</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>64</ns0:comment_id>
    <ns0:comment_author>Steve Tolman</ns0:comment_author>
    <ns0:comment_author_email>steve.tolman@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2012-09-14 18:47:07</ns0:comment_date>
    <ns0:comment_content>Oh the memories!  I think you correctly described Don's ability to *enthusiastically* put a stake in the ground, but you are a little short in describing the amount of pain that caused, even after we were accustomed to this behavior.  I agree that it did wonders for our ability to make decisions, but it also yanked us through multiple knotholes on the way.  Looking back, I think they were necessary knotholes because we learned how to do multiple things.
1. We learned to deal with the discomfort of guessing and actually became quite good at using the available tools to sort through the uncertainty
2. We stopped fearing the unknown and became fearless at working through it all
3. We learned to apply this kind of thinking throughout the organization - at all levels
4. We became extremely effective and efficient at nailing what the customer wanted (although it took a while to work through the learning curve) - it allowed our engineering teams and our product management teams to learn to work together so much better
5. We were able to modify multiple processes to accommodate this approach - something our sister sites never could figure out</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>65</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-09-14 19:27:57</ns0:comment_date>
    <ns0:comment_content>Your point about pain is well taken. Putting a stake in the ground sometimes hurts. It can be disruptive. You should do it when you calculate that it's a net win--not thoughtlessly. Although this particular principle was an obvious part of Don's style, I also saw him be thoughtful and deliberative on many occasions. That's a better choice if the human stakes are high and the pay-off for quick momentum is not especially compelling.

I should probably add another caveat to my inaugural post about role models, admitting that none of the principles I want to highlight are &lt;em&gt;always&lt;/em&gt; the right answer. Smart tradeoffs -- balance -- that's the eternal dance. Or, to borrow a phrase from another mentor I admire (you know who you are, but I won't let you remain anonymous forever... :-) -- "It depends." :-)</ns0:comment_content>
    <ns0:comment_parent>64</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>67</ns0:comment_id>
    <ns0:comment_author>Don</ns0:comment_author>
    <ns0:comment_author_email>don_kleinschnitz@hotmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.turnedoutright.com</ns0:comment_author_url>
    <ns0:comment_date>2012-09-15 10:05:24</ns0:comment_date>
    <ns0:comment_content>You guys were on a team that in my career of 30+ years exceeded the performance of any team that I worked on before or after. 75 revolutionary features in one release is what rings in my ears as a benchmark that has yet to be beaten.
The more I learn about the craft of NPD the more I realize and we prove that at its foundation is learning and adaptability.
Most legacy NPD systems are based on "planning-do-act" kind of thinking. This assumes that NPD is a deterministic environment. ITS NOT!
The alternate is an adaptive system which operates on shortest possible start-work-failure-correct cycles .... like any adaptive control system would.
In an uncertain environment everyone especially us engineers seek precision but that will come only with learning cycles. So the STAKE starts the learning cycle....:)
Yes, change is always painfull, uncertainty is painful, but the eventual success and the excitement and fun of innovative engineering can make it worth it!</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>226</ns0:comment_id>
    <ns0:comment_author>Baby Steps &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2012/10/24/baby-steps/</ns0:comment_author_url>
    <ns0:comment_date>2012-10-24 20:15:11</ns0:comment_date>
    <ns0:comment_content>[...] You might also think that baby steps are a repeat of my advice to put a stake in the ground. [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>127</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-10-05 07:02:44</ns0:comment_date>
    <ns0:comment_content>Don: just came across a post from Seth Godin that teaches this same principle in a slightly different way: http://sethgodin.typepad.com/seths_blog/2012/10/waiting-for-all-the-facts.html</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>564</ns0:comment_id>
    <ns0:comment_author>Interrupting my interruptions &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/01/24/interrupting-my-interruptions/</ns0:comment_author_url>
    <ns0:comment_date>2013-01-24 11:48:51</ns0:comment_date>
    <ns0:comment_content>[...] (or calling) are how I develop shared mental models, motivate and teach, manage momentum, and put a stake in the ground. Those wikipedia pages and chat sessions and interesting blog posts are part of learning [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Steve Tolman: It depends.</title>
  <link>http://codecraft.co/2012/09/17/steve-tolman-it-depends/</link>
  <pubDate>Tue, 18 Sep 2012 04:28:39 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=450</guid>
  <ns2:encoded>&lt;p style="text-align:right;"&gt;&lt;em&gt;(A post in my “&lt;a href="http://codecraft.co/category/role-models/"&gt;Role Models&lt;/a&gt;” series…)&lt;/em&gt;&lt;/p&gt;
My friend and long-time colleague Steve Tolman has a standing joke with people who know him well. He gives the same answer to every question: "It depends."

Unlike most jokes, this one gets funnier the more often you hear it, especially if Steve gives a cheesy wink during delivery.

[caption id="" align="aligncenter" width="218"]&lt;a href="http://en.wikipedia.org/wiki/File:Wink.JPG"&gt;&lt;img class=" " title="cheesy wink" src="http://upload.wikimedia.org/wikipedia/commons/thumb/c/ce/Wink.JPG/218px-Wink.JPG" alt="" width="218" height="240" /&gt;&lt;/a&gt; Nope, not Steve. Photo credit: Wikimedia Commons.[/caption]

Dead serious, high stakes discussion. Breathless delivery: &lt;em&gt;Should we build feature A or B?&lt;/em&gt;
&lt;p style="padding-left:30px;"&gt;"It depends." Wink, wink.&lt;/p&gt;
&lt;em&gt;How fast can we do a release?&lt;/em&gt;
&lt;p style="padding-left:30px;"&gt;"It depends."&lt;/p&gt;
&lt;em&gt;Do you want ketchup on your hamburger?&lt;/em&gt;
&lt;p style="padding-left:30px;"&gt;"It depends."&lt;/p&gt;
Maybe you have to be there.  ;-)

Steve doesn't use his favorite answer because he's lazy; he's one of the hardest-working, hardest-thinking guys I know. He uses it because important questions often have rich answers, and unless all parties share an understanding about the priorities and assumptions underlying a question, sound bite responses aren't very helpful. The answer is supposed to remind everyone that a thoughtful approach to business priorities, not slavish conformance to a rule book, is what will drive economic success. Steve generally follows his answer up with a series of probing questions to help everyone rediscover that truth, and to get our creative juices flowing. "It depends" is an invitation to deep discussion, which often produces insight we sorely need.

I see a strong connection between Steve's tongue-in-cheek answer and the sort of tradeoff analysis that informs smart engineers' thinking. As I said elsewhere, &lt;a title="Good Code Is Balanced" href="/2012/08/27/good-code-is-balanced/"&gt;good code is balanced&lt;/a&gt;. You take many competing considerations and find the approach that best addresses business priorities (note the plural on that last word). You don't get dogmatic, because you know that no extreme position is likely to optimize competing considerations. But you don't get so pragmatic that you give up on vision and passion, either.

Steve gets this.

You might feel that "it depends" thinking is incompatible with the &lt;a title="Don Kleinschnitz: Put a stake in the ground." href="/2012/09/14/don-kleinschnitz-stake/"&gt;"put a stake in the ground" principle I blogged about recently&lt;/a&gt;. "It depends" invites further discussion, whereas stakes end debates. Right?

I don't think so. You just use these strategies under different circumstances. "It depends" makes sense when shared understanding hasn't yet developed. Stakes make sense when you all know the context and are still unsure how to proceed.

So what's the right ratio of winks to stakes?

It depends. ;-)

Thanks for the lesson, Steve.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;span style="color:#000080;"&gt;&lt;strong&gt;Action Item&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;span style="color:#000080;"&gt;&lt;em&gt;Next time someone asks you for an overly simple answer, tell them "it depends," and then let them make the next move. Betcha they'll ask for detail and listen to your explanation more thoughtfully.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>450</ns0:post_id>
  <ns0:post_date>2012-09-17 22:28:39</ns0:post_date>
  <ns0:post_name>steve-tolman-it-depends</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="balance">balance</category>
  <category domain="post_tag" nicename="communication">communication</category>
  <category domain="post_tag" nicename="complexity">complexity</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="category" nicename="role-models">Role Models</category>
  <category domain="post_tag" nicename="vision">vision</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>498</ns0:comment_id>
    <ns0:comment_author>3 Commandments of Performance Optimization &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/01/08/3-commandments-of-performance-optimization/</ns0:comment_author_url>
    <ns0:comment_date>2013-01-08 09:08:35</ns0:comment_date>
    <ns0:comment_content>[...] assume you buy my criticism of the extremes, and you&amp;#8217;re willing to apply the &amp;#8220;it depends&amp;#8221; doctrine. In some cases, you do nothing about performance, because the stakes are low. (Yes, all you [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2724</ns0:comment_id>
    <ns0:comment_author>Steve Jackson: Lead with Passion | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/09/30/steve-jackson-lead-with-passion/</ns0:comment_author_url>
    <ns0:comment_date>2013-09-30 11:49:32</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] from Daniel: This guest post, from my friend Steve Tolman, is part of an occasional series about important career role models. I also worked with Steve [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>10861</ns0:comment_id>
    <ns0:comment_author>Taming Side Agreements | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/10/28/taming-side-agreements/</ns0:comment_author_url>
    <ns0:comment_date>2014-10-28 08:36:10</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] the scale of your operation. In other words, be pragmatic, because the proper amount of investment depends. If you&amp;#8217;re writing a few quick scripts, this issue may not matter much&amp;#8211;but don&amp;#8217;t [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>8713</ns0:comment_id>
    <ns0:comment_author>Grumpy Old Men, Opacity, and Optimizers | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/09/09/grumpy-old-men-opacity-and-optimizers/</ns0:comment_author_url>
    <ns0:comment_date>2014-09-09 08:48:32</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] truths, which is a prime facie reason to treat the list a Bad Idea™ regardless. Remember: it depends. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Lynn Bendixsen: Listen.</title>
  <link>http://codecraft.co/2012/10/02/lynn-bendixsen-listen/</link>
  <pubDate>Tue, 02 Oct 2012 21:45:33 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=452</guid>
  <ns2:encoded>&lt;p style="text-align:right;"&gt;&lt;em&gt;(A post in my "&lt;a href="/category/role-models/"&gt;Role Models&lt;/a&gt;" series.)&lt;/em&gt;&lt;/p&gt;
When I worked at &lt;a href="http://www.perfectsearchcorp.com" target="_blank"&gt;Perfect Search&lt;/a&gt;, we had a standing joke that after the meeting agenda was done and we had given the word to adjourn, it was time to turn to &lt;a href="http://www.linkedin.com/pub/lynn-bendixsen/7/425/a94" target="_blank"&gt;Lynn&lt;/a&gt; and get his feedback. This joke was funny because on many occasions we'd seen Lynn ask penetrating questions after the rest of us rushed headlong through an issue and assumed all the thinking was done.

Although Lynn tolerates this joke with good grace, I think the joke isn't really fair to him, because there's nothing funny about thoughtful listening. The world could do with more people who've mastered Lynn's skill.

[caption id="" align="aligncenter" width="500"]&lt;a href="http://www.flickr.com/photos/grahams__flickr/371882597/"&gt;&lt;img title="listening" src="http://farm1.staticflickr.com/188/371882597_eed7dbd8d2.jpg" alt="" width="500" height="366" /&gt;&lt;/a&gt; Listen to understand, not to respond. Photo credit: Prisoner 5413 (Flickr)[/caption]

I recently blogged about &lt;a title="Humility" href="/2012/10/01/humility/"&gt;the importance of humility&lt;/a&gt;. It is not an accident that humility &lt;!--more--&gt;and active listening are closely related, and it is not an accident that the best listeners and most humble team members often make the largest (if not the most flashy) contributions to a team's success.

Listening is a lesson that has distilled on me gradually, rather than hitting me like a thunderclap. I can't count the number of times I've spoken with a colleague who listened intently to my concern or question. Such interactions often lead me to understand flaws in my own reasoning more powerfully than any argument or presentation could have--even if the listener says nothing more than "Really?" and "Oh."

More importantly, careful listening conveys a validation and respect for others that cannot be faked. Certainly, that's the case with Lynn.

If you believe that &lt;a title="Why People Are Part of A Software Architecture" href="http://codecraft.co/2008/06/25/why-people-are-part-of-a-software-architecture/"&gt;people are an integral part of the software discipline&lt;/a&gt;, or that &lt;a title="Users Aren’t The Only People In Your Software" href="/2012/09/04/users-arent-the-only-people-in-your-software/"&gt;you should understand those who interact with your product&lt;/a&gt;, then listening is a critical best practice.

Thanks for the lesson, Lynn.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Identify a team member who needs to be listened to more. Invest some time to learn from them or to be a sounding board.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>452</ns0:post_id>
  <ns0:post_date>2012-10-02 15:45:33</ns0:post_date>
  <ns0:post_name>lynn-bendixsen-listen</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="humility">humility</category>
  <category domain="post_tag" nicename="humor">humor</category>
  <category domain="post_tag" nicename="listening">listening</category>
  <category domain="category" nicename="role-models">Role Models</category>
  <category domain="post_tag" nicename="skills">skills</category>
  <category domain="post_tag" nicename="teamwork">teamwork</category>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:58:"http://farm1.staticflickr.com/188/371882597_eed7dbd8d2.jpg";s:6:"images";a:1:{s:58:"http://farm1.staticflickr.com/188/371882597_eed7dbd8d2.jpg";a:6:{s:8:"file_url";s:58:"http://farm1.staticflickr.com/188/371882597_eed7dbd8d2.jpg";s:5:"width";i:500;s:6:"height";i:366;s:4:"type";s:5:"image";s:4:"area";i:183000;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-10-02 16:36:33";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>2433</ns0:comment_id>
    <ns0:comment_author>Features are not chunks of code | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/07/25/features-are-not-chunks-of-code/</ns0:comment_author_url>
    <ns0:comment_date>2013-07-25 11:19:56</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] proud when they execute quickly to contribute code for features. But let&amp;#8217;s be a little more humble, patient, and team-oriented when we think about them. Let&amp;#8217;s recognize their complexity. And [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2726</ns0:comment_id>
    <ns0:comment_author>Steve Jackson: Lead with Passion | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/09/30/steve-jackson-lead-with-passion/</ns0:comment_author_url>
    <ns0:comment_date>2013-09-30 11:49:39</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] (I often took Jackson up on this and he heard many ears-full of my gripes.)  Once you have heard the issues and concerns, be sure to address them.  Quite possibly, half of your time will be addressing team morale and [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16817</ns0:comment_id>
    <ns0:comment_author>Are We Smart Enough to Use Kind Words? | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/10/06/use-kind-words/</ns0:comment_author_url>
    <ns0:comment_date>2015-10-06 16:36:00</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] star&amp;#8221;, if for no other reason than because the community has a longer lifespan. Humility and listening are worth keeping on our personal [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14918</ns0:comment_id>
    <ns0:comment_author>A grumble about buckets | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/04/08/a-grumble-about-buckets/</ns0:comment_author_url>
    <ns0:comment_date>2015-04-08 13:39:32</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] who wrote the parental control features at Netflix thought three buckets was plenty. What could listening teach [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Ken Ebert: Kill three birds.</title>
  <link>http://codecraft.co/2012/09/19/ken-ebert-kill-three-birds/</link>
  <pubDate>Wed, 19 Sep 2012 19:12:19 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=456</guid>
  <ns2:encoded>&lt;p style="text-align:right;"&gt;&lt;em&gt;(A post in my “&lt;a href="/category/role-models/"&gt;Role Models&lt;/a&gt;” series…)&lt;/em&gt;&lt;/p&gt;


[caption id="" align="alignright" width="333"]&lt;img title="three birds" src="http://farm4.staticflickr.com/3074/2964654279_301b98257f.jpg" alt="" width="333" height="500" /&gt; Killing birds is just a metaphor; who'd want to hurt something this cute? Photo credit: Valerian Gaudeau (Flickr).[/caption]

Most people optimize for a single outcome.

Ken Ebert is made of smarter stuff.

When I began my career, I was like many engineers--keenly aware of issues like code quality and performance, but not so clued in to customer experience or business priorities. I'd go to team meetings, get new assignments, and head back to my cube to code away. If I was unsure how to accomplish my goals, I'd ask a senior engineer, and do my best to reflect the values they cared about. After all, they were the experts.

It gradually dawned on me that some of my engineer mentors (not many; geeks are better-rounded than popular stereotypes make them out to be...) suffered from a kind of myopia. They could build complicated and highly functional things, but they had little interest in how their constructions mapped into sales, revenue, and company success. I went through a revolution in my perspective, got religion about user experience, and spent a lot of time learning from product management.

In 2003, Symantec acquired several companies in rapid succession, and threw five sites together into a new business unit with marching orders to build a suite and conquer the world. I was tasked with architecture across the picture, and my perspective expanded again. Now it wasn't just a single product's success I was worrying about--I had to make or shepherd design decisions that enhanced the profitability of multiple independent products as well as the amalgam of all of them. Was it more important to make codebase &lt;em&gt;X&lt;/em&gt; localizable, or to invest in a better install for codebase &lt;em&gt;Y&lt;/em&gt;? If team &lt;em&gt;A&lt;/em&gt; moved to a newer version of tomcat, would it break the integration story for our suite or impose undue burdens on team &lt;em&gt;B&lt;/em&gt;? Resources were constrained (they always are!), time was short...

I began to sense that the way I made decisions needed to change, but it wasn't until I worked intensely with Ken Ebert, years later, that I could put into words exactly how.

Making wise decisions about architecture, SOP on dev teams, product features, investment in R&amp;amp;D versus marketing--it's like trying to solve an equation with multiple variables. &lt;em&gt;Profit maximization requires that you consider more than one input at a time. &lt;/em&gt;This is partly what I had in mind when I blogged about &lt;a title="Good Code Is Balanced" href="/2012/08/27/good-code-is-balanced/"&gt;the need for balance in good code&lt;/a&gt;, and when I blogged about &lt;a title="Good Code Is Optimized" href="/2012/08/27/good-code-is-optimized/"&gt;optimization&lt;/a&gt;.

Many times I've heard Ken say something like this: "I think we should make feature &lt;em&gt;N&lt;/em&gt; the centerpiece of our next release." And my first response has been, "That's doable, but kinda boring. Why not focus on &lt;em&gt;M&lt;/em&gt; instead?"

When Ken nods sagely at my question, I know what's coming.

"&lt;em&gt;N&lt;/em&gt; is glamorous, and low-risk, but it's only useful to 3% of our customers. If we build &lt;em&gt;M&lt;/em&gt;, we'll address a sales inhibitor for half the funnel, plus we'll be positioned to do features &lt;em&gt;P&lt;/em&gt; and &lt;em&gt;Q&lt;/em&gt; on our long-term roadmap, plus I'll be able to get an analyst to write about it, plus ..., plus ..."

Ken doesn't just kill two birds with one stone. He kills three, or five, or six.

I'm not sure how Ken manages to be so good at this, but here's what I've done to try to approximate his success:
&lt;ul&gt;
	&lt;li&gt;Evaluate in multiple time horizons.&lt;/li&gt;
	&lt;li&gt;Evaluate for the channel as well as direct sales.&lt;/li&gt;
	&lt;li&gt;Evaluate for support and professional services as well as dev.&lt;/li&gt;
	&lt;li&gt;Evaluate for marketing value.&lt;/li&gt;
	&lt;li&gt;Evaluate for opportunity cost.&lt;/li&gt;
	&lt;li&gt;Evaluate with an eye to domino effects.&lt;/li&gt;
	&lt;li&gt;Evaluate for morale and momentum.&lt;/li&gt;
	&lt;li&gt;Evaluate for technical debt.&lt;/li&gt;
&lt;/ul&gt;
Of course, nobody can do all of these, exhaustively, all the time. &lt;a title="Don Kleinschnitz: Put a stake in the ground." href="/2012/09/14/don-kleinschnitz-stake/"&gt;Don Kleinschnitz's wisdom about putting a stake in the ground&lt;/a&gt; is an important counterbalance. But I find that I &lt;em&gt;can&lt;/em&gt; think, at least briefly, about ramifications of a choice from multiple perspectives--and when I do, I often make better choices.

Thanks for the lesson, Ken.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Look at the bulleted list of perspectives above; find one you've been neglecting. Pick a significant decision that's on the horizon, and spend some time thinking seriously about that decision in the context of the neglected perspective. What did you learn?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>456</ns0:post_id>
  <ns0:post_date>2012-09-19 13:12:19</ns0:post_date>
  <ns0:post_name>ken-ebert-kill-three-birds</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="architecture">architecture</category>
  <category domain="post_tag" nicename="balance">balance</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="mentors">mentors</category>
  <category domain="post_tag" nicename="optimization">optimization</category>
  <category domain="post_tag" nicename="product-management">product management</category>
  <category domain="category" nicename="role-models">Role Models</category>
  <category domain="post_tag" nicename="ux">ux</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:60:"http://farm4.staticflickr.com/3074/2964654279_301b98257f.jpg";s:6:"images";a:1:{s:60:"http://farm4.staticflickr.com/3074/2964654279_301b98257f.jpg";a:6:{s:8:"file_url";s:60:"http://farm4.staticflickr.com/3074/2964654279_301b98257f.jpg";s:5:"width";i:333;s:6:"height";i:500;s:4:"type";s:5:"image";s:4:"area";i:166500;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-09-19 19:18:00";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>662</ns0:comment_id>
    <ns0:comment_author>Smart Geeks Think Like Cheerleaders &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/02/05/smart-geeks-think-like-cheerleaders/</ns0:comment_author_url>
    <ns0:comment_date>2013-02-05 08:57:48</ns0:comment_date>
    <ns0:comment_content>[...] We forget that we are optimizing many variables at once. [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2434</ns0:comment_id>
    <ns0:comment_author>Features are not chunks of code | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/07/25/features-are-not-chunks-of-code/</ns0:comment_author_url>
    <ns0:comment_date>2013-07-25 11:19:58</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] Let&amp;#8217;s recognize their complexity. And let&amp;#8217;s add them selectively, understanding their value in the overall scheme of things, their ongoing cost, and the commitments they [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2488</ns0:comment_id>
    <ns0:comment_author>The third half of computational economics | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/08/09/the-third-half-of-computational-economics/</ns0:comment_author_url>
    <ns0:comment_date>2013-08-09 11:58:38</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] buddy Ken Ebert likes to joke about incomplete thinking by saying, &amp;#8220;There are 2 aspects of the [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Roland Whatcott: Manage momentum.</title>
  <link>http://codecraft.co/2012/09/21/roland-whatcott-manage-momentum/</link>
  <pubDate>Fri, 21 Sep 2012 17:22:44 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=460</guid>
  <ns2:encoded>&lt;p style="text-align:right;"&gt;&lt;em&gt;(A post in my “&lt;a href="/category/role-models/"&gt;Role Models&lt;/a&gt;” series…)&lt;/em&gt;&lt;/p&gt;
&lt;p style="text-align:left;"&gt;In late 2000, I joined a small team tasked with rewriting the core technology at PowerQuest. The old codebase--despite embodying a number of patent-pending concepts, and serving as the foundation for all our revenue--was fragile, rife with technical debt, and unfriendly to localization, new platforms, and other roadmap priorities.&lt;/p&gt;


[caption id="" align="alignright" width="320"]&lt;a href="http://en.wikipedia.org/wiki/File:Viking_5C_rocketengine.jpg"&gt;&lt;img title="rocket engine" src="http://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/Viking_5C_rocketengine.jpg/320px-Viking_5C_rocketengine.jpg" alt="" width="320" height="480" /&gt;&lt;/a&gt; Building our new engine wasn't exactly rocket science, but we expected our output to be cool and generate lots of thrust. We took our work as seriously as NASA... Photo Credit: Wikimedia Commons[/caption]
&lt;p style="text-align:left;"&gt;This rewrite had been attempted before--more than once, by some of the brightest engineers I've ever worked with. Each time, the press of looming releases, and the lack of obvious progress, culminated in a "we'll have to come back to this later" decision.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;Our little team was confident that This Would Not Happen To Us. We were going to build an engine that was cross-platform from the ground up. No weird dependencies, no assumptions about compiler quirks or endianness, would permeate the code. Internationalization (i18n) and localization (l10n) support would be baked in. Errors would be clearer. Modules would be small, beautiful, and loosely coupled. Gotos would disappear. Vestiges of C dialect would be replaced by best-practice STL, boost, metaprogramming, and other cutting-edge C++ ideas.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;&lt;strong&gt;Experience Versus Enthusiasm&lt;/strong&gt;&lt;/p&gt;
&lt;p style="text-align:left;"&gt;Before I tell the rest of the story, make a prediction. Do you think we crashed and burned, muddled through, or succeeded wildly?&lt;/p&gt;
&lt;p style="text-align:left;"&gt;How you answer will say a lot about you.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;If you're young and optimistic, you may expect me to tell a story with a happy ending. But if you're an industry veteran, you probably expect I'm going to tell a cautionary tale framed by failure. You know that rewriting a core technology from scratch almost never succeeds, and you can give a dozen excellent reasons why that's the case.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;If you've got Roland Whatcott's genius, you can imagine either outcome -- and more importantly, you know how you can choose the future you want.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;&lt;strong&gt;&lt;!--more--&gt;Roland Arrives&lt;/strong&gt;&lt;/p&gt;
&lt;p style="text-align:left;"&gt;Fast forward a few months. A couple senior programmers had been pulled onto other assignments. They'd been back-filled, sort of, although replacements were part-time loaners, with competing priorities elsewhere. We had the working skeleton of an engine, and it could do some cool things. We could compile it for different processor architectures--or so we claimed. It had so far avoided a lot of the warts that made the old engine ugly. We had automated builds and a working unit test framework. We'd written tests for many aspects of the system. When management asked us for a demo, we'd launch our testrunner and show how everything turned green.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;Most importantly, the new engine had its first "customer" -- an internal team was planning to build a new product on top of our codebase/API.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;At this point, I was functioning as a technical team lead as well as an ad hoc manager. I remember attending iteration meetings for the product team that was our customer, listening to their requirements, and going back to my own team with long lists of tasks, interdependencies, and action items.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;When I heard that a newly hired manager named Roland Whatcott would soon take over the management side of my responsibilities, I was elated. Now I could get back to my major interest, which was writing code. He'd take care of all the "other stuff."&lt;/p&gt;
&lt;p style="text-align:left;"&gt;Roland saw our demos, reviewed the codebase, got to know the team, went to meetings... And he became concerned. Yes, our team was making steady progress. Yes, we had been productive, by many measures. But our customer team was not happy. We were delivering what we planned in our iterations, largely on time and on target; yet the set of features ready for prime time was not yet broad enough for a complex layer of business logic, let alone a UI, to build upon. Many of the features we delivered would "work" in some sense, but with so many caveats that they didn't yet have a lot of practical value. Our "demos" were actually de-motivating to many, since they ran in debuggers or shells, quite divorced from any useful product context. And most troubling, upper management was strained to keep funding the new engine instead of building revenue-producing features on top of what already worked.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;Roland told me he was worried. I could understand some of what bothered him, but I didn't have a lot of problem-solving vision. The smartest course seemed to be to double down and get through faster.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;Roland believed in stretch goals, but he didn't think heroism alone would see us through. He saw clearly that our momentum was faltering toward zero.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;This, he knew, was a serious problem.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;Momentum matters.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;&lt;strong&gt;Intervention&lt;/strong&gt;&lt;/p&gt;
&lt;p style="text-align:left;"&gt;Roland's response to this quandry was both astute and creative.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;He went looking for momentum.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;He'd heard talk about HP's need for a disk imaging product that would support its new itanium server line. Itanium was a totally unfamiliar processor architecture, with crude compiler support. The old engine didn't have a snowball's chance in Phoenix of supporting Itanium. But the new engine did. We were endian- and bitness-agnostic, right?&lt;/p&gt;
&lt;p style="text-align:left;"&gt;In fairly short order, we were signed up to ship a product to HP. The timetable was whirlwind short. Our mainstream product team customers were 9 months away from shipping; the HP product needed to be in customer hands in a couple months.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;I remember complaining to Roland about the ridiculousness of this release. We'd have to hurry the development of some features that we'd been planning to mature over a much longer timeframe, and neglect capabilities that were already halfway implemented. How were we supposed to do continuous integration, if we didn't have any 64-bit itaniums to run our unit tests, and the compiler barely worked? Our automated build system would lose most of its value. And we didn't even know that the itanium release would make money; it was barely on product management's radar.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;All of my objections were reasonable, I think. But they were irrelevant. Roland knew that without a momentum boost, our initiative would be scrapped, and we'd be right back in the old engine quagmire all over again.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;&lt;strong&gt;Long Story Short&lt;/strong&gt;&lt;/p&gt;
&lt;p style="text-align:left;"&gt;We pulled it off. We shipped the world's first disk imaging product for itanium, on a schedule so aggressive it even made the customer's head spin. It was not easy. There was pain--for those on our team, and for the product team that was waiting for more mainstream features to mature. Kudos to lots of smart engineers, to Roland's savvy management, and to the courage and vision of upper management, who let us try.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;We emerged with momentum. Those unit tests we'd worked so hard to create now had a track record of stabilizing the code on the shifting sand of alpha-generation compilers and alpha-generation c runtimes--to the point where the new engine was demonstrably more stable than the code it proposed to supersede. Managers talked about it. The decoupling we created with abstract factories and dependency injection had clearly kept the worst of platform differences at bay; nobody wondered anymore if we could do a Linux port. Teams wondering if they could depend on the new engine folks to come through in the clutch no longer woke up sweating in the middle of the night.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;A few months later, the product team that had been our original internal customer shipped. Disk-based backup entered the imaging age, and "the new engine" turned into "the engine" to folks in our department.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;&lt;strong&gt;The Moral&lt;/strong&gt;&lt;/p&gt;
&lt;p style="text-align:left;"&gt;Just because momentum is a state of mind doesn't mean it lacks real-world consequences. Make sure that ambitious undertakings have plenty of momentum all along the way. Win early and often, not just in a big bang at the end; if you wait too long, the big bang might never materialize.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;Like all principles, this one can be misapplied. You can hype to get temporary momentum spikes; you can make too many short-term compromises for the sake of brownie points, and sabotage your future.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;But if you do it right, momentum will carry you through some incredibly difficult challenges with flying colors.&lt;/p&gt;
&lt;p style="text-align:left;"&gt;Thanks for the lesson, Roland.&lt;/p&gt;
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="text-align:left;padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Analyze the momentum for a recent or current project. What challenges to momentum do you have? How can you overcome them.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>460</ns0:post_id>
  <ns0:post_date>2012-09-21 11:22:44</ns0:post_date>
  <ns0:post_name>roland-whatcott-manage-momentum</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="i18n">i18n</category>
  <category domain="post_tag" nicename="itanium">itanium</category>
  <category domain="post_tag" nicename="iterations">iterations</category>
  <category domain="post_tag" nicename="l10n">l10n</category>
  <category domain="post_tag" nicename="linux">linux</category>
  <category domain="post_tag" nicename="momentum">momentum</category>
  <category domain="post_tag" nicename="morale">morale</category>
  <category domain="post_tag" nicename="porting">porting</category>
  <category domain="category" nicename="role-models">Role Models</category>
  <category domain="post_tag" nicename="unit-tests">unit tests</category>
  <category domain="post_tag" nicename="vision">vision</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:2:{s:7:"twitter";a:1:{i:1511181;i:17;}s:2:"wp";a:1:{i:0;i:12;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>166</ns0:comment_id>
    <ns0:comment_author>Coping With Organizational Alzheimers &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2012/10/12/coping-with-organizational-alzheimers/</ns0:comment_author_url>
    <ns0:comment_date>2012-10-12 11:37:24</ns0:comment_date>
    <ns0:comment_content>[...] big problem with most companies,&amp;#8221; said Roland, &amp;#8220;is that they have no institutional [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>195</ns0:comment_id>
    <ns0:comment_author>Kim</ns0:comment_author>
    <ns0:comment_author_email>kim@kd7ike.info</ns0:comment_author_email>
    <ns0:comment_date>2012-10-19 08:08:46</ns0:comment_date>
    <ns0:comment_content>Daniel,

Thanks for sharing. 

"He went looking for momentum." - I wonder if starting on the portion of a project that seems less interesting architecturally may be more value because of the momentum it brings into the picture.

Kim</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>196</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-10-19 11:02:17</ns0:comment_date>
    <ns0:comment_content>Momentum is not equally important in all circumstances, but as a general rule, I think this is a very astute observation, Kim. Part of the balance you have to strike is to be able to recognize very early (often based on battle scars and/or intuition) when focusing on architectural questions is necessary, and when getting momentum on more humdrum stuff is a bigger benefit. (These two orientations are not necessary mutually exclusive, but they *do* compete to some degree.)</ns0:comment_content>
    <ns0:comment_parent>195</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>563</ns0:comment_id>
    <ns0:comment_author>Interrupting my interruptions &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/01/24/interrupting-my-interruptions/</ns0:comment_author_url>
    <ns0:comment_date>2013-01-24 11:48:47</ns0:comment_date>
    <ns0:comment_content>[...] I&amp;#8217;m attending (or calling) are how I develop shared mental models, motivate and teach, manage momentum, and put a stake in the ground. Those wikipedia pages and chat sessions and interesting blog posts [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>660</ns0:comment_id>
    <ns0:comment_author>Smart Geeks Think Like Cheerleaders &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/02/05/smart-geeks-think-like-cheerleaders/</ns0:comment_author_url>
    <ns0:comment_date>2013-02-05 08:57:43</ns0:comment_date>
    <ns0:comment_content>[...] programming language, product schedule, or architecture&amp;#8211;so much so that we lose momentum or [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2255</ns0:comment_id>
    <ns0:comment_author>2 Surprising Truths About The Iron Triangle | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/07/01/2-surprising-truths-about-the-iron-triangle/</ns0:comment_author_url>
    <ns0:comment_date>2013-07-01 16:39:12</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] I&amp;#8217;m not claiming it&amp;#8217;s easy. I&amp;#8217;m not offering a recipe to convince them (though momentum will probably be an ingredient). I&amp;#8217;m just saying it&amp;#8217;s worth the effort, because there [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Progressive Disclosure Everywhere</title>
  <link>http://codecraft.co/2012/09/16/progressive-disclosure-everywhere/</link>
  <pubDate>Mon, 17 Sep 2012 00:15:13 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=490</guid>
  <ns2:encoded>If you google "progressive disclosure," you'll get hits that describe the phrase as an interaction design technique. UI folks have long recognized that it's better to show a simple set of options, and allow users to drill into greater detail only when they need it. (Thanks to James Russell--a brilliant UI designer--for teaching me PD years ago.)

But calling progressive disclosure a "technique" is, I think, a serious understatement. Progressive disclosure aligns with a profound cognitive principle, and its use is (and should be) pervasive, if you have eyes to see.

&lt;strong&gt;The Principle&lt;/strong&gt;

Here's my best attempt to distill the operative rule behind progressive disclosure:
&lt;p style="text-align:center;font-weight:bold;font-size:150%;background-color:#eee;border:solid 1px #CCC;padding:.5em 1em;"&gt;Focus on essence. Elaborate on demand.&lt;/p&gt;
In other words, begin by addressing fundamentals without cluttering detail. When more detail is needed, find the next appropriate state, and move there. Repeat as appropriate.

Stated that way, perhaps you'll see the pattern of progressive disclosure in lots of unexpected places. I've listed a few that occur to me...

&lt;strong&gt;Manifestations&lt;/strong&gt;

The scientific method is an iterative process in which hypotheses gradually align to increasingly detailed observation. We learn by progressive disclosure.

Good conversationalists don't gush forever on a topic. They throw out an observation or a tidbit, and wait to see if others are interested. If yes, they offer more info.

The development of a complex organism from a one-celled zygote, through differentiation and all subsequent phases, into adulthood, could be considered a progressive disclosure of the patterns embedded in its DNA. The recursive incorporation of the golden mean in many morphologies is another tie to biology.

[caption id="" align="aligncenter" width="356"]&lt;a href="http://en.wikipedia.org/wiki/File:NautilusCutawayLogarithmicSpiral.jpg"&gt;&lt;img class="  " title="nautilus shell" src="http://upload.wikimedia.org/wikipedia/commons/thumb/0/08/NautilusCutawayLogarithmicSpiral.jpg/635px-NautilusCutawayLogarithmicSpiral.jpg" alt="" width="356" height="269" /&gt;&lt;/a&gt; A nautilus grows--progressively discloses--the protective covering it requires over its lifespan. The golden mean, repeated and repeated... Photo credit: Wikimedia Commons.[/caption]

In journalism, the &lt;a href="http://en.wikipedia.org/wiki/Inverted_pyramid" target="_blank"&gt;inverted pyramid&lt;/a&gt; approach to storytelling is a form of progressive disclosure. So are headlines.

Depending on how you're reading this post, you might see a "Read more..." link that I've inserted right after this paragraph. Making below-the-fold reading optional is progressive disclosure at work. TLDR...

&lt;!--more--&gt;

Agile software development is a form of progressive disclosure. You start out with vague requirements, and turn your clarifying attention to a small subset, one sprint/iteration at a time. Contrast waterfall, where all requirements must be spelled out in great detail, in advance.

Derivatives and integrals in calculus (not to mention fractals, and lots of other mathematical concepts) capture the result of a limit-as-x-approaches-zero function.

&lt;a href="http://en.wikipedia.org/wiki/Markedness" target="_blank"&gt;Markedness in language&lt;/a&gt; reveals a linguistic community's preference for what can be assumed or omitted, and what must be explicitly stated. To override the default semantic payload, extra negotiation and effort (the "mark") is required.

&lt;a href="http://www.sprez.com/articles/task-documentation-design.html" target="_blank"&gt;Task-based documentation&lt;/a&gt; is motivated by the insight that people rarely want to know everything they possibly could about a given topic--they're happier just knowing enough to get their job done, and finding information aligned with their current focus.

In many religious traditions, the idea of reaching higher and higher levels of enlightenment over time is important. A common observation in such world views is that simple beginnings form the foundation for later growth. C.S. Lewis explored this spiritual odyssey in &lt;em&gt;The Great Divorce&lt;/em&gt;; he returned to it in &lt;em&gt;The Last Battle&lt;/em&gt; with the metaphor of a stable bigger on the inside than the outside, and repeated invitations to "come further up, further in."

In software ecosystems, the increasingly popular philosophy of convention over configuration allows uninteresting details to be deferred and often ignored entirely.

Most education gives high-level summaries in introductory courses, saving complex details for a follow-on.

In gaming, the pervasive notion of "levels" allows the creators to disclose experience a little at a time.

In programming languages, constructs such as default parameters, interfaces, abstract base classes, abstract factories, templates, and mixins all help to minimize the level of detail that must be mastered to work effectively in unfamiliar contexts.

In western culture, traditions of healthy dating and courtship involve a progression of increasing intimacy in which each party gradually comes to know the other more and more deeply, in a variety of settings.

In sports, a champion is often derived through a tournament, in which the best competitors become obvious through repeated elimination rounds.

In music theory, a theme is typically articulated in the opening bars of a composition, and then elaborated and embellished as the piece develops.

Treeviews and fish-eye lenses in software UI are forms of progressive disclosure.

In &lt;em&gt;Great By Choice&lt;/em&gt;, Jim Collins' notion of firing bullets, then cannonballs is an attempt to describe how successful companies commit resources incrementally.

In children's literature, the idea of a reiterated and expanded problem or solution crops up repeatedly. Think of Kipling's &lt;em&gt;The Elephant's Child&lt;/em&gt;, Hansel and Gretel, Goldilocks and the three bears, Sheherazade...

&lt;strong&gt;The Moral&lt;/strong&gt;

What should we learn from this principle's pervasiveness?

I believe one important lesson is that we ignore this principle at our peril. Humans need gradually expanded focus, not sudden overload. Flout progressive disclosure in a conversation, and people will think you're a bore or a know-it-all. Use cheats to get to level 99 in an MMORPG, and you'll miss the experience that makes the game rich. Skip courtship in favor of one-night stands, and you get existential angst.

Applied to software, I think we need to be much, much more aware of when we're disclosing too much too soon. There's a reason why encapsulation is one of the foundational ideas in OO theory, and why tight coupling is a major problem for living software ecosystems.

I have some ideas about how progressive disclosure might manifest more cleanly in programming languages, and in the software craft in general. I explored one in my series of posts on &lt;a title="Role-Play Centered Design" href="http://codecraft.co/2012/06/20/role-play-centered-design/"&gt;role-play centered design&lt;/a&gt;. I'll disclose some more ideas ... progressively ... in other posts. :-)
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Analyze a piece of code with progressive disclosure lenses. What do you (what does the compiler) have to know about this code to interact with it successfully? For example, does a C++ header #include a bunch of other headers when it could use a forward declaration instead? Could you use the pimpl idiom to decrease what's exposed? Is there a class that should be used through an interface? Do the comments and names disclose the right amount of detail in the right places?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>490</ns0:post_id>
  <ns0:post_date>2012-09-16 17:15:13</ns0:post_date>
  <ns0:post_name>progressive-disclosure-everywhere</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="agile">agile</category>
  <category domain="post_tag" nicename="biology">biology</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="encapsulation">encapsulation</category>
  <category domain="post_tag" nicename="loose-coupling">loose coupling</category>
  <category domain="post_tag" nicename="progressive-disclosure">progressive disclosure</category>
  <category domain="post_tag" nicename="religion">religion</category>
  <category domain="category" nicename="software-architecture">Software Architecture</category>
  <category domain="post_tag" nicename="ucd">ucd</category>
  <category domain="post_tag" nicename="ux">ux</category>
  <category domain="post_tag" nicename="waterfall">waterfall</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:136:"http://upload.wikimedia.org/wikipedia/commons/thumb/0/08/NautilusCutawayLogarithmicSpiral.jpg/635px-NautilusCutawayLogarithmicSpiral.jpg";s:6:"images";a:1:{s:136:"http://upload.wikimedia.org/wikipedia/commons/thumb/0/08/NautilusCutawayLogarithmicSpiral.jpg/635px-NautilusCutawayLogarithmicSpiral.jpg";a:6:{s:8:"file_url";s:136:"http://upload.wikimedia.org/wikipedia/commons/thumb/0/08/NautilusCutawayLogarithmicSpiral.jpg/635px-NautilusCutawayLogarithmicSpiral.jpg";s:5:"width";i:635;s:6:"height";i:480;s:4:"type";s:5:"image";s:4:"area";i:304800;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-09-17 00:28:45";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>2684</ns0:comment_id>
    <ns0:comment_author>What should code look like when we squint at it? | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/09/19/what-should-code-look-like-when-we-squint-at-it/</ns0:comment_author_url>
    <ns0:comment_date>2013-09-19 08:22:54</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] maybe, profound—how nicely this piece of advice maps onto the design principle of progressive disclosure. The human mind is simply wired to perceive in broad outlines, and then to gradually clarify, a few [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2502</ns0:comment_id>
    <ns0:comment_author>Headers, babies, and bathwater | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/08/12/headers-babies-and-bathwater/</ns0:comment_author_url>
    <ns0:comment_date>2013-08-12 11:02:29</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] is the the first baby that&amp;#8217;s being thrown out with the bathwater. Think progressive disclosure: headers could dramatically simplify what a consumer of code has to wade through. If they worked [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Code Isn't Art</title>
  <link>http://codecraft.co/2012/09/23/code-isnt-art/</link>
  <pubDate>Sun, 23 Sep 2012 23:46:09 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=543</guid>
  <ns2:encoded>&lt;a href="/category/guest-posts/"&gt;&lt;img class="alignright size-full wp-image-553" title="guest post" src="http://codecraft.co/wp-content/uploads/2012/09/guest-post.png" alt="" width="183" height="40" /&gt;&lt;/a&gt;Programmers, tell your inner artist to shut up.

One of the defining aspects of the Ruby programming language is that it is very flexible. It takes a very UNIX-like approach of having a few simple and well-defined functions that allow you to build rather complex systems. Unfortunately, it also ends up encouraging programmers to start thinking of their code as art, and then they start writing “clever” code. There’s nothing necessarily wrong with finding an unconventional solution to a coding problem, but that often falls apart when you have to involve another human in reading your “art”.

Let’s use an example from SQL of a “clever” solution. Take a look at the following query:
&lt;p style="padding:10px;margin:10px 20px;font-family:courier, fixedsys;font-size:90%;background-color:#eee;border:solid 1px #ccc;"&gt;SELECT cl.Language, c.Name AS “Country Name” FROM CountryLanguage AS cl INNER JOIN Country AS c ON cl.CountryCode=c.Code SORT BY c.Code&lt;/p&gt;
How long did it take you to read that query? Probably a good minute or two because you had to expand out all of the aliases to figure out what it’s doing. Compare that to the unaliased version below:
&lt;p style="padding:10px;margin:10px 20px;font-family:courier, fixedsys;font-size:90%;background-color:#eee;border:solid 1px #ccc;"&gt;SELECT CountryLanguage.Language, Country.Name AS “Country Name” FROM Country Language INNER JOIN Country on CountryLanguage.CountryCode=Country.Code SORT BY Country.Code&lt;/p&gt;
As you can see, it isn’t a “clever” query, but it sure is a lot more readable to a third party.

A lot of programmers will probably come back with “so what? I can read my own code and it gives me the result I want.” The fatal flaw here is that code is written not for machines, but for people. (Odds are good you’re also not going to be the only person that sees that code.) If we were writing for machines, you’d be using pure binary. All programming languages are made to give humans a way to express this in terms that are much more easily understood. Heck, SQL had an explicit design goal to be easily understood by accountants that needed to work with a database. The human element is crucial.

This is especially frustrating for those of us in support roles. I have a long history with SQL, some PHP experience, and I’ve done some dabbling with Ruby on Rails, but that’s atypical. Most support people don’t have any programming experience. What if they’re in a situation where they need to decipher the scripts that support a product or, heaven forbid, peruse the source code to try and find the cause of a particular error? They can probably figure out verbose code from having dealt with pseudo-code examples but will run straight into a brick wall if a programmer decided to be “clever”. Now the engineering team has to be drawn into something that could have potentially been resolved by support.

The question you have to ask yourself is if the ego boost from “clever” code is worth the increased work created when others don’t understand your “art”. I’m going to bet that your team members, members of supporting teams, and any management you report to won’t look favorably upon it.

&lt;hr /&gt;

&lt;img style="margin-right:20px;" title="Jesse Harris" src="https://lh5.googleusercontent.com/-JeFtN8B6Ogc/AAAAAAAAAAI/AAAAAAAABQc/SgA4WJc7j20/s250-c-k/photo.jpg" alt="" width="100" height="100" align="left" /&gt;

&lt;em&gt;&lt;a href="https://plus.google.com/108404514060536763555/posts" target="_blank"&gt;Jesse Harris&lt;/a&gt; has been a geek since cutting his teeth on the Commodore 64 in pre-school. He currently works in support at RSA, the security division of EMC, and has been doing support, systems administration, and web development for 13 years.&lt;/em&gt;
&lt;p style="padding-top:1em;"&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>543</ns0:post_id>
  <ns0:post_date>2012-09-23 17:46:09</ns0:post_date>
  <ns0:post_name>code-isnt-art</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="category" nicename="guest-posts">Guest Posts</category>
  <category domain="post_tag" nicename="ruby">ruby</category>
  <category domain="post_tag" nicename="sql">sql</category>
  <category domain="post_tag" nicename="supportability">supportability</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>88</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-09-23 17:55:58</ns0:comment_date>
    <ns0:comment_content>I see echoes of Martin Fowler ("any fool can write code a computer can understand; good programmers write code that humans can understand") in your thinking, Jesse. Also, you remind me of Richard Gabriel's notion of "habitability" (from _Patterns of Software_). He deplores cleverness and instead advocates making code approachable and comfortable for others.

BTW, in the subtitle of my blog, I assert that software = science + art + people. This might sound like we're at odds, but I don't think so. I'm claiming that human creativity, not just hard-core algorithms, is an essential ingredient of software; you're warning coders not to get carried away. I think that's good advice.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
</item>
<item>
  <title>Julie Jones: Learn voraciously.</title>
  <link>http://codecraft.co/2012/09/24/julie-jones-learn-voraciously/</link>
  <pubDate>Tue, 25 Sep 2012 00:01:59 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=558</guid>
  <ns2:encoded>&lt;p style="text-align:right;"&gt;&lt;em&gt;(A post in my “&lt;a href="/category/role-models/"&gt;Role Models&lt;/a&gt;” series…)&lt;/em&gt;&lt;/p&gt;
When you're a twenty-something computer geek, the pace of the software industry doesn't worry you much. You're full of energy and enthusiasm for your chosen career, and you're confident you'll quickly absorb whatever wasn't covered during college.

Add a decade or so, and you may see the world a bit differently.

&lt;strong&gt;Expertise and Moving Targets&lt;/strong&gt;

[caption id="" align="alignright" width="312"]&lt;a href="http://en.wikipedia.org/wiki/File:Cello_study.jpg"&gt;&lt;img title="cello" src="http://upload.wikimedia.org/wikipedia/commons/thumb/8/89/Cello_study.jpg/320px-Cello_study.jpg" alt="" width="312" height="467" /&gt;&lt;/a&gt; Is mastery possible when your instrument keeps changing? Photo credit: Wikimedia Commons[/caption]

The rate at which new technologies burst on the scene, acquire mindshare, and demand the attention of engineers can be overwhelming. A journeyman's knowledge on a given subject may be obsolete long before it matures into mastery. Gartner's hype cycle can make your head hurt.

If you aspire to excellence, the dawning realization that you will never learn it all (you can't be perfect on breadth), and that even in a narrower problem domain where you might specialize, flux will erode your skills (you can't be perfect on depth) might cause some angst.

Maybe you've read Malcom Gladwell's &lt;em&gt;Outliers. &lt;/em&gt;Yo Yo Ma put in 10,000 hours to become great at the cello; what are you supposed to do if your instrument changes every year or two?

My friend Julie has an answer.

&lt;strong&gt;Learning to Learn&lt;/strong&gt;

I first met &lt;a href="http://www.linkedin.com/pub/julie-jones/15/908/768" target="_blank"&gt;Julie Jones&lt;/a&gt; when I was in my early 30's. We worked together on the "new engine" initiative at PowerQuest (a pivotal experience &lt;a title="Roland Whatcott: Manage momentum." href="/2012/09/21/roland-whatcott-manage-momentum/"&gt;I've blogged about before&lt;/a&gt;). Julie had much more experience than I did; she taught me abstract factories and dependency injection, loose coupling, declarative programming, streams, unit testing, XP, and many other key concepts.

At first I thought Julie just plucked these ideas out of an impressive mental archive. She had rich and varied experience, and she seemed to know &lt;em&gt;so much&lt;/em&gt;.

As I came to know her better, however, I realized that knowledge was not her great talent. Sure, she knows a lot--but more importantly, she &lt;em&gt;learns&lt;/em&gt; a lot. The XP she taught me--that came from a book by Kent Beck that she'd just finished. The loose coupling? Scott Meyers, &lt;em&gt;Effective C++. &lt;/em&gt;Again, recent reading. Fancy template techniques? Alexandrescu, &lt;em&gt;Modern C++ Design&lt;/em&gt;, just barely published.

Julie was constantly, steadily learning. She subscribed to the &lt;em&gt;C++ User's Journal&lt;/em&gt;. She played around with new boost libraries. When she got an assignment to improve the build system, she tinkered with Perl, then decided she wanted to learn Python and threw herself into the effort with gusto. One weekend, she wrote a Python module to manage advancement in her foosball tournament; within a month or two, she was teaching the rest of us. She was always adding new books to her bookshelf. She went to conferences. When we had to have support for LDM and dynamic disks in our disk management layer, Julie volunteered, studied the relevant specs, and quickly rolled out library extensions.

What I learned from Julie's example is that a superb software engineer isn't so much an expert on a technology; a superb software engineer is an expert &lt;em&gt;student&lt;/em&gt; of technology.

Learn to learn. In the long run, the engineer who's mastered &lt;em&gt;that&lt;/em&gt; skill will deliver far more business value than a narrow subject matter expert. And she or he will have a lot more fun surfing the turbulence of the tech industry.

Thanks for the lesson, Julie.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;span style="color:#000080;"&gt;&lt;strong&gt;Action Item&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;span style="color:#000080;"&gt;&lt;em&gt;Identify a few habits you could form to help you learn more, more often, and more easily. (Check out &lt;a title="Six Learning Tips For Tech Folks" href="/2012/09/25/six-learning-tips-for-tech-folks/"&gt;this post&lt;/a&gt; for some ideas.) Start working on them.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>558</ns0:post_id>
  <ns0:post_date>2012-09-24 18:01:59</ns0:post_date>
  <ns0:post_name>julie-jones-learn-voraciously</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="education">education</category>
  <category domain="post_tag" nicename="habits">habits</category>
  <category domain="post_tag" nicename="hype">hype</category>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <category domain="post_tag" nicename="learning">learning</category>
  <category domain="post_tag" nicename="pace">pace</category>
  <category domain="category" nicename="role-models">Role Models</category>
  <category domain="post_tag" nicename="skills">skills</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:2:{s:7:"twitter";a:1:{i:1511181;i:17;}s:2:"wp";a:1:{i:0;i:12;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:94:"http://upload.wikimedia.org/wikipedia/commons/thumb/8/89/Cello_study.jpg/320px-Cello_study.jpg";s:6:"images";a:1:{s:94:"http://upload.wikimedia.org/wikipedia/commons/thumb/8/89/Cello_study.jpg/320px-Cello_study.jpg";a:6:{s:8:"file_url";s:94:"http://upload.wikimedia.org/wikipedia/commons/thumb/8/89/Cello_study.jpg/320px-Cello_study.jpg";s:5:"width";i:320;s:6:"height";i:480;s:4:"type";s:5:"image";s:4:"area";i:153600;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-09-25 00:06:29";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>twitter_cards_summary_img_size</ns0:meta_key>
    <ns0:meta_value>a:7:{i:0;i:320;i:1;i:480;i:2;i:2;i:3;s:24:"width="320" height="480"";s:4:"bits";i:8;s:8:"channels";i:3;s:4:"mime";s:10:"image/jpeg";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>125</ns0:comment_id>
    <ns0:comment_author>Ashton</ns0:comment_author>
    <ns0:comment_author_email>ashtonparnell@animail.net</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.falafeldream2010.de/index.php/guestbook</ns0:comment_author_url>
    <ns0:comment_date>2012-10-04 16:46:30</ns0:comment_date>
    <ns0:comment_content>Greetings! Very useful advice within this post! It's the little changes which will make the most significant changes. Many thanks for sharing!</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>92</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-09-24 23:32:19</ns0:comment_date>
    <ns0:comment_content>Quite by accident, I just came across this post from Andrei Alexandrescu (C++ guru and major proponent of the D programming language), in which he argues that learning how to learn is the most important skill for any technophile: http://www.informit.com/articles/article.aspx?p=1945828</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>103</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-09-28 13:46:10</ns0:comment_date>
    <ns0:comment_content>Sounds like a fun dream, Alphy. I agree that discovery is exciting. Maybe that's why I like software as a career field; it gives me a fertile field to learn and experiment.

Love the Alan Kay quote; it's both true and profound.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>91</ns0:comment_id>
    <ns0:comment_author>Scott Hansen</ns0:comment_author>
    <ns0:comment_author_email>shansen@adaptivecomputing.com</ns0:comment_author_email>
    <ns0:comment_date>2012-09-24 18:33:32</ns0:comment_date>
    <ns0:comment_content>Thanks for the great ideas that you are sharing. I will be putting them into effect for myself.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>126</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-10-04 16:55:20</ns0:comment_date>
    <ns0:comment_content>I agree. Needing to keep learning might seem like a big item on a to-do list, but it can (and should) be done here a little, there a little. My &lt;a href="/2012/09/25/six-learning-tips-for-tech-folks/" title="Six Learning Tips For Tech Folks" rel="nofollow"&gt;post with tips for tech learners&lt;/a&gt; was an attempt to capture some small habits with big benefits.</ns0:comment_content>
    <ns0:comment_parent>125</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>93</ns0:comment_id>
    <ns0:comment_author>Alpheus</ns0:comment_author>
    <ns0:comment_author_email>alpheus.madsen@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://epsilon-power.blogspot.com</ns0:comment_author_url>
    <ns0:comment_date>2012-09-25 11:01:09</ns0:comment_date>
    <ns0:comment_content>I have this stupid idea for a startup:  gather three to six people together, to learn Common Lisp and mathematics, and then make things up as we go from there.  So, in a way, I would like to be in the business of learning!

In some ways, I'm not so interested in learning, as I am in discovering new things.  Some of it may be written down, because it's been done by others; some of it may be done for the first time (or one of the first times, if you have no idea that someone else discovered the idea before you, yet independently of you).  Indeed, Alan Kay once said, "The best way to predict the future is to invent it."

Of course, ultimately, discovery is just an extension of learning!</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>565</ns0:comment_id>
    <ns0:comment_author>Interrupting my interruptions &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/01/24/interrupting-my-interruptions/</ns0:comment_author_url>
    <ns0:comment_date>2013-01-24 11:48:54</ns0:comment_date>
    <ns0:comment_content>[...] stake in the ground. Those wikipedia pages and chat sessions and interesting blog posts are part of learning voraciously, which is a strategic imperative for any software [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4873</ns0:comment_id>
    <ns0:comment_author>Why you should use an IDE instead of vim or emacs | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/05/13/why-you-should-use-an-ide-instead-of-vim-or-emacs/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-13 10:16:09</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] programmer who&amp;#8217;s continually learning, and who&amp;#8217;s plugged in to community best practice, is likely to contribute more value to his [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>736</ns0:comment_id>
    <ns0:comment_author>Snapfairy</ns0:comment_author>
    <ns0:comment_author_email>maddyb12@aim.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://snapfairy.wordpress.com</ns0:comment_author_url>
    <ns0:comment_date>2013-02-16 09:52:20</ns0:comment_date>
    <ns0:comment_content>This is wonderful advice and one we can all apply.  Thanks for sharing and for following my blog. Bendiciones ; )</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>36682097</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>664</ns0:comment_id>
    <ns0:comment_author>Smart Geeks Think Like Cheerleaders &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/02/05/smart-geeks-think-like-cheerleaders/</ns0:comment_author_url>
    <ns0:comment_date>2013-02-05 08:57:53</ns0:comment_date>
    <ns0:comment_content>[...] We achieve something important, get enamored of our own success, and forget to be humble and to learn from others. [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1202</ns0:comment_id>
    <ns0:comment_author>Programming Language Popularity Index | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/03/22/programming-language-popularity-inde/</ns0:comment_author_url>
    <ns0:comment_date>2013-05-31 01:28:45</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] There are a lot of languages out there. What a busy world we live in! All the more reason to learn voraciously. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4947</ns0:comment_id>
    <ns0:comment_author>Why you should be proficient in a tool like vim or emacs | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/05/15/why-you-should-be-proficient-in-a-tool-like-vim-or-emacs/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-15 08:46:11</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] the world that they&amp;#8217;re doing themselves and their teammates a disservice if they don&amp;#8217;t take the time to become proficient in a powerful text [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2727</ns0:comment_id>
    <ns0:comment_author>Steve Jackson: Lead with Passion | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/09/30/steve-jackson-lead-with-passion/</ns0:comment_author_url>
    <ns0:comment_date>2013-09-30 11:49:43</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] for Jackson meant that we were always reading a training book, attending a class, or otherwise learning how to be better.  Train your teams on your process, [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14331</ns0:comment_id>
    <ns0:comment_author>&amp;#8220;Rockstar Developers&amp;#8221; are a dangerous myth | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/03/04/rockstars/</ns0:comment_author_url>
    <ns0:comment_date>2015-03-05 20:15:46</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] It might be possible to crank out dime-a-dozen websites without research or innovation, but most projects with genuine market value are broad enough that they demand more skills than exist in any one person. Wise developers (as opposed to simply clever ones) are humble and interested in learning. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16572</ns0:comment_id>
    <ns0:comment_author>On Forests and Trees | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/09/02/on-forests-and-trees/</ns0:comment_author_url>
    <ns0:comment_date>2015-09-02 08:48:41</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] code is wisely generalized, maintenance goes down, testability goes up, and it&amp;#8217;s easy to learn a correct mental model. The inverse is also true: bad choices about generalization usually hide the [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16814</ns0:comment_id>
    <ns0:comment_author>Are We Smart Enough to Use Kind Words? | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/10/06/use-kind-words/</ns0:comment_author_url>
    <ns0:comment_date>2015-10-06 16:35:55</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] is raising the experience, confidence, and courage of those around us; in doing so, we learn more ourselves, and we are usually repaid in spades. Over time, the output of a healthy community will [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Six Learning Tips For Tech Folks</title>
  <link>http://codecraft.co/2012/09/25/six-learning-tips-for-tech-folks/</link>
  <pubDate>Tue, 25 Sep 2012 16:59:30 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=561</guid>
  <ns2:encoded>In &lt;em&gt;Seven Habits of Highly Effective People&lt;/em&gt;, Stephen Covey reminds readers to periodically suspend their lumberjacking long enough to sharpen the metaphorical saw. In other words -- take time to renew, to learn, to get better, to work smarter.

[caption id="" align="aligncenter" width="320"]&lt;a href="http://en.wikipedia.org/wiki/File:Five-foot_crosscut_saw.jpg"&gt;&lt;img title="crosscut saw" src="http://upload.wikimedia.org/wikipedia/commons/thumb/3/3b/Five-foot_crosscut_saw.jpg/320px-Five-foot_crosscut_saw.jpg" alt="" width="320" height="131" /&gt;&lt;/a&gt; Sharpen the saw. Photo credit: ATsawyer (Wikimedia Commons).[/caption]

Chances are, you're nodding your head. We all recognize the truth of the principle, but we struggle to put it into practice. &lt;a title="Julie Jones: Learn voraciously." href="/2012/09/24/julie-jones-learn-voraciously/"&gt;My friend who's a voracious learner&lt;/a&gt; is an example we all need to emulate better.

Here are a few tried-and-true habits that help me.

&lt;strong&gt;1. Look it up.&lt;/strong&gt;

If you're like me, you constantly encounter new acronyms, technoslang, APIs, languages, buzz words... Years ago, the effort to track down the meaning of such items was substantial--a trip to the library, maybe. Now you can usually define a term with 10 seconds of googletime, and you can get the skinny on fatter topics with a 30-second scan of a wikipedia topic. We spend so much of our time in front of screens; resolve now to make a habit out of looking up what you don't know. It will cost your schedule nothing, and keep you learning.

&lt;strong&gt;2. Read.&lt;/strong&gt;

I'm not suggesting that you should spend hours every day devouring deep content. I subscribe to a number of blogs, newsletters, and industry publications, and I usually rip through all of them in just a few minutes each day. For subscriptions that arrive in my email, I often read subject lines or headlines only, then press Delete. This keeps me aware, and I can always dive in if something truly interesting comes up. I also use StumbleUpon, which has led me to delightful discoveries a few times.

Besides the digital equivalent of sound bites, it's important to expose yourself to richer content. Ask people you respect for book recommendations. Set a goal to read an in-depth magazine article once a month...

&lt;strong&gt;3. Follow thought leaders.&lt;/strong&gt;

All voices in the blogosphere are not created equal. Twenty or thirty years ago, the only way to get inside the mind of luminaries was to hear them present at conferences, and to buy their books. Now, barriers to silent up-close study (or even one-on-one dialog) are much lower. People like Linus Torvalds, Scott Meyers, Bjarne Stroustrup, Guido van Rossum, Yukihiro Matsumoto, Martin Fowler, RMS, Kent Beck, Don Box, Erich Gamma, and Grady Booch have web sites, podcasts, twitter accounts, google profiles, and the like. Connect and learn.

&lt;strong&gt;4. Keep track of questions.&lt;/strong&gt;

I have a google doc where I record topics on my to-study list, things I want to memorize, experiments I want to try. I also take plain old pen and paper to meetings, and take notes not so much about content but about loose ends or questions that arise in my mind.

Of course, you need to revisit your questions and answer them now and then. Maybe while a build is running and you're eating a sandwich...

&lt;strong&gt;5. Teach others.&lt;/strong&gt;

The conventional wisdom that the teacher learns more than the students is not just trite sentimentality. Put yourself on the hook to teach something that you've learned. If you're comfortable presenting, volunteer to train team members. If that makes you nervous, write up something you learned in a blog. Or write an email to someone at work, sharing a cool blog post that made you think. Or just capture your learning in insightful comments in your code. But get the ideas &lt;em&gt;out to others&lt;/em&gt;, which will deepen and enrich their potency &lt;em&gt;in your own mind.&lt;/em&gt;

&lt;strong&gt;6. Find a foil.&lt;/strong&gt;

In literature, a foil is a character that, when placed beside the protagonist, provides significant contrast in personality, style, or motivation. Foils challenge tidy assumptions and deepen the character that the reader cares about the most.

We all need to be challenged. We need to learn about other viewpoints--not at some surface level, so we'll have talking points to contradict, but in depth, so we appreciate the contributions that other human beings can offer. Nothing is more certain than that the aggregate wisdom of others will always exceed our private insight.

Chances are, you'll regularly encounter viewpoints different from your own, with no particular effort. So set yourself the task of thoroughly understanding and articulating such a viewpoint now and then, to the point where its proponent would nod with satisfaction and agree that you've nailed their thinking. Good things will happen.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Pick an item or two from the suggestions above--or find some ideas of your own, that work for you--and start today to turn them into habits. Slow and steady is better than inconsistent bursts...&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;span style="color:#000080;"&gt;&lt;em&gt;Extra credit: Tell others about the goals you set. This commits you, and might stimulate some worthwhile conversations. Or add a comment here, sharing other ideas you have. (Remember the value of teaching... :-)&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>561</ns0:post_id>
  <ns0:post_date>2012-09-25 10:59:30</ns0:post_date>
  <ns0:post_name>six-learning-tips-for-tech-folks</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="habits">habits</category>
  <category domain="post_tag" nicename="learning">learning</category>
  <category domain="post_tag" nicename="study">study</category>
  <category domain="category" nicename="tips-and-tricks">Tips and Tricks</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>255</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2012-10-30 11:11:04</ns0:comment_date>
    <ns0:comment_content>geez, you have some great thoughts</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>257</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-10-30 12:12:06</ns0:comment_date>
    <ns0:comment_content>Just a few days ago, I heard you talking about an antipattern, and I decided that I needed to get more conversant with the antipattern catalog. I've studied the gang of four design pattern book, and various related topics, for years, but I've only noted the antipattern stuff as a casual passer-by. So I setup an event in google calendar that bugs me once a week to spend a few minutes studying an antipattern. So I get my good ideas from smart people like you. :-)</ns0:comment_content>
    <ns0:comment_parent>255</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4874</ns0:comment_id>
    <ns0:comment_author>Why you should use an IDE instead of vim or emacs | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/05/13/why-you-should-use-an-ide-instead-of-vim-or-emacs/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-13 10:16:13</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] programmer who&amp;#8217;s continually learning, and who&amp;#8217;s plugged in to community best practice, is likely to contribute more value to his or her team, over time, than one who&amp;#8217;s learned an [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16812</ns0:comment_id>
    <ns0:comment_author>Are We Smart Enough to Use Kind Words? | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/10/06/use-kind-words/</ns0:comment_author_url>
    <ns0:comment_date>2015-10-06 16:35:51</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] often fail to work; requirements change; incompatibilities in components and tools are endemic; we learn a lot by trial and error. Part of &amp;#8220;tech progress&amp;#8221; is raising the experience, confidence, and courage of those [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>How to turn coding standards into epic fails -- or not</title>
  <link>http://codecraft.co/2012/09/27/coding-standards/</link>
  <pubDate>Thu, 27 Sep 2012 08:04:47 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=578</guid>
  <ns2:encoded>[caption id="attachment_580" align="alignright" width="285"]&lt;a href="http://www.epicfail.com/2012/08/31/todays-special-fail/todays-special-fail/"&gt;&lt;img class="size-full wp-image-580" title="sign-fail" alt="" src="http://codecraft.co/wp-content/uploads/2012/09/sign-fail.png" width="285" height="525" /&gt;&lt;/a&gt; Yes, a restaurant really displayed this sign. I doubt it influenced anybody's behavior...[/caption]

Some attempts to influence the behavior of other people succeed; others are doomed from the get-go.

Coding standards are usually written because we want to influence the structure or style of code produced by engineering teams. Sometimes they're helpful; more often they're ignored and forgotten; occasionally they provoke fireworks or bitter resentment.

I'm not sure there's a guaranteed formula for success, but there's a guaranteed formula for failure; let's cover that first, and then see what helpful suggestions we can derive.

&lt;strong&gt;How to turn coding standards into epic fails&lt;/strong&gt;

&lt;em&gt;1. Micromanage.&lt;/em&gt;

Leave no room for personal style and creativity. Make no attempt to distinguish between meaty issues and utter trivialities. State all rules in absolutes; allow no exceptions. Announce enforcement in code reviews. Bonus points if you actually follow through on the threat, and double bonus points if you display some other developer's code in front of the team as an example of egregious violations.
&lt;p style="margin-left:2em;margin-right:2em;padding:.5em 1em;background-color:#eee;border:solid 1px px #ddd;font-family:times;"&gt;"Always put a space between an identifier and a curly brace, except in nested struct initializers where the first member is a string literal (other than NULL) or a #define'ed constant."&lt;/p&gt;
&lt;p style="margin-left:2em;margin-right:2em;padding:.5em 1em;background-color:#eee;border:solid 1px px #ddd;font-family:times;"&gt;"Begin every function with a comment that specifies the name of the coder, the date the function was last modified, the purpose of the function, an annotated history of how the function has evolved over time, a list of functions called by your function, your zodiac sign, and the names of all parameters. Make sure that parameters are listed alphabetically (case-insensitive), with a blank line between each, and the explanatory text after the param name indented 8 - (len(param name) mod 4) spaces."&lt;/p&gt;
&lt;em&gt;&lt;!--more--&gt;2. Overreach.&lt;/em&gt;

Make sure your coding standards cover every language, platform, compiler, and IDE. Don't forget macros in Excel. For the sake of consistency, keep all rules invariant across all environments; if you like pep8 in python, you should definitely use it in VBA and java and C++ as well. Disallow javascript minify because it violates your naming conventions; make sure all environments use parens the way eLisp expects. Roll all of the standards out at once. Put multi-part version numbers on your standards, preferably derived from the year, month, day, hour, minute, second, and timezone. Check the standards into version control. Arrange to have the standards in the new hire orientation packet.

&lt;em&gt;3. Mandate redundancy.&lt;/em&gt;

Choose rules that make code say the same thing in several different ways -- preferably separating the redundancy as much as possible so it's hard to modify correctly.
&lt;p style="margin-left:2em;margin-right:2em;padding:.5em 1em;background-color:#eee;border:solid 1px px #ddd;font-family:times;"&gt;"End every function with a comment that says the function has ended. Make sure you include the function name in this comment. That way, we can find unterminated functions by looking for function identifiers with an odd number of hits when grepping through headers."&lt;/p&gt;
&lt;p style="margin-left:2em;margin-right:2em;padding:.5em 1em;background-color:#eee;border:solid 1px px #ddd;font-family:times;"&gt;"At the top of every module, put a comment that gives the name of the module, a description of the module's purpose, then 'Copyright © Acme Corporation Inc., 20??, all rights reserved.' (Use the copyright symbol, not (c), and add correct digits for year...) At the top of every class, put a comment that gives the name of the class and a description of the class's purpose. Group all static methods together, and put &lt;code style="color:green;"&gt;//static methods&lt;/code&gt; on a line above them."&lt;/p&gt;
&lt;em&gt;4. Beat a dead horse.&lt;/em&gt;

Tell, don't show; every rule should be described in careful detail. Put your standards in a Word doc; make sure it has a title page, table of contents, index, and a header and footer that contain an embedded version stamp, author name, and last print date. Use bold, italics, and all caps liberally (through styles, not one-off formats; remember that you'll be releasing updates...). Export the doc to help those who can't read your format. Attach four versions (doc, docx, pdf, eps) to a wiki page, and to a department-wide email. Print a master copy on the color laser printer, then go to Kinkos and have a color copy printed and bound for each employee. Arrange to have it delivered to their desks.

Make a powerpoint slide or two highlighting key areas in the table of contents; attach that to the wiki as well. Ask for time in a company meeting to show your slides, so people are mentally prepared for the doc that's been delivered to their desks. Apologize for making some decisions by fiat instead of consensus; give a few specific examples.

A few days later, broadcast a follow-up email asking for feedback and reminding everyone of new enforcement procedures. After you realize that you didn't repeat your original attachments in the follow-up email, reply to all with the missing attachments. After that, reply to all with a hyperlink to the wiki page that has all the attachments, since that page will be guaranteed to be kept up to date as the standard evolves.

&lt;hr /&gt;

&lt;strong&gt;Suggestions for success&lt;/strong&gt;

If the foregoing ideas don't excite your enthusiasm, I endorse the following:
&lt;ul&gt;
	&lt;li&gt;"Simple, clear purpose and principles give rise to complex, intelligent behavior. Complex rules and regulations give rise to simple, stupid behavior." (Dee Hock)&lt;/li&gt;
	&lt;li&gt;Happy teams are built on trust and mutual respect. Most tech folks are smart and share these values. Preserve pride of ownership and individual creativity.&lt;/li&gt;
	&lt;li&gt;Some standards have more business and/or technical value than others. Seek biggest bang-for-the-buck.&lt;/li&gt;
	&lt;li&gt;"A foolish consistency is the hobgoblin of little minds." (Emerson)&lt;/li&gt;
	&lt;li&gt;Concision counts. If you can't fit it on a single page, forget it.&lt;/li&gt;
	&lt;li&gt;Show, don't tell. Text = blah blah blah. Screenshot = good. Code that models correct behavior = better (momentum, fait accompli, copy/paste benefits, etc).&lt;/li&gt;
&lt;/ul&gt;
If you read that list and think: "Well, then, why have coding standards at all?", then I have done you a disservice. Teams &lt;em&gt;definitely can&lt;/em&gt; benefit from conventions and standards, in many cases. Here are a few rules I might propose in the next coding standards I work on.

&lt;strong&gt;Sample suggestions (not "rules") from a wise coding standard&lt;/strong&gt;

In general, model new code after the conventions embodied by recent and clean code you see in the codebase. The following modules are known to be good examples: moduleA, moduleB, ... &lt;em&gt;(Value: high. Cost: low. Pointing out some good examples will do more than a dozen pages of text. Also, pointing people to new code allows wisdom about conventions to accrete organically.)&lt;/em&gt;

&lt;a title="Small Files Are Your Friends" href="http://codecraft.co/2013/03/21/small-files-are-your-friends/"&gt;Keep files small&lt;/a&gt;. &lt;em&gt;(Value: high for casual maintainers. Cost: usually low. Many good habits are tied to this guideline, including loose coupling, encapsulation, refactoring, and modularity.)&lt;/em&gt;

Clean up messes. Delete unused files, functions, and blocks. &lt;em&gt;(Value: high. Cost: low. C&lt;em&gt;asual maintainers don't have to wonder about the significance of something inert. Reinforces refactoring.&lt;/em&gt;)&lt;/em&gt;

Use descriptive names for classes, functions, variables, and files, so you don't have to document what should be obvious semantics. &lt;em&gt;(Value: high. Cost: low. Eliminates redundancy and encourages good refactoring habits. &lt;a title="Good Code Is Named Right" href="/2012/08/28/good-code-is-named-right/"&gt;Good code is named right&lt;/a&gt;.)&lt;/em&gt;

&lt;a title="// Comments on Comments" href="http://codecraft.co/2012/10/31/comments-on-comments/"&gt;Comment what can't be made obvious&lt;/a&gt;. &lt;em&gt;(Example where comment might be helpful: subtle precondition or postcondition on a function. Value: high. Cost: low.)&lt;/em&gt;

Carefully follow the codebase's &lt;a title="Good Code Plans for Problems" href="http://codecraft.co/2012/09/03/good-code-plans-for-problems/"&gt;error and exception strategy&lt;/a&gt;. &lt;em&gt;(Example: "In C++, use RAII to guarantee exception safety. Make sure all errors are complete sentences, since they'll appear in logs and be read by end users." Value: high. Cost: medium.)&lt;/em&gt;

Name files and directories with a consistent pattern. &lt;em&gt;(Example 1: use all lower-case, with underscores between words. Example 2: use Java's conventions. Value: high. Cost: low. Eliminates #include "WrongCase.h" problems on *nix; makes batch processing easier.)&lt;/em&gt;

Roughly, follow formatting conventions common to your language and recommended by your IDE. Use the team's standard indent (e.g., 4 spaces) so different editors don't produce ragged gobbledygook. &lt;em&gt;(Value: medium. Cost: low. Mainstream formatting is usually pretty readable. This rule is stated with enough flexibility to leave moderate room for personal preference.)&lt;/em&gt;

Name unit tests after their main assertion, so you know what's wrong when you see what failed. &lt;em&gt;(Example: test_removeChild_throws_when_container_empty. Value: medium. Cost: low.)&lt;/em&gt;

&lt;strong&gt;Benefits&lt;/strong&gt;

Stupid coding standards are offensive and a complete waste of everybody's time. If you promulgate standards like the ones I offered at the top of this post, you deserve to fail. On the other hand, rational, reasonable standards can help a team enjoy working together, flatten the learning curve for new folks, promote good habits, cheapen automated analysis, and foster pride of ownership.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;If you have existing coding standards, look at a few guidelines and decide A) how much technical and business value they provide; B) how easy they are to learn and follow; C) how well they're implemented. Do you see any places where you want to adjust?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;If you want to create a coding standard, make a list of rules that have a high ratio of value to cost. Pick the top 10 (or as many as you can fit on one (1) sheet of paper with a normal font and margins). Float a few past other thought leaders. Keep the best ones only.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>578</ns0:post_id>
  <ns0:post_date>2012-09-27 02:04:47</ns0:post_date>
  <ns0:post_name>coding-standards</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="comments">comments</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="fail">fail</category>
  <category domain="post_tag" nicename="redundancy">redundancy</category>
  <category domain="post_tag" nicename="refactoring">refactoring</category>
  <category domain="post_tag" nicename="standards">standards</category>
  <category domain="category" nicename="tips-and-tricks">Tips and Tricks</category>
  <category domain="post_tag" nicename="versioning">versioning</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:2:{s:7:"twitter";a:1:{i:1511181;i:17;}s:2:"wp";a:1:{i:0;i:13;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>2986</ns0:comment_id>
    <ns0:comment_author>Add some more extra redundancy again | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/01/15/add-some-more-extra-redundancy-again/</ns0:comment_author_url>
    <ns0:comment_date>2014-01-15 08:39:13</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] precisely because they create redundancy that&amp;#8217;s difficult to understand and maintain. Foolish coding standards and dumb comments are notorious for creating busywork this [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>18836</ns0:comment_id>
    <ns0:comment_author>Wheeljack</ns0:comment_author>
    <ns0:comment_author_email>rrkillian@rktoyandhobby.com</ns0:comment_author_email>
    <ns0:comment_date>2018-06-18 08:16:59</ns0:comment_date>
    <ns0:comment_content>I caught this way too late to matter but I would say that the "standard" (because we all know it's not one) should be available not just for new hires but interviewers as well.  Concealing an insane set of half-baked rules really just wastes competent programmers' time and reinforces the notion that you did this deliberately to trap them.  Let me just walk out of the interview or turn down the offer before we get to the point and save us all alot of trouble.

Because the instant some framework monkey struggling with Hello World gets on my case about bracket placement, that's it, I'm done.  I'll hang around and collect a paycheck until I find something else but you won't get anything of value out of me for whatever time remains.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1529331421</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>18837</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2018-06-18 11:43:04</ns0:comment_date>
    <ns0:comment_content>Agreed!</ns0:comment_content>
    <ns0:comment_parent>18836</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1529343784</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16580</ns0:comment_id>
    <ns0:comment_author>On Forests and Trees | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/09/02/on-forests-and-trees/</ns0:comment_author_url>
    <ns0:comment_date>2015-09-02 08:48:55</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] is partly why small files and small functions are your friends. It also explains why boilerplate comments are worse than useless, and bears on why encapsulation and loose coupling are so [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>6624</ns0:comment_id>
    <ns0:comment_author>Lacunas Everywhere | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/16/lacunas-everywhere/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-16 13:58:41</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] like to enforce coding standards&amp;#8211;formatting and naming conventions, maybe, but also trickier stuff, like &amp;#8220;we strictly [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>6840</ns0:comment_id>
    <ns0:comment_author>Thoughts On Bridging the &amp;#8220;Lacuna Humana&amp;#8221; | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/21/bridging-the-lacuna-humana/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-21 08:49:29</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] to the point where they actually create unnecessary confusion. They are not mandatory (except by human fiat, which is usually ignored), and everybody&amp;#8217;s judgment about where they&amp;#8217;re valuable seems to vary. Some coders are [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>The 8th Characteristic</title>
  <link>http://codecraft.co/2012/09/28/the-8th-characteristic/</link>
  <pubDate>Fri, 28 Sep 2012 19:35:00 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=592</guid>
  <ns2:encoded>Biologists will tell you that life has 7 characteristics: organization, metabolism, irritability, reproduction, homeostasis, adaptation, and growth.

I think this list is missing something. It's foundational, indisputable, and familiar even to kindergartners. But perhaps only kindergartners would call it out; several generations of biologists seem not to notice it enough to add it to their short list. Pick up a biology textbook, and you are unlikely to find a single chapter devoted to it.

Are you ready?

The 8th characteristic of life: &lt;strong&gt;mortality&lt;/strong&gt;.

All living things die.

[caption id="" align="aligncenter" width="320"]&lt;a href="http://en.wikipedia.org/wiki/File:Roadkill_on_Route_170_Okatie_Hwy_by_the_Chechessee_River,_SC,_USA,_jjron_09.04.2012.jpg"&gt;&lt;img title="a dead deer..." alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/b/b6/Roadkill_on_Route_170_Okatie_Hwy_by_the_Chechessee_River%2C_SC%2C_USA%2C_jjron_09.04.2012.jpg/320px-Roadkill_on_Route_170_Okatie_Hwy_by_the_Chechessee_River%2C_SC%2C_USA%2C_jjron_09.04.2012.jpg" width="320" height="210" /&gt;&lt;/a&gt; We see without seeing... Photo credit: John O'Neil (Wikimedia Commons)[/caption]

Think about the consequences for a few moments. Would any of the ecosystems that you see on nature documentaries be possible without death? Would human civilization, as we know it? Read Orson Scott Card's short story, "Mortal Gods," and ponder.

&lt;strong&gt;Community blindness&lt;/strong&gt;

Why am I writing about this as a software guy?

&lt;!--more--&gt;As &lt;a title="How Software Is Like Biology" href="/2012/08/14/how-software-is-like-biology/"&gt;I've written before&lt;/a&gt;, I believe life has profound lessons for software engineers. And death is a biggie. (I'll probably devote at least one chapter to this in my forthcoming book.)

To be fair to biologists, their discipline takes death into account constantly. Its existence colors narrations about food webs, survival of the fittest, decomposers, and thousands of related topics. Biologists are well aware of its ramifications.

But the fact that death didn't make their distilled list of 7 fundamentals is telling. If brilliant minds forget to state the obvious in that context, would it be any surprise to see the mistake repeated in the world of bits and protocols?

&lt;strong&gt;Pervasive software death&lt;/strong&gt;

Hardware dies. We usually get that one. We know all about MTBF (mean time between failures) for hard drives, RAM, and the like. Interestingly, this phenomenon sometimes gets labeled "half-life", which has roots in a biological metaphor despite its direct borrowing from nuclear physics.

The other kind of death that software engineers routinely acknowledge is the Blue Screen of Death and its cousins (the abend, the seg fault, the panic). Strictly speaking, this is the death of a &lt;em&gt;process&lt;/em&gt; or &lt;em&gt;accumulated state&lt;/em&gt;, not the death of the product engineers worked so hard to build, and although we try to prevent this type of death, we don't spend a lot of time pondering it.

What about sublter forms of death, though?

Software products die. Consider VisiCalc.

Software versions die. Seen any Windows 3.1 lately?

Software companies die. When was the last time you bought anything from Caldera?

Software protocols die. Software installations die. Software expertise dies. Software standards die. Software fads die. Software markets die. Vendor and OEM relationships die. Competitive advantages die. And on and on.

&lt;strong&gt;So what?&lt;/strong&gt;

Software death is a good thing. As in biology, it makes room for new and more evolved growth. It gives me job security. :-)

But I think software companies--all organizations, not just the dev organ--would be happier if they acknowledged this death and planned for it explicitly. For example:
&lt;ul&gt;
	&lt;li&gt;We should announce a lifespan to a product that starts with its birth (release). Do we expect it to live 3 years? 5? How long is support on the hook to keep it on life support? (Some orgs do this, but it's a less common practice than it should be.)&lt;/li&gt;
	&lt;li&gt;As humans cope with death through wills, trusts, and inheritance laws, so software orgs need to plan, carefully and well in advance, for the upgrade experience implicit in the next generation release. Otherwise we'll get mired in messy and expensive probate procedures. Is there a "death tax" that makes it hard to transmit hard-won earnings forward? If so, can we minimize it?&lt;/li&gt;
	&lt;li&gt;Developers should recognize that the technologies they depend on today will eventually be buried. Plan to switch horses before the one you're riding kicks the bucket. (Hence the importance of &lt;a title="Julie Jones: Learn voraciously." href="/2012/09/24/julie-jones-learn-voraciously/"&gt;continuous learning&lt;/a&gt;.)&lt;/li&gt;
	&lt;li&gt;In biology, some forms of death have warning signs. Does our software notice these, and take measures to protect itself? Do we tell the customer that software is in danger?&lt;/li&gt;
	&lt;li&gt;Do we provide a way for the customer to take our product off life support if that's the right decision?&lt;/li&gt;
&lt;/ul&gt;
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Please reply to this post with your own thoughts about where death needs better explicit handling in the world of software.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>592</ns0:post_id>
  <ns0:post_date>2012-09-28 13:35:00</ns0:post_date>
  <ns0:post_name>the-8th-characteristic</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="biology">biology</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="education">education</category>
  <category domain="post_tag" nicename="evolution">evolution</category>
  <category domain="post_tag" nicename="fads">fads</category>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <category domain="post_tag" nicename="obsolescence">obsolescence</category>
  <category domain="post_tag" nicename="upgrade">upgrade</category>
  <category domain="post_tag" nicename="versioning">versioning</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:2:{s:7:"twitter";a:1:{i:1511181;i:17;}s:2:"wp";a:1:{i:0;i:13;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:0:"";s:6:"images";a:2:{s:250:"http://upload.wikimedia.org/wikipedia/commons/thumb/b/b6/Roadkill_on_Route_170_Okatie_Hwy_by_the_Chechessee_River%2C_SC%2C_USA%2C_jjron_09.04.2012.jpg/320px-Roadkill_on_Route_170_Okatie_Hwy_by_the_Chechessee_River%2C_SC%2C_USA%2C_jjron_09.04.2012.jpg";a:6:{s:8:"file_url";s:250:"http://upload.wikimedia.org/wikipedia/commons/thumb/b/b6/Roadkill_on_Route_170_Okatie_Hwy_by_the_Chechessee_River%2C_SC%2C_USA%2C_jjron_09.04.2012.jpg/320px-Roadkill_on_Route_170_Okatie_Hwy_by_the_Chechessee_River%2C_SC%2C_USA%2C_jjron_09.04.2012.jpg";s:5:"width";i:320;s:6:"height";i:210;s:4:"type";s:5:"image";s:4:"area";i:67200;s:9:"file_path";s:0:"";}s:206:"http://upload.wikimedia.org/wikipedia/commons/thumb/0/0e/Windows_XP_Blue_Screen_of_Death_%28PAGE_FAULT_IN_NONPAGED_AREA%29.svg/200px-Windows_XP_Blue_Screen_of_Death_%28PAGE_FAULT_IN_NONPAGED_AREA%29.svg.png";a:6:{s:8:"file_url";s:206:"http://upload.wikimedia.org/wikipedia/commons/thumb/0/0e/Windows_XP_Blue_Screen_of_Death_%28PAGE_FAULT_IN_NONPAGED_AREA%29.svg/200px-Windows_XP_Blue_Screen_of_Death_%28PAGE_FAULT_IN_NONPAGED_AREA%29.svg.png";s:5:"width";i:200;s:6:"height";i:150;s:4:"type";s:5:"image";s:4:"area";i:30000;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:2;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-09-28 19:39:45";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>132</ns0:comment_id>
    <ns0:comment_author>Alpheus</ns0:comment_author>
    <ns0:comment_author_email>alpheus.madsen@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://epsilon-power.blogspot.com</ns0:comment_author_url>
    <ns0:comment_date>2012-10-06 22:25:08</ns0:comment_date>
    <ns0:comment_content>It is my understanding that, in biology, there's a concept called "biological immortality", in which, short of disease or injury, the organism simply won't die.  Perhaps there's room for such a thing in the software world.  Software, in a way, is the embodiment of ideas, and ideas are eternal--they exist before anyone thinks them, and continue to exist after they are forgotten.  (Even so, I consider them to be alive.)

Indeed, sometime code can achieve a certain toe of immortality--Eric S. Raymond, several weeks ago, blogged about how robust a certain image processing program was, decades after he first wrote it!  Sometimes our understanding of a given problem domain becomes so mature, there isn't much of a point in messing with the code--and there are more problems like this then we realise.

Having said that, I can't help but think about how, while certain tortoises may be immortal, humans literally have mortality encoded into their DNA--so mortality exists for a reason, and probably several.  Thus, planning for mortality, and occasionally checking up on the "immortal" stuff, to make sure it still deserves life, makes a lot of sense to me.

And now that I think about it, it drives me nuts that I have a tablet that is probably a little more powerful than a laptop that recently died on me, but is so Android-centric.  It ought to be able to run LaTeX just fine, but it cannot, because Android hides the processor from me!  The Linux ecosystem represents thousands, and perhaps hundreds of thousands, of man-hours of coding, in all sorts of languages beyond Java, all of which is out of reach unless you do drastic things to your device (namely, root it and install some form of Linux).</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>118</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-10-03 14:09:02</ns0:comment_date>
    <ns0:comment_content>Jesse: Amazing how old software gets! In the late '90s I was working on code that had comments from the early '70s. Crazy.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>117</ns0:comment_id>
    <ns0:comment_author>Jesse Harris</ns0:comment_author>
    <ns0:comment_author_email>elforesto@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.coolestfamilyever.com/</ns0:comment_author_url>
    <ns0:comment_date>2012-10-03 13:37:36</ns0:comment_date>
    <ns0:comment_content>As recently as two years ago, I was still providing support for a product originally released in 1996, last updated in 2002, and still (at that time) being sold. The only reason it happened was because we charged an annual fee for support. That said, nobody had bothered to figure out if the cost of supporting this ancient product was exceeding the revenues generated by it, especially when considering that support resources would best be spent elsewhere.

I'm sure customers were thrilled that they could keep on using the same piece of software for 15 years, but it would have been a better service to them to help them transition to a newer platform, and it almost certainly would have made a lot more business sense.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>141</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-10-07 12:50:47</ns0:comment_date>
    <ns0:comment_content>Alphy: thank you for pointing me to the "biological immortality" concept. I went and read the wikipedia article. Fascinating!

All rules have exceptions--even this one, I guess. :-)</ns0:comment_content>
    <ns0:comment_parent>132</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>518</ns0:comment_id>
    <ns0:comment_author>Don&amp;#8217;t forget the circuit breakers &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/01/11/dont-forget-the-circuit-breakers/</ns0:comment_author_url>
    <ns0:comment_date>2013-01-11 18:02:04</ns0:comment_date>
    <ns0:comment_content>[...] macro scales, in ways that software barely begins to contemplate. In fact, homeostasis is one of life&amp;#8217;s 8 key characteristics. I find it interesting that in many cases, life achieves this balance using feedback loops that [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>962</ns0:comment_id>
    <ns0:comment_author>Adios to &amp;#8220;computer programming&amp;#8221; | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/04/05/adios-to-computer-programming/</ns0:comment_author_url>
    <ns0:comment_date>2013-04-05 09:34:28</ns0:comment_date>
    <ns0:comment_content>[...] is just as interconnected. Individual chunks of code depend on one another being alive, can poison one another&amp;#8217;s environment, must respect the constraints implied by one [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>846</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2013-03-15 11:59:33</ns0:comment_date>
    <ns0:comment_content>great observation and life process event handler.
I have been offered several jobs in my 33 years to work on the back side of a 'system' who was on life support, but no one wanted to 'improve' the same. Just keep it ticking until the income dropped below some 'exit criteria' level.

I said, no thanks.  I prefer to be on the front side of the curve, thank you, and even at the point of conception. THAT is fun</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>853</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-03-16 14:24:56</ns0:comment_date>
    <ns0:comment_content>It *is* fun to work on the front side of the curve. No doubt about it. We became engineers because we liked building something new and wonderful. I wish business people would let go of the misconception that once a feature has been built, it is "done"--and that it will continue to make them money in perpetuity. The truth is, features have carrying costs, and the health of a codebase requires steady maintenance and periodic upgrades.</ns0:comment_content>
    <ns0:comment_parent>846</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>843</ns0:comment_id>
    <ns0:comment_author>Farewell to Google Reader | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/03/14/farewell-to-google-reader/</ns0:comment_author_url>
    <ns0:comment_date>2013-03-14 17:18:50</ns0:comment_date>
    <ns0:comment_content>[...] this is a great illustration of the phenomenon of software death that I wrote about a few months [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1039</ns0:comment_id>
    <ns0:comment_author>Why Your Software Should Cry | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/05/06/why-your-software-should-cry/</ns0:comment_author_url>
    <ns0:comment_date>2013-05-06 11:50:37</ns0:comment_date>
    <ns0:comment_content>[...] to stimuli is one of the 8 characteristics of life. That means that living things are aware, in some sense, of their relationship to the larger [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>17437</ns0:comment_id>
    <ns0:comment_author>On pains and brains | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2016/01/01/on-pains-and-brains/</ns0:comment_author_url>
    <ns0:comment_date>2016-01-01 14:30:16</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] or identified success criteria for install+configure phases of the system, or surfaced symptoms of system obsolescence and death that its owners should [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14324</ns0:comment_id>
    <ns0:comment_author>&amp;#8220;Rockstar Developers&amp;#8221; are a dangerous myth | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/03/04/rockstars/</ns0:comment_author_url>
    <ns0:comment_date>2015-03-05 20:15:33</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] doing the hard, unrewarding detail work to guarantee that their needs are addressed throughout the full lifecycle of what you build is usually way more important than inventing a new and mind-bending algorithm. Addressing the need [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>25777</ns0:comment_id>
    <ns0:comment_author>Stanley Sawyer</ns0:comment_author>
    <ns0:comment_author_email>stanleysawyer684@yahoo.com</ns0:comment_author_email>
    <ns0:comment_author_url>https://www.stanleysawyer.com/</ns0:comment_author_url>
    <ns0:comment_date>2022-06-14 18:37:58</ns0:comment_date>
    <ns0:comment_content>Intereesting read</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>73667186310</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1655253481</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
</item>
<item>
  <title>Humility</title>
  <link>http://codecraft.co/2012/10/01/humility/</link>
  <pubDate>Tue, 02 Oct 2012 03:55:01 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=596</guid>
  <ns2:encoded>I was applying for a very senior architect role. I'd already been through several rounds of interviews with a whole committee of thought leaders in the department. I'd taken a technical proficiency test, and (I hope) given a good impression about how I'd be able to contribute.

The CEO cleared a block on her schedule and sat down with me. She poked a bit at my business experience, my ideas of process, and my aspirations. Then she said, "Tell me your thoughts on humility."

I think it's the best job interview question anyone has ever asked me.

[caption id="" align="aligncenter" width="500"]&lt;a href="http://www.flickr.com/photos/chiotsrun/4408808405/"&gt;&lt;img title="humble tasks" src="http://farm3.staticflickr.com/2785/4408808405_4460d0e7be.jpg" alt="" width="500" height="328" /&gt;&lt;/a&gt; A great perspective on humility. Photo credit: Chiot's Run (Flickr).[/caption]

&lt;strong&gt;Real humility&lt;/strong&gt;

A person trying to fake humility says, "I'm not very good" -- but doesn't mean it.

A person trying to be humble, but misunderstanding its nature, says, "I'm not as good as &lt;em&gt;X&lt;/em&gt;" -- and tells himself it's probably true.

A truly humble person &lt;!--more--&gt;isn't usually interested in comparing herself to others. She's well aware that everyone--including herself--has both strengths and weaknesses. She is willing to learn, even when she already knows a lot, and even at the cost of admitting mistakes and blind spots. Humility doesn't require her to artificially put herself down, or to artificially overvalue others; it requires her to remember, tenaciously, that problems--never people--are the enemies you strive to overcome. (For the religiously inclined, I have never found a more profound exposition on pride and humility than &lt;a href="http://www.lds.org/ensign/1989/05/beware-of-pride?lang=eng&amp;amp;query=ezra+taft+benson+pride" target="_blank"&gt;the one Ezra Taft Benson offered in the late '80s&lt;/a&gt;.)

&lt;strong&gt;Why humility matters&lt;/strong&gt;

Teams with humble members flourish, which is why the CEO's question to me was so astute. Especially in senior roles, there's a danger of becoming deaf to others and overly enamored of your own ideas. Proud architect = bad.

I have done some bone-headed things in my career (ooh, great idea for a series of posts!), and a large percentage of them were either caused or exacerbated by pride. Hopefully my future mistakes will come from something different.

&lt;strong&gt;How humility manifests in engineering teams&lt;/strong&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;Disclaimer: this list represents ideals I want to achieve. I am definitely not a perfect example of this list. Yet or ever.&lt;/em&gt;&lt;/p&gt;
A humble engineer (or architect, or any other role on a technical team) &lt;strong&gt;listens&lt;/strong&gt; to the ideas of other team members and then restates them, without skew or value judgment, to validate his capture of a different viewpoint. He regularly sees others nod and hears them say, "Yes, that's a fair summary of my perspective." Notice how this contributes to &lt;a title="Good Code Is Balanced" href="/2012/08/27/good-code-is-balanced/"&gt;designs that balance many considerations&lt;/a&gt;.

A humble engineer is &lt;strong&gt;not overly territorial&lt;/strong&gt;. He doesn't suffer from NIH syndrome.

A humble engineer &lt;strong&gt;doesn't exaggerate&lt;/strong&gt; estimates, bug impacts, feature creep, or technical debt.

A humble engineer &lt;strong&gt;likes to compliment&lt;/strong&gt;. She can probably give you a long list of things she's recently learned from team members. Notice how this dovetails with &lt;a title="Julie Jones: Learn voraciously." href="/2012/09/24/julie-jones-learn-voraciously/"&gt;learning voraciously&lt;/a&gt;.

A humble engineer is &lt;strong&gt;quick to admit inadequacies&lt;/strong&gt; of her code, design, or experience. She is proactive about raising questions and concerns in her own work product, so that everyone can learn faster.

A humble engineer is &lt;strong&gt;fact-driven, not authority-driven&lt;/strong&gt;. Perhaps he learned long ago that technique A is "better" than technique B. Perhaps he considers himself an authority on the issue. He may suggest that his experience argues for technique A, but he suggests this &lt;em&gt;always remembering&lt;/em&gt; that past experience may not apply perfectly to new circumstances. If his suggestion is not accepted immediately, he is ready to engage based on data and facts rather than his own prestige or another's lack thereof. He doesn't try to "game" the data; he just allows truth to be its own witness. Regularly pursuing facts without a hidden agenda makes it safe to &lt;a title="Don Kleinschnitz: Put a stake in the ground." href="/2012/09/14/don-kleinschnitz-stake/"&gt;put a stake in the ground&lt;/a&gt;, because people believe it will be moved if need be.

A humble engineer &lt;strong&gt;does not blame others&lt;/strong&gt; when things go wrong. This is not because a humble engineer is relentlessly trying to convince herself that others aren't blameworthy; it's because she knows that blame is not helpful. Instead, she sees problems and asks, "What can I do that would prevent this in the future?" She may also offer ideas about how others could contribute to the solution. She may be blunt. But she remembers that &lt;em&gt;it is the problem, not other people, that are the enemy.&lt;/em&gt; This shows in the way she communicates.

A humble engineer &lt;strong&gt;cheerfully tackles mundane tasks&lt;/strong&gt;, not just exceptional ones with lots of glory attached. See Helen Keller quote.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Items&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Make a list of things you've learned from teammates. If your list is too short, pick something specific where you are willing to be taught.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Resolve to make a habit out of restating another person's perspective fairly and thoroughly.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>596</ns0:post_id>
  <ns0:post_date>2012-10-01 21:55:01</ns0:post_date>
  <ns0:post_name>humility</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="blame">blame</category>
  <category domain="post_tag" nicename="data">data</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="exaggeration">exaggeration</category>
  <category domain="post_tag" nicename="humility">humility</category>
  <category domain="post_tag" nicename="interviews">interviews</category>
  <category domain="post_tag" nicename="nih">NIH</category>
  <category domain="post_tag" nicename="teamwork">teamwork</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:2:{s:7:"twitter";a:1:{i:1511181;i:18;}s:2:"wp";a:1:{i:0;i:14;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>115</ns0:comment_id>
    <ns0:comment_author>Jason Ivey</ns0:comment_author>
    <ns0:comment_author_email>jasonivey@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://nobodyishere0.wordpress.com</ns0:comment_author_url>
    <ns0:comment_date>2012-10-01 22:11:56</ns0:comment_date>
    <ns0:comment_content>Great article Daniel!  Had I been given that question in an interview I'm sure I would have handled it badly as I do with most interview questions.  But you're right, it's a great question which really cuts to the quick. 

Keep up the great posts!</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>130</ns0:comment_id>
    <ns0:comment_author>Stas Shaposhnikov</ns0:comment_author>
    <ns0:comment_author_email>stas.shaposhnikov@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2012-10-06 01:10:28</ns0:comment_date>
    <ns0:comment_content>My feeling is something like this but until now, it was mostly intuitive. Thanks for the great article.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>119</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-10-03 14:17:57</ns0:comment_date>
    <ns0:comment_content>Jason: you'd ace that question, since you're a great example of the virtue it pokes at. :-)</ns0:comment_content>
    <ns0:comment_parent>115</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>142</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-10-07 12:58:02</ns0:comment_date>
    <ns0:comment_content>This is one of the reasons why I blog: it forces me to put into words ideas that have only been vague feelings before. I like being forced to think clearly.

Thanks for the feedback, Stas. I hope things are going great for you.</ns0:comment_content>
    <ns0:comment_parent>130</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4872</ns0:comment_id>
    <ns0:comment_author>Why you should use an IDE instead of vim or emacs | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/05/13/why-you-should-use-an-ide-instead-of-vim-or-emacs/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-13 10:16:06</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] are more likely to transfer, to generate useful help for others on StackOverflow, and to be honed by others, if they&amp;#8217;re in the [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>799</ns0:comment_id>
    <ns0:comment_author>Are You Losing Enough Battles? | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/03/05/are-you-losing-enough-battles/</ns0:comment_author_url>
    <ns0:comment_date>2013-03-05 08:35:56</ns0:comment_date>
    <ns0:comment_content>[...] an occasional battle keeps us humble. It means we&amp;#8217;re grounded in reality rather than ivory tower imagination. It means we value [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>663</ns0:comment_id>
    <ns0:comment_author>Smart Geeks Think Like Cheerleaders &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/02/05/smart-geeks-think-like-cheerleaders/</ns0:comment_author_url>
    <ns0:comment_date>2013-02-05 08:57:50</ns0:comment_date>
    <ns0:comment_content>[...] achieve something important, get enamored of our own success, and forget to be humble and to learn from [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4946</ns0:comment_id>
    <ns0:comment_author>Why you should be proficient in a tool like vim or emacs | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/05/15/why-you-should-be-proficient-in-a-tool-like-vim-or-emacs/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-15 08:46:07</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] perspectives, which is part of the reason why I blog and post on social media in the first place; I need to be pushed. I hope my assertions about teamwork and gestalt were at least [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2725</ns0:comment_id>
    <ns0:comment_author>Steve Jackson: Lead with Passion | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/09/30/steve-jackson-lead-with-passion/</ns0:comment_author_url>
    <ns0:comment_date>2013-09-30 11:49:37</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] them shine.  To find these people, interview for the right skills including the soft skills (like humility) that help people fit into a team environment.  After all, a job is way more than just using [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2429</ns0:comment_id>
    <ns0:comment_author>Features are not chunks of code | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/07/25/features-are-not-chunks-of-code/</ns0:comment_author_url>
    <ns0:comment_date>2013-07-25 11:19:47</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] most production codebases, smart coders don&amp;#8217;t create codebases. Teams do. That takes time and coordination from multiple [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14330</ns0:comment_id>
    <ns0:comment_author>&amp;#8220;Rockstar Developers&amp;#8221; are a dangerous myth | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/03/04/rockstars/</ns0:comment_author_url>
    <ns0:comment_date>2015-03-05 20:15:44</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] more skills than exist in any one person. Wise developers (as opposed to simply clever ones) are humble and interested in [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16816</ns0:comment_id>
    <ns0:comment_author>Are We Smart Enough to Use Kind Words? | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/10/06/use-kind-words/</ns0:comment_author_url>
    <ns0:comment_date>2015-10-06 16:35:58</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] &amp;#8220;rock star&amp;#8221;, if for no other reason than because the community has a longer lifespan. Humility and listening are worth keeping on our personal [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Why I don't blog about "great code"</title>
  <link>http://codecraft.co/2012/10/03/why-i-dont-blog-about-great-code/</link>
  <pubDate>Wed, 03 Oct 2012 21:45:43 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=619</guid>
  <ns2:encoded>&lt;p style="text-align:left;padding-left:30px;"&gt;&lt;em&gt;Last week I heard &lt;a href="http://ttbook.org/book/carol-dweck-psychology-failure-and-success" target="_blank"&gt;a Stanford researcher describe&lt;/a&gt; how failure can be a good thing, if we are prepared to learn from it.&lt;/em&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;I agree, although this mindset is easier to describe than to achieve. So here I'm kicking off a new series of posts about mistakes I've made over the years, and what I've learned from them. Look in the "Mistakes" category for more like this.&lt;/em&gt;&lt;/p&gt;
If you've followed my blog at all, you'll know that I regularly return to the theme of &lt;a href="/category/good-code/" target="_blank"&gt;what constitutes good code&lt;/a&gt;. Ever wonder why I don't get more ambitious and talk about "great code" instead?

A big reason is that in software, &lt;em&gt;great can be the enemy of good&lt;/em&gt;.

If you're a fan of aphorisms, you've probably heard the opposite statement a few times: "good is the enemy of great." People who say this are emphasizing the value of setting lofty goals, and then aligning our day-to-day lives to deeply held priorities. They remind us that settling for mediocrity is almost guaranteed not to create deep meaning or purpose. And they are quite right.

However, I submit that the greatness you should be pursuing in software is less about producing great code, and more about becoming a great &lt;em&gt;producer&lt;/em&gt; of code. And great producers of code know that most of their creations will not &lt;a title="Good Code Is Optimized" href="/2012/08/27/good-code-is-optimized/" target="_blank"&gt;optimize business value&lt;/a&gt; if they aim for a magnum opus. Not every commission can be the Sistine Chapel.

[caption id="attachment_620" align="aligncenter" width="500"]&lt;a href="http://en.wikipedia.org/wiki/File:Creaci%C3%B3n_de_Ad%C3%A1n_(Miguel_%C3%81ngel).jpg"&gt;&lt;img class="size-full wp-image-620" title="Screen Shot 2012-10-02 at 10.10.04 PM" src="http://codecraft.co/wp-content/uploads/2012/10/screen-shot-2012-10-02-at-10-10-04-pm.png" alt="" width="500" height="222" /&gt;&lt;/a&gt; Detail from the Sistine Chapel, by Michaelangelo. Image credit: Wikimedia Commons.[/caption]

Don't get me wrong. I care about the quality and artistry of code, and there is definitely great code out there. It's just that I've got these battle scars...

&lt;strong&gt;Daniel builds a tower&lt;/strong&gt;

In 2001, I helped design and code &lt;!--more--&gt;a library--FileAccess--that isolated our cross-platform file system management applications from the quirks of various storage back-ends. Think of it as an early analog to FUSE. Traditional file systems would be wrapped by the library; so would robotic tape loaders, virtual tape drives, sockets, ftp and http endpoints, cloud storage, SANs, ISOs, and much more. Dependency injection would keep client code assumption-free; mixins would allow transform on file copy, depth- and breadth-first tree traversals, etc. The scope of what we were undertaking was ambitious, but we had our reasons; many C++ I/O libraries were primitive at the time, and we were doing industrial-strength disk-based backup.

One of the FileAccess tasks that fell to me was the design and implementation of a Path class to represent a URI in its most general form. Today, I'd just use boost::filesystem::path, but that wasn't an option back then. Our code was full of messy, error-riddled, redundant blocks that calculated file extensions, appended to a path, found a parent directory, and did similar calculations; we needed to factor it all into one place where the logic was thoroughly unit tested, and done right. We also needed the path to handle correct codepage conversions transparently, so file and folder names could be read from/written to on-disk structures appropriately.

In many ways, FileAccess was a great success. However, I look back on what I did with Path, and I think I got carried away.

&lt;strong&gt;Daniel builds a tower to get to heaven&lt;/strong&gt;

Without a lot of justification, I decided to make Path do canonical casing (pass "hello.txt" to ctor, get "Hello.TXT" back after FS normalizes). I also figured that for logical completeness, it should calculate relative paths between A and B, allow non-contiguous multisegment subsets to be extracted in a single operation, whistle "Yankee Doodle," and walk the dog.

I wouldn't go so far as to say that Path was a disaster. In fact, it was pretty darn useful. But:
&lt;ol&gt;
	&lt;li&gt;It was complex. Bugs were subtle, with such far-reaching ramifications that only black-belt engineers were willing to modify what I'd written.&lt;/li&gt;
	&lt;li&gt;Some of the features I implemented were never used.&lt;/li&gt;
	&lt;li&gt;The canonical casing behavior incurred a performance penalty. Every ctor required a disk read. I later wrote a caching layer to compensate, but this had its own problems with complexity, order of destruction, and thread safety.&lt;/li&gt;
	&lt;li&gt;The work I put into Path had an unknown but perhaps significant opportunity cost. What could I have written instead, if I'd kept Path simpler? After a few RIFs, you get religion about getting ideas into production asap, so you can earn revenue; distractions aren't innocuous.&lt;/li&gt;
&lt;/ol&gt;
These flaws only came into focus for me with 20:20 hindsight. At the time, I was young enough, and I &lt;a title="Humility" href="/2012/10/01/humility/"&gt;undervalued humility&lt;/a&gt; enough, and Path was useful enough, that I only saw the upside.

&lt;strong&gt;The moral&lt;/strong&gt;

I've had that same sort of experience many times since. Occasionally a tower I build creates chaos; more often, I realize after a while that I've overdesigned and overbuilt. Maybe I need to post these lines by Carl Sandburg near my desk:
&lt;p style="margin-left:4em;"&gt;It has happened before.
Strong men put up a city and got a nation together,
And paid singers to sing and women
to warble: We are the greatest city,
the greatest nation,
nothing like us ever was.
And while the singers sang
and the strong men listened
and paid the singers well
and felt good about it all,
there were rats and lizards who listened
… and the only listeners left now
… are … the rats … and the lizards.&lt;/p&gt;
&lt;p style="margin-left:6em;font-style:italic;"&gt;(from "Four Preludes on Playthings of the Wind")&lt;/p&gt;
I'd summarize the principle like this: Don't take your code too seriously. Write good stuff that solves the problems that clearly matter, and allow time and experience and the contributions of others to influence you. &lt;em&gt;You&lt;/em&gt; are what should be great, not the code so much. Maybe this is another way of agreeing with Jesse Harris that code--most of it, at least--&lt;a title="Code Isn’t Art" href="/2012/09/23/code-isnt-art/" target="_blank"&gt;isn't best thought of as art&lt;/a&gt;...
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Identify something that you've overdesigned or overbuilt. Try to quantify the opportunity cost.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>619</ns0:post_id>
  <ns0:post_date>2012-10-03 15:45:43</ns0:post_date>
  <ns0:post_name>why-i-dont-blog-about-great-code</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="backup">backup</category>
  <category domain="post_tag" nicename="boost">boost</category>
  <category domain="post_tag" nicename="codepages">codepages</category>
  <category domain="post_tag" nicename="complexity">complexity</category>
  <category domain="post_tag" nicename="design">design</category>
  <category domain="category" nicename="mistakes">Mistakes</category>
  <category domain="post_tag" nicename="rifs">RIFs</category>
  <category domain="post_tag" nicename="san">SAN</category>
  <category domain="post_tag" nicename="simplicity">simplicity</category>
  <category domain="post_tag" nicename="storage">storage</category>
  <category domain="post_tag" nicename="unicode">unicode</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:92:"http://techknowledgeme.files.wordpress.com/2012/10/screen-shot-2012-10-02-at-10-10-04-pm.png";s:6:"images";a:1:{s:92:"http://techknowledgeme.files.wordpress.com/2012/10/screen-shot-2012-10-02-at-10-10-04-pm.png";a:6:{s:8:"file_url";s:92:"http://techknowledgeme.files.wordpress.com/2012/10/screen-shot-2012-10-02-at-10-10-04-pm.png";s:5:"width";i:508;s:6:"height";i:226;s:4:"type";s:5:"image";s:4:"area";i:114808;s:9:"file_path";b:0;}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-10-03 06:16:14";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>832</ns0:comment_id>
    <ns0:comment_author>6 Strategies to Simplify Software | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/03/12/6-strategies-to-simplify-software/</ns0:comment_author_url>
    <ns0:comment_date>2013-03-12 08:57:31</ns0:comment_date>
    <ns0:comment_content>[...] In many, many cases, the complexity we wrestle with comes from an overly ambitious scope. Overbuilding is probably my greatest weakness as an architect; I&amp;#8217;ve made the mistake way too often. [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Why Cannibalism May Be Smart Business</title>
  <link>http://codecraft.co/2012/10/05/why-cannibalism-may-be-smart-business/</link>
  <pubDate>Fri, 05 Oct 2012 21:41:28 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=634</guid>
  <ns2:encoded>Get out your fork. I've got a story for you...

[caption id="" align="alignright" width="240"]&lt;a href="http://www.flickr.com/photos/alebonvini/2362260782/"&gt;&lt;img title="fork, meat" src="http://farm3.staticflickr.com/2282/2362260782_c834e5bc13_n.jpg" alt="" width="240" height="320" /&gt;&lt;/a&gt; Dig in. Don't hold back. Photo credit: AleBonvini (Flickr)[/caption]

At the beginning of 2005, Symantec acquired Veritas. Together, Veritas's &lt;a class="zem_slink" title="Backup Exec" href="http://www.symantec.com/backupexec/" rel="homepage" target="_blank"&gt;BackupExec&lt;/a&gt; and NetBackup products accounted for something like 70-80% of the world's enterprise backup market. As I recall, BackupExec had annual sales of around $600M, and NetBackup was similar.

I worked for the only technology group within Symantec that overlapped the backup space at the time. We were making a disk-based backup product named LiveState Recovery; its revenues were in the tens of millions of dollars and we were growing at &amp;gt;100% &lt;a class="zem_slink" title="Compound annual growth rate" href="http://en.wikipedia.org/wiki/Compound_annual_growth_rate" rel="wikipedia" target="_blank"&gt;CAGR&lt;/a&gt;.

&lt;strong&gt;Integration gets hairy&lt;/strong&gt;

Our growth stemmed from the fact that we were approaching backup in a radically different way. Instead of capturing changed files and streaming them through a centralized media server to a tape library, we took &lt;a class="zem_slink" title="Disk image" href="http://en.wikipedia.org/wiki/Disk_image" rel="wikipedia" target="_blank"&gt;disk images&lt;/a&gt; based on snapshotting technology. We were faster (many times faster, often); we had a distributed architecture that scaled out much more easily; we never missed a bit; we captured application state perfectly; we could mount backups or convert them to virtual machines.

As the acquisition finalized, Symantec charged us and the BE folks &lt;!--more--&gt;to devise a coherent market strategy. The instructions were a no-brainer, but the details were messy. The product management folks with Veritas heritage didn't put much stock in our upstart product line; our revenue was smaller than some of BE's optional upsells. They decided that our disk-based product would become another BE option; that way, BE would get to claim immediate victory in the disk-based backup space.

&lt;strong&gt;Fear of cannibalism&lt;/strong&gt;

I thought this was unwise. Sales was trained and incented to sell traditional BE, and marketing was trained to talk about traditional BE to the market. Rolling disk-based backup support into BE would make our innovation almost invisible. Our dev team would be starved for investment dollars, and sales would dry up. When I raised my concern and argued for a different strategy based on our CAGR, PM shot back: "That growth isn't coming from a vacuum; it's coming from cannibalizing &lt;em&gt;our&lt;/em&gt; [BE] revenue! Do you want to undercut a revenue titan, and market some upstart product instead? It'll create market confusion. We should spend our money and energy where the biggest bucks are."

This analysis sounded fairly rational. Many in the higher echelons of management bought it. But it missed a critical insight:&lt;em&gt; If Symantec's upstart backup product didn't cannibalize BE's revenue, competitors would.&lt;/em&gt; A market upswell was underway; Symantec could surf or paddle foolishly away, but the wave was coming regardless.

Our team advocated strongly enough that we got a compromise of sorts. Disk-based backup adopted the BE brand, and "BackupExec System Recovery" (BESR) was born. The teams and codebases remained somewhat independent.

However, my concerns about sales and marketing misalignment proved well-founded. A year or two after the transition, BESR was growing at 10% per year instead of 100%, even though competitors like Acronis and StorageCraft were growing by leaps and bounds. We didn't have the market momentum and corresponding dev funding to pursue critical initiatives like cloud integration. The product began to starve. Ultimately dev work was shipped overseas and the team that built BESR was laid off. I don't know exactly what BE revenues are today, but I suspect growth is pretty flat, and &lt;a href="http://www.wired.com/cloudline/2012/08/cloud-backup-vendors/" target="_blank"&gt;seriously threatened by virtualization and cloud&lt;/a&gt;. Traditional backup isn't quite irrelevant, but it's getting there...

[caption id="" align="aligncenter" width="444"]&lt;a href="http://en.wikipedia.org/wiki/Disruptive_innovation"&gt;&lt;img class="  " title="traditional backup gets long in the tooth" src="http://upload.wikimedia.org/wikipedia/commons/thumb/8/8e/Disruptivetechnology.gif/634px-Disruptivetechnology.gif" alt="" width="444" height="336" /&gt;&lt;/a&gt; Virtualization and cloud are disruptive technologies for traditional backup. Result: traditional backup gets displaced at higher and higher bars of functionality as you move right. Image credit: Megapixie (Wikimedia Commons).[/caption]

&lt;strong&gt;The moral&lt;/strong&gt;

The metaphor of cannibalism is apt. If you had a visceral "yuck" reaction to my fork comment... well, business people have a visceral "yuck" reaction to anything that endangers a current revenue stream. And they should. We wouldn't have much of an economy if we failed to protect the value of business investments.

However...

I am satisfied that the essence I've given here is true: in business, fear of cannibalism is frequently irrational. Cannibalism happens with change, and change is unavoidable. If you have two products, and A is truly cannibalizing B's revenue, then &lt;em&gt;the market is sending you a signal&lt;/em&gt;: A has value over B for at least a segment of your customer base. Ignore that signal at your peril; heed it with discipline (and some savvy maneuvering, not to be underestimated), and you'll end up with a full stomach.

Even if the process is a bit grisly.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Examine your current product through the lens of disruptive innovation (described by &lt;a class="zem_slink" title="Clayton M. Christensen" href="http://www.claytonchristensen.com" rel="homepage" target="_blank"&gt;Clayton Christensen&lt;/a&gt; in The &lt;a class="zem_slink" title="Disruptive technology" href="http://en.wikipedia.org/wiki/Disruptive_technology" rel="wikipedia" target="_blank"&gt;Innovator's Dilemma&lt;/a&gt; and graphed above). Are you new and disruptive, long-in-the-tooth, or somewhere else? What does this suggest about wise strategy?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.prweb.com/releases/prwebUnitrends/Backup-Solutions/prweb8087707.htm" target="_blank"&gt;Health Care Facility Replaces Symantec Backup Exec With Unitrends for Improved Feature Set and Reduced Man Hours&lt;/a&gt; (prweb.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.it-sideways.com/2012/08/symantec-integrates-into-vmware.html" target="_blank"&gt;Symantec Integrates Into VMWare&lt;/a&gt; (it-sideways.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://go.theregister.com/feed/www.theregister.co.uk/2012/08/30/quantum_q_cloud/" target="_blank"&gt;Quantum sends out cheap 'n' fast newbie to beat off Amazon's Glacier&lt;/a&gt; (go.theregister.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>634</ns0:post_id>
  <ns0:post_date>2012-10-05 15:41:28</ns0:post_date>
  <ns0:post_name>why-cannibalism-may-be-smart-business</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="backup">backup</category>
  <category domain="post_tag" nicename="backupexec">BackupExec</category>
  <category domain="post_tag" nicename="cloud">cloud</category>
  <category domain="post_tag" nicename="disk-based-backup">disk-based backup</category>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <category domain="post_tag" nicename="innovation">innovation</category>
  <category domain="category" nicename="mistakes">Mistakes</category>
  <category domain="post_tag" nicename="netbackup">NetBackup</category>
  <category domain="post_tag" nicename="product-management">product management</category>
  <category domain="post_tag" nicename="strategy">strategy</category>
  <category domain="post_tag" nicename="symantec">Symantec</category>
  <category domain="post_tag" nicename="veritas">Veritas</category>
  <category domain="post_tag" nicename="virtualization">virtualization</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:112:"http://upload.wikimedia.org/wikipedia/commons/thumb/8/8e/Disruptivetechnology.gif/634px-Disruptivetechnology.gif";s:6:"images";a:2:{s:62:"http://farm3.staticflickr.com/2282/2362260782_c834e5bc13_n.jpg";a:6:{s:8:"file_url";s:62:"http://farm3.staticflickr.com/2282/2362260782_c834e5bc13_n.jpg";s:5:"width";i:240;s:6:"height";i:320;s:4:"type";s:5:"image";s:4:"area";i:76800;s:9:"file_path";s:0:"";}s:112:"http://upload.wikimedia.org/wikipedia/commons/thumb/8/8e/Disruptivetechnology.gif/634px-Disruptivetechnology.gif";a:6:{s:8:"file_url";s:112:"http://upload.wikimedia.org/wikipedia/commons/thumb/8/8e/Disruptivetechnology.gif/634px-Disruptivetechnology.gif";s:5:"width";i:634;s:6:"height";i:480;s:4:"type";s:5:"image";s:4:"area";i:304320;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:2;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-10-06 01:47:54";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:2:{s:7:"twitter";a:1:{i:1511181;i:19;}s:2:"wp";a:1:{i:0;i:14;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>129</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-10-06 01:01:32</ns0:comment_date>
    <ns0:comment_content>Thanks for the extra detail, Dano. You're quite right to include GSS and Continuous Protection. For that matter, the products from Waltham, though focused on systems mgmt, also had some interesting application in the backup space.

The history of BE and BESR (and of the SEA business unit before that) has some frustrating parts, and this is one of them. But it also has some happy parts. I had the chance to work with many talented, hard-working people (from all backgrounds, not just on my own team), and I learned a lot.</ns0:comment_content>
    <ns0:comment_parent>128</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>128</ns0:comment_id>
    <ns0:comment_author>Dano</ns0:comment_author>
    <ns0:comment_author_email>drjaz@hotmail.com</ns0:comment_author_email>
    <ns0:comment_date>2012-10-05 17:40:54</ns0:comment_date>
    <ns0:comment_content>Daniel,

It actually was worse than that.  The SMB product line was in total disarray and when I got involved with this shortly after 2006 our Sr VP was trying to create unique solutions for 5 backup products and how to Market and Sell then without disrupting the current revenue streams.

The products at the time were NBU, BE, GSS, LSR (BESR), and the complementary products for Continuous Protection for both server and desktop.

This was a marketing nightmare! More time and market research should have been spent leveraging the markets needs.  There was a ton of money out there to made, but we didn't have the infrastructure in place to go after the SMB MID markets.  We couldn't sell in there and we couldn't support it if we sold it there thus without a proper plan we have failure.

BESR was a solid product and had a image market all to it's own that was different than the rest of Symantec's product line.  Yes Symantec/VERITAS products that were also good and solved many problems, but executive management didn't know how to handle the overlap when it came to the image technology and traditional backup which made some very bad decisions.

From 2001 - 2012 I seen the demise of many good backup products produced by Symantec/VERITAS and I have told this story to anyone who had an ear to hear.

I could go on and on, but I'd rather say thank you for speaking up.

Dano</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>275</ns0:comment_id>
    <ns0:comment_author>Things Worth Backing Up: The Nightmares Fear Factory Flickr Stream | Backupify</ns0:comment_author>
    <ns0:comment_author_url>http://blog.backupify.com/2012/10/31/things-worth-backing-up-the-nightmares-fear-factory-flickr-stream/</ns0:comment_author_url>
    <ns0:comment_date>2012-11-02 14:43:57</ns0:comment_date>
    <ns0:comment_content>[...] Why Cannibalism May Be Smart Business [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1209</ns0:comment_id>
    <ns0:comment_author>Courage Counts | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/05/31/courage-counts/</ns0:comment_author_url>
    <ns0:comment_date>2013-05-31 08:33:43</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] technologies at Symantec from a tape-centric to a disk-centric model. A big problem for us was the fear of cannibalizing the revenue stream of the traditional product. We ended up dithering long enough that the opportunity to ride a [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Big Crud Isn't Big Data</title>
  <link>http://codecraft.co/2013/04/09/big-crud-isnt-big-data/</link>
  <pubDate>Tue, 09 Apr 2013 15:25:31 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=636</guid>
  <ns2:encoded>"Big Data" is another one of those buzz words that seems to be everywhere these days. We hear stories regularly about how fast the world's data grows and how big it's going to be by 20xx. Vendors then reason that we should buy their wares to cope. This infographic is typical:

&lt;a href="http://www.businessinsider.com.au/infographic-heres-how-much-data-is-created-on-the-web-every-minute-2015-8" target="_blank"&gt;&lt;img class="alignnone size-full wp-image-6282" src="https://codecraft.co/wp-content/uploads/2013/04/dataneversleeps_2-0_v2.jpg" alt="dataneversleeps_2-0_v2" width="810" height="1287" /&gt;&lt;/a&gt;

I have several deep professional connections to big data&lt;sup&gt;[&lt;a href="#foot1"&gt;1&lt;/a&gt;]&lt;/sup&gt;, going back decades, so when I say I think a lot of it is manufactured silliness, I'm hoping you'll pause before laughing me off.

The fact is, most of the "data" that's exploding is not hard-won intellectual treasure for the ages; it's marginal stuff like the viewing history on Fred Flintstone's deleted Netflix account. More than big data, we're experiencing a "big crud" wave, because we're pack rats. This comic has it right:&lt;!--more--&gt;

[caption id="" align="aligncenter" width="441"]&lt;a href="http://www.qwantz.com/index.php?comic=2292"&gt;&lt;img class=" " src="http://www.qwantz.com/comics/comic2-2303.png" alt="" width="441" height="300" /&gt;&lt;/a&gt; image credit: Ryan North (qwantz.com)[/caption]

I'm not claiming that all big data is worthless; some amazing things become possible at the scale of billions of records. For Netflix, maybe Fred Flintstone's viewing history &lt;em&gt;is&lt;/em&gt; valuable. Maybe. However, big data is only an asset if we can derive some value from it. And an awful lot of big data doesn't pass that smell test, either because our tools are inadequate, or because the data becomes stale, or because it wasn't particularly interesting data to start with.

The value we want to derive is &lt;em&gt;insight&lt;/em&gt;.

If you're willing to be serious about the big data wave, then find the best of breed tools that push what's possible. I recommend &lt;a title="Perfect Search - speed, precision, performance" href="http://www.perfectsearchcorp.com" target="_blank"&gt;Perfect Search&lt;/a&gt;, for example; running a query 100x to 1000x faster than Google or Oracle, on a dataset 100x bigger, is the kind of tool that you need. And of course there are tools like hadoop and &lt;a class="zem_slink" title="BigQuery" href="http://code.google.com/apis/bigquery/" target="_blank" rel="homepage"&gt;Google BigQuery&lt;/a&gt; and Amazon's bulk load and Glacier and ... Consider &lt;a href="/2012/11/07/big-data-in-motion/"&gt;capturing value from big data while it's in flight&lt;/a&gt;, and not storing it at all.

If you don't want to surf the wave, then I have a relatively easy&lt;sup&gt;[&lt;a href="#foot2"&gt;2&lt;/a&gt;]&lt;/sup&gt; solution. It's called the delete button. Go watch an episode of "&lt;a class="zem_slink" title="Hoarders" href="http://www.aetv.com/hoarders/" target="_blank" rel="homepage"&gt;Hoarders&lt;/a&gt;" and tell me I'm wrong. :-)

&lt;hr /&gt;

&lt;div style="font-size:92%;padding:1em;"&gt;

[&lt;a name="foot1"&gt;&lt;/a&gt;1] I worked in the backup industry for over a decade, including on BackupExec and NetBackup, which collectively owned most of the world's backups. When hundreds or thousands of clients stream over infiniband to media servers backed by peta-scale tape farms, and then use backups for security auditing and disaster recovery planning and regulatory compliance, &lt;em&gt;that's&lt;/em&gt; big data.

I also worked in the search industry. We used to get requirements like "We need to index 380 billion tweets. How long would that take?" Or, "We'd like to index each trade on the New York Stock Exchange, the FTSE, and the Tokyo Stock Exchange. We want to do it in realtime, and support thousands of queries per second at the same time." Yep. I wasn't kidding about the world needing Perfect Search technology.

Now I work at &lt;a href="http://www.adaptivecomputing.com" target="_blank"&gt;Adaptive Computing&lt;/a&gt;, which happens to A) make the scheduling software that runs the largest supercomputers on the planet; and B) sell cloud management software that's at the core of some of the world's largest private cloud deployments. &lt;a href="http://www.adaptivecomputing.com/blog-cloud/cloud-meet-hpc-meet-big-data/" target="_blank"&gt;Each of these markets generates serious big data war stories&lt;/a&gt;.

[&lt;a name="foot2"&gt;&lt;/a&gt;2] I know, I know. Deleting isn't easy. You have to know what can be deleted and what can't. You have regulatory compliance issues. I still claim that getting better at deleting is easier than getting better at big data. That's probably a good subject for another post...

&lt;/div&gt;
&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://workforceplanning.wordpress.com/2013/04/08/are-we-jumping-the-shark-on-big-data-for-hr/" target="_blank"&gt;Are we Jumping the Shark on Big Data for HR?&lt;/a&gt; (workforceplanning.wordpress.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://blog.neolane.com/conversational-marketing/big-data/" target="_blank"&gt;Transforming Big Data Into Actionable Insight [Infographic]&lt;/a&gt; (neolane.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.domo.com/blog/2011/08/data-data-everywhere/" target="_blank"&gt;How Are You Managing Big Data? Data, Data Everywhere | Domo | Blog&lt;/a&gt; (domo.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a style="font-size:13px;" href="http://www.informationweek.com/big-data/news/big-data-analytics/dont-confuse-big-data-with-storage/240152455" target="_blank"&gt;Don't Confuse Big Data With Storage&lt;/a&gt;&lt;span style="color:#333333;font-size:13px;"&gt; (informationweek.com)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>636</ns0:post_id>
  <ns0:post_date>2013-04-09 09:25:31</ns0:post_date>
  <ns0:post_name>big-crud-isnt-big-data</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="adaptive-computing">adaptive computing</category>
  <category domain="post_tag" nicename="analysis">analysis</category>
  <category domain="post_tag" nicename="big-data">big data</category>
  <category domain="post_tag" nicename="bigquery">bigquery</category>
  <category domain="post_tag" nicename="cloud-computing">cloud computing</category>
  <category domain="post_tag" nicename="glacier">glacier</category>
  <category domain="post_tag" nicename="hadoop">hadoop</category>
  <category domain="post_tag" nicename="hoarding">hoarding</category>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <category domain="post_tag" nicename="insight">insight</category>
  <category domain="post_tag" nicename="perfect-search">perfect search</category>
  <category domain="post_tag" nicename="supercomputing">supercomputing</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:44:"http://www.qwantz.com/comics/comic2-2303.png";s:6:"images";a:1:{s:44:"http://www.qwantz.com/comics/comic2-2303.png";a:6:{s:8:"file_url";s:44:"http://www.qwantz.com/comics/comic2-2303.png";s:5:"width";i:735;s:6:"height";i:500;s:4:"type";s:5:"image";s:4:"area";i:367500;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2013-04-09 05:00:15";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_job_id</ns0:meta_key>
    <ns0:meta_value>20569497690</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>981</ns0:comment_id>
    <ns0:comment_author>Big data will rewire your brain | Tim Batchelder.com</ns0:comment_author>
    <ns0:comment_author_url>http://timbatchelder.wordpress.com/2012/12/02/big-data-you-have-no-idea-how-much-it-will-change/</ns0:comment_author_url>
    <ns0:comment_date>2013-04-09 10:15:51</ns0:comment_date>
    <ns0:comment_content>[...] Big Crud Isn&amp;#8217;t Big Data (codecraft.co) [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>984</ns0:comment_id>
    <ns0:comment_author>Jesse Harris</ns0:comment_author>
    <ns0:comment_author_email>jesse@coolestfamilyever.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.coolestfamilyever.com/</ns0:comment_author_url>
    <ns0:comment_date>2013-04-09 20:48:42</ns0:comment_date>
    <ns0:comment_content>Data that isn't valuable today could be critical tomorrow, and getting rid of it is irreversible. The very nature of data forces us to become digital packrats, accumulating and maintaining bits (pun intended) of cruft for what seems like an incomprehensible period of time. With storage getting cheaper and cheaper, there's not much disincentive to do so.

I was really disappointed that Microsoft backed off of its ambitious WinFS project. It would have helped home users tame some of this ever-increasing data.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>3905</ns0:comment_id>
    <ns0:comment_author>Looking to the Future of Computing in a Big Data Environment | Data Center PostData Center Post</ns0:comment_author>
    <ns0:comment_author_url>http://datacenterpost.com/2014/03/looking-future-computing-big-data-environment.html</ns0:comment_author_url>
    <ns0:comment_date>2014-03-17 02:31:07</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] do is dump data onto massive tape libraries and archive it for a decade, it’s not really in the big data sweet spot. You may be wrestling data, and it may be big, but you’re not really pursuing the problem [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>What Should Be In The Next C++ Compiler?</title>
  <link>http://codecraft.co/2012/10/03/what-should-be-in-next-c-compiler/</link>
  <pubDate>Wed, 03 Oct 2012 16:54:19 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=643</guid>
  <ns2:encoded>Herb Sutter (champion of VC++ compiler evolution at Microsoft) &lt;a href="http://wp.me/peb5Y-q7" target="_blank"&gt;posted&lt;/a&gt; an interesting poll today. He wants to know what the C++ developer community thinks about priorities for the next release.

Go vote.

&lt;em&gt;Editorial comment&lt;/em&gt;: I'm not surprised that conformance is winning over performance or fancy features. MS's compiler has always been easy to use in a vacuum, but a pain when interoperability and cross-platform matter. When Herb went to MS, things improved drastically, but my perception is that gcc leapfrogged VC++ a year or two back, as C++11 began to gel. (VS 2012 probably gets back to parity again; I haven't poked into it deeply, yet.)</ns2:encoded>
  <ns0:post_id>643</ns0:post_id>
  <ns0:post_date>2012-10-03 10:54:19</ns0:post_date>
  <ns0:post_name>what-should-be-in-next-c-compiler</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="c">c++</category>
  <category domain="post_tag" nicename="compilers">compilers</category>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>135</ns0:comment_id>
    <ns0:comment_author>Jason Ivey</ns0:comment_author>
    <ns0:comment_author_email>jasonivey@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://gravatar.com/jasonivey74</ns0:comment_author_url>
    <ns0:comment_date>2012-10-07 00:46:40</ns0:comment_date>
    <ns0:comment_content>Herb Sutter is one of few other blogs that I will follow as closely as yours due to the amount of great content which he regularly posts.  I would also have to agree with you that GCC really moved into the mainstream #1 compiler spot in the last few years.  Unfortunately, there are so many of the developers working in Linux are locked into a platform which has them handcuffed to an earlier version of GCC (i.e. pre-GCC 4.7 without all of the latest C++11 support).  It's this reason that I still think that Microsoft, even though they are fashionably late to the party, will still be the most popular girl at the end of the night.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>140</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-10-07 12:43:38</ns0:comment_date>
    <ns0:comment_content>I think you're right.

The other reason MS remains popular, despite its foibles, is that it still has the world's best C++ IDE, by a *long* shot.</ns0:comment_content>
    <ns0:comment_parent>135</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>240</ns0:comment_id>
    <ns0:comment_author>masajes reductivos</ns0:comment_author>
    <ns0:comment_author_email>ronnieworsham@yahoo.de</ns0:comment_author_email>
    <ns0:comment_date>2012-10-28 18:08:13</ns0:comment_date>
    <ns0:comment_content>Buen Post
Me encantó la forma en que relata sobre el tema.
Seguiré visitando esta web para seguir profundizando sobre la materia.

Muchas Gracias</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Why Exceptions Aren't Enough</title>
  <link>http://codecraft.co/2012/10/09/why-exceptions-arent-enough/</link>
  <pubDate>Wed, 10 Oct 2012 05:14:23 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=645</guid>
  <ns2:encoded>&lt;p style="text-align:right;"&gt;&lt;em&gt;(This post is a logical sequel to &lt;a title="Good Code Plans for Problems" href="http://codecraft.co/2012/09/03/good-code-plans-for-problems/"&gt;my earlier musings about having a coherent strategy to handle problems&lt;/a&gt;.)&lt;/em&gt;&lt;/p&gt;
Back in the dark ages, programmers wrote functions that returned numeric errors:
&lt;pre style="border:solid 1px #ccc;background-color:#eee;margin-left:4em;padding:.5em;display:inline-block;margin-bottom:1em;"&gt;if (prepare() == SUCCESS) {
  doIt();
}&lt;/pre&gt;
This methodology has the virtue of being simple and fast. We could &lt;code&gt;switch&lt;/code&gt; based on the error code. A "feature" of our apps was that our users could google an error code to see if they had company:

[caption id="" align="aligncenter" width="388"]&lt;a href="http://xkcd.com/979/"&gt;&lt;img class=" " src="http://imgs.xkcd.com/comics/wisdom_of_the_ancients.png" alt="" width="388" height="216" /&gt;&lt;/a&gt; Image credit: xkcd.com[/caption]

However, as we wrote code, we sometimes forgot to check errors, or tell users about them:
&lt;pre style="border:solid 1px #ccc;background-color:#eee;margin-left:4em;padding:.5em;display:inline-block;margin-bottom:1em;"&gt;prepare();
doIt();&lt;/pre&gt;
Admit it; you've written code like this. So have I. The mechanism lets a caller be irresponsible and ignore the signal the called function sends. Not good. Even if you are being responsible, the set of possible return values is nearly unbounded, and you get subtle downstream bugs if a called function adds a new return value when a caller is &lt;code&gt;switch&lt;/code&gt;ing return values.

Another problem with this approach to errors &lt;!--more--&gt;is that it doesn't allow you to pass context. If &lt;code&gt;prepare()&lt;/code&gt; is doing work in 3 phases, and it fails, it can't tell you which phase it failed on.

If you were a C programmer and picked up C++ (or worked in a codebase built by people with this sort of background), things only got worse with the introduction of &lt;code&gt;bool&lt;/code&gt; and enums as distinct types. It was natural to write functions that returned &lt;code&gt;true&lt;/code&gt; on success:
&lt;pre style="border:solid 1px #ccc;background-color:#eee;margin-left:4em;padding:.5em;display:inline-block;margin-bottom:1em;"&gt;if (prepareEx()) {
  doIt();
}&lt;/pre&gt;
The problem with this is that numeric-error functions return &lt;code&gt;0&lt;/code&gt; (=&amp;gt;&lt;code&gt;FALSE&lt;/code&gt;) for success, while boolean-success functions return &lt;code&gt;true&lt;/code&gt;. Add 5 functions with numeric-error semantics, two that return enums, and 5 with boolean-success semantics; stir vigorously. Recipe for a large batch of bugs and plenty of headaches.

Most modern programming languages have first-class support for exceptions, which addresses many of the drawbacks of simple numeric schemes. Rich context, including nested context, can be passed. Messages can have args (good except that they complicate l10n). Lazy callers get what they deserve; sooner or later someone will be forced to acknowledge the error or else the program will abend.

Since exceptions became popular, I haven't heard a lot of clamor from the programming community about the inadequacy of the solution.

Which surprises me, because exceptions are not the end-all, be-all answer to this issue:
&lt;ul&gt;
	&lt;li&gt;&lt;a class="zem_slink" title="Exception handling" href="http://en.wikipedia.org/wiki/Exception_handling" rel="wikipedia" target="_blank"&gt;Exceptions&lt;/a&gt; don't offer a solution for warnings.&lt;/li&gt;
	&lt;li&gt;Exceptions allow nesting, but not compositing.&lt;/li&gt;
	&lt;li&gt;Exceptions allow easy categorization by class/inheritance, but not by severity, consequence, or layer of origin.&lt;/li&gt;
	&lt;li&gt;Exceptions introduce gnarly complications across library boundaries.&lt;/li&gt;
	&lt;li&gt;Exceptions encourage sloppiness about context.&lt;/li&gt;
&lt;/ul&gt;
Let me take each of these in turn.

&lt;strong&gt;Warnings&lt;/strong&gt;

For the purpose of this discussion, I'll claim that warnings describe events during function execution that a called function cannot classify with confidence into unqualified success or failure. If I'm recursively copying all files in a directory tree, and I encounter a file that cannot be opened because I lack privileges or it is currently opened exclusively, &lt;em&gt;only my caller&lt;/em&gt; knows how to judge the problem. Some callers might consider this an error; others might view it as harmless noise.

You could easily resolve this ambiguity by fiat: make the function always treat these issues as errors, or always ignore them, and be done with it. But either choice makes your function less useful to a certain type of caller.

You could add a callback parameter to your &lt;a class="zem_slink" title="Signature (computer science)" href="http://en.wikipedia.org/wiki/Signature_%28computer_science%29" rel="wikipedia" target="_blank"&gt;function signature&lt;/a&gt;, and use the callback to assess the severity of the anomaly. This is sometimes the best solution, but it becomes problematic if the parameters and semantics to your callback vary dramatically. You also incur the overhead of invoking the callback for all possible anomalies, even if only a small subset of them are in fact interesting to the caller. This is particularly problematic if you're making remoted calls.

Exceptions force you into either-or thinking; either something is exceptional, or it is not. They insist on unwinding the stack as soon as they are thrown. This leaves you with a binary choice. If an event of unknown severity causes you to exit prematurely, but the caller thinks it's harmless, you've done less work than your contract; if you wait till the end of the function and then return the worst severity you encountered, the caller may wish you had returned earlier.

&lt;strong&gt;No compositing&lt;/strong&gt;

Exceptions can refer to their cause, and can give &lt;a class="zem_slink" title="Stack trace" href="http://en.wikipedia.org/wiki/Stack_trace" rel="wikipedia" target="_blank"&gt;stack traces&lt;/a&gt;. But what if I find 3 files, out of a directory of 500, that are not copyable? The first time, I can make an exception about the problem file. Does a second exception (and its stack trace) replace the first, or take the first as its parent/cause? Neither answer is satisfying. What we really want is a "multiple problems occurred" state that contains an array of problems. I don't know of that feature in standard exception mechanisms.

&lt;strong&gt;Categorization&lt;/strong&gt;

If I have a sane &lt;a class="zem_slink" title="Inheritance (object-oriented programming)" href="http://en.wikipedia.org/wiki/Inheritance_%28object-oriented_programming%29" rel="wikipedia" target="_blank"&gt;inheritance hierarchy&lt;/a&gt; for my exceptions, I may get some nice benefits from:
&lt;pre style="border:solid 1px #ccc;background-color:#eee;margin-left:4em;padding:.5em;display:inline-block;margin-bottom:1em;"&gt;} catch(NetworkError) { ...
} catch (everything else) { ...
}&lt;/pre&gt;
But sometimes, I'd like stuff more like this:
&lt;pre style="border:solid 1px #ccc;background-color:#eee;margin-left:4em;padding:.5em;display:inline-block;margin-bottom:1em;"&gt;} catch (errors from my package) {
} catch (errors from library X) { ...
} catch (errors from library Y) { ...
}&lt;/pre&gt;
Or:
&lt;pre style="border:solid 1px #ccc;background-color:#eee;margin-left:4em;padding:.5em;display:inline-block;margin-bottom:1em;"&gt;if (myException.isRecoverable()) {
    tryAgain();
} else {
    giveUpForever();
}&lt;/pre&gt;
Although you can certainly achieve these things by building on top of exceptions, I think it's harder than it should be. I think this is one reason why so much error handling code in callers is sloppy catch-all stuff.

&lt;strong&gt;Complications across boundaries&lt;/strong&gt;

I think exceptions are not a good strategy for low-level, widely used library routines, because they make too many assumptions about context. In one codebase I worked in, string-handling routines that ran out of buffer space threw exceptions. This is bad. These were functions that had to run fast, were called all over the place in tight loops, were used in singletons before or after main(), etc. Coders wanted to hook the top-level exception handler to guarantee that all thrown exceptions were logged--but even before they did this, they'd opened the app's log file, which means they'd parsed file paths, which means they'd used the string handling functions that threw exceptions.

Throwing exceptions across remoted boundaries, or even across shared library boundaries, is not always easy, reliable, or wise, either.

&lt;strong&gt;Sloppy context&lt;/strong&gt;

This is my biggest beef with existing exception models--they give programmers a false sense of communication which encourages bad habits and leads to frustrated users.
&lt;p style="padding-left:30px;"&gt;WATURI
Listen, Joe. What's this Deedee tells me about an error with the catalogs?&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;JOE
I've only got twelve. I told you.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;WATURI
When?&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;JOE
Three weeks ago. Then two weeks ago. Didn't you read my stack trace?&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;WATURI
Did you tell me last week?&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;JOE
No. I thought you knew.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;WATURI
Not good enough, Joe! Not nearly good enough! I put you in charge of the entire advertising library...&lt;/p&gt;
&lt;p style="text-align:right;font-size:85%;color:#666;"&gt;(Apologies to "Joe vs. the Volcano")&lt;/p&gt;
&lt;em&gt;Stack traces are not meaningful to end users, even if they're smarter than Mr. Waturi&lt;/em&gt;. They only speak to someone with a mental model of program internals. Yet in most exception-oriented programs, whether quick-and-dirty or complex-and-sophisticated, exceptions (and often, their stack traces) end up getting logged or displayed to a user, because that's the sum total of the error-handling strategy.

To understand how insidious this is, let's go back to my example about copying a directory tree. Suppose I encounter the can't-copy-because-file-is-opened-exclusively situation, and my (vastly simplified) call stack looks like this:
&lt;pre&gt;backupMachine() -&amp;gt;
    handleSpecialFolders() -&amp;gt;
        copyTree()&lt;/pre&gt;
Further suppose that the thrown exception says "Can't copy x.dat; file is opened exclusively."

When a user sees this message in a log or a status bar or progress dialog or message box (either with or without supporting callstack context), she or he will have two questions:
&lt;ol&gt;
	&lt;li&gt;&lt;em&gt;What are the consequences of this problem?&lt;/em&gt;&lt;/li&gt;
	&lt;li&gt;&lt;em&gt;What could/should I do about it?&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
And she will not have enough information to address either question. Why? Because &lt;code&gt;copyTree()&lt;/code&gt; can't know the consequences of its failure, and &lt;code&gt;handleSpecialFolders()&lt;/code&gt; allowed an exception to propagate without providing any clues.

Best practice would be for &lt;code&gt;handleSpecialFolders()&lt;/code&gt; to create its own exception that says, "Can't backup the registry because a key file is locked. Image will be unbootable." This exception would then point to the exception from the lower-level function as its cause. You'd have an accurate description of consequences for every level in the call stack.

Nobody does this. It's just too easy to let the exception propagate.

Even if they did, notice that it &lt;em&gt;still&lt;/em&gt; wouldn't answer the user's second question very well. So much for good advice.

[caption id="" align="aligncenter" width="413"]&lt;a href="http://xkcd.com/306/"&gt;&lt;img src="http://imgs.xkcd.com/comics/orphaned_projects.png" alt="" width="413" height="168" /&gt;&lt;/a&gt; Image credit: xkcd.com[/caption]

&lt;strong&gt;So what's the answer?&lt;/strong&gt;

Don't get me wrong.

Numeric/bool/enum errors are useful when you're writing low-level functions and you can't assume calling layers want exceptions.

Exceptions add a rich set of possibilities.

But before we really achieve error-handling nirvana, we need something more:

&lt;strong&gt;You should have to go out of your way to propagate an exception without adding your own spin on its context&lt;/strong&gt;. Instead of allowing a block of code that makes no explicit claim about handling exceptions, you should have to make an explicit claim that you &lt;em&gt;don't&lt;/em&gt; handle exceptions; language features should make it easy to wrap context. Dispense with an empty &lt;code&gt;throw&lt;/code&gt; or &lt;code&gt;raise&lt;/code&gt;. Dispense with Java's passthrough "throws" on a function decl. Imagine something like this instead:
&lt;pre style="border:solid 1px #ccc;background-color:#eee;margin-left:4em;padding:.5em;display:inline-block;margin-bottom:1em;"&gt;def copyTree(src, dest):
    try:
        for f in src.listFiles():
            copyFile(src + f, dest + f)
    except Exception e:
        &lt;span style="color:green;"&gt;// Imagine that propagate requires a cause and a new exception,
        // and that compiler would never allow an old exception to be
        // rethrown, only propagated...&lt;/span&gt;
        propagate(new IncompleteFolderException(msg), e)&lt;/pre&gt;
&lt;strong&gt;Exceptions&lt;/strong&gt; should declare their semantics (possibly with tags or annotations) and &lt;strong&gt;should be catchable by those semantics. They should also be catchable by origin.&lt;/strong&gt;

Exceptions should allow compositing. If you do old += new, you should get composite with 2 children, and a severity that's the maximum of all the others.

Have I covered all the biggies, or are there other features that you think exceptions ought to have?
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;span style="color:#000080;"&gt;&lt;strong&gt;Action Item&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;If you use exceptions, take a few moments to study places where you are propagating through multiple layers of code without providing new context. How could you correct this?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>645</ns0:post_id>
  <ns0:post_date>2012-10-09 23:14:23</ns0:post_date>
  <ns0:post_name>why-exceptions-arent-enough</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="communication">communication</category>
  <category domain="post_tag" nicename="errors">errors</category>
  <category domain="post_tag" nicename="exceptions">exceptions</category>
  <category domain="post_tag" nicename="inheritance">inheritance</category>
  <category domain="post_tag" nicename="stack-trace">Stack trace</category>
  <category domain="post_tag" nicename="syntax">syntax</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:7:"twitter";a:1:{i:10448672;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:2:{s:7:"twitter";a:1:{i:1511181;i:19;}s:2:"wp";a:1:{i:0;i:14;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>151</ns0:comment_id>
    <ns0:comment_author>Jason Ivey</ns0:comment_author>
    <ns0:comment_author_email>jasonivet@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2012-10-10 01:08:24</ns0:comment_date>
    <ns0:comment_content>Daniel,

We have talked about this subject at length in the past and I think you did a really great job on this post introducing the issues, deficiencies and a few of the minor enhancements you have discovered within the last few years.

From a readability stand-point traditional error codes were a nightmare compared to the centralized model of exception handling.  In the C world the error handling was mixed liberally throughout the entire code.  Whereas in C++ and using exceptions correctly you will usually find a few central spots where the error handling occurs. 

Daniel's suggestion of adding context to the rich exception would change this clean C++ exception land and we will start to find more and more try-catch blocks littering the code.  The error handling will once again begin to encroach upon the business logic of the application making a readability nightmare. 

Don't get me wrong, I think its a great idea to add context to the exception. I just hope we can either find a more elegant way to solve the problem or ask for language help (via the standard).</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>154</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-10-10 09:04:21</ns0:comment_date>
    <ns0:comment_content>Good point about try...catch littering the code. Making error handling richer trades away some straightforwardness in the core logic. My only thought is to use "convention over configuration" to perhaps limit what you have to write. But that approach has limits; the consequences of a failure aren't something you can probably assign with smart defaults. Jason, maybe we should brainstorm an improvement to the language...</ns0:comment_content>
    <ns0:comment_parent>151</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>155</ns0:comment_id>
    <ns0:comment_author>Andy Lawrence</ns0:comment_author>
    <ns0:comment_author_email>andy3474@msn.com</ns0:comment_author_email>
    <ns0:comment_date>2012-10-10 10:25:47</ns0:comment_date>
    <ns0:comment_content>It would be nice if languages like C++ offered a way for a function to "drop breadcrumbs" in a manner that looks a lot like code comments, are largely ignored during normal execution, and are automatically gathered up and added to the exception context during the "stack unwind" when an exception is thrown.

Pseudocode Example:

void BackupEverything( )
{
   :) "Backing up all the data on all drives"   // Drop breadcrumb

   for( drive = 0; drive &amp;lt; numDrives; drive++)
   {
       :) &amp;quot;Processing Drive %d&amp;quot;, drive   // Another breadcrumb

       for( folder = 0; folder &amp;lt; numFolders; folder++ )
       {
           :) &amp;quot;Processing Folder %d&amp;quot;, folder  // Yet another breadcrumb

           ProcessFile( file );    // Call function that can throw exception
       }
    }
}

The statements that start with :) are breadcrumb markers that are ignored during normal execution (other than having a way to track which breadcrumbs were encountered in the code path). If ProcessFile() throws an exception, during the stack unwind operation, any breadcrumbs passed are processed (in this case by putting the current values of the drive and folder variables into their respective breadcrumb messages) and added to the context of the thrown exception. The stack unwind operation will continue up the stack and add any breadcrumbs dropped by the caller of BackupEverything(), and its caller, etc., until it encounters a catch() statement.

To me, this approach would be much cleaner than littering your code with try..catch statements and remembering which messages have to be added to the exception in each catch block. Later, you can add a breadcrumb anywhere in the code and only those code paths that actually crossed it (and all all code paths that crossed it) would automatically add it to any exceptions they may encounter.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>156</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-10-10 11:26:10</ns0:comment_date>
    <ns0:comment_content>I love it, Andy. This addresses the need for context without some of the drawbacks of try...catch everywhere. How do we get ideas like this into the sights of language designers and standards committees?</ns0:comment_content>
    <ns0:comment_parent>155</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>157</ns0:comment_id>
    <ns0:comment_author>Jesse Harris</ns0:comment_author>
    <ns0:comment_author_email>elforesto@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.coolestfamilyever.com/</ns0:comment_author_url>
    <ns0:comment_date>2012-10-10 15:07:10</ns0:comment_date>
    <ns0:comment_content>Another variant of poor error trapping is what I'll call "The Hanging If". A function would check to see if a POST value was non-null. If it was, it would take that passed value and assign it to a variable. And that's it. It never defined what to do if the value was unset. (Let's not even get into the complete and total lack of validation.) I found myself wonder why a developer would go to the trouble of checking if the value was null if they didn't intend to define what to do if it was.

And yes, this was a case where the function was receiving a null value and causing a lovely Java explosion all over the page since the rest of the program had no idea what to do if that variable was unset.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>158</ns0:comment_id>
    <ns0:comment_author>Andy Lawrence</ns0:comment_author>
    <ns0:comment_author_email>andy3474@msn.com</ns0:comment_author_email>
    <ns0:comment_date>2012-10-10 19:28:38</ns0:comment_date>
    <ns0:comment_content>I thought you were on two or three of those committees. :)</ns0:comment_content>
    <ns0:comment_parent>156</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2917</ns0:comment_id>
    <ns0:comment_author>A Comedy of Carelessness | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/12/09/a-comedy-of-carelessness/</ns0:comment_author_url>
    <ns0:comment_date>2013-12-09 08:35:11</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] that&amp;#8217;s more like it! Plan for trouble. (It always happens, after all.) Notice the problem. Communicate it. Take steps to cope, without panicking or inconveniencing the user. I&amp;#8217;m not super happy [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2991</ns0:comment_id>
    <ns0:comment_author>Add some more extra redundancy again | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/01/15/add-some-more-extra-redundancy-again/</ns0:comment_author_url>
    <ns0:comment_date>2014-01-15 08:39:29</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] consumers and creators of a chunk of code share the same mental models? Do we catch exceptions or test for errors in enough [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Why Mental Models Matter</title>
  <link>http://codecraft.co/2012/11/05/why-mental-models-matter/</link>
  <pubDate>Mon, 05 Nov 2012 15:15:02 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=654</guid>
  <ns2:encoded>As they leave school and embark on professional adventures, naive engineers believe their purpose is more or less summed up by this equation:
&lt;p style="text-align:center;font-size:140%;"&gt;product = software = code&lt;/p&gt;
As they get deeper into their careers, good engineers gradually realize that the raw code baked into a product is not everything. They come to appreciate the role that support folks and tech writers, marketers and professional services play in delivering value to the customer. Eventually many arrive at :
&lt;p style="text-align:center;font-size:140%;"&gt;product = (software = code) + augment&lt;/p&gt;
I'd put this equation into words as follows: the purpose of dev teams is to create products, which consist of software (a synonym for code) plus auxiliary offerings like support, documentation, and services.

[caption id="" align="aligncenter" width="500"]&lt;a href="http://xkcd.com/895/"&gt;&lt;img alt="" src="http://imgs.xkcd.com/comics/teaching_physics.png" height="226" width="500" /&gt;&lt;/a&gt; Equations capture mental models... Image credit: xkcd[/caption]

This is the level of sophistication at which much of the software industry operates. It is taught by academia (at least, if you &lt;a href="http://www.marketingteacher.com/lesson-store/lesson-three-levels-of-a-product.html" target="_blank"&gt;listen to business professors&lt;/a&gt;), and it's the philosophy that underpins lots of outsourcing decisions, as well as strategic mergers and acquisitions.

I think the second equation is better than the first, but it's still woefully inadequate.

&lt;strong&gt;Easy Critiques&lt;/strong&gt;

For one thing, it ignores the interrelationships among software, hardware, enabling ecosystems, and customer communities. Products don't exist in isolation; they are part of an embedded system made possible (and relevant) by societal conventions and other technologies. "Microsoft Word" and "Adobe Photoshop" are not "products" for &lt;a class="zem_slink" title="Bushmen" href="http://en.wikipedia.org/wiki/Bushmen" target="_blank" rel="wikipedia"&gt;Kalahari bushmen&lt;/a&gt;.

For another, software is more than code. Notice the subtitle of my blog... Software includes people as a fundamental ingredient. In the shadows of every architecture diagram is an assumed human being (or an army of them), providing input or accepting output. How else do we think our systems will be installed, configured, optimized? How will our databases get populated, our backups get mounted, our e-books get typeset, or our web searches get chosen? (See my posts about &lt;a title="Why People Are Part of A Software Architecture" href="/why-people-are-part-of-a-software-architecture/"&gt;people in architecture&lt;/a&gt; and &lt;a title="What Role Are You Playing in RPCD?" href="/2012/06/25/what-role-are-you-playing-in-rpcd/"&gt;role-playing in design&lt;/a&gt;.)

Both of those critiques are important, I think. But today I have a different bone to pick.

&lt;strong&gt;The Deeper Issue&lt;/strong&gt;

Whenever we put "product" at the front of equations that describe our industry's output, we make the implicit assumption that product is the major--or even the entire--output of tech companies. This assumption is ubiquitous and almost never articulated, let alone challenged. Ask a tech buddy about what his company does; he'll say something like "We build products that ___."

Of course, tech companies &lt;em&gt;do&lt;/em&gt; build products--or solve customer problems by delivering products and services, if you want to make economists happy. But they also create another output, and I think this neglected stepchild deserves far more attention.

Besides products, tech companies produce and propagate mental models. Or in other words, they enable and shape our view of the world.

[caption id="" align="alignright" width="240"]&lt;a href="http://www.flickr.com/photos/27180696@N02/4612823598" target="_blank"&gt;&lt;img class="zemanta-img-inserted zemanta-img-configured " title="Mental Model II" alt="" src="http://farm5.static.flickr.com/4057/4612823598_a82864475e_m.jpg" height="164" width="240" /&gt;&lt;/a&gt; Photo credit: daveelf (Flickr)[/caption]

These mental models of the world matter. They--not products--are the nuggets of gold for which we prospect. Ask Galileo.

How much of popular culture is built on scaffolding provided by an idea that used to exist only in the mind of an engineer? Engineers didn't just dream up plasma TVs or radios; they enabled the very idea of broadcasting. They didn't just figure out how to download files from the internet; they convinced us to think of data blobs in terms of files and folders in the first place. They didn't just populate the App Store; they thought the concept of "app" into existence. I could go on and on with examples, but I'll leave that as an exercise for the reader.

As I said in &lt;a title="// Comments on Comments" href="/2012/10/31/comments-on-comments/" target="_blank"&gt;my post the other day about comments&lt;/a&gt;, the mental models created by engineers are the most valuable output of the tech industry.

&lt;strong&gt;MVP&lt;/strong&gt;

Products are directly sellable, and we have to have them. But products without mental models are pretty darn useless. If you doubt me, try using a sophisticated piece of software without any idea how to think about its &lt;a class="zem_slink" title="Problem domain" href="http://en.wikipedia.org/wiki/Problem_domain" target="_blank" rel="wikipedia"&gt;problem domain&lt;/a&gt;. If you know nothing about accounting, try to use Great Plains to be a bookkeeper. If you know nothing about graphics, try airbrushing an image in Photoshop. If you know nothing about &lt;a class="zem_slink" title="High-performance computing" href="http://en.wikipedia.org/wiki/High-performance_computing" target="_blank" rel="wikipedia"&gt;HPC&lt;/a&gt;, try keeping &lt;a href="http://www.npr.org/blogs/alltechconsidered/2012/10/29/163894669/why-is-this-supercomputer-so-superfast" target="_blank"&gt;Cray's latest supercomputer&lt;/a&gt; busy doing protein folding.

Code is important, but without a &lt;a class="zem_slink" title="Mental model" href="http://en.wikipedia.org/wiki/Mental_model" target="_blank" rel="wikipedia"&gt;mental model&lt;/a&gt; of how that code works, it's not much of a foundation for a product. (This is why outsourcing that doesn't involve bi-directional knowledge transfer is usually foolish, and why acquiring a company and RIFing all its employees nets the acquirer a lot less than they bargained for.)

Patents look nice in a war chest, but it's sophisticated mental models, not patents, that are the prerequisite of innovation.

&lt;strong&gt;Implications&lt;/strong&gt;

If you understand that tech companies produce mental models, then certain issues take on new significance.

&lt;a title="Paying Off Technical Debt" href="/2012/10/14/paying-off-technical-debt/"&gt;Tech debt&lt;/a&gt; isn't just insidious because it makes code ugly. A kludge lets us get by with a flawed, ill-developed mental model of a problem domain--and if we build on that model, eventually we create a house of cards. Bad mental models bite us, sooner or later.

Competition in a turbulent market is often decided by who has the better mental model. "Better" might mean the one closer to the predilections of the customer, or the one that has better long-term applicability.

Usability is all about conveying a mental model with minimum effort on the part of the receiver--and then using that model consistently and easily.

A product that doesn't improve the mental model of the customer (e.g., by pruning unnecessary clutter, by visualizing connections that were previously impossible to see, by accounting for a neglected issue that's been a thorn in the side) is not innovative, no matter which features it touts. It is providing little of value, and will end up on the dust heap of history.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Take a minute to ponder how much of your passion and talent is actually centered on the "other" output from product development. What contribution have you made to a helpful mental model for a customer? Where have you invented a term that resonated, or formalized a process that used to be chaos? &lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://jackskchang.wordpress.com/2012/09/12/on-usability-evaluations-and-mental-models/" target="_blank"&gt;On Usability Evaluations and Mental Models&lt;/a&gt; (jackskchang.wordpress.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://jackskchang.wordpress.com/2012/10/19/export-print-save-as-the-evolution-of-mental-models-along-with-mechanical-models/" target="_blank"&gt;Export, Print, Save As: The evolution of mental models along with mechanical models&lt;/a&gt; (jackskchang.wordpress.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://java.dzone.com/articles/knowledge-vs-superstition" target="_blank"&gt;Knowledge vs Superstition&lt;/a&gt; (java.dzone.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>654</ns0:post_id>
  <ns0:post_date>2012-11-05 08:15:02</ns0:post_date>
  <ns0:post_name>why-mental-models-matter</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="acquisitions">acquisitions</category>
  <category domain="post_tag" nicename="app">app</category>
  <category domain="post_tag" nicename="app-store">app store</category>
  <category domain="post_tag" nicename="augmented-product">augmented product</category>
  <category domain="post_tag" nicename="broadcasting">broadcasting</category>
  <category domain="post_tag" nicename="comments">comments</category>
  <category domain="post_tag" nicename="competition">competition</category>
  <category domain="post_tag" nicename="competitive-advantage">competitive advantage</category>
  <category domain="post_tag" nicename="cray">cray</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="files">files</category>
  <category domain="post_tag" nicename="folders">folders</category>
  <category domain="post_tag" nicename="hpc">hpc</category>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <category domain="post_tag" nicename="mental-models">mental models</category>
  <category domain="post_tag" nicename="outsourcing">outsourcing</category>
  <category domain="post_tag" nicename="patents">patents</category>
  <category domain="post_tag" nicename="rifs">RIFs</category>
  <category domain="post_tag" nicename="tech-debt">tech debt</category>
  <category domain="post_tag" nicename="usability">usability</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_twitter_user</ns0:meta_key>
    <ns0:meta_value>dhh1128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>295</ns0:comment_id>
    <ns0:comment_author>Julie</ns0:comment_author>
    <ns0:comment_author_email>julie.jones@pobox.com</ns0:comment_author_email>
    <ns0:comment_date>2012-11-06 09:53:14</ns0:comment_date>
    <ns0:comment_content>You finally put into words what has been bothering me for years. I often compare some of the early successes in personal computing to the current offerings, MacWrite vs MS Word for example. The mental model was so clean and clear that understanding and use was intuitive. For all the complaints people have about functionality, or lack thereof, Notes on the iPhone has a usable mental model. I challenge anyone to produce a good mental model of MS Word.
Finally, from a developer perspective a good mental model lowers the cost of implementation and maintenance. Even more, a good mental model produces a simpler design which makes software more reliable and scalable. The catch is (of course there is always a catch) that a really good mental model takes hard work to develop.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>294</ns0:comment_id>
    <ns0:comment_author>Thoughts About A Personal Reading Program | Consilient Interest</ns0:comment_author>
    <ns0:comment_author_url>http://consilientinterest.com/2012/11/06/thoughts-about-a-personal-reading-program/</ns0:comment_author_url>
    <ns0:comment_date>2012-11-06 09:49:04</ns0:comment_date>
    <ns0:comment_content>[...] Why Mental Models Matter (codecraft.co) [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>300</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-11-07 22:14:50</ns0:comment_date>
    <ns0:comment_content>Trev: very astute observation that there are horrible, mediocre, and good mental models. I've seen a lot of cases where a program wants people on the outside of a program to think in terms of its internal data structures, which is very regrettable. Sigh...

I had forgotten the eject-via-trash problem on the Macs, but that example brought it all back. I winced many times myself. When I was unfamiliar with the expected behavior, I think I may have actually used a pin to manually eject from a disk drive rather than try the trash. Definitely a case where the chosen metaphor did the user a horrible disservice.</ns0:comment_content>
    <ns0:comment_parent>299</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>467</ns0:comment_id>
    <ns0:comment_author>Question To Ponder About Mental Models | Consilient Interest</ns0:comment_author>
    <ns0:comment_author_url>http://consilientinterest.com/2012/12/28/question-to-ponder-about-mental-models/</ns0:comment_author_url>
    <ns0:comment_date>2012-12-28 14:42:43</ns0:comment_date>
    <ns0:comment_content>[...] Why Mental Models Matter (codecraft.co) [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>322</ns0:comment_id>
    <ns0:comment_author>Are You Susceptible To Tunnel Vision? Part One | Consilient Interest</ns0:comment_author>
    <ns0:comment_author_url>http://consilientinterest.com/2012/11/13/are-you-susceptible-to-tunnel-vision-part-one/</ns0:comment_author_url>
    <ns0:comment_date>2012-11-13 06:17:21</ns0:comment_date>
    <ns0:comment_content>[...] Why Mental Models Matter (codecraft.co) [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>461</ns0:comment_id>
    <ns0:comment_author>Mental Modeling Questions | Consilient Interest</ns0:comment_author>
    <ns0:comment_author_url>http://consilientinterest.com/2012/12/26/mental-modeling-questions/</ns0:comment_author_url>
    <ns0:comment_date>2012-12-26 15:40:37</ns0:comment_date>
    <ns0:comment_content>[...] Why Mental Models Matter (codecraft.co) [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>284</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-11-05 11:44:36</ns0:comment_date>
    <ns0:comment_content>Low effort on the part of the developer is always desirable, of course. :-)</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>283</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2012-11-05 08:43:22</ns0:comment_date>
    <ns0:comment_content>wow - "Usability is all about conveying a mental model with minimum effort on the part of the receiver--and then using that model consistently and easily."  and add "on the part of the sender (developer) as well".</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>464</ns0:comment_id>
    <ns0:comment_author>More On Mental Model Questioning | Consilient Interest</ns0:comment_author>
    <ns0:comment_author_url>http://consilientinterest.com/2012/12/27/more-on-mental-model-questioning/</ns0:comment_author_url>
    <ns0:comment_date>2012-12-27 06:52:00</ns0:comment_date>
    <ns0:comment_content>[...] Why Mental Models Matter (codecraft.co) [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>299</ns0:comment_id>
    <ns0:comment_author>Trev Harmon</ns0:comment_author>
    <ns0:comment_author_email>trevharmon@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://dld.me/</ns0:comment_author_url>
    <ns0:comment_date>2012-11-07 21:45:12</ns0:comment_date>
    <ns0:comment_content>I think one thing forgotten by many programmers is by its very existence a program requires a mental model. In the worst case, the mental model is not even considered by the programmer, leaving one with a convoluted representation of a stream of conscience--not particularly helpful beyond the original implementation session. This is closely followed by a "designed" mental model that is simply an outward manifestation of the internal data structures. I find it infinitely frustrating to be presented with a program or API that requires me to fully understand the entire mental model before being allowed to do the simplest task because I must fully "explain" the context to the system through complex calls or data structure construction.

One principle from general design is that of intent. In order for a physical object to truly have meaning to a human, it must be imbued with intent. Not only must the object exist, it must exist in order to fulfill an intent of its owner. [ See http://www.ted.com/talks/john_hockenberry_we_are_all_designers.html ]

I think programmers often get confused when putting together mental models, meaning they imbue the mental model with their own intents and not those of their users. The mental model is the basis upon which rests all the rest of usability, as it is what will determine, to some extent, affordances, natural interactions and expected cause-effect relationships. Of course, when designing APIs, the model will naturally bend more towards that held by the original programmer. But, in almost every other case, the mental model held by the programmer would become a ball and chain when shackled to the user.

Bad mental models will always result in poor UI decisions and bad usability, because UI is really just a visual/tactile projection of the mental model. If at all possible, mental models should mimic the real world in which we live. At a minimum, they should not contradict it. I think the best example of this, tying together mental model, UI and usability, comes from some of the dark years in Apple's past. Every time--every single time--I ejected by floppy disk by dropping it into the trash can, there was a twinge of fear, "Perhaps this time, instead of preserving and returning that which held many hours of work, the trash can would perform its other function, the complete and utter destruction of all that entered into it." To preserve something I cherished, I would never through it in the trash. Reality contradicted... mental model broken... intent subverted... UI failure.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>499</ns0:comment_id>
    <ns0:comment_author>3 Commandments of Performance Optimization &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/01/08/3-commandments-of-performance-optimization/</ns0:comment_author_url>
    <ns0:comment_date>2013-01-08 09:08:38</ns0:comment_date>
    <ns0:comment_content>[...] is useful to learn certain rules of thumb. We have to have a mental model that lets us make simplifying predictions, such as &amp;#8220;It&amp;#8217;s probably going to be a waste [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>296</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-11-06 10:32:48</ns0:comment_date>
    <ns0:comment_content>Good point about MS Word, Julie. You made me think of the old adage that eventually all programs evolve to send email. :-)

&amp;gt;&amp;gt;&amp;gt; Good mental model takes hard work to develop

Amen. Albert Einstein: “Any fool can make things bigger, more complex, and more violent. It takes a touch of genius-and a lot of courage-to move in the opposite direction.”</ns0:comment_content>
    <ns0:comment_parent>295</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>562</ns0:comment_id>
    <ns0:comment_author>Interrupting my interruptions &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/01/24/interrupting-my-interruptions/</ns0:comment_author_url>
    <ns0:comment_date>2013-01-24 11:48:44</ns0:comment_date>
    <ns0:comment_content>[...] is both a tool and an end unto itself. Those meetings I&amp;#8217;m attending (or calling) are how I develop shared mental models, motivate and teach, manage momentum, and put a stake in the ground. Those wikipedia pages and chat [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>966</ns0:comment_id>
    <ns0:comment_author>Adios to &amp;#8220;computer programming&amp;#8221; | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/04/05/adios-to-computer-programming/</ns0:comment_author_url>
    <ns0:comment_date>2013-04-05 09:34:40</ns0:comment_date>
    <ns0:comment_content>[...] baked into our industry. We need programming languages that have sufficient expressive power to model entire ecosystems, in all their chaotic and evolving complexity. We need development processes that [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1012</ns0:comment_id>
    <ns0:comment_author>My First Tangle With the Tower of Babel | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/04/26/my-first-tangle-with-the-tower-of-babel/</ns0:comment_author_url>
    <ns0:comment_date>2013-04-26 08:48:19</ns0:comment_date>
    <ns0:comment_content>[...] Some of you know that I have a background in linguistics (which may explain why this project appealed to me). One of the lessons I learned in my graduate program is that language and world view are profoundly related. Choices we make in our languages affect our thinking, not just our productivity. My favorite example is the from Women, Fire, and Dangerous Things, by George Lakoff: the Dyirbal language in Australia has four &amp;#8220;gender&amp;#8221; categories for nouns, and one of them includes everything in Lakoff&amp;#8217;s title. You can&amp;#8217;t talk about nouns in this language without using its gender mechanism, and this requires you to perceive and communicate categories according to its system. Mental models matter. [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>682</ns0:comment_id>
    <ns0:comment_author>Why Software Artisans Should Manage Their Influence &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/02/07/why-software-artisans-should-manage-their-influence/</ns0:comment_author_url>
    <ns0:comment_date>2013-02-07 08:49:25</ns0:comment_date>
    <ns0:comment_content>[...] of his thinking to our field. Since so much of what we do requires buy-in, coordination and shared mental models, we have to be savvy about how we communicate, advocate, and train. Assuming equal technical [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>876</ns0:comment_id>
    <ns0:comment_author>Small Files Are Your Friends | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/03/21/small-files-are-your-friends/</ns0:comment_author_url>
    <ns0:comment_date>2013-03-21 08:55:44</ns0:comment_date>
    <ns0:comment_content>[...] try to remember more than their brains can fit, stuff falls out. Big files mean that coders have to mentally model relationships between stuff that&amp;#8217;s separated by way too much screen real estate. This is a [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2685</ns0:comment_id>
    <ns0:comment_author>What should code look like when we squint at it? | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/09/19/what-should-code-look-like-when-we-squint-at-it/</ns0:comment_author_url>
    <ns0:comment_date>2013-09-19 08:22:58</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] need for context, for a high-level picture, for a sketch that gives you a useful skeleton of a mental model, is the reason why any new hire into a team with a complex codebase gets a whiteboard-ish [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4877</ns0:comment_id>
    <ns0:comment_author>Why you should use an IDE instead of vim or emacs | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/05/13/why-you-should-use-an-ide-instead-of-vim-or-emacs/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-13 10:16:22</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] every problem as a series of discrete editing tasks. Integration details fall through the cracks; mental models remain simplistic. After all, the tool you&amp;#8217;re using bills itself as an editor, not an [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2249</ns0:comment_id>
    <ns0:comment_author>2 Surprising Truths About The Iron Triangle | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/07/01/2-surprising-truths-about-the-iron-triangle/</ns0:comment_author_url>
    <ns0:comment_date>2013-07-01 16:38:57</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] in quality, your patient will get more healthy, and you will see your speed go up, not down. The mental models of your engineers and the entire value chain will align. You&amp;#8217;ll create virtuous cycles that [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>3946</ns0:comment_id>
    <ns0:comment_author>Learned Helplessness, Rats, and People Power | On Technical Debt</ns0:comment_author>
    <ns0:comment_author_url>http://www.ontechnicaldebt.com/blog/learned-helplessness-rats-and-people-power/</ns0:comment_author_url>
    <ns0:comment_date>2014-03-18 13:03:38</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] know your mental model is incomplete–in fact, the mental model of everybody on the team is insufficient, even in the [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4950</ns0:comment_id>
    <ns0:comment_author>Why you should be proficient in a tool like vim or emacs | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/05/15/why-you-should-be-proficient-in-a-tool-like-vim-or-emacs/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-15 08:46:20</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] The vagaries of preprocessor troubleshooting and the paths that a debugger uses to resolve symbols lose their mystery. You master regular expressions. Arcane command-line options in git may even feel self-explanatory. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2990</ns0:comment_id>
    <ns0:comment_author>Add some more extra redundancy again | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/01/15/add-some-more-extra-redundancy-again/</ns0:comment_author_url>
    <ns0:comment_date>2014-01-15 08:39:26</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] we using design-by-contract to prove that consumers and creators of a chunk of code share the same mental models? Do we catch exceptions or test for errors in enough [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14326</ns0:comment_id>
    <ns0:comment_author>&amp;#8220;Rockstar Developers&amp;#8221; are a dangerous myth | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/03/04/rockstars/</ns0:comment_author_url>
    <ns0:comment_date>2015-03-05 20:15:37</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] 3. If nobody understands your code, you&amp;#8217;ve failed. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14916</ns0:comment_id>
    <ns0:comment_author>A grumble about buckets | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/04/08/a-grumble-about-buckets/</ns0:comment_author_url>
    <ns0:comment_date>2015-04-08 13:39:24</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] going to force all choices into a few predefined buckets, you better provide buckets that match the needs of your [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>9266</ns0:comment_id>
    <ns0:comment_author>Exploring the Power of Deixis | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/09/23/exploring-the-power-of-deixis/</ns0:comment_author_url>
    <ns0:comment_date>2014-09-23 08:35:00</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] Humans also tend to triangulate with names (use more than one name for the same item), because they understand that names may be temporary, and that some names are more intrinsic than others. Again, a [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>6836</ns0:comment_id>
    <ns0:comment_author>Thoughts On Bridging the &amp;#8220;Lacuna Humana&amp;#8221; | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/21/bridging-the-lacuna-humana/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-21 08:49:22</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] what languages can make computers do. This is a gap in what languages can help human beings do. Human knowledge and behaviors are crucial outputs of dev teams. And cool add-on libraries, or even the most [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16573</ns0:comment_id>
    <ns0:comment_author>On Forests and Trees | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/09/02/on-forests-and-trees/</ns0:comment_author_url>
    <ns0:comment_date>2015-09-02 08:48:43</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] generalized, maintenance goes down, testability goes up, and it&amp;#8217;s easy to learn a correct mental model. The inverse is also true: bad choices about generalization usually hide the forest behind the [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Hair-Raising Words</title>
  <link>http://codecraft.co/2012/10/12/hair-raising-words/</link>
  <pubDate>Fri, 12 Oct 2012 08:00:23 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=675</guid>
  <ns2:encoded>My daughter just got back from touring a "haunted circus" with her friends. She reports that the clowns were terrifying. (For those who aren't living in North America, the Halloween holiday is a time when the macabre and spooky are in vogue.)

[caption id="" align="aligncenter" width="468"]&lt;img title="scary clown" alt="" src="http://upload.wikimedia.org/wikipedia/commons/e/ea/Scary_clown.jpg" height="351" width="468" /&gt; Coulrophobia--the fear of clowns. Image credit: Graeme Maclean (Wikimedia Commons).[/caption]

Well, I'm a programmer; I can get chills down my spine without paying an entrance fee. All I have to do is go to a meeting where certain words get tossed around casually. Blood drains from my face; my heart starts racing; visions of apocalypse dance before my eyes.

Okay, maybe I'm exaggerating a &lt;em&gt;teeny&lt;/em&gt; bit--but I &lt;em&gt;have&lt;/em&gt; found a few words that have a near-magical capacity to provoke stress, worry, and miscommunication in companies that make software. Here is my short list:&lt;!--more--&gt;

&lt;strong&gt;"Integration"&lt;/strong&gt;
&lt;p style="padding-left:30px;"&gt;It is not crazy to think that two systems need to cooperate to provide good business value for a customer. And it &lt;em&gt;is&lt;/em&gt; possible to have success doing integration work.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;However.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;Almost no word in the lexicon of spiky haired bosses is more strongly correlated with underestimates, surprises, and misaligned expectations than this one.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;Usually someone who hasn't done a deep analysis describes the work of the integration as "just a ___" (fill in the blank with "couple of web service calls", "hyperlink or two", "joint branding effort", "documentation task", or something similar). But once you look at it more closely, you discover that the two systems don't share a common security model, which means that the simple click-and-redirect you hoped for will need to be interrupted by a login, will have a security hole, or both. Then you realize that there's an impedance mismatch around localization. Then you find that one of the apps requires admin rights to run, but the other doesn't. Then you learn that the platform support matrix is different, so the integration is only possible on half your targets. Then it becomes clear that the apps use mutually exclusive versions of the same embedded database. Then someone mentions that a new version of the other app is approaching beta, at the most inconvenient time in your schedule. Then your QA team asks for money so they can license the other app for proper testing.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;Then the spiky haired boss is incredulous when you tell him it will take 6 programmers 47 months to finish.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;Time spent on integration is typically not time spent on innovation at the core of what makes your product valuable and unique.&lt;/p&gt;
&lt;strong&gt;"Upgrade"&lt;/strong&gt;
&lt;p style="padding-left:30px;"&gt;Most product evolutions begin with a core technology. Typically it is the "baby" of a visionary type who has deep knowledge of a particular problem domain.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;Given time, traction, and effort, the technology evolves into a bona fide product.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;About the time the second major release with meaningful customers ships, someone usually wants to talk about the upgrade experience. As with integration, this is quite rational; how else can you get a second sale out of existing customers?&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;But upgrades are another one of those time-and-energy sinks, if you're not careful. Especially if you were careless about install protocols in the early days, and especially if you have a lot of config/deploy possibilities, it can be almost impossible to make an upgrade seamless. This only gets worse if you have a centralized or client-server architecture, schema changes, or integration complexities.&lt;/p&gt;
&lt;strong&gt;"Security"&lt;/strong&gt;
&lt;p style="padding-left:30px;"&gt;Another can of worms.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;Security is a lot like legal advice--the most conservative strategy is the one the experts will recommend, because they know how bad things can get when you're careless.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;The problem is that ultra-conservative choices about security (and legal advice) usually don't maximize business value. It's just too darn expensive to operate that way.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;Security = annoyance. People don't buy most products (unless you're Symantec or McAfee) because they want to be challenged for passwords or warned about insecure behaviors; they buy it to get a job done. Security is closer to a necessary evil than it is to a product improvement.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;Another insidious problem with "security" as a requirement is that it's too darn vague. Will you meet the requirements for security by using encrypted protocols and data files, by integrating with LDAP, by using cookies and DBMS logins, by reducing attack surfaces, by performing a security audit, or by one of a dozen other strategies?&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;Be prepared for blank stares if you ask these questions.&lt;/p&gt;
&lt;strong&gt;"Compliance"&lt;/strong&gt;
&lt;p style="padding-left:30px;"&gt;This particular word, and its close cousin, "certification", are favorite of government agencies. They want &lt;a class="zem_slink" title="Data loss prevention software" href="http://en.wikipedia.org/wiki/Data_loss_prevention_software" target="_blank" rel="wikipedia"&gt;HIPAA compliance&lt;/a&gt;, &lt;a href="http://www.section508.gov" target="_blank"&gt;508 compliance&lt;/a&gt;, &lt;a href="http://en.wikipedia.org/wiki/FIPS_140-2" target="_blank"&gt;FIPS certification&lt;/a&gt;, and compliance with regulations of a hundred other stripes.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;Commercial enterprises have a few of their own; &lt;a class="zem_slink" title="Sarbanes–Oxley Act" href="http://en.wikipedia.org/wiki/Sarbanes%E2%80%93Oxley_Act" target="_blank" rel="wikipedia"&gt;Sarbanes-Oxley&lt;/a&gt; is a favorite.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;With few exceptions, getting this checkbox will have a significant one-time cost as well as an ongoing carrying cost in all future releases.&lt;/p&gt;
&lt;strong&gt;"Port"&lt;/strong&gt;
&lt;p style="padding-left:30px;"&gt;&lt;a class="zem_slink" title="Danger, Will Robinson" href="http://en.wikipedia.org/wiki/Danger%2C_Will_Robinson" target="_blank" rel="wikipedia"&gt;Danger, Will Robinson&lt;/a&gt;! Taking your Windows application onto OSX and Android might seem easy; after all, you wrote it in java just so you could have portability. But often, porting is much more than just tweaking for a new compiler. You have to grow the expertise of your team, expand the scope of continuous integration, buy licenses and hardware that used to be irrelevant. You have to find workarounds for those obscure platform APIs that don't work quite the way the documentation claims--and you have to discover that you need those workarounds in the first place.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;Again, porting may be the right decision, and it can certainly be successful. However, I have seen ports abandoned because the carrying cost was just too high--and the people who walked away were brilliant and dedicated folks.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;Don't underestimate the initial and ongoing costs.&lt;/p&gt;
I could list other scary words, but I think I'll refrain. The common thread in all of these words is that they sound innocuous but often turn out to be harbingers of stress and frustration.

What do you think of these words?

Do you have your own that you'd like to add to the list?
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Next time you are asked to estimate the work implied by one of these dangerous words, think about it carefully. Don't try to torpedo the idea; just explore it in a disciplined fashion. Make sure that all stakeholders have a shared understanding of scope and implications.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>675</ns0:post_id>
  <ns0:post_date>2012-10-12 02:00:23</ns0:post_date>
  <ns0:post_name>hair-raising-words</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="android">Android</category>
  <category domain="post_tag" nicename="certification">certification</category>
  <category domain="post_tag" nicename="compliance">compliance</category>
  <category domain="post_tag" nicename="cross-platform">cross-platform</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="integration">integration</category>
  <category domain="post_tag" nicename="l10n">l10n</category>
  <category domain="category" nicename="mistakes">Mistakes</category>
  <category domain="post_tag" nicename="porting">porting</category>
  <category domain="post_tag" nicename="product-management">product management</category>
  <category domain="post_tag" nicename="security">security</category>
  <category domain="post_tag" nicename="upgrades">upgrades</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:66:"http://upload.wikimedia.org/wikipedia/commons/e/ea/Scary_clown.jpg";s:6:"images";a:1:{s:66:"http://upload.wikimedia.org/wikipedia/commons/e/ea/Scary_clown.jpg";a:6:{s:8:"file_url";s:66:"http://upload.wikimedia.org/wikipedia/commons/e/ea/Scary_clown.jpg";s:5:"width";i:780;s:6:"height";i:585;s:4:"type";s:5:"image";s:4:"area";i:456300;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-10-12 08:00:23";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:7:"twitter";a:1:{i:10448672;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:2:{s:7:"twitter";a:1:{i:1511181;i:21;}s:2:"wp";a:1:{i:0;i:14;}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Coping With Organizational Alzheimers</title>
  <link>http://codecraft.co/2012/10/12/coping-with-organizational-alzheimers/</link>
  <pubDate>Fri, 12 Oct 2012 17:37:06 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=684</guid>
  <ns2:encoded>Years ago, an astute manager summed up a problem that I had only vaguely intuited up to that point in my career.

[caption id="" align="alignright" width="270"]&lt;a href="http://www.flickr.com/photos/xpectro/2819335335/"&gt;&lt;img title="memory" alt="" src="http://farm4.staticflickr.com/3106/2819335335_185586a19c.jpg" height="500" width="270" /&gt;&lt;/a&gt; Do our memories leak? Image credit: xpectro (Flickr)[/caption]

"A big problem with most companies," said &lt;a title="Roland Whatcott: Manage momentum." href="http://codecraft.co/2012/09/21/roland-whatcott-manage-momentum/" target="_blank"&gt;Roland&lt;/a&gt;, "is that they have no institutional memory."

As I recall, Roland was describing capricious political winds, and lamenting that the only form of loyalty a company has to employees is the kind they put in writing. As soon as there's major M&amp;amp;A activity, or HR decides to rebalance salary allocations, or an incentive program gets adjusted to the latest management fad, all recollection of old priorities and soft obligations vanishes in a puff of smoke.

If anything, Roland was understating the problem. Companies routinely panic and change strategy half-way through an investment cycle, because they can no longer articulate the rational analysis that led them to take a plunge. Buzz floods the internet about some innovation that makes everybody excited, but we forget that we've heard the idea before, behind some different terminology. (Are you nodding your head because "cloud" in the last few years is just a recycling of "utility computing"from circa 2000? &lt;a href="https://twitter.com/trev_harmon" target="_blank"&gt;Trev&lt;/a&gt;, a colleague of mine at &lt;a href="https://twitter.com/AdaptiveMoab" target="_blank"&gt;Adaptive Computing&lt;/a&gt;, showed me a dog-eared copy of &lt;em&gt;The Challenge of the Computer Utility&lt;/em&gt;, by &lt;a class="zem_slink" title="Douglas Parkhill" href="http://en.wikipedia.org/wiki/Douglas_Parkhill" target="_blank" rel="wikipedia"&gt;Douglas Parkhill&lt;/a&gt;. It's all there--XaaS, elastic and on-demand, in 1966. And who knows--maybe sci-fi writers or the designers of Eniac had thought of it even before Parkhill...)

But I digress.

One particularly insidious form of forgetfulness in software relates to &lt;a class="zem_slink" title="technical debt" href="http://martinfowler.com/bliki/TechnicalDebt.html" target="_blank" rel="homepage"&gt;technical debt&lt;/a&gt;. Another colleague, &lt;a href="http://www.linkedin.com/profile/view?id=5417094&amp;amp;locale=en_US" target="_blank"&gt;Doug&lt;/a&gt;, reacted to an expedient workaround this way:
&lt;blockquote&gt;My one regret with this is that by doing something that is good enough it will never get the attention it might deserve to be made better. This happens each release: we make compromises at the very end to get it out the door, promising ourselves that we'll revisit it later.&lt;/blockquote&gt;
Folks, we don't keep these promises to ourselves very well; Alzheimers is endemic with regards to technical debt. The only thing that saves us is that &lt;!--more--&gt;engineers or product managers stumble upon the consequences of earlier kludges, which reminds us of the awkwardness from time to time. And there are enough passionate people in our industry that sometimes when an issue like this pops, we find a way to do it right. Sometimes.

I have two suggestions about how we can cope.

&lt;strong&gt;Suggestion 1. Log a new kind of ticket.&lt;/strong&gt;

In most disciplined software companies, product planning captures &lt;em&gt;what&lt;/em&gt; needs to happen in the next release. If you're doing waterfall, you write specs; if you're doing agile, you write stories. Either way, these artifacts commonly result in granular tickets that get assigned to implementers and testers. The tickets are then managed carefully until everything's been either closed or deferred, and a release comes to pass.

That's all well and good. But kludges aren't visible if the only thing you ever manage is &lt;em&gt;what&lt;/em&gt;. Kludges satisfy &lt;em&gt;what&lt;/em&gt;; they're yucky because of &lt;em&gt;how&lt;/em&gt;.

What we need is a disciplined tracking of how.

"We already do that!" I hear you say. "We have design docs, UML diagrams, photos of whiteboard discussions, architectural reviews..."

Yes. That's all well and good, too.

But those mechanisms create alignment in the brains of people, and in their short-term behavior. Those people are part of an organization that has Alzheimers.

They need a memory aid.

Architects, log a ticket about &lt;em&gt;how&lt;/em&gt; something must be done. If it gets deferred due to short-term expedience, you have tangible evidence of the debt that's been incurred, and in the next release cycle, management will be forced to reckon with it. If the ticket gets ignored, give the"blocker" priority a whirl... :-)

&lt;strong&gt;Suggestion 2: Be the change you want to see in the world.&lt;/strong&gt;

If you're a manager: Orgs that believe in &lt;a href="http://en.wikipedia.org/wiki/Kaizen" target="_blank"&gt;kaizen&lt;/a&gt; are great. But if you always drive kaizen from the top down, you're missing the boat. What you need to do is let trusted engineers do kaizen from the bottom up. Every good engineer that I know has a few items they're itching to improve. Let slip the dogs of war and see what happens.

If you're an individual contributor: find a way. Don't sit around and wait for your manager to tell you you've been assigned to refactor. Just do it. Advocate. Read &lt;a href="http://www.sethgodin.com" target="_blank"&gt;Seth Godin&lt;/a&gt;'s book, &lt;em&gt;Poke the Box&lt;/em&gt;. Then go poke.

&lt;strong&gt;A note of caution&lt;/strong&gt;

Not every itch justifies a scratch. Engineers have a tendency to envision the ideal, and to love the freedom to go create it without mapping that activity back to hard business constraints. I know I do! :-)

If you're a manager, notice that I said you should give this freedom to &lt;em&gt;trusted&lt;/em&gt; engineers -- not just anybody. Trust folks that can tell you how 2 days of effort will delight customers and save the company thousands of dollars. They'll probably take 4 days (or 6, if they're as bad at estimating as I am) to get the job done, but at least they have a tightly defined task with a specific payoff. Don't trust &lt;a href="http://steve-yegge.blogspot.com/2008/02/portrait-of-n00b.html" target="_blank"&gt;"teenage" engineers&lt;/a&gt; who try to sell you on total rewrites.

If you're an engineer, earn the trust I'm talking about.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;span style="color:#000080;"&gt;&lt;strong&gt;Action Item&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Find three examples where technical debt has been conveniently forgotten, and do something to keep the memory loss from becoming permanent.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>684</ns0:post_id>
  <ns0:post_date>2012-10-12 11:37:06</ns0:post_date>
  <ns0:post_name>coping-with-organizational-alzheimers</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="agile">agile</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="kludges">kludges</category>
  <category domain="post_tag" nicename="memory">memory</category>
  <category domain="category" nicename="software-architecture">Software Architecture</category>
  <category domain="post_tag" nicename="technical-debt">technical debt</category>
  <category domain="post_tag" nicename="tickets">tickets</category>
  <category domain="post_tag" nicename="waterfall">waterfall</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:2:{s:7:"twitter";a:1:{i:1511181;i:21;}s:2:"wp";a:1:{i:0;i:15;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:7:"twitter";a:1:{i:10448672;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>167</ns0:comment_id>
    <ns0:comment_author>SutoCom</ns0:comment_author>
    <ns0:comment_author_email>dennes777@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.sutocom.net</ns0:comment_author_url>
    <ns0:comment_date>2012-10-12 12:35:37</ns0:comment_date>
    <ns0:comment_content>Reblogged this on &lt;a href="http://sutocom.net/2012/10/12/2284/" rel="nofollow"&gt;Sutoprise Avenue, A SutoCom Source&lt;/a&gt;.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>9083961</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>reblog_ping</ns0:meta_key>
      <ns0:meta_value>1</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>182</ns0:comment_id>
    <ns0:comment_author>ryancorradini</ns0:comment_author>
    <ns0:comment_author_email>ryancorradini@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2012-10-16 06:34:58</ns0:comment_date>
    <ns0:comment_content>The “how” tickets are a great idea, but in my experience, they frequently tend to end up in the forever-in-the-future “unobtainium” release, because there are *always* going to be new feature requests / legitimate bugfixes / etc, and those will always take priority over refactoring tasks. That said, sometimes when I have a new task that touches on one of these needs-to-be-rewritten code blocks, if I can justify it, I do the refactoring anyway, guerilla-style, as part of the new feature. The challenge is knowing when it’s worth doing so.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>5098336</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>183</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-10-16 08:34:16</ns0:comment_date>
    <ns0:comment_content>Ryan: You've got a nice way with words. The "unobtanium release" made me laugh. So true. Sigh...

Martin Fowler dedicated an entire book, &lt;em&gt;Refactoring&lt;/em&gt;, to the question of how to make sure needed changes don't languish. It probably isn't fair to try to boil him down to a single pithy piece of advice, but I'll try anyway. He advocates changing our perspective on refactoring so that it's no longer a behavior separable from maintenance/improvement/extension. Instead, refactoring becomes a sort of dialog that you always have with the code as you evolve it into its next form. If you do refactoring that way, it just happens naturally, and code remains very healthy.

This is a radical change of mindset, but it seems to me that it would help us in many ways.</ns0:comment_content>
    <ns0:comment_parent>182</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>184</ns0:comment_id>
    <ns0:comment_author>ryancorradini</ns0:comment_author>
    <ns0:comment_author_email>ryancorradini@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2012-10-16 09:04:28</ns0:comment_date>
    <ns0:comment_content>I like the concept of a constantly-evolving codebase. That kind of approach would also enable some potentially interesting "code health" metrics derivable from your source control system. (e.g. percentage of code change between releases/milestones, etc). I'll have to look up that book, thanks for the recommendation.

As an aside, your link to Steve Yegge's post spurred some productive conversation at work. Always nice when that happens.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>5098336</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>3908</ns0:comment_id>
    <ns0:comment_author>Paying Off Technical Debt | On Technical Debt</ns0:comment_author>
    <ns0:comment_author_url>http://www.ontechnicaldebt.com/blog/paying-off-technical-debt-2/</ns0:comment_author_url>
    <ns0:comment_date>2014-03-17 03:59:39</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] my recent post about how organizations forget technical debt, I glossed over some important details. When you’re in debt, you have an obligation to pay [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>3909</ns0:comment_id>
    <ns0:comment_author>Tech Debt, Leverage, and Grandma's Envelope | On Technical Debt</ns0:comment_author>
    <ns0:comment_author_url>http://www.ontechnicaldebt.com/blog/tech-debt-leverage-and-grandmas-envelope/</ns0:comment_author_url>
    <ns0:comment_date>2014-03-17 04:00:07</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] my previous posts about tech debt, I focused on how we can help organizations remember their debts, and on understanding how tech debts are funded and paid [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2431</ns0:comment_id>
    <ns0:comment_author>Features are not chunks of code | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/07/25/features-are-not-chunks-of-code/</ns0:comment_author_url>
    <ns0:comment_date>2013-07-25 11:19:51</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] What this means, in practical terms, is that, even if you can code a feature in X hours, and even if it&amp;#8217;s a simple feature with unusually minor demands on the rest of a team, its cost is never X hours. All features have a carrying cost, which is the ongoing expense of keeping the feature alive and connected to the blood supply on the rest of the face, through all future incarnations. In this sense, features are never &amp;#8220;done.&amp;#8221; Sticking our heads in the sand to avoid this truth is a surefire way to incur tech debt, and not accounting for it with each release is a sin of omission. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16574</ns0:comment_id>
    <ns0:comment_author>On Forests and Trees | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/09/02/on-forests-and-trees/</ns0:comment_author_url>
    <ns0:comment_date>2015-09-02 08:48:45</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] Where code is wisely generalized, maintenance goes down, testability goes up, and it&amp;#8217;s easy to learn a correct mental model. The inverse is also true: bad choices about generalization usually hide the forest behind the trees, which causes pernicious tech debt. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Paying Off Technical Debt</title>
  <link>http://codecraft.co/2012/10/14/paying-off-technical-debt/</link>
  <pubDate>Mon, 15 Oct 2012 05:27:52 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=696</guid>
  <ns2:encoded>[caption id="" align="alignright" width="213"]&lt;a href="http://www.flickr.com/photos/alancleaver/4105722502/"&gt;&lt;img alt="" src="http://farm3.staticflickr.com/2785/4105722502_a442444bb9_n.jpg" height="320" width="213" /&gt;&lt;/a&gt; We don't get spam about how to consolidate our technical debts. :-) Image credit: Alan Cleaver (Flickr)[/caption]
&lt;blockquote&gt;&lt;em&gt;“Interest never sleeps nor sickens nor dies; it never goes to the hospital; it works on Sundays and holidays; it never takes a vacation; it never visits nor travels; it takes no pleasure; it is never laid off work nor discharged from employment; it never works on reduced hours. . . . Once in debt, interest is your companion every minute of the day and night; you cannot shun it or slip away from it; you cannot dismiss it; it yields neither to entreaties, demands, or orders; and whenever you get in its way or cross its course or fail to meet its demands, it crushes you.”&lt;/em&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;— &lt;a class="zem_slink" title="J. Reuben Clark" href="http://en.wikipedia.org/wiki/J._Reuben_Clark" target="_blank" rel="wikipedia"&gt;J. Reuben Clark&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
In my recent post about &lt;a title="Coping With Organizational Alzheimers" href="/2012/10/12/coping-with-organizational-alzheimers/"&gt;how organizations forget technical debt&lt;/a&gt;, I glossed over some important details. When you're in debt, you have an obligation to pay somebody back. So: &lt;em&gt;with technical debt, who must you pay, and how?&lt;/em&gt;

&lt;strong&gt;More than just a code problem&lt;/strong&gt;

A simplistic view--one that I've used for years--understands debt mainly as a deficiency in code. In this view, you pay yourself back by making the code better. Most discussions about technical debt take this view. It's natural, and true, and useful.

However, I don't think it's the full story.

It's good practice to borrow money from yourself. If you do things this way, you save a bunch of capital, and then you borrow against your own reserves. Paying yourself back consists of transferring money back into your own savings.

This is hard, and making large purchases this way requires years of prior planning and discipline.

A more common way to borrow is &lt;!--more--&gt;to use your future capital as collateral, and to borrow from an external lender. I think this is how most technical debt is incurred. (&lt;a class="zem_slink" title="Technical debt" href="http://en.wikipedia.org/wiki/Technical_debt" target="_blank" rel="wikipedia"&gt;Technical debt&lt;/a&gt; incurred against your own reserves implies engineers working nights and weekends to get &lt;em&gt;ahead&lt;/em&gt;, so they can take a vacation without a schedule slip. This happens, but not on a large scale.)

&lt;strong&gt;Who is your lender?&lt;/strong&gt;

When you ship code that does things in a compromised, kludgey way, you acquire revenue that you can't afford to pay for yet. Your loan is crowd-sourced:
&lt;ul&gt;
	&lt;li&gt;Your support and professional services organizations will have to guide users through workarounds and corner cases that you don't handle well. Your doc and user experience experts will do the same.&lt;/li&gt;
	&lt;li&gt;Your marketing organization will have to nuance how they message your feature.&lt;/li&gt;
	&lt;li&gt;Your sales force will need to be careful to qualify leads in a way that prevents frustrated customers and wasted POCs.&lt;/li&gt;
	&lt;li&gt;Your product management team will have to understand that any release that builds on your kludge will be more expensive in the next release.&lt;/li&gt;
	&lt;li&gt;Executives live with a watered-down strategic advantage. Normally, a unique feature also implies a unique capability in a dev team--but to the extent that you short-circuit correct development, you also short-circuit your own learning, and live with a deficient mental model of your problem domain. Executives marshal forces for battle not only having caveats to their super duper blaster, but also having a staff of scientists that &lt;em&gt;don't have experience building&lt;/em&gt; super duper blasters.&lt;/li&gt;
	&lt;li&gt;Your customers' enthusiasm gets diluted.&lt;/li&gt;
	&lt;li&gt;Your dev and QA staff lose expertise and pride of ownership, and they have to spend energy on sub-optimal work that they'll later replace. (Notice that I put this last. This is the one most tech folks understand, but I think it's often overshadowed by other, less obvious problems.)&lt;/li&gt;
&lt;/ul&gt;
&lt;strong&gt;Don't forget the interest&lt;/strong&gt;

As with financial borrowing, the cost of your technical debt compounds over time. The longer a kludge remains, the higher the chances that customers will find out, callers of an API will depend on its quirks, and tests will become brittle to a change. See quote by J. Reuben Clark.

&lt;strong&gt;When you must...&lt;/strong&gt;

Despite all these disadvantages, sometimes debt is the only way forward. Few can afford to pay cash for their first house, and few companies have a large war chest of unused technical assets that they can shift into the next release whenever they feel inclined. But if you borrow, keep these two simple rules in mind:
&lt;ol&gt;
	&lt;li&gt;Your lenders should agree to the terms of the loan.&lt;/li&gt;
	&lt;li&gt;You need a way to account for the debt and track its paying off.&lt;/li&gt;
&lt;/ol&gt;
In my experience, most problems with technical debt stem from one or both of these rules being ignored.

Regarding rule #1: engineering organizations need to be proactive about communicating these issues. And product managers need to be technical enough and savvy enough to take indebtedness seriously. I once had a product manager tell me that some refactoring work on a particular feature was unacceptable; I should be spending every last ounce of my energy on building new features. This was a communication failure on my part, because I hadn't made it crystal clear that refactoring was a precondition to most of the new features he valued. (Stay tuned for a post about the temptation of short-range profit maximization...)

Remember, though, that it's not just product management who needs to buy off on the debt. Professional services and support, documentation and sales and marketing and executives all have a stake.

For the last few years, I've been acutely aware of this issue, and I've worked hard to be a better communicator. This addresses rule #1. But it's not enough.

Hence rule #2.

If your organization doesn't understand where they're carrying technical debt, and how much it's costing them, then you must find a way to change. In &lt;a title="Coping With Organizational Alzheimers" href="/2012/10/12/coping-with-organizational-alzheimers/"&gt;my last post&lt;/a&gt;, I recommended using whatever ticketing system tracks your development tasks. I think that's a good start, but even that mechanism may not have enough visibility. When debt is killing you, you may need a special graph on an executive dashboard, a slide in the annual planning meeting, and/or half a dozen other ways to keep the issue in the minds of thought leaders.

Perhaps you feel that this is too much of a bother. For small debts, I guess it could be. But large debts have a way of creating toxic assets. You just cannot play shell games forever. Remember Bear Stearns and Lehman Brothers...
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;span style="color:#000080;"&gt;&lt;strong&gt;Action Item&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;span style="color:#000080;"&gt;&lt;em&gt;Find out which people in other departments besides dev understand how technical debt works. Recruit some allies and devise a plan to make your debts more auditable.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://blog.xebia.com/2012/09/21/technical-debt-is-it-only-technical/" target="_blank"&gt;Technical debt; is it only technical?&lt;/a&gt; (xebia.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://agile.dzone.com/articles/technical-debt-%E2%80%93-when-do-you" target="_blank"&gt;Technical Debt - When Do You Have To Pay It Off?&lt;/a&gt; (agile.dzone.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://blog.orange11.nl/2012/09/18/be-thoughtful-when-measuring-technical-debt-with-sonar/" target="_blank"&gt;Be thoughtful when measuring Technical Debt with Sonar&lt;/a&gt; (orange11.nl)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>696</ns0:post_id>
  <ns0:post_date>2012-10-14 23:27:52</ns0:post_date>
  <ns0:post_name>paying-off-technical-debt</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="apis">APIs</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="interest">interest</category>
  <category domain="category" nicename="mistakes">Mistakes</category>
  <category domain="post_tag" nicename="product-management">product management</category>
  <category domain="post_tag" nicename="supportability">supportability</category>
  <category domain="post_tag" nicename="technical-debt">technical debt</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:7:"twitter";a:1:{i:10448672;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>174</ns0:comment_id>
    <ns0:comment_author>Don</ns0:comment_author>
    <ns0:comment_author_email>don_kleinschnitz@hotmail.com</ns0:comment_author_email>
    <ns0:comment_date>2012-10-15 08:02:15</ns0:comment_date>
    <ns0:comment_content>The key in my opinion is not to let debt accumulate from sprint to sprint. Control the level of function such that the debt is managed. True doneness minimizes debt to an acceptable level and true doneness = real quality.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>175</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-10-15 10:44:24</ns0:comment_date>
    <ns0:comment_content>Good insight, Don. Sounds a lot like the advice to pay off credit cards regularly... :-)</ns0:comment_content>
    <ns0:comment_parent>174</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>177</ns0:comment_id>
    <ns0:comment_author>doug</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2012-10-15 16:20:34</ns0:comment_date>
    <ns0:comment_content>you nail exactly what I have been thinking for MANY years, but not able to articulate. There is a COST to such debt, but there have NOT been metrics to expose it's reality to the decisions makers</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>180</ns0:comment_id>
    <ns0:comment_author>Mike Ebert (@mike_ebert)</ns0:comment_author>
    <ns0:comment_author_email>mike_ebert@twitter.example.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://twitter.com/mike_ebert</ns0:comment_author_url>
    <ns0:comment_date>2012-10-16 00:39:33</ns0:comment_date>
    <ns0:comment_content>When technical debt becomes too great, sometimes organizations have to declare bankruptcy--certainly technical bankruptcy, if they survive financially--I'd be interested to hear thoughts about what's involved in technical bankruptcy, esp. if there's anything non-obvious.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>hc_post_as</ns0:meta_key>
      <ns0:meta_value>twitter</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>hc_avatar</ns0:meta_key>
      <ns0:meta_value>http://a0.twimg.com/profile_images/189773090/mike-ebert_normal.jpg</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>hc_foreign_user_id</ns0:meta_key>
      <ns0:meta_value>36124588</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>181</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-10-16 02:01:31</ns0:comment_date>
    <ns0:comment_content>Good comment, Mike!

I would equate bankruptcy with declaring a codebase insolvent -- incapable of providing any future value. If you get to that point, you're looking at a total rewrite.

However, this may be too simplistic. In my post about "The 8th Characteristic," I claimed that codebases naturally die; maybe declaring a codebase dead isn't the same as declaring bankruptcy.

I'll noodle on it, and blog if I think of anything useful.

What kinds of events do you associated with bankruptcy?</ns0:comment_content>
    <ns0:comment_parent>180</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>534</ns0:comment_id>
    <ns0:comment_author>Earned Pragmatism &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/01/18/earned-pragmatism/</ns0:comment_author_url>
    <ns0:comment_date>2013-01-18 08:53:25</ns0:comment_date>
    <ns0:comment_content>[...] architectures healthy. Codebases owned by this type of &amp;#8220;architect&amp;#8221; tend to be rife with tech debt, with no roadmap or process to haul the team up and out. Where there is no vision, the people [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>807</ns0:comment_id>
    <ns0:comment_author>jasonodtr.inube.com</ns0:comment_author>
    <ns0:comment_author_email>agueda.gregory@arcor.de</ns0:comment_author_email>
    <ns0:comment_date>2013-03-06 20:25:02</ns0:comment_date>
    <ns0:comment_content>Wonderful insight. What a web site you have! Keep it up.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>881</ns0:comment_id>
    <ns0:comment_author>Kerry</ns0:comment_author>
    <ns0:comment_author_email>kerrymcclung@arcor.de</ns0:comment_author_email>
    <ns0:comment_date>2013-03-21 11:40:46</ns0:comment_date>
    <ns0:comment_content>Greetings from Colorado! I'm bored to death at work so I decided to browse your website on my iphone during lunch break. I really like the discussion of programming comments you provide here and can't wait to read more. Anyhow, awesome blog!</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4884</ns0:comment_id>
    <ns0:comment_author>Why you should use an IDE instead of vim or emacs | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/05/13/why-you-should-use-an-ide-instead-of-vim-or-emacs/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-13 10:16:44</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] find it easier to generate momentum on unit tests, to eliminate fear of ambitious refactors, and to see their way past nagging tech debt. However, bigger concerns have kept me from pushing them hard in that [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1206</ns0:comment_id>
    <ns0:comment_author>Courage Counts | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/05/31/courage-counts/</ns0:comment_author_url>
    <ns0:comment_date>2013-05-31 08:33:33</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] &amp;#8220;Nobody will buy into the need to pay down technical debt.&amp;#8221; [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2430</ns0:comment_id>
    <ns0:comment_author>Features are not chunks of code | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/07/25/features-are-not-chunks-of-code/</ns0:comment_author_url>
    <ns0:comment_date>2013-07-25 11:19:49</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] never &amp;#8220;done.&amp;#8221; Sticking our heads in the sand to avoid this truth is a surefire way to incur tech debt, and not accounting for it with each release is a sin of [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4088</ns0:comment_id>
    <ns0:comment_author>How to make a const-correct codebase in 4300 easy steps | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/03/25/how-to-make-a-const-correct-codebase-in-4300-easy-steps/</ns0:comment_author_url>
    <ns0:comment_date>2014-03-25 11:44:42</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] something right is cheaper and a whole lot less hassle than fixing an antipattern once it&amp;#8217;s firmly entrenched. We&amp;#8217;ll never get away from refactoring (nor would we want to)&amp;#8211;but it pays to establish [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16074</ns0:comment_id>
    <ns0:comment_author>Technical Debt is not only a "Technical" Problem | On Technical Debt</ns0:comment_author>
    <ns0:comment_author_url>http://www.ontechnicaldebt.com/uncategorized/technical-debt-is-not-only-a-technical-problem/</ns0:comment_author_url>
    <ns0:comment_date>2015-07-06 11:05:33</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] To read the full post visit here. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16583</ns0:comment_id>
    <ns0:comment_author>On Forests and Trees | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/09/02/on-forests-and-trees/</ns0:comment_author_url>
    <ns0:comment_date>2015-09-02 08:49:00</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] One reason we don&amp;#8217;t generalize is because we are being crushed by tech debt. We feel like we can&amp;#8217;t afford it. This is a very real problem, but it is solvable&amp;#8211;or at least improvable. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Book Review: Poke the Box</title>
  <link>http://codecraft.co/2012/10/16/book-review-poke-the-box/</link>
  <pubDate>Tue, 16 Oct 2012 06:11:28 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=703</guid>
  <ns2:encoded>I just finished reading &lt;a class="zem_slink" title="Seth Godin" href="http://twitter.com/thisissethsblog" target="_blank" rel="twitter"&gt;Seth Godin's&lt;/a&gt; &lt;em&gt;Poke the Box&lt;/em&gt;, and I recommend that you add it to your reading list. It's short, punchy, and thought-provoking.

[youtube=http://youtu.be/6IapqgokfNU]

&amp;nbsp;

The main idea he advocates is that we should not wait around for the world to give us permission, and we should not be afraid to fail. We should just jump in with two feet and make things happen.

My favorite phrase from the whole book--and a great three-word summary--is "Now beats soon." Kind of reminds me of the favorite motto of a wise leader that I admire: "We must lengthen our stride. And we must &lt;em&gt;do it now&lt;/em&gt;." (&lt;a href="http://varsityteamvenue.blogspot.com/2012/02/quote-spencer-w-kimball.html" target="_blank"&gt;Spencer W. Kimball&lt;/a&gt;; he had "Do it now!" on a plaque on his desk.)

Yes, there are a few caveats. Some people are forever starting, but never finishing. That can be a problem. And you have to do your homework before you start; you don't want to jump in until you know whether you've picked a smart place to swim across the river.

The only critique I have is that Godin could have said the same thing in about half the space. He has lots of short anecdotes, which are fun, but he had me convinced long before I got to the end.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Go out and do something great! Now.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://referenceacademy.wordpress.com/2012/09/19/book-review-poke-the-box-by-seth-godin/" target="_blank"&gt;Book review: Poke The Box, by Seth Godin&lt;/a&gt; (referenceacademy.wordpress.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>703</ns0:post_id>
  <ns0:post_date>2012-10-16 00:11:28</ns0:post_date>
  <ns0:post_name>book-review-poke-the-box</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="habits">habits</category>
  <category domain="post_tag" nicename="motto">motto</category>
  <category domain="category" nicename="reviews">Reviews</category>
  <category domain="post_tag" nicename="vision">vision</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:2:{s:7:"twitter";a:1:{i:1511181;i:25;}s:2:"wp";a:1:{i:0;i:16;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_twitter_user</ns0:meta_key>
    <ns0:meta_value>dhh1128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:7:"twitter";a:1:{i:10448672;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-10-16 06:14:18";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>247</ns0:comment_id>
    <ns0:comment_author>golebiewski.net</ns0:comment_author>
    <ns0:comment_author_email>penney_covert@inbox.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.golebiewski.net/jakcaoizdrowoprzyszedemnawiat/97b7b1d6731162cacf98ae0dd8b5d217.jpg.php</ns0:comment_author_url>
    <ns0:comment_date>2012-10-29 11:39:08</ns0:comment_date>
    <ns0:comment_content>Hello, just wanted to say, I liked this blog post. It was practical.
Keep on posting!</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Flexibility is No Virtue</title>
  <link>http://codecraft.co/2012/10/17/flexibility-is-no-virtue/</link>
  <pubDate>Wed, 17 Oct 2012 14:04:42 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=707</guid>
  <ns2:encoded>&lt;blockquote&gt;&lt;em&gt;Vice is a monster of so frightful mien,
As to be hated needs but to be seen;
Yet seen too oft, familiar with her face,
We first endure, then pity, then embrace.&lt;/em&gt;
&lt;p style="padding-left:30px;"&gt;—&lt;a class="zem_slink" title="Alexander Pope" href="http://en.wikipedia.org/wiki/Alexander_Pope" target="_blank" rel="wikipedia"&gt;Alexander Pope&lt;/a&gt;, &lt;em&gt;&lt;a class="zem_slink" title="An Essay on Man" href="http://en.wikipedia.org/wiki/An_Essay_on_Man" target="_blank" rel="wikipedia"&gt;Essay on Man&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
If I had a penny for every programmer that I've heard, proudly touting the flexibility of what they've built, I'd be a wealthy man. I might even be able to afford my teenagers' car insurance. :-)

As a young coder, I took the implied excellence of flexibility for granted; after all, who wouldn't want to be flexible?

Now I know better.

If your software can be installed and configured a hundred different ways, this is &lt;strong&gt;Not Good&lt;/strong&gt;. It is a sign that you don't know who your customer is, or what they want. If your programming language has nine separate functions that provide the same functionality, shame on its designers. If your UI presents users with oodles of choices and calls it a customer focus, go vomit into the nearest garbage can.

[caption id="" align="aligncenter" width="480"]&lt;a href="http://en.wikipedia.org/wiki/Bell_Boeing_V-22_Osprey"&gt;&lt;img class=" " src="http://upload.wikimedia.org/wikipedia/commons/thumb/1/15/3rd_Battalion_3rd_Marines_Osprey_flights.jpg/640px-3rd_Battalion_3rd_Marines_Osprey_flights.jpg" alt="" width="480" height="249" /&gt;&lt;/a&gt; V22-Osprey -- an unusually flexible aircraft. Photo credit: Sgt. Mike Fayloga (Wikimedia Commons)[/caption]

I can already hear the protests, so let me pause here to admit &lt;!--more--&gt;that my generalization isn't true 100% of the time. The Department of Defense spent billions of dollars developing the Osprey, because it really did want Marines to be able to take off and land like a helicopter or a plane, according to changing circumstances. And the DOD was not crazy.

This post is not about that kind of flexibility.

It's also not about the flexibility in construction that you address with modular designs. The set of objects you can build with legos is unbounded--flexible, if you will. But notice that the blocks themselves are not.

This post is about products that can be deployed and configured in a thousand permutations, when the reasons and the costs for that flexibility are not understood or acknowledged. &lt;em&gt;That&lt;/em&gt; kind of flexibility pushes problem-solving onto the customer's plate (and QA's plate), and is usually laziness in disguise. Yet we tell ourselves it's a virtue so often that we start to believe it.

&lt;strong&gt;Cement as a poster child&lt;/strong&gt;

When you pour cement to make a driveway, you value the pliable nature of the material just long enough to get it to fit your form. Ninety minutes of flexibility must be followed by decades of perfect rigidity, or you'll never buy from that cement maker again. You couldn't care less that the cement you purchased could be made to fit the shape of your neighbor's sidewalk, or of the basketball court at the park.

Think about that for a minute.

In the long run, does a customer value the ability of a "flexible" product to meet the needs of &lt;em&gt;any&lt;/em&gt; configuration other than the one she needs? No! (It is possible that she will configure a single product in multiple ways on different hardware or at different points in time, but this is the exception that proves the rule. Even when reconfiguration is important, the customer will view it as a necessary evil that increases cost and bother--not as a delightful business enhancer.)

As with cement, once a customer gets things configured correctly, he is guaranteed to prefer "set it and forget it" to an experience where he can experience the wonders of your product's flexibility over and over again.

&lt;strong&gt;The cost of flexibility&lt;/strong&gt;

The &lt;a class="zem_slink" title="Bell Boeing V-22 Osprey" href="http://en.wikipedia.org/wiki/Bell_Boeing_V-22_Osprey" target="_blank" rel="wikipedia"&gt;MV-22 Osprey&lt;/a&gt; makes a great cautionary tale. It took &lt;em&gt;much&lt;/em&gt; longer to test, and was &lt;em&gt;far&lt;/em&gt; more expensive to develop, than &lt;a href="http://www.nytimes.com/2011/11/20/us/costly-osprey-symbol-of-fight-to-cut-pentagon.html" target="_blank"&gt;originally expected&lt;/a&gt;.

Flexible software is no different.

But suppose, just suppose, we were perfect estimators, and we could tally up exactly how many dollars and hours we would spend on releasing something flexible... Suppose we did the analysis, even including a savvy assessment of opportunity cost, and decided it was worth it...

We still wouldn't be counting the cost accurately.

Besides the cost of developing and testing the Osprey, and the cost of purchasing models as they roll off the assembly line, the Department of Defense incurs an ongoing cost &lt;em&gt;to the Osprey's users&lt;/em&gt; in terms of extra training time, more limited deployment theaters, less skill transfer for pilots and maintenance crews when they retire to civilian life, and so forth.

Again, flexible software is no different.

&lt;strong&gt;Rational self-interest and the invisible hand&lt;/strong&gt;

If you want to sell into a varied market, you have to tolerate variety. Dev teams that make flexible products are attacking that problem, and they are behaving in a mostly rational fashion.

Does that sound like I'm contradicting myself?

I don't think so. It all hinges on understanding whose interests are being served by flexibility.

&lt;em&gt;Flexibility serves the self-interest of the ISV&lt;/em&gt;. In most cases, customers would be delighted if products shipped pre-configured for exactly their needs, with no flexibility at all. They'd gladly accept a pre-fitted driveway, delivered by an invisible hand.

In other words, flexibility in a product's configuration is a necessary evil.

If it's necessary at all...

Theoretically, products could ship with smart defaults (so they'd require little tweaking), and could adjust themselves to unique needs with little effort on the part of customers. In some cases, they could even make these changes automatically and instantaneously, on deployment. Think about how much less doc we'd have to write, and how much less support we'd have to provide, if we didn't buy into the flexibility approach...

I know I'm being idealistic. But it seems to me that we should acknowledge who's benefitting from flexibility, and what it's costing. We should make easy and correct fit, rather than flexibility, the ideal for our customers, and do what we can to achieve it. We may always be stuck making things flexible for our own internal purposes, but that should be our problem, not the customer's.
&lt;p style="padding-left:30px;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Study the "&lt;a href="http://www.antipatterns.com/arch_cat.htm" target="_blank"&gt;Swiss Army Knife" and "Cover Your Assets" antipatterns&lt;/a&gt;. These antipatterns are often associated with an incorrect admiration for flexibility. Look for places in your world where these antipatterns are used.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://dl.acm.org/citation.cfm?id=1620482" target="_blank"&gt;"Weighing the Benefits and Costs of Flexibility in Making Software"&lt;/a&gt; (Information Systems Research)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>707</ns0:post_id>
  <ns0:post_date>2012-10-17 08:04:42</ns0:post_date>
  <ns0:post_name>flexibility-is-no-virtue</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="configuration">configuration</category>
  <category domain="post_tag" nicename="deployment">deployment</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="flexibility">flexibility</category>
  <category domain="post_tag" nicename="installation">installation</category>
  <category domain="category" nicename="mistakes">Mistakes</category>
  <category domain="post_tag" nicename="opportunity-cost">opportunity cost</category>
  <category domain="post_tag" nicename="self-interest">self-interest</category>
  <category domain="post_tag" nicename="testing">testing</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_twitter_user</ns0:meta_key>
    <ns0:meta_value>dhh1128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:2:{s:7:"twitter";a:1:{i:10448672;b:1;}s:8:"facebook";a:1:{i:1511184;s:38:"https://facebook.com/10153535475630912";}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_job_id</ns0:meta_key>
    <ns0:meta_value>14604011861</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_2094213</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>729</ns0:comment_id>
    <ns0:comment_author>The Power of Simplicity &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/02/15/the-power-of-simplicity/</ns0:comment_author_url>
    <ns0:comment_date>2013-02-15 08:56:51</ns0:comment_date>
    <ns0:comment_content>[...] And all the planning that built those features? They&amp;#8217;re symptoms of a problem, not solutions. Nobody really wants a shopping cart framework with 10,000 configuration options; they want to sell in a way that delights and engages customers. (Okay, I guess some software [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16724</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2015-09-22 12:44:07</ns0:comment_date>
    <ns0:comment_content>The more time goes by, the more I see this phenomenon everywhere. I don't think it's necessarily wrong to *start out* building in a lot of configurability; we might need it while we learn what's the right set of tradeoffs in the early days of our products. But once we have some experience in the field, we will eliminate some of the configuration options, in favor of "hardened" features. By then we should know that "give" in those places is counterproductive.</ns0:comment_content>
    <ns0:comment_parent>16645</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>15059860403</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1442947447</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16645</ns0:comment_id>
    <ns0:comment_author>David H</ns0:comment_author>
    <ns0:comment_author_email>david@handysoftware.com</ns0:comment_author_email>
    <ns0:comment_date>2015-09-09 19:29:51</ns0:comment_date>
    <ns0:comment_content>Wow you hit on another hot-button topic for me. Super-configurable flexibility really benefits most the ISV salesperson who gets paid when the deal is signed, not when the customer is happy nor when the company makes a profit. It's about attempting (vainly) to be all things to everyone. "It is a sign that you don’t know who your customer is, or what they want." -&amp;gt; Nailed it.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>comment_like_count</ns0:meta_key>
      <ns0:meta_value>1</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1441848593</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14919</ns0:comment_id>
    <ns0:comment_author>A grumble about buckets | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/04/08/a-grumble-about-buckets/</ns0:comment_author_url>
    <ns0:comment_date>2015-04-08 13:39:35</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] I&amp;#8217;m grumbling about my choice of buckets, but in the end, it&amp;#8217;s not the bucket menu, in and of itself, that bugs me. Like I said above, I get why developers might need to simplify. You can&amp;#8217;t please everyone. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16729</ns0:comment_id>
    <ns0:comment_author>David H</ns0:comment_author>
    <ns0:comment_author_email>david@handysoftware.com</ns0:comment_author_email>
    <ns0:comment_date>2015-09-23 07:01:04</ns0:comment_date>
    <ns0:comment_content>Have you ever seen configuration options removed from a product in real life? Maybe it can be done. I think it would help if it was explicitly stated up front, internally and externally "this product is in Beta and some configuration options will be removed in the future as we gain experience", or something to that effect.</ns0:comment_content>
    <ns0:comment_parent>16724</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>15085393966</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1443013266</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16731</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2015-09-23 10:16:49</ns0:comment_date>
    <ns0:comment_content>&amp;gt;&amp;gt;Have you ever seen configuration options removed

@David: it's a very astute question. The short answer is: "almost never". But at least I can hedge with "almost"... :-) You've made some wheels turn in my head about why it should be so hard to eliminated config. I'm pondering...</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>15091109570</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1443025009</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
</item>
<item>
  <title>Unencapsulate Yourself</title>
  <link>http://codecraft.co/2012/10/22/unencapsulate-yourself/</link>
  <pubDate>Tue, 23 Oct 2012 04:31:09 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=724</guid>
  <ns2:encoded>[caption id="" align="alignright" width="212"]&lt;a href="http://www.flickr.com/photos/thewoodenshoes/2998411234/"&gt;&lt;img alt="" src="http://farm4.staticflickr.com/3040/2998411234_ceb9e6f752_n.jpg" height="320" width="212" /&gt;&lt;/a&gt; We loved to escape the boxes when we were kids... Photo credit: thewoodenshoes (Flickr)[/caption]

If I had to make a "top 5" list of foundational tools in software development, &lt;em&gt;&lt;a class="zem_slink" title="Encapsulation (object-oriented programming)" href="http://en.wikipedia.org/wiki/Encapsulation_%28object-oriented_programming%29" target="_blank" rel="wikipedia"&gt;encapsulation&lt;/a&gt;&lt;/em&gt; would certainly make the cut. It's a major enabler of abstraction; it's what makes conceptual complexity tractable.

Recognizing its importance, most modern programming languages encourage encapsulation in one way or another. For example, languages friendly to &lt;a class="zem_slink" title="Object-oriented programming" href="http://en.wikipedia.org/wiki/Object-oriented_programming" target="_blank" rel="wikipedia"&gt;OOP&lt;/a&gt; lead coders to think about the world in terms of well encapsulated objects and the messages they pass.

I'm a big fan of encapsulation.

But if you never leave your boxes, you miss half the fun.

&lt;strong&gt;Layers and silos&lt;/strong&gt;

As cells grow into tissues in biology, so similar objects in an OOP mindset often coalesce into horizontal layers composed of entities with compatible composition and duties. These strata get names: "the business logic layer", "the display layer", "middleware", "core engine", and so forth. If you've worked on anything MVC or n-tier or client-server, you know this mindset.

Less commonly, objects align on a vertical axis, producing semi-independent silos that span layers to produce decoupled top-level features. An optional accounting module that has its own db and middleware might be modeled as an independent stack in a vertical architecture. &lt;a class="zem_slink" title="Aspect-Oriented Programming" href="http://www.techopedia.com/definition/204/aspect-oriented-programming-aop" target="_blank" rel="techopedia"&gt;Aspect-oriented programming&lt;/a&gt; also spans layers, though in a less siloed way.

In either case, &lt;a title="Why People Are Part of A Software Architecture" href="/2008/06/25/why-people-are-part-of-a-software-architecture/"&gt;the boxes you draw to model your architecture tend to correspond to teams&lt;/a&gt;, and those teams tend to use different tools and processes, and those differences tend to isolate rather than converge organizations.

This is a problem.

&lt;em&gt;You should encapsulate code. People, not so much.&lt;/em&gt;

&lt;strong&gt;Generalists and specialists&lt;/strong&gt;

Specialists have their place. But if your dev organization is overly skewed toward specialists &lt;!--more--&gt;in each architectural box, it is not healthy. To understand why, join me in a thought experiment.

Bob is sick. He'd like to get some help. But he happens to live in a society where the health care system consists entirely of otolaryngologists and endocrinologists and neurosurgeons. He has no &lt;a class="zem_slink" title="General practitioner" href="http://en.wikipedia.org/wiki/General_practitioner" target="_blank" rel="wikipedia"&gt;general practitioners&lt;/a&gt; to listen while he paints a picture with broad brush strokes--nobody who will triage and cut to the chase.

You can imagine what happens next. Bob visits one specialist, but the specialist sees Bob's problem as only intersecting 20% with her particular expertise. Wanting to be sure she's not sued for malpractice, she recommends that he consult with another specialist as well. Bob makes another visit, and gets another referral. After half a dozen trips, he's now explored 100% of his symptoms, and he has a set of diagnoses and prescriptions that theoretically address his problem. However, nobody has examined the picture in the aggregate, looking for redundancy or incompatibility. Instead, nurses have been on the phone to other offices, and faxes and charts have passed back and forth like ping-pong balls, with uncertain results. Bob has spent so much money and accumulated so many complex recommendations for a cure that he's a bit bewildered. And it's taken a large amount of time.

Organizations that encapsulate people into layers or silos map nicely onto this thought experiment. If you want to build a new feature, or fix a bug, you ping-pong around to various specialists, trying to get a straight answer. Communication by document is the norm; people blame poor internal docs for design oversights. Estimates are high, mainly due to concern about touch points between layers. Use cases are written in terms of a horizontal layer; nobody seems to remember that the top of the stack is the entire universe as far as the user is concerned. Specialists don't trust one another's diagnoses. Fiefdoms proliferate; ambassadors may negotiate treaties, but political tensions are high. When time comes to actually implement the feature or the fix, you see an inordinate amount of baton-passing, cross-checking, critical-path'ing, and hand-wringing. These orgs struggle with integration (usually vertical) testing, since it doesn't map well onto the scope of concerns of any incorporated entity; even in the best of cases, they have a hard time identifying the highest-value test cases, since team walls limit insight into risk.

Give me a proactive, first-class generalist in a silo'ed or layered org, and I will give you a high-leverage change-maker that's a linchpin for company success. They will be invited to every meeting (although they won't succumb to death by meeting, if they're smart.) They'll cut through ambivalence, see the big picture, and make smart tradeoffs. They'll lubricate the cogs of the machine in a way that an equally smart, but siloed, technical pro cannot.

&lt;strong&gt;Pendulums&lt;/strong&gt;

I'm not saying that everybody should be a consummate generalist; the pendulum can swing too far. Medicine needs pediatric allergists, and software needs the cube warrior who can make gdb sing on AIX on an RS-6000 like nobody else on the planet. But it's telling that you can't specialize in medicine until after you've satisfied general requirements for a medical degree.

If your software teams are overly siloed, consider instituting some cross-training. Start measuring how often a single person can solve a bug all the way up and down the stack. Incent your best engineers to learn to speak another team's language; maybe loan a few to another scrum team from time to time.

If you're an engineer, unencapsulate yourself.

Thinking outside the box pays big dividends.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Identify one way that you can learn something about the problem domain of a team other than your own. Pay the price for that learning. Then put your investment to good use.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://dailyjs.com/2012/09/17/encapsulation-breaking/" target="_blank"&gt;Encapsulation Breaking&lt;/a&gt; (dailyjs.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://philcrissman.com/2012/08/26/touching-the-stove/" target="_blank"&gt;Touching the stove, broken glass, and other people's mistakes&lt;/a&gt; (philcrissman.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://architects.dzone.com/articles/breaking-ioc-containers" target="_blank"&gt;Breaking Up with IoC Containers&lt;/a&gt; (architects.dzone.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>724</ns0:post_id>
  <ns0:post_date>2012-10-22 22:31:09</ns0:post_date>
  <ns0:post_name>unencapsulate-yourself</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="bureaucracy">bureaucracy</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="encapsulation">encapsulation</category>
  <category domain="post_tag" nicename="layers">layers</category>
  <category domain="post_tag" nicename="mvc">mvc</category>
  <category domain="post_tag" nicename="n-tier">n-tier</category>
  <category domain="post_tag" nicename="oop">OOP</category>
  <category domain="post_tag" nicename="politics">politics</category>
  <category domain="post_tag" nicename="silos">silos</category>
  <category domain="category" nicename="software-architecture">Software Architecture</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_twitter_user</ns0:meta_key>
    <ns0:meta_value>dhh1128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:7:"twitter";a:1:{i:10448672;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:2:{s:7:"twitter";a:1:{i:1511181;i:29;}s:2:"wp";a:1:{i:0;i:18;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:0:"";s:6:"images";a:1:{s:62:"http://farm4.staticflickr.com/3040/2998411234_ceb9e6f752_n.jpg";a:6:{s:8:"file_url";s:62:"http://farm4.staticflickr.com/3040/2998411234_ceb9e6f752_n.jpg";s:5:"width";i:212;s:6:"height";i:320;s:4:"type";s:5:"image";s:4:"area";i:67840;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-10-23 04:47:52";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>220</ns0:comment_id>
    <ns0:comment_author>Konstantin</ns0:comment_author>
    <ns0:comment_author_email>const.nekrasoff@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2012-10-23 15:27:18</ns0:comment_date>
    <ns0:comment_content>I generally agree with your point, so just wanted to know how unusual your ideas are for the market of your country.
So thank you for the answer!

As for my experience, I can't imagine myself to be a really narrow-interested developer. There are the things that I am payed for (and they are not always challenging, sometimes just a routine with no adventure). 
And on the other hand there are some areas that I would like to investigate deeper but these areas are of quite academic sense (e.g. compilers, syntactic analyzers etc). And trying both directions to be satisfied makes me feel that I can do something :) I guess it is quite normal situation.

PS. A funny thing: in Russia the analog of "jack of all trades" (which sounds like 'all-hands master') has a positive connotation. So it makes sense to think positively :)</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>218</ns0:comment_id>
    <ns0:comment_author>Konstantin</ns0:comment_author>
    <ns0:comment_author_email>const.nekrasoff@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2012-10-23 14:02:21</ns0:comment_date>
    <ns0:comment_content>A really thoughtful post. But actually I thought that in both Europe and America it is more usual (and considered to be just better) to be a narrow-specialized engineer. Is it true?</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>219</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-10-23 14:20:52</ns0:comment_date>
    <ns0:comment_content>Good question, Konstantin. I think specialization is indispensable. You have to get really deep at a few things. It is impossible to be super deep in everything, and if you dilute your expertise and energy too much, you can become what English speakers call "jack of all trades, master of none." However, sometimes I have seen specialists get too comfortable in their narrow world, without understanding how their narrow focus imposes costs on the larger organization. It has been my experience that a specialist with a good, broad foundation is more valuable than a specialist that can't see the larger picture. It is also the case that organizations suffer if they don't have a certain percentage of very competent generalists to translate and facilitate.

In my own career, I have chosen to get very, very deep on topics like text processing, internationalization, and all things related to language and computers, due to my graduate studies in linguistics. I am moderately deep on topics like RESTful web services, database theory, and web UI. On many other topics, I am just deep enough to do journeyman bug fixes and to understand estimates, but not to solve subtle and multivariate problems.

Each engineer has to choose his or her own preferred balance, but I believe having some breadth is healthy, even if you prefer to operate mostly as a specialist.</ns0:comment_content>
    <ns0:comment_parent>218</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
</item>
<item>
  <title>On SEPs, Squirrels, and Meta Questions</title>
  <link>http://codecraft.co/2012/10/23/on-seps-squirrels-and-meta-questions/</link>
  <pubDate>Wed, 24 Oct 2012 04:18:51 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=734</guid>
  <ns2:encoded>In &lt;a class="zem_slink" title="Douglas Adams" href="http://douglasadams.com/" target="_blank" rel="homepage noopener"&gt;Douglas Adams&lt;/a&gt;' novel, &lt;em&gt;Life, the Universe, and Everything&lt;/em&gt;, a spaceship lands in the middle of a stadium of screaming fans during a cricket match, and nobody notices. The ship doesn't use a Klingon-style cloaking device to accomplish this amazing feat; instead, it is hidden by a "Somebody Else's Problem" field, which operates on the principle that if something is perceived to be somebody else's problem, the brain of onlookers will treat it as if it were invisible.

Adams was a sci-fi author, but I see applications of his metaphor in the day-to-day work of software engineering.

To one degree or another, we all exhibit &lt;a class="zem_slink" title="Inattentional blindness" href="http://en.wikipedia.org/wiki/Inattentional_blindness" target="_blank" rel="wikipedia noopener"&gt;inattentional blindness&lt;/a&gt; from time to time. And that can be a good thing. Being able to zero in on a particular block of code, to the exclusion of the guy sneezing or yawning in the next cube, is healthy. We don't want to be like the dogs in Pixar's &lt;em&gt;Up!&lt;/em&gt;, who keep getting distracted by squirrels.

[youtube=https://youtu.be/SSUXXzN26zg]

However, truly superb engineers have a capacity to see through the cloak of somebody else's problem; they think simultaneously on multiple levels of abstraction. They tend to ask "meta questions" (judiciously) that poke at larger issues, broader contexts, or more distant time horizons. Not coincidentally, &lt;!--more--&gt;this &lt;a title="Unencapsulate Yourself" href="/2012/10/22/unencapsulate-yourself/"&gt;breaks them out of the tidy horizontal layers or vertical silos that sometimes constrain the thinking of organizations&lt;/a&gt;.

&lt;strong&gt;Levels of Zen&lt;/strong&gt;

Here's an example of what meta thinking looks like.
&lt;p style="padding-left:30px;"&gt;Product Manager: Could you provide us with some estimates on time/effort to integrate our error messages with the Windows event log?&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;Engineer 1 &lt;span style="color:#008000;"&gt;(thinking to himself)&lt;/span&gt;: &lt;em&gt;I could probably code what they're asking for in a week or two. However, is this really the right way to build this feature? I think integrating with the Windows event log might break our cross-platform goal; I'll have to fork the code path when we log, so we do something different on Linux.&lt;/em&gt; &lt;span style="color:#008000;"&gt;(Speaking out loud...)&lt;/span&gt; "I could probably do that in a week or two. But I think your proposed implementation has some drawbacks that ought to be considered..."&lt;/p&gt;
This engineer thinks more broadly than the strict parameters of the question, and as a result, product management gets a much more helpful answer. Many engineers that I know think at this level, and they deserve kudos. But consider another level of talent:
&lt;p style="padding-left:30px;"&gt;Engineer 2 &lt;span style="color:#008000;"&gt;(thinking to herself)&lt;/span&gt;: &lt;em&gt;A half-baked implementation of this feature would probably take week or two. However, is this really the right way to build this feature? It would have implications for cross-platform, and localization... Even if we do it right, it would change the way support troubleshoots. We'd have to document a different workflow. The overall cost is probably closer to a man-month. And then there are ongoing carrying costs, because Windows' security model has changed slightly in the past couple releases, and we'll have to be prepared to verify that we've got elevation of privilege right in several OS variations, across various patch levels, as we write to the log. And then there's the issue of opportunity cost; if I build this, I'm unlikely to have the bandwidth to make the first-time user experience better.&lt;/em&gt; &lt;span style="color:#008000;"&gt;(Speaking out loud...)&lt;/span&gt; "The short answer is that this might cost a man-month, plus or minus a week. It will depend on a few variables. Could I ask some questions about priorities so I know how this fits into the larger picture?..."&lt;/p&gt;
Notice that this Engineer 2 considers a broader array of implications. Notice, also, that she answers with a question rather than just asserting a viewpoint like Engineer 1. Engineer 2 doesn't necessarily take the question, as asked, as the definitive constraint on scope. But she doesn't just ask questions indiscriminately, either; she knows that's a recipe for rat holes and frustration. She selects those meta questions that test assumptions or uncover misalignments as rapidly as possible.

Engineer 2 still has things to learn, though:
&lt;p style="padding-left:30px;"&gt;Engineer 3 &lt;span style="color:#008000;"&gt;(has essentially the same inner dialog as Engineer 2, but adds the following)&lt;/span&gt;: ... &lt;em&gt;Besides all that, I'm uncomfortable with the architectural consequences of changing our logging right now, given the fragility of the codebase... Product management has been feeling frustrated about how hard it is to troubleshoot for a long time, now. I wonder if they'd entertain a different solution to that problem, that doesn't couple us so tightly to the OS. If we could postpone the fancier work, we might make customers and professional services happier, remove the same sales inhibitors from this release, and be able to do a more thorough job once some other tech debt has been cleared away. Hmm... &lt;/em&gt; &lt;span style="color:#008000;"&gt;(Speaking out loud...)&lt;/span&gt; "Could I explore some alternate ways to address the need for diagnostics, that might be cheaper and easier to reconcile to our architectural roadmap?"&lt;/p&gt;
Notice how the scope of concerns under consideration in Engineer 3's inner dialog has grown. He's now considering multiple stakeholders and multiple time horizons. He also has enough people awareness to recognize that perception, momentum, and cooperation are important goals of the conversation. No SEPs block his vision.

Yet even Engineer 3 has room to grow. Engineer 4 is a zen master, and her answer looks like this:
&lt;p style="padding-left:30px;"&gt;Engineer 4: &lt;span style="color:#008000;"&gt;(speaking out loud)&lt;/span&gt; Remember the logging notion we kicked around at lunch the other day? I did a little proof of concept, and I think we could have that done for you in a couple weeks.&lt;/p&gt;
Wait a minute! What happened to the inner dialog?

Engineer 4 still had it--in spades. Some of it may have been subliminal, because by now, asking meta questions has become almost automatic for her. But even if it had all been conscious, we wouldn't show it here, because Engineer 4 thought about all of this days or weeks ago. To the skills of Engineer 3, our zen master has added hefty doses of foresight, pragmatism, and proactivity. She saw need coming to a head, understood that the simple answer would not be satisfactory for many reasons, and knew that it would be hard to make the right choice. Across multiple time horizons, multiple departments, and multiple lines of business, she asked herself: &lt;em&gt;What is the best answer for our company?&lt;/em&gt; She encountered a few distracting squirrels as she explored her questions, but her pragmatism allowed her to ignore them. She probably identified key thought leaders and consulted them, either formally or informally, to inform and test her thinking, and to gauge feasibility. Then she asked herself: &lt;em&gt;How can I make that answer easier?&lt;/em&gt; She did some research. She planted a seed with product management by discussing the problem casually. She decided that a &lt;em&gt;fait accompli&lt;/em&gt; would grease the skids, and she came to the meeting thoroughly prepared.

&lt;strong&gt;Don't Panic!&lt;/strong&gt;

If this all feels mind-boggling complex, remember the reminder printed in large letters on the cover of &lt;em&gt;The Hitchhiker's Guide to the Galaxy&lt;/em&gt;: "Don't Panic!"

Plenty of problems don't merit deep thinking; the zen master found time for our example issue by judiciously ignoring others. Even with important issues, you don't have to think at all these levels all the time. Just being aware of broader contexts and probing them occasionally will bring great benefits to your team.

&lt;strong&gt;Broader Application&lt;/strong&gt;

If you've been asking meta questions about my post, you'll no doubt agree that the SEP phenomenon, and the meta question habit, apply beyond just in software engineering. Asking big meta questions caused all sorts of adventure and hilarity in Douglas Adams' books, but there's a serious side. Consummate product managers and marketers and business executives use these principles across all industries. Great scientists and generals and statesmen and religious leaders are serial meta questioners. Great parents and great friends are as well.

You might even see a link between asking meta questions and two other virtues I've written about before--&lt;a title="Lynn Bendixsen: Listen." href="/2012/10/02/lynn-bendixsen-listen/"&gt;listening&lt;/a&gt;, and &lt;a title="Humility" href="/2012/10/01/humility/"&gt;being humble&lt;/a&gt;.

I'd like to hear about other connections you see. Please comment. (See how I'm posing a meta question of my own? :-) And please follow my blog so we can discuss the craft of coding together.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Do a post-mortem on a recent conversation you've had--perhaps something like the estimation example I gave above. What questions could you have asked to deliver greater value faster? Could you have anticipated the conversation and prepped for it, like our zen master?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.nj.com/news/index.ssf/2012/10/nutty.html" target="_blank" rel="noopener"&gt;Nutty: Squirrel responsible for Amtrak delays along Northeast corridor&lt;/a&gt; (nj.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>734</ns0:post_id>
  <ns0:post_date>2012-10-23 22:18:51</ns0:post_date>
  <ns0:post_name>on-seps-squirrels-and-meta-questions</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="douglas-adams">Douglas Adams</category>
  <category domain="post_tag" nicename="elevation-of-privilege">elevation of privilege</category>
  <category domain="post_tag" nicename="humility">humility</category>
  <category domain="post_tag" nicename="klingon">Klingon</category>
  <category domain="post_tag" nicename="linux">linux</category>
  <category domain="post_tag" nicename="listening">listening</category>
  <category domain="post_tag" nicename="meta-questions">meta questions</category>
  <category domain="post_tag" nicename="opportunity-cost">opportunity cost</category>
  <category domain="post_tag" nicename="pixar">Pixar</category>
  <category domain="post_tag" nicename="rat-holes">rat holes</category>
  <category domain="post_tag" nicename="sci-fi">sci-fi</category>
  <category domain="post_tag" nicename="security">security</category>
  <category domain="post_tag" nicename="somebody-elses-problem">Somebody Else's Problem</category>
  <category domain="post_tag" nicename="ux">ux</category>
  <category domain="post_tag" nicename="windows">windows</category>
  <category domain="post_tag" nicename="zen">zen</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_twitter_user</ns0:meta_key>
    <ns0:meta_value>dhh1128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:7:"twitter";a:1:{i:10448672;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-10-24 04:23:35";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_job_id</ns0:meta_key>
    <ns0:meta_value>19106324214</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>4951</ns0:comment_id>
    <ns0:comment_author>Why you should be proficient in a tool like vim or emacs | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/05/15/why-you-should-be-proficient-in-a-tool-like-vim-or-emacs/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-15 08:46:23</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] or emacs&amp;#8211;if you specialize in an IDE without a text editor in your repertoire, you have gaps in your experience. An IDE makes parts of your ecosystem invisible; a text editor teaches you just how robust and [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>17434</ns0:comment_id>
    <ns0:comment_author>On pains and brains | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2016/01/01/on-pains-and-brains/</ns0:comment_author_url>
    <ns0:comment_date>2016-01-01 14:30:10</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] evolution of thinking, in which I initially focus on technical details, but come to zen only as I recognize the role of people in software architecture, has repeated several times in my [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16577</ns0:comment_id>
    <ns0:comment_author>On Forests and Trees | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/09/02/on-forests-and-trees/</ns0:comment_author_url>
    <ns0:comment_date>2015-09-02 08:48:50</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] we should have, with surprise at the cause and head-scratching about how to fix it. We hadn&amp;#8217;t generalized from one problem to a systemic weakness very [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>19552</ns0:comment_id>
    <ns0:comment_author>God, Evolution, Systems, and Eternity &amp;#8211; An Eye of Faith</ns0:comment_author>
    <ns0:comment_author_url>https://aneyeoffaith.wordpress.com/2018/12/07/god-evolution-systems-and-eternity/</ns0:comment_author_url>
    <ns0:comment_date>2018-12-07 15:49:12</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] I see this constantly in software. Building something complex like the Facebook ecosystem is more than just building the pieces. It involves the mustering of technical, legal, business, and cultural forces in multiple dimensions, across large spans of time. There&amp;#8217;s incredible interplay and feedback loops. I&amp;#8217;ve blogged about this, more than once. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Baby Steps</title>
  <link>http://codecraft.co/2012/10/24/baby-steps/</link>
  <pubDate>Thu, 25 Oct 2012 01:02:22 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=743</guid>
  <ns2:encoded>[caption id="" align="alignright" width="275"]&lt;a href="http://en.wikipedia.org/wiki/File:What_About_Bob_film.jpg" target="_blank"&gt;&lt;img class="zemanta-img-inserted zemanta-img-configured " alt="" src="http://upload.wikimedia.org/wikipedia/en/8/84/What_About_Bob_film.jpg" width="275" height="425" /&gt;&lt;/a&gt; Film poster, displayed under fair use as documented on Wikimedia Commons.[/caption]

If you've seen the delightful comedy movie, &lt;em&gt;&lt;a class="zem_slink" title="What About Bob?" href="http://www.rottentomatoes.com/m/what_about_bob" target="_blank" rel="rottentomatoes"&gt;What About Bob&lt;/a&gt;?&lt;/em&gt;, you are no doubt smiling at my title.

Bob is a neurotic and thoroughly irritating patient who depends on his psychotherapist for lots of emotional strokes and &lt;a class="zem_slink" title="Coaching" href="http://en.wikipedia.org/wiki/Coaching" target="_blank" rel="wikipedia"&gt;life coaching&lt;/a&gt;. He ingratiates himself with the therapist's family and gets himself invited to be their guest on a weekend getaway, against the protests of the therapist. He then proceeds to drive the therapist crazy.

One of Bob's favorite phrases is "baby steps," which captures the therapist's advice to solve problems a little bit at a time, rather than in overwhelming chunks.

"Baby steps" is surprisingly good advice for many questions in software design. It doesn't apply in all cases, but it applies far more often than it ends up being used.

&lt;strong&gt;The Purpose of Design&lt;/strong&gt;

We create UML diagrams, personas, design docs, lo-fi mockups, and other artifacts to capture our architectural thinking because they provide us with a roadmap of sorts. We need to identify and steer to a consistent point of the compass if we want to produce complex artifacts that meet customer needs. The bigger and more diversified our teams get, and the more moving parts we're orchestrating into our software, the more important this is.

However, all of these artifacts are means to an end. To whit:&lt;!--more--&gt; coordinate the collective brain power of the team toward a clear goal, such that the final product exemplifies prioritized and rationally chosen requirements.

If you buy this assertion, then you should also see that in some circumstances, lots of up-front design work is not a good investment. What if:
&lt;ul&gt;
	&lt;li&gt;You're not confident that you're choosing the right set of requirements?&lt;/li&gt;
	&lt;li&gt;You're not confident that a particular design will be appropriate?&lt;/li&gt;
	&lt;li&gt;The entire team already understands the general direction?&lt;/li&gt;
&lt;/ul&gt;
In each of these cases, it may be smarter to start taking baby steps now, rather than planning giant steps to the Nth degree.

If you want to vett your requirements, and you don't have a pool of customers to survey, then perhaps it would be smarter to do something quick and dirty and use it to test the waters, rather than designing an elegant and comprehensive solution. I have seen companies fail to take baby steps in this scenario on many occasions, and the usual result is a huge waste of time and energy. We simply guess wrong too often, when the scope or range of our guess is overly ambitious.

If you wonder whether design A or design B will be appropriate, then again, perhaps you should start implementing as an experiment. I never cease to be amazed at how quickly designs develop a smell (if they're bad) or a luster (if they're good) once you start using them. If you worry that it would be too expensive to code up two alternate solutions, consider using &lt;a title="Role-Play Centered Design" href="http://codecraft.co/2012/06/20/role-play-centered-design/"&gt;role-play centered design&lt;/a&gt; to let humans substitute for key modules with almost zero overhead.

If the entire team is already headed north, and your design just draws a northerly vector on a map, then maybe a careful, formal design isn't worth the effort. Teams that push for more thoughtful up-front planning often make the mistake of requiring the same design artifacts for all plan inputs. This generates useless busy work for a portion of the features on the docket.

&lt;strong&gt;When baby steps are a bad idea&lt;/strong&gt;

Big steps are a better choice when all of the following are generally true:
&lt;ul&gt;
	&lt;li&gt;You are confident that you understand the scope of the problem, because you've done detailed market research and competitive analysis. You can point to an existing system and say, "It must do &lt;em&gt;this&lt;/em&gt;."&lt;/li&gt;
	&lt;li&gt;Anything less than a full solution will be a market disaster. (This happens, but not nearly as often as we think.)&lt;/li&gt;
	&lt;li&gt;The chances of making a wrong choice are high.&lt;/li&gt;
	&lt;li&gt;Forgiveness for making a wrong choice is low or non-existent.&lt;/li&gt;
&lt;/ul&gt;
&lt;strong&gt;Splitting hairs&lt;/strong&gt;

What I'm advocating here might sound a lot like a caution against analysis paralysis, but the two ideas are distinct.

Sometimes, your design might not be paralyzed at all--sometimes you're coming up with all kinds of great ideas, and you sense a grandiose vision unfolding. Maybe you're loving the design phase.

I'm claiming that if your design takes you too far into the future, no matter how good it is and how much momentum you feel, you might be better off taking baby steps on your implementation instead. I'm making this claim based on the observation that it's easy to overbuild, and it's easy to make mistakes by extrapolating too far into the future.

You might also think that baby steps are a repeat of my advice to &lt;a title="Don Kleinschnitz: Put a stake in the ground." href="http://codecraft.co/2012/09/14/don-kleinschnitz-stake/"&gt;put a stake in the ground.&lt;/a&gt;

Again, there's overlap, but the ideas aren't quite the same. Putting a stake in the ground is a way to get off the dime when consensus is lacking, or when analysis is impossible. Baby steps advice applies even if you don't need a stake.

&lt;strong&gt;Why baby steps&lt;/strong&gt;

Here is a fundamental truth that many organizations don't understand: building a new product or feature is as much a learning activity as it is a coding and testing activity. The output at release time is NOT just some binaries and documentation -- it is a new mental model in the minds of the entire dev, support, sales, and services teams. Always, learning takes time--and often, you have to learn by doing. You cannot front-load it all into a compressed "design phase" or "sprint 0" and expect that as you exit that time, all your learning will be over.

Which is why baby steps make sense.

Do as much preliminary design work as you &lt;em&gt;truly&lt;/em&gt; need. Make the best decisions you can. But then, as quickly as you can manage, you need to get in the mode of putting one foot in front of the other, and learning how to walk.

You already know this works; you used this strategy as a baby.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;span style="color:#000080;"&gt;&lt;em&gt;Next time you're given a design assignment, use role-play centered design or other techniques to start experimenting as quickly as possible.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://blog.cdleary.com/2013/01/big-design-vs-simple-solutions/" target="_blank"&gt;Big design vs simple solutions&lt;/a&gt; (cdleary.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://sethgodin.typepad.com/seths_blog/2013/01/exactly-the-same-vs-exactly-different.html" target="_blank"&gt;Exactly the same vs. exactly different&lt;/a&gt; (sethgodin.typepad.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>743</ns0:post_id>
  <ns0:post_date>2012-10-24 19:02:22</ns0:post_date>
  <ns0:post_name>baby-steps</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="architecture">architecture</category>
  <category domain="post_tag" nicename="design">design</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="diagrams">diagrams</category>
  <category domain="post_tag" nicename="experiments">experiments</category>
  <category domain="post_tag" nicename="learning">learning</category>
  <category domain="category" nicename="mistakes">Mistakes</category>
  <category domain="post_tag" nicename="psychotherapy">psychotherapy</category>
  <category domain="post_tag" nicename="role-play">role play</category>
  <category domain="post_tag" nicename="rpcd">rpcd</category>
  <category domain="post_tag" nicename="uml">uml</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:69:"http://upload.wikimedia.org/wikipedia/en/8/84/What_About_Bob_film.jpg";s:6:"images";a:1:{s:69:"http://upload.wikimedia.org/wikipedia/en/8/84/What_About_Bob_film.jpg";a:6:{s:8:"file_url";s:69:"http://upload.wikimedia.org/wikipedia/en/8/84/What_About_Bob_film.jpg";s:5:"width";i:275;s:6:"height";i:425;s:4:"type";s:5:"image";s:4:"area";i:116875;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-10-25 01:02:22";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:2:{s:7:"twitter";a:1:{i:1511181;i:29;}s:2:"wp";a:1:{i:0;i:18;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_twitter_user</ns0:meta_key>
    <ns0:meta_value>dhh1128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:7:"twitter";a:1:{i:10448672;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  </item>
<item>
  <title>How Enums Spread Disease -- And How To Cure It</title>
  <link>http://codecraft.co/2012/10/29/how-enums-spread-disease-and-how-to-cure-it/</link>
  <pubDate>Mon, 29 Oct 2012 13:48:18 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=749</guid>
  <ns2:encoded>Poorly handled enums can infect code with fragility and tight coupling like a digital &lt;a href="http://en.wikipedia.org/wiki/Typhoid_Mary" target="_blank" rel="wikipedia"&gt;Typhoid Mary&lt;/a&gt;.

Say you're writing software that optimizes traffic flow patterns, and you need to model different vehicle types. So you code up something like this:
&lt;p style="background-color:#eeeeee;padding-left:31px;font-weight:bold;border-bottom-style:solid;border-bottom-width:1px;border-bottom-color:black;margin-top:2em;"&gt;vehicle_type.h&lt;/p&gt;

&lt;pre style="padding-left:30px;margin-bottom:1em;"&gt;enum VehicleType {
    eVTCar,
    eVTMotorcycle,
    eVTTruck,
    eVTSemi,
};&lt;/pre&gt;
Then you press your enum into service:
&lt;p style="background-color:#eeeeee;padding-left:31px;font-weight:bold;border-bottom-style:solid;border-bottom-width:1px;border-bottom-color:black;margin-top:2em;"&gt;route.cpp&lt;/p&gt;

&lt;pre style="padding-left:30px;margin-bottom:1em;"&gt;if (vehicle.vt == eVTSemi || vehicle.vt == eVTTruck) {
    &lt;span style="color:#008000;"&gt;// These vehicle types sometimes have unusual weight, so we 
    // have to test whether they can use old bridges...&lt;/span&gt;
    if (vehicle.getWeight() &amp;gt; bridge.getMaxWeight()) {&lt;/pre&gt;
Quickly your enum becomes handy in lots of other places as well:
&lt;pre style="padding-left:30px;margin-bottom:1em;"&gt;if (vehicle.vt == eVTMotorcycle) {
    &lt;span style="color:#008000;"&gt;// vehicle is particularly sensitive to slippery roads&lt;/span&gt;&lt;/pre&gt;
And...
&lt;pre style="padding-left:30px;margin-bottom:1em;"&gt;switch (vehicle.vt) {
case eVTTruck:
case eVTSemi:
    &lt;span style="color:#008000;"&gt;// can't use high-occupancy/fuel-efficient lane&lt;/span&gt;
case eVTMotorcycle:
    &lt;span style="color:#008000;"&gt;// can always use high-occupancy/fuel-efficient lane&lt;/span&gt;
default:
    &lt;span style="color:#008000;"&gt;// can only use lane during off-peak hours&lt;/span&gt;
}&lt;/pre&gt;
&lt;strong&gt;Diagnosis&lt;/strong&gt;

The infection from your enum is already coursing through the bloodstream at this point. Do you recognize the warning signs?
&lt;ul&gt;
	&lt;li&gt;Knowledge about the semantics of each member of the enum are spread throughout the code.&lt;/li&gt;
	&lt;li&gt;The members of the enum are incomplete. How will we account for cranes and bulldozers and tractors and vans?&lt;/li&gt;
	&lt;li&gt;Semantics are unsatisfying. We're saying cars are never gas guzzlers or gas savers; what about massive old steel-framed jalopies and tiny new hybrids?&lt;/li&gt;
&lt;/ul&gt;
[caption id="" align="aligncenter" width="500"]&lt;a href="http://www.flickr.com/photos/manila_imperial2/3165350717/"&gt;&lt;img alt="" src="http://farm2.staticflickr.com/1193/3165350717_bf8656ba38.jpg" height="374" width="500" /&gt;&lt;/a&gt; A vehicle that challenges our tidy enum. Photo credit: Manila Imperial Motor Sales (Flickr)[/caption]

The infection amplifies when we want to represent the enum in a config file or a UI. Now we need to &lt;!--more--&gt;convert to and from strings, and we use the classic shadow array of string literals, indexed by enum:
&lt;pre style="padding-left:30px;margin-bottom:1em;"&gt;&lt;span style="color:#339966;"&gt;// THIS ARRAY ***MUST*** BE KEPT IN SYNC WITH THE ENUM DECLARED
// AT THE TOP OF vehicle_type.h!!!&lt;/span&gt;
char const * VEHICLE_TYPE_NAMES[] = { 
    "car", 
    "motorcycle", 
    "truck", 
    "semi"
};

char const * getVehicleTypeName(VehicleType vt) {
    return VEHICLE_TYPE_NAMES[vt];
}&lt;/pre&gt;
Lest you think this ugliness is unique to C/C++, the Java or C# equivalent isn't all that pretty, either:
&lt;pre style="padding-left:30px;margin-bottom:1em;"&gt;@override
String toString() {
    &lt;span style="color:#339966;"&gt;// eVTxyz --&amp;gt; xyz&lt;/span&gt;
    return super.toString().toLowerCase().substring(3);
}

static VehicleType fromString(String vt) {
    if (vt.equals("truck")) return eVTTruck;
    if (vt.equals("semi")) return eVTSemi;
    ...
}&lt;/pre&gt;
You might be rolling your eyes at the clumsy conversions. Yes, we could do error checking to make &lt;code&gt;getVehicleTypeName()&lt;/code&gt; safer. Yes, we could use reflection in some languages to automate these conversions.

That misses the point.

We're still propagating knowledge indiscriminately. If the UI is involved, chances are there's a view, or an html &amp;lt;select&amp;gt; tag, or a javascript validation function, or--heaven help us--a localized message table--that has knowledge about the possible values of this enum. As the enum grows over time, your maintenance must regularly touch many different modules, possibly at many different layers. This is a recipe for bugs.

The code is sick.

Pretty soon symptoms become externally visible: code is measurably buggy; unit tests require lots of maintenance when you make a change; you have debates about how to accommodate strange new vehicle types; the high priest/grand wizard of the codebase regularly corrects acolytes that attempt "simple" tweaks; people advocate a coding standard that requires comments on every member of the enum to explain its ramifications.

&lt;strong&gt;Treatment&lt;/strong&gt;

The good news is that this particular sickness has an effective and straightforward cure.

The root cause of our disease is semantic diffusion and coupling, and the essence of the cure is encapsulation through a form of &lt;a href="http://en.wikipedia.org/wiki/Declarative_programming" target="_blank"&gt;declarative programming&lt;/a&gt;.

I'll present a formula for our prescription in C++ (where I first learned it from &lt;a title="Julie Jones: Learn voraciously." href="/2012/09/24/julie-jones-learn-voraciously/"&gt;Julie Jones&lt;/a&gt;, years ago); then we can explore what it's doing, and what its analogs might be in other languages.
&lt;p style="background-color:#eeeeee;padding-left:31px;font-weight:bold;border-bottom-style:solid;border-bottom-width:1px;border-bottom-color:black;"&gt;vehicle_type_tuples.h&lt;/p&gt;

&lt;pre style="padding-left:30px;margin-bottom:1em;"&gt;&lt;span style="color:#888888;"&gt;&lt;span style="color:#339966;"&gt;// No sentry. This is deliberate.&lt;/span&gt;

&lt;span style="color:#339966;"&gt;// TUPLE(id, max_wheels, max_weight_kg, max_passengers, avg_km_per_liter)&lt;/span&gt;&lt;/span&gt;
TUPLE(Car, 4, 1800, 6, 8)
TUPLE(Truck, 4, 5700, 4, 5.5)
TUPLE(Motorcycle, 2, 450, 18)
TUPLE(Semi, 18, 19000, 2, 4)

&lt;span style="color:#0000ff;"&gt;#undef&lt;/span&gt; TUPLE&lt;/pre&gt;
&lt;p style="background-color:#eeeeee;padding-left:31px;font-weight:bold;border-bottom-style:solid;border-bottom-width:1px;border-bottom-color:black;margin-top:2em;"&gt;vehicle_type.h&lt;/p&gt;

&lt;pre style="padding-left:30px;margin-bottom:1em;"&gt;&lt;span style="color:#0000ff;"&gt;#ifndef&lt;/span&gt; VEHICLETYPE_H
&lt;span style="color:#0000ff;"&gt;#define&lt;/span&gt; VEHICLETYPE_H

enum VehicleType {
&lt;span style="color:#0000ff;"&gt;#define&lt;/span&gt; TUPLE(id, max_wheels, max_weight_kg, max_passengers, avg_km_per_liter) eVT##id,
&lt;span style="color:#0000ff;"&gt;#include&lt;/span&gt; "vehicle_type_tuples.h"
};

char const * getVehicleTypeName(VehicleType vt);
int getVehicleTypeMaxWheels(VehicleType vt);
int getVehicleTypeMaxWeightKg(VehicleType vt);
int getVehicleTypeMaxPassengers(VehicleType vt);
double getVehicleTypeFuelEconomy(VehicleType vt);

&lt;span style="color:#0000ff;"&gt;#endif&lt;/span&gt; &lt;span style="color:#339966;"&gt;// sentry&lt;/span&gt;&lt;/pre&gt;
&lt;p style="background-color:#eeeeee;padding-left:31px;font-weight:bold;border-bottom-style:solid;border-bottom-width:1px;border-bottom-color:black;margin-top:2em;"&gt;vehicle_type.cpp&lt;/p&gt;

&lt;pre style="padding-left:30px;margin-bottom:1em;"&gt;&lt;span style="color:#0000ff;"&gt;#include&lt;/span&gt; "vehicle_type.h"

static struct VehicleTypeTuple {
    VehicleType id;
    char const * name;
    int max_wheels;
    int max_weight_kg;
    int max_pasengers;
    double avg_km_per_liter;
};

static VehicleTypeTuple const TUPLES[] = {
&lt;span style="color:#0000ff;"&gt;#define&lt;/span&gt; TUPLE(id, max_wheels, max_weight_kg, max_passengers, avg_km_per_liter) \
    { eVT##id, #id, max_wheels, max_weight_kg, max_passengers, avg_km_per_liter },
&lt;span style="color:#0000ff;"&gt;#include&lt;/span&gt; "vehicle_type_tuples.h"
};

static const size_t TUPLE_COUNT = sizeof(TUPLES) / sizeof(TUPLES[0]);

char const * getVehicleTypeName(VehicleType vt) {
    if (static_cast&amp;lt;size_t&amp;gt;(vt) &amp;lt; TUPLE_COUNT) {
        return TUPLES[vt].name;
    }
    return "unknown";
};

&lt;span style="color:#339966;"&gt;... other functions ...&lt;/span&gt;&lt;/pre&gt;
&lt;p style="background-color:#eeeeee;padding-left:31px;font-weight:bold;border-bottom-style:solid;border-bottom-width:1px;border-bottom-color:black;margin-top:2em;"&gt;bridge.cpp&lt;/p&gt;

&lt;pre style="padding-left:30px;margin-bottom:1em;"&gt;bool mayBeTooHeavy(VehicleType vt) {
    return getVehicleMaxWeightKg(vt) &amp;gt; 5000;
}&lt;/pre&gt;
&lt;p style="background-color:#eeeeee;padding-left:31px;font-weight:bold;border-bottom-style:solid;border-bottom-width:1px;border-bottom-color:black;margin-top:2em;"&gt;route.cpp&lt;/p&gt;

&lt;pre style="padding-left:30px;margin-bottom:1em;"&gt;if (Bridge::mayBeTooHeavy(vehicle.vt)) {&lt;/pre&gt;
Setting aside the last two snippets for a moment, the obvious ingredients in the C++ version of our formula are:
&lt;ul&gt;
	&lt;li&gt;Our vehicle enum values, and their associated attributes or semantics, are declared by calling a macro, TUPLE.&lt;/li&gt;
	&lt;li&gt;This macro is called once for each enum value, in a header that contains no sentry (vehicle_type_tuples.h). Essentially, this creates a table of data that can be manipulated at compile time.&lt;/li&gt;
	&lt;li&gt;The TUPLE macro is #defined to mean different things in different places (in vehicle_type.h, and again in vehicle_type.cpp). Each time the meaning of the macro changes, we #include our table of data and generate more code.&lt;/li&gt;
&lt;/ul&gt;
How does this help us?
&lt;ul&gt;
	&lt;li&gt;All knowledge about possible enum values is concentrated in one file.&lt;/li&gt;
	&lt;li&gt;We no longer have to hand-edit a parallel shadow array with an obnoxious (and ignorable) comment to keep it in sync with our enum. It is impossible to get out of sync.&lt;/li&gt;
	&lt;li&gt;The set of attributes that we can associate with our enum is unbounded; we can add as many fields to our tuple as we wish.&lt;/li&gt;
	&lt;li&gt;Our file of tuples is extraordinarily simple to parse; it contains nothing other than a series of TUPLE() calls. If we need to validate enum values in some other language or environment, we can process the file during the build to generate a javascript function, an xml example, a sample config file, and so forth.&lt;/li&gt;
&lt;/ul&gt;
&lt;strong&gt;Separation of Concerns&lt;/strong&gt;

Another characteristic of the solution deserves deeper discussion. Why did we include the snippet from bridge.cpp in our solution? Isn't another function there unnecessary? Why not do the following in vehicle_type_tuples.h?
&lt;pre style="padding-left:30px;margin-bottom:1em;"&gt;&lt;span style="color:#339966;"&gt;// TUPLE(id, heavy_risk, slides_easily, fuel_consumption)&lt;/span&gt;
TUPLE(Car, false, false, average)
TUPLE(Motorcycle, false, true, low)
TUPLE(Truck, true, false, high)
TUPLE(Semi, true, true, high)&lt;/pre&gt;
Then we could do this in route.cpp:
&lt;pre style="padding-left:30px;margin-bottom:1em;"&gt;if (vehicle.vt.heavy_risk) {&lt;/pre&gt;
After all, if our goal is to figure out which vehicles are heavy enough to cause problems on bridges, shouldn't we just say that in our tuples?

The answer involves coupling. The second, less optimal form of the TUPLE macro builds into each vehicle type assumptions about how and why the vehicle type's inherent characteristics will be analyzed, while the earlier and better form does not. Instead, it leaves judgement about the ramifications of these characteristics to other parts of the system (like bridges) that know about &lt;em&gt;their own&lt;/em&gt; problem domain.

In other words, the better version couples vehicle type and traffic routing more loosely.

Which version will require less maintenance if you decide that the threshold for vehicles that are too heavy for a bridge is 10,000 kg instead of 5,000? Which will require less maintenance if you decide you now need 4 gradations of ranking on fuel economy, or if the average fuel economy on your vehicles changes?

&lt;strong&gt;Other Languages&lt;/strong&gt;

Only a few modern programming languages provide a preprocessor, but this doesn't mean that lack of macros makes enum encapsulation impossible. All languages that I know support some form of tabular data structure, and quite a few offer first-class tuples.

In Java, for example, you could write a static initializer block that builds a HashMap of attributes for each value in an enum. In Python, you could populate a dict indexed by string constants. The basics of the technique are replicable anywhere.

&lt;strong&gt;Pragmatism&lt;/strong&gt;

Of course, not every enum is worth handling in this careful and encapsulated way. If you have an enum that's got three items, and it will never change, and you have no interesting semantics to manage, and you're not converting it to and from strings, and the enum is only visible in a single module, then (to quote my friend Moray King), the juice is probably not worth the squeeze.

For the more critical enums in your codebase, however, I think a careful approach will pay big dividends.

&lt;strong&gt;Signs of Health&lt;/strong&gt;

You'll know you're handling enums right if it's difficult or impossible to add a new value to an enum without also specifying that value's attributes, and if you stop seeing tests for one or more enum values, scattered in conditionals all over the code. Statements like this:
&lt;p style="padding-left:30px;"&gt;&lt;code&gt;if (vehicle.vt == eVTTruck || vehicle.vt == eVTSemi)&lt;/code&gt;&lt;/p&gt;
or...
&lt;p style="padding-left:30px;"&gt;&lt;code&gt;switch (vehicle.vt)&lt;/code&gt;&lt;/p&gt;
... will be hidden in functions that capture (encapsulate) the semantic condition you really want to test. In fact, enum values themselves will only appear in places where an object's state is set directly; even in semantic wrappers, you'll often be testing a characteristic (like weight [mass], in our example) instead of actual enum values themselves. Certainly, all other code works off of semantics. When you add a new enum value, you only have to examine a handful of semantic functions to tease out ramifications, and your confidence in the tweak is high. Unit tests break in predictable and isolated ways, and the fixes become obvious.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Find one enum that's problematic in your code, and clean it up.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://blog.pdark.de/2012/10/08/enums-with-more-than-one-name/" target="_blank"&gt;Enums With More Than One Name&lt;/a&gt; (pdark.de)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://stackoverflow.com/questions/12878239/can-i-use-enums-when-i-declare-the-element-number-of-an-array" target="_blank"&gt;Can I use Enums when I declare the element number of an array?&lt;/a&gt; (stackoverflow.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://stackoverflow.com/questions/12967922/c-sharp-check-for-member-of-enum-using-input-value" target="_blank"&gt;C# check for member of enum using input value&lt;/a&gt; (stackoverflow.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>749</ns0:post_id>
  <ns0:post_date>2012-10-29 07:48:18</ns0:post_date>
  <ns0:post_name>how-enums-spread-disease-and-how-to-cure-it</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="antipatterns">antipatterns</category>
  <category domain="post_tag" nicename="declarative-programming">declarative programming</category>
  <category domain="post_tag" nicename="encapsulation">encapsulation</category>
  <category domain="post_tag" nicename="enums">enums</category>
  <category domain="post_tag" nicename="loose-coupling">loose coupling</category>
  <category domain="post_tag" nicename="macros">macros</category>
  <category domain="post_tag" nicename="maintenance">maintenance</category>
  <category domain="category" nicename="mistakes">Mistakes</category>
  <category domain="post_tag" nicename="preprocessor">preprocessor</category>
  <category domain="post_tag" nicename="semantics">semantics</category>
  <category domain="category" nicename="tips-and-tricks">Tips and Tricks</category>
  <category domain="post_tag" nicename="traffic">traffic</category>
  <category domain="post_tag" nicename="tuples">tuples</category>
  <category domain="post_tag" nicename="typhoid-mary">Typhoid Mary</category>
  <category domain="post_tag" nicename="vehicles">vehicles</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_twitter_user</ns0:meta_key>
    <ns0:meta_value>dhh1128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:7:"twitter";a:1:{i:10448672;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>242</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-10-29 09:32:04</ns0:comment_date>
    <ns0:comment_content>They say great minds think alike... :-)

Seriously, I'm bummed that we didn't get to work together longer. I can tell that we would have been good allies on lots of issues.</ns0:comment_content>
    <ns0:comment_parent>241</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>243</ns0:comment_id>
    <ns0:comment_author>Brian Saville</ns0:comment_author>
    <ns0:comment_author_email>bsaville@adaptivecomputing.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://savilliantech.blogspot.com</ns0:comment_author_url>
    <ns0:comment_date>2012-10-29 09:38:55</ns0:comment_date>
    <ns0:comment_content>I like the idea.  I think that the power of Java enums is not as widely known, and this merges very well with your macro concept.  Enums in Java behave a little like classes, you can even have private constructors and additional properties in the classes (unlike C# or other languages).  

We discovered this a couple of years ago and it is used quite extensively in some places in our code base.  I wish that more knew of the power of enums in Java honestly.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>244</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2012-10-29 09:53:56</ns0:comment_date>
    <ns0:comment_content>timing....it either voltage or timing.....that is what a good hardware debugger tech told when I was working with him....</ns0:comment_content>
    <ns0:comment_parent>242</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>245</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-10-29 09:58:39</ns0:comment_date>
    <ns0:comment_content>Yes, I agree that java enums are quite powerful. They allow you to encapsulate everything about an enum, including its semantics. We often pay the cost in poor code elsewhere, when we fail to take advantage of that power. So many java enum classes are just as rudimentary as their C ancestors...</ns0:comment_content>
    <ns0:comment_parent>243</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>241</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2012-10-29 08:24:21</ns0:comment_date>
    <ns0:comment_content>EXACTLY! Well put</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>250</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-10-30 07:38:53</ns0:comment_date>
    <ns0:comment_content>Nathan: That's a great insight--how enums force the question of type extensibility. I'd never thought of their ramifications that way. Thanks for chiming in.</ns0:comment_content>
    <ns0:comment_parent>249</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>249</ns0:comment_id>
    <ns0:comment_author>nwwells</ns0:comment_author>
    <ns0:comment_author_email>nwwells@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2012-10-30 06:03:37</ns0:comment_date>
    <ns0:comment_content>Enums have always been an interesting topic for me. I think they really force you to make important decisions about your domain, in terms of type extensibility. Great post.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>246</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2012-10-29 10:06:05</ns0:comment_date>
    <ns0:comment_content>one of descriptions that I use in describing the opposite of a "single point of implementation" encapsulation  is "distributed implementation of the same logic".  And the use of the term "Typoid Mary" is a beautiful description of the consequences of that.</ns0:comment_content>
    <ns0:comment_parent>242</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1089</ns0:comment_id>
    <ns0:comment_author>Good fences make good neighbors | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/05/15/good-fences-make-good-neighbors/</ns0:comment_author_url>
    <ns0:comment_date>2013-05-15 08:50:27</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] Use enums carefully. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>15013</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2015-04-15 14:12:47</ns0:comment_date>
    <ns0:comment_content>I appreciate the thoughtful comment, Antoine.

Although it's nice to assert that enums should only store state, most enums that I'm familiar with eventually get messier than that. They may start simple, but we programmers don't leave them that way. Take the state machine in a parser, for example (a place where "state" is surely the key interest.) Even there, there are logical relationships between the states that we need to represent somewhere in the code: which states are allowed to precede and follow which other states? which states represent recoverable versus unrecoverable error conditions? Etc. Even an enum points_of_the_compass {north, south, east, west} has interesting semantics such as the fact that it's legal to compose a new direction north+west or south+east, but not north+south--or the fact that north and south are special because they retain meaning at a pole, whereas east and west do not. About the only "pure" enum that I'm sure would meet your criteria would be boolean {true, false}.

Your comment about OOP is insightful. It is true that the VehicleTypeTuple struct is not full-blown OOP, and that it could be. However, it would be read-only OOP, since all of the attributes (semantics) we're declaring for a vehicle type are known at compile-time and are thus constant for the life of the application. This means we never need setters, and we never need more than one instance of each tuple. To me, it felt like managing that data as POD instead of objects made more sense, but I guess that's more of a stylistic choice.</ns0:comment_content>
    <ns0:comment_parent>15009</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>9585494701</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1429128767</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>15012</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2015-04-15 13:59:02</ns0:comment_date>
    <ns0:comment_content>Thanks for the thoughtful response!

Whether or not the set of items in an enum is well bounded is interesting, and I agree with you that making bad choices about what to model as an enum can have negative consequences. However, I think some of your examples are just as fuzzy as mine. When I studied linguistics I learned that some languages recognize only 3 or 4 colors. We may be used to the ROYGBIV set, but artists and interior designers would probably want many more items in their color enum. Classification is a very deep topic that is far more subjective than most people think. Even the set of species in the genus "homo" changes as scientists debate whether homo heidelbergensis and homo sapiens rhodesiensis are really separate species.

Days of the week and months of the year are a bit crisper, though of course different calendars slice and dice time differently.

But let's set that issue aside for a moment and say we settle on simple, stable enums, and they never prove to be controversial. Fine. We still have the problem of how/where additional semantics for each item in the enum are expressed in code. Take color again. How do we decide if a color is "warm" or "cool"? How do we decide which colors are complimentary? How do we map the colors to traffic signal meanings? How do we know which colors are most likely to be problematic for different kinds of color blindness, or which colors carry which connotations in different cultures (black=mourning in many western cultures, but white=mourning in Asia)?

You might claim that really *good* enums are never like this; if the enum is ever used for something other than a totally opaque numeric constant, it's a bad example. Again, I don't buy it. Take the state machine in a TCP/IP stack. I guarantee that implementations of network protocols have switch statements that clump certain states together--they treat FIN and CLOSE the same way under certain conditions, for example. What this means is that these enumerated states have some common semantic meaning that the code needs to address. 

Of course, a particular codebase may not need lots of rich semantics for its enums, but what I'm claiming is that usually, it needs one or two. They grow like weeds, without any management. And the typical way to address this need, in all the languages I know, is to write helper functions (or, far worse, random blocks of code sprinkled everywhere) that switch based on members of the enum. This is true almost independent of how simple and stable your enum is. There is no place where you can gather all the semantics together and edit them as a single unit. If you want to add a new semantic dimension to your enum, or adjust how an existing semantic dimension works, you have to hunt through the code and analyze semantics from scratch, with every edit. Good unit tests help, but they catch the symptom, not the kernel of the problem.

The *real* problem is that we don't acknowledge all the meaning that attaches to our enums, and we make no effort to encapsulate that meaning.</ns0:comment_content>
    <ns0:comment_parent>15011</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>9585061402</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1429127942</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>15021</ns0:comment_id>
    <ns0:comment_author>crystal_traveler</ns0:comment_author>
    <ns0:comment_author_email>14mnkq+9vsjgu0t6v01k@sharklasers.com</ns0:comment_author_email>
    <ns0:comment_date>2015-04-16 01:50:13</ns0:comment_date>
    <ns0:comment_content>Nice article. Advice seems more general than enum usage and reminds me more of overuse of special cases. Reminds me of  Rule 5 of Rob Pike's 5 rules (http://users.ece.utexas.edu/~adnan/pike.html):

"write stupid code that uses smart objects"

I haven't written code with lots of special cases like this in years though I can imagine it's a bad habit many new programmers never eventually shake. Disclaimer: I'm not a Rob Pike fanboy, on the whole I think he is closed minded, dogmatic, and stuck in his ways.

BTW That C macro trick has no place in modern C++. You should be using templates meta-programming instead. There are ways to guarantee consistency between the Enum definitions and that data definition without needing a shared intermediate include file. Look into constexpr and static_assert().</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>9602820823</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1429170616</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>11913</ns0:comment_id>
    <ns0:comment_author>Variadic macros tricks | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/11/25/variadic-macros-tricks/</ns0:comment_author_url>
    <ns0:comment_date>2014-11-25 11:49:02</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] errors, laziness, or misunderstanding. I have previously blogged about how valuable this can be in eliminating encapuslation problems with enums, but I recently found another need for it. In my project to create a new programming language, I [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>15011</ns0:comment_id>
    <ns0:comment_author>J Henry</ns0:comment_author>
    <ns0:comment_author_email>j.henry@n-dexed.com</ns0:comment_author_email>
    <ns0:comment_date>2015-04-15 13:15:42</ns0:comment_date>
    <ns0:comment_content>The type of data you describe in your example is not appropriate for enumerations, as the type of vehicles in existence is not a finite list.  Enumerations are more appropriate for finite lists that change extremely rarely, if at all, and represent discreet pieces of information such as days in the week, months in the year, colors, types of mammals...you get the message.  

You would not create an enumeration with a value of 'Primate', because there are many different types of primates.  You could however create an enumeration that has a value of 'Homo Sapien' because that is a discreet classification.

Enumerations are a powerful way to build assumptions into your code that you want to enforce on other parties that are using your code.  When used incorrectly, like in your example, they serve as a way to shoot yourself in the foot.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>9583726577</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1429125345</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>15009</ns0:comment_id>
    <ns0:comment_author>Antoine Ménard (@Enthouan)</ns0:comment_author>
    <ns0:comment_author_email>Enthouan@twitter.example.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://twitter.com/Enthouan</ns0:comment_author_url>
    <ns0:comment_date>2015-04-15 12:19:52</ns0:comment_date>
    <ns0:comment_content>I guess the way to solve this disease is just to use Enum for what they are supposed to be used for. Which is storing a state, that's it.

This article really lacks of OOP concept. In the first example the enum is a property on the 'vehicule' object, it would be way better to add all the properties needed to that class instead of creating a weird 'VehicleTypeTuple' struct...</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>hc_post_as</ns0:meta_key>
      <ns0:meta_value>twitter</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>hc_avatar</ns0:meta_key>
      <ns0:meta_value>http://pbs.twimg.com/profile_images/556257302034927616/sPg1FFUa_normal.jpeg</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>hc_foreign_user_id</ns0:meta_key>
      <ns0:meta_value>6452932</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>9582022617</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1429121992</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>15056</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2015-04-18 10:39:22</ns0:comment_date>
    <ns0:comment_content>Thanks for the reference to Pike. I'd run across his rules years ago, then forgotten all about them. He puts some good wisdom into words.

Regarding the comment about macros and modern C++: I am curious. I don't consider myself a template black-belt, but I'm maybe a blue belt or brown belt. I can tell you what SFINAE is, anyway. Yet I'm not aware of a way to replicate this technique in any meaningful way without macros. Could you give me a hint what you are thinking?</ns0:comment_content>
    <ns0:comment_parent>15021</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>9689359649</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1429375162</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>10016</ns0:comment_id>
    <ns0:comment_author>A better way to put data in code | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/10/08/a-better-way-to-put-data-in-code/</ns0:comment_author_url>
    <ns0:comment_date>2014-10-08 13:55:07</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] If a compiler supported such code, it might read the attached .csv file, parse it using CSV rules, and create an array of structs where each struct instance is a tuple or row of data. The array would be indexed by ID, a value that the compiler would generate in the same way enum values are assigned. The end result would be an a static constant array, exactly as if I had hand-coded a manual translation of the data. Essentially, this is the technique I recommended when I wrote about how to avoid breaking encapsulation with enums. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>18118</ns0:comment_id>
    <ns0:comment_author>joao vasconcelos</ns0:comment_author>
    <ns0:comment_author_email>tuga2112@hotmail.com</ns0:comment_author_email>
    <ns0:comment_date>2017-05-30 05:29:10</ns0:comment_date>
    <ns0:comment_content>Good read, I was looking into other uses for enums in C# and stumbled on this post which made me rethink my design, although i am not sure i would follow the example in any language apart from .C because as far as im aware all other languages mentioned (including c++) allow a OO solution to be achieved   

I haven't touched C++ for a while but im pretty sure it supports interfaces, as well as the dreaded multiple inheritance (which i personally enjoy having at my disposal although never found the need for it). 

with an IVehicle interface. you can then create your 
"Car : IVehicle" 
bool IsLowerThan(int heightInCentimeters);

and do somthing like 
IVehicle car = new Car(400);

on the usage file you invert the responcibility and do 

bool Bridge:CanVehiclePass(Ivehicle vehicle)
{
  return vehicle.IsLowerThan(_heigh);
}</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>5590217748</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1496143753</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>18126</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2017-05-30 21:03:37</ns0:comment_date>
    <ns0:comment_content>Good point about solving this problem with interfaces, João. It can totally be done that way, and sometimes that is the better answer.</ns0:comment_content>
    <ns0:comment_parent>18118</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1496199820</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>5615033300</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
</item>
<item>
  <title>Tech Debt, Leverage, and Grandma's Envelope</title>
  <link>http://codecraft.co/2012/10/30/tech-debt-leverage-and-grandmas-envelope/</link>
  <pubDate>Tue, 30 Oct 2012 14:30:51 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=782</guid>
  <ns2:encoded>In my previous posts about tech debt, I focused on &lt;a title="Coping With Organizational Alzheimers" href="/2012/10/12/coping-with-organizational-alzheimers/"&gt;how we can help organizations remember their debts&lt;/a&gt;, and on understanding &lt;a title="Paying Off Technical Debt" href="/2012/10/14/paying-off-technical-debt/"&gt;how tech debts are funded and paid back&lt;/a&gt;.

[caption id="attachment_965" align="alignright" width="300"]&lt;a href="http://www.flickr.com/photos/foei/9530111/"&gt;&lt;img class="size-full wp-image-965" alt="Photo credit: Friends of the Earth International (Flickr)" src="http://codecraft.co/wp-content/uploads/2012/10/screen-shot-2013-02-01-at-8-20-20-am.png" width="300" height="222" /&gt;&lt;/a&gt; Photo credit: Friends of the Earth International (Flickr)[/caption]

These topics hit a raw nerve with coders and testers. Those in the trenches often feel very keenly the cost of doing things in a messy way, and it's common for them to worry that others don't "get it."

They're not wrong to worry.

However, today I'd like to put on my executive hat and discuss tech debt from a perspective that code jockeys sometimes miss, because blindness is not just an executive disease.

&lt;strong&gt;Debt as Leverage&lt;/strong&gt;

When you hear the word "leverage" in business circles, people are talking about debt: a "highly-leveraged" firm is one financing large portions of its strategy through debt; "leveraged buyouts" are transactions where the buyers borrow vast sums of money from a risk-taking lender to take a company private.

Technogeeks (like me): business people are not dumb. Why did they settle on this metaphor of debt as leverage?

The answer is that debt can allow a company to concentrate enough capital in a short enough timeframe to make high-impact strategic moves that would otherwise be impossible. It's an enabler and multiplier.

[caption id="" align="aligncenter" width="444"]&lt;a href="http://xkcd.com/857/"&gt;&lt;img alt="" src="http://imgs.xkcd.com/comics/archimedes.png" width="444" height="285" /&gt;&lt;/a&gt; Another take on leverage. Image credit: xkcd.[/caption]

Debt is a fundamental machine in the business toolkit, just as levers are a fundamental machine for mechanical engineers. Almost all businesses use debt to some extent. If a CEO can borrow capital at 9% and produce 12% ROI with it, and &lt;!--more--&gt;if the risk implied by that gap is low enough, then not borrowing would be a violation of his &lt;a class="zem_slink" title="Fiduciary" href="http://en.wikipedia.org/wiki/Fiduciary" target="_blank" rel="wikipedia"&gt;fiduciary responsibility&lt;/a&gt; to stockholders. In fact, I'd go so far as to say that capitalism is somewhat founded on the notion that debt allows money to flow to its most efficient use.

Don't get me wrong. I detest personal debt.  I think recent financial excesses, and the ensuing mess as we were forced to confront arbitrage and Wall Street shenanigans, are deplorable. I think most first-world countries are neck-deep in debt and are thus setting themselves up for hard times for many years to come.

I'm just saying that debt, like any other tool, has legitimate (and intelligent) uses, and it's not going away.

Now, think about "tech debt" from this perspective for a minute.

Yes, the tech debt is ugly. We hate the way it complicates our designs, slows our velocity, compromises our future.

But what have we been able to buy with our loan?

If the answer is "nothing worthwhile," then shame on executives. But if the answer is "we kept the company alive and entered a key market or landed a lighthouse customer," then maybe it was the right move.

Of course, just because it was smart to buy on credit doesn't mean you should make minimum payments forever. And just because the lender isn't pounding on your door doesn't mean your payment isn't due.

&lt;strong&gt;Another Moral&lt;/strong&gt;

I can remember my grandmother whistling in the kitchen as she sealed an envelope and put a stamp on it.

[caption id="" align="alignleft" width="240"]&lt;a href="http://www.flickr.com/photos/haggismac/4984697380/"&gt;&lt;img alt="" src="http://farm5.staticflickr.com/4088/4984697380_29b76f123f_m.jpg" width="240" height="161" /&gt;&lt;/a&gt; Image credit: Sean Loyless (Flickr)[/caption]

"What are you mailing?" I asked.

"My mortgage payment," she said with a smile. "The last one." (&lt;em&gt;I &lt;/em&gt;think&lt;em&gt; it was the last; maybe she was still a few months away but could see the finish line. Anyway...&lt;/em&gt;)

That moment came after years of patient, disciplined effort on Grandma's part. It did not come in a single, giant payback.

Technogeeks: here is another blindness that we sometimes suffer from. We think that if we push hard enough and make enough noise, we'll convince someone to pay back a tech debt in one grand gesture.

Grandma didn't have that kind of money, and neither do most of the companies we work for.

Thus, two words must get imprinted on our hearts and minds: &lt;em&gt;discipline&lt;/em&gt; and &lt;em&gt;patience&lt;/em&gt;.

&lt;strong&gt;Circle of Concern, Circle of Control&lt;/strong&gt;

This is something &lt;em&gt;you&lt;/em&gt; can control. Yes, you. You may not have a manager or executives that totally agree with you about how painful your tech debts are. You may not have veto power on the dev budget. You may not sit in strategic board meetings.

But you can get in the habit of mailing a check every month. Even the worst spiky-haired boss probably can't stop you.

Read &lt;em&gt;Refactoring&lt;/em&gt; (Martin Fowler). Ponder.

Next time you're fixing a bug, take an extra 5 minutes to document the function better. Then make that practice a habit.

In the spirit of &lt;a href="/2012/09/25/six-learning-tips-for-tech-folks/"&gt;my post about teaching to accelerate your own learning&lt;/a&gt;, talk about what you're doing, and why. I remembered Grandma's comment for 35 years; you'll make an impression on others.

Don't accept anyone's claim that they don't have time to do things right, without a gentle and &lt;a title="Humility" href="/2012/10/01/humility/"&gt;humble&lt;/a&gt; push-back. (As Seth Godin says: &lt;a href="http://sethgodin.typepad.com/seths_blog/2012/09/doing-it-in-a-hurry-almost-always-takes-longer.html" target="_blank"&gt;haraka haraka, haina baraka&lt;/a&gt;.)

Next time a behavior of the code puzzles you, write a unit test to understand it.

Next time you hear yourself complaining about how hard it is to install the product, assign yourself to spend half a lunch break improving a smart default.

&lt;strong&gt;One Last Insight&lt;/strong&gt;

You may be saying: "That's all well and good, but it's a drop in the bucket compared to the massive problem we have with &lt;em&gt;X&lt;/em&gt;."

Even if that's true, I guarantee that at least half of the massive problem you have with &lt;em&gt;X&lt;/em&gt; is one of attitude. You'll never solve it if you can't &lt;a title="Roland Whatcott: Manage momentum." href="/2012/09/21/roland-whatcott-manage-momentum/"&gt;generate some momentum&lt;/a&gt; and optimism for the future. Give yourself a reason to believe things can get better, and watch how much more tractable your tech debt becomes.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Identify a low-cost, high-impact habit that will raise your spirits and your team's vision with regard to tech debt, and ingrain that habit in your own day-to-day work.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>782</ns0:post_id>
  <ns0:post_date>2012-10-30 08:30:51</ns0:post_date>
  <ns0:post_name>tech-debt-leverage-and-grandmas-envelope</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="attitude">attitude</category>
  <category domain="post_tag" nicename="blindness">blindness</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="discipline">discipline</category>
  <category domain="post_tag" nicename="finance">finance</category>
  <category domain="post_tag" nicename="habit">habit</category>
  <category domain="post_tag" nicename="leverage">leverage</category>
  <category domain="post_tag" nicename="metaphor">metaphor</category>
  <category domain="post_tag" nicename="patience">patience</category>
  <category domain="post_tag" nicename="refactoring">refactoring</category>
  <category domain="post_tag" nicename="tech-debt">tech debt</category>
  <category domain="post_tag" nicename="velocity">velocity</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_twitter_user</ns0:meta_key>
    <ns0:meta_value>dhh1128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>389</ns0:comment_id>
    <ns0:comment_author>Learned Helplessness, Rats, and People Power &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2012/11/26/learned-helplessness-rats-and-people-power/</ns0:comment_author_url>
    <ns0:comment_date>2012-11-26 08:40:03</ns0:comment_date>
    <ns0:comment_content>[...] previously written about my Grandma paying off her mortgage after many years of diligent effort. This was the harvest of a good habit, applied [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>253</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2012-10-30 11:03:22</ns0:comment_date>
    <ns0:comment_content>great solution to the inheirtance of tech-debt, here and there an improvement. Hopefully it won't be passed on to the next generation (like our feds are doing to my grandchildren). Then share (help/encourge)  the effort with others and over time, there is improvement.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>254</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-10-30 11:06:01</ns0:comment_date>
    <ns0:comment_content>I saw you doing exactly this -- modeling good habits and trying to inspire your peers. Although you may not have made as much progress as you wanted, there is no doubt in my mind that you left things much better off than they would have been without that discipline. Thanks!</ns0:comment_content>
    <ns0:comment_parent>253</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1013</ns0:comment_id>
    <ns0:comment_author>My First Tangle With the Tower of Babel | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/04/26/my-first-tangle-with-the-tower-of-babel/</ns0:comment_author_url>
    <ns0:comment_date>2013-04-26 08:48:24</ns0:comment_date>
    <ns0:comment_content>[...] or prevent them, and is the juice worth the squeeze? Can a language be immune to certain kinds of tech debt, by [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16582</ns0:comment_id>
    <ns0:comment_author>On Forests and Trees | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/09/02/on-forests-and-trees/</ns0:comment_author_url>
    <ns0:comment_date>2015-09-02 08:48:58</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] reason we don&amp;#8217;t generalize is because we are being crushed by tech debt. We feel like we can&amp;#8217;t afford it. This is a very real problem, but it is solvable&amp;#8211;or at [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>// Comments on Comments</title>
  <link>http://codecraft.co/2012/10/31/comments-on-comments/</link>
  <pubDate>Wed, 31 Oct 2012 14:18:20 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=787</guid>
  <ns2:encoded>/*

We spend little or no time teaching programmers how to write good comments.

This is surprising, when you consider how often "total lack of comments" or "poor comments" are cited as evidence that certain modules (or the programmer who wrote them) are the worst thing that ever happened to the technoverse.

[caption id="" align="aligncenter" width="500"]&lt;a href="http://xkcd.com/156/"&gt;&lt;img alt="" src="http://imgs.xkcd.com/comics/commented.png" height="135" width="500" /&gt;&lt;/a&gt; Comments shouldn't leave you--or anybody else--mystified. :-) Image credit: xkcd[/caption]

I happen to think that there are much yuckier tech things than poor or missing comments in code. But I still think our general level of comment proficiency is lower than it should be.

Here is my attempt to raise the bar a little.

&lt;strong&gt;Why We Comment&lt;/strong&gt;

Sooner or later, most interesting programming problems require a sophisticated mental model of a problem. Building these models is hard work, and once we have them, &lt;em&gt;we are paid to share with our team (or our future selves)&lt;/em&gt;.

The best way to share mental models with other engineers is&lt;!--more--&gt; to &lt;a title="Good Code Is Named Right" href="/2012/08/28/good-code-is-named-right/" target="_blank"&gt;code with names and syntax that make our meaning crystal clear&lt;/a&gt;. But formal expressions often lack the semantic richness, the subtlety, and the scope that we need for full knowledge transfer. So we comment to make sure the sharing succeeds.

It's critical that programmers get this.

Shared mental models make complex software possible. Shared mental models, not lines of code, not patents, are the most valuable embodiment of a company's IP and technical assets. (More about this in another post.)

A programmer that leaves critical knowledge unshared is seriously derelict in her or his duty, no matter how well the code works. I've quoted &lt;a class="zem_slink" title="Martin Fowler" href="http://martinfowler.com/" target="_blank" rel="homepage"&gt;Martin Fowler&lt;/a&gt; on this point before, but I'll do it again, because he's so, so right:
&lt;blockquote&gt;“Any fool can write code that a computer can understand. Good programmers write code that humans can understand.”&lt;/blockquote&gt;
Some of the more &lt;a href="http://stackoverflow.com/questions/184618/what-is-the-best-comment-in-source-code-you-have-ever-encountered" target="_blank"&gt;hilarious comments&lt;/a&gt; I've ever read are connected with moments when this principle goes out the window. (Go to the bathroom before you read this collection, so you don't wet your pants laughing.)

[caption id="" align="aligncenter" width="400"]&lt;a href="http://xkcd.com/221/"&gt;&lt;img alt="" src="http://imgs.xkcd.com/comics/random_number.png" height="144" width="400" /&gt;&lt;/a&gt; No amount of commenting makes up for a silly algorithm. But you might give another programmer a good chuckle. Image credit: xkcd[/caption]

&lt;strong&gt;How to Write "Good" Comments&lt;/strong&gt;

Seriously, make a habit of asking yourself: "What must I explain, that I can't easily say in code, that instills a healthy mental model of this class/module/function/app?" You can't go far wrong it that's your point of departure.

You'll find yourself naturally aligning with guidelines like this:
&lt;p style="padding-left:30px;"&gt;&lt;strong&gt;Good comments supplement, never replace, what can be said with code.&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:60px;"&gt;Instead of commenting that something is an "IN" parameter, make it const. Instead of commenting that a parameter should never be null, make it a reference or add a precondition. Instead of commenting the semantics of a variable, give it a name that make its semantics clear. Tools will then enforce what you say, and guarantee that it remains accurate.&lt;/p&gt;
&lt;p style="padding-left:60px;"&gt;When you have conveyed as much as you can with pure code--and only then--any important aspects of your mental model that don't come across go into comments.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;strong&gt;Good comments explain the subtle and important, not the obvious or irrelevant.&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:60px;"&gt;The comments of great coders tend to focus on why a particular tradeoff was chosen, what ramifications might surprise the next guy, or where a hidden dependency lurks. Those who follow gain expertise with less battle scars--or else they diagnose old mistakes with greater confidence.&lt;/p&gt;
&lt;p style="padding-left:60px;"&gt;Because good comments avoid trivia, they tend to remain accurate. Others appreciate their value and buy in to their upkeep. This becomes a way to reinforce effective communication and best practices for an entire team.&lt;/p&gt;
&lt;p style="padding-left:60px;"&gt;When comments become inaccurate, it is usually an indictment of their relevance, not of sloppy maintainers. Consider the mandated comments in "&lt;a title="How to turn coding standards into epic fails — or not" href="/2012/09/27/coding-standards/"&gt;How to turn coding standards into epic fails — or not&lt;/a&gt;."&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;strong&gt;Good comments are concise.&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:60px;"&gt;Conscious of their supporting, not starring role, good comments read quickly and get out of the way. (Compare Yegge's silly counter-example in "&lt;a title="example of ridiculously verbose comment" href="http://steve-yegge.blogspot.com/2008/02/portrait-of-n00b.html" target="_blank"&gt;Portrait of a N00b&lt;/a&gt;".) Rather than recapitulating an entire RFC, good comments use a hyperlink. They use formats friendly to the IDEs of the team, so you can collapse them as needed. They avoid repetition as much as possible.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;strong&gt;Comments shouldn't be used to disable code blocks.&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:60px;"&gt;Disabling code is worse than just a departure from the purpose of comments--it's actually a contradiction. When you disable a block of code, you tend to make it harder to understand, because the natural reaction of the next coder will be to wonder why the code is still there at all. And you have to write a (... wait for it ...) comment to explain yourself.&lt;/p&gt;
&lt;p style="padding-left:60px;"&gt;Commented-out blocks rarely get maintained or re-enabled. They clutter and obscure.&lt;/p&gt;
&lt;p style="padding-left:60px;"&gt;We have VCS technology, folks. Unless the disabling is very temporary, if you don't want the code to run, &lt;em&gt;delete it&lt;/em&gt;. Or if you must retain it for post-mortem purposes, use an #ifdef. Or put it in an inert file and point people there.&lt;/p&gt;
&lt;strong&gt;What About  Javadoc, Doxygen, $Id, and // TODO?&lt;/strong&gt;

To make automated tools happy, we may be pressured to compromise a bit on the principles I've just offered. Some tools that process code comments complain unless you document every parameter, every return value, every possible exception. IDEs support snippet insertion to facilitate this, which leads to lots of boilerplate comments that have low value. The snippets make warnings go away, which encourages developers to be lazy.

I don't believe in generating documentation outside the code for internal developers, as a general rule. Developers are code-centric. I have never met a single developer that read external documentation on their own codebase (except overviews when they're first learning), but I have met many who think hard about comments left by co-workers. My conclusion is that comments intended only for an internal audience should be prejudiced toward consumption in your team's code editors, not prejudiced toward the needs of external views.

I would accept compromises to comment quality IFF there's an important audience for your functions outside your own internal dev team (e.g., you're writing an SDK), and your tools cannot be made happy with human-driven choices about comments.

*/
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Make thoughtful improvements to one function where you know it's hard for others to build a complete and accurate mental model.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://developers.slashdot.org/story/12/09/07/1241254/comments-on-code-comments" target="_blank"&gt;Comments On Code Comments?&lt;/a&gt; (developers.slashdot.org)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.bitnative.com/2012/10/22/kill-the-zombies-in-your-code/" target="_blank"&gt;Kill the Zombies in Your Code&lt;/a&gt; (bitnative.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>787</ns0:post_id>
  <ns0:post_date>2012-10-31 08:18:20</ns0:post_date>
  <ns0:post_name>comments-on-comments</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="comments">comments</category>
  <category domain="post_tag" nicename="communication">communication</category>
  <category domain="post_tag" nicename="doxygen">doxygen</category>
  <category domain="post_tag" nicename="guidelines">guidelines</category>
  <category domain="post_tag" nicename="ide">IDE</category>
  <category domain="post_tag" nicename="javadoc">javadoc</category>
  <category domain="post_tag" nicename="learning">learning</category>
  <category domain="post_tag" nicename="mental-models">mental models</category>
  <category domain="post_tag" nicename="preconditions">preconditions</category>
  <category domain="post_tag" nicename="semantics">semantics</category>
  <category domain="post_tag" nicename="standards">standards</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:3:{s:7:"twitter";a:1:{i:1511181;i:32;}s:2:"fb";a:1:{i:1511184;i:273;}s:2:"wp";a:1:{i:0;i:21;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_twitter_user</ns0:meta_key>
    <ns0:meta_value>dhh1128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>twitter_cards_summary_img_size</ns0:meta_key>
    <ns0:meta_value>a:6:{i:0;i:700;i:1;i:189;i:2;i:3;i:3;s:24:"width="700" height="189"";s:4:"bits";i:8;s:4:"mime";s:9:"image/png";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>336</ns0:comment_id>
    <ns0:comment_author>All I Really Need To Know I Didn&amp;#8217;t Learn In Compugarten &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2012/11/15/all-i-really-need-to-know-i-didnt-learn-in-compugarten/</ns0:comment_author_url>
    <ns0:comment_date>2012-11-15 08:32:55</ns0:comment_date>
    <ns0:comment_content>[...] Effective commenting. [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>264</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-10-31 15:05:30</ns0:comment_date>
    <ns0:comment_content>I don't think it's a coincidence that people who care about comments usually have battlescars... :-)</ns0:comment_content>
    <ns0:comment_parent>263</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>263</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2012-10-31 14:32:43</ns0:comment_date>
    <ns0:comment_content>Fowler's statement is my motto (separately generated) as well. My first 10  or so years were spent in maintainingsomeone else's code, trying to find a bug in a sea of statements.  Even a tidbit of comment to describe the WHAT the code was trying to do, would save much time "decoding" the HOW of the code back into the WHAT was intended, in order to find "the bug" of the bughunt.

Since code spends the majority of its "life cycle" in the maintenance phase, I found that trying to INFORM/TELL the maintainer of the code WHAT I intended at the time of writing new code to be at least as important trying to tell the computer what I wanted. I have sought to do that ever since.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>999</ns0:comment_id>
    <ns0:comment_author>How to turn coding standards into epic fails &amp;#8212; or not | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2012/09/27/coding-standards/</ns0:comment_author_url>
    <ns0:comment_date>2013-04-18 17:33:45</ns0:comment_date>
    <ns0:comment_content>[...] Comment what can&amp;#8217;t be made obvious. (Example where comment might be helpful: subtle precondition or postcondition on a function. Value: high. Cost: low.) [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>878</ns0:comment_id>
    <ns0:comment_author>Small Files Are Your Friends | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/03/21/small-files-are-your-friends/</ns0:comment_author_url>
    <ns0:comment_date>2013-03-21 08:55:51</ns0:comment_date>
    <ns0:comment_content>[...] I find it telling that codebases with big files are also codebases where people lament the lack of comments the most, for example. Over the years, I&amp;#8217;ve become convinced that a simple rule of thumb [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>899</ns0:comment_id>
    <ns0:comment_author>Virgil Ellsworth</ns0:comment_author>
    <ns0:comment_author_email>virgilellsworth@googlemail.com</ns0:comment_author_email>
    <ns0:comment_date>2013-03-24 06:11:34</ns0:comment_date>
    <ns0:comment_content>Wow, incredible blog! How long have you ever been blogging for?</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2536</ns0:comment_id>
    <ns0:comment_author>When good comments mean bad language | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/08/22/when-good-comments-mean-bad-language/</ns0:comment_author_url>
    <ns0:comment_date>2013-08-22 08:57:27</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] years, I&amp;#8217;ve urged developers to write better comments. I still claim that&amp;#8217;s a good idea (a very good one), but as I&amp;#8217;ve pondered what a better [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2987</ns0:comment_id>
    <ns0:comment_author>Add some more extra redundancy again | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/01/15/add-some-more-extra-redundancy-again/</ns0:comment_author_url>
    <ns0:comment_date>2014-01-15 08:39:16</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] create redundancy that&amp;#8217;s difficult to understand and maintain. Foolish coding standards and dumb comments are notorious for creating busywork this [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2576</ns0:comment_id>
    <ns0:comment_author>Petra</ns0:comment_author>
    <ns0:comment_author_email>petramoffett@googlemail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://gretchennvp.wetpaint.com</ns0:comment_author_url>
    <ns0:comment_date>2013-08-30 15:26:49</ns0:comment_date>
    <ns0:comment_content>Hello, I do believe your website could possibly be having internet browser compatibility issues.
When I take a look at your website in Safari, it looks fine but when opening in I.E., 
it has some overlapping issues. I just wanted to give you a quick 
heads up! Apart from that, fantastic website!</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2425</ns0:comment_id>
    <ns0:comment_author>Carmon</ns0:comment_author>
    <ns0:comment_author_email>carmon.grenier@web.de</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.irishdebs.ie</ns0:comment_author_url>
    <ns0:comment_date>2013-07-25 04:55:52</ns0:comment_date>
    <ns0:comment_content>Please let me know if you're looking for a article writer for your blog. You have some really good posts and I feel I would be a good asset. If you ever want to take some of the load off, I'd absolutely love to write some content 
for your blog in exchange for a link back to mine. Please blast 
me an email if interested. Many thanks!</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14329</ns0:comment_id>
    <ns0:comment_author>&amp;#8220;Rockstar Developers&amp;#8221; are a dangerous myth | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/03/04/rockstars/</ns0:comment_author_url>
    <ns0:comment_date>2015-03-05 20:15:42</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] How can there be a version 2.0 if there&amp;#8217;s nobody who understands the groundbreaking ideas in 1.0? A big part of creating lasting value is communicating so others can appreciate and build upon your work. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16575</ns0:comment_id>
    <ns0:comment_author>On Forests and Trees | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/09/02/on-forests-and-trees/</ns0:comment_author_url>
    <ns0:comment_date>2015-09-02 08:48:46</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] was totally obscured and would never have been caught by a casual maintainer. It hadn&amp;#8217;t been commented as a weirdness, [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>6623</ns0:comment_id>
    <ns0:comment_author>Lacunas Everywhere | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/16/lacunas-everywhere/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-16 13:58:39</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] write comments that look like [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>6839</ns0:comment_id>
    <ns0:comment_author>Thoughts On Bridging the &amp;#8220;Lacuna Humana&amp;#8221; | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/21/bridging-the-lacuna-humana/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-21 08:49:28</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] first written, and they tend to become more so over time, to the point where they actually create unnecessary confusion. They are not mandatory (except by human fiat, which is usually ignored), and everybody&amp;#8217;s [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Big Data In Motion</title>
  <link>http://codecraft.co/2012/11/07/big-data-in-motion/</link>
  <pubDate>Wed, 07 Nov 2012 18:24:25 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=816</guid>
  <ns2:encoded>I've been at Cloud Expo this week, listening to lots of industry hoopla about building cloud-centric apps, managing clouds, purchasing hardware for clouds, buying private clouds from public cloud providers, and so forth.

[caption id="" align="aligncenter" width="500"]&lt;a href="http://www.flickr.com/photos/islandgal/5247181522/"&gt;&lt;img alt="" src="http://farm6.staticflickr.com/5283/5247181522_d9884b37ac.jpg" height="332" width="500" /&gt;&lt;/a&gt; Photo credit: aquababe (Flickr)[/caption]

One interesting decision made by the organizers of the conference was to bring "&lt;a class="zem_slink" title="Big data" href="http://en.wikipedia.org/wiki/Big_data" target="_blank" rel="wikipedia"&gt;big data&lt;/a&gt;" under the same conference umbrella. There's a whole track here about big data, and it gets mentioned in almost every presentation.

And I've sensed a shift in the wind.

Years and months ago, "big data" was all about mining assets in a &lt;a class="zem_slink" title="Data warehouse" href="http://en.wikipedia.org/wiki/Data_warehouse" target="_blank" rel="wikipedia"&gt;data warehouse&lt;/a&gt;. You accumulated your big data over time. It sat in a big archive, and you planned to analyze it. You spun up hadoop or used some other &lt;a class="zem_slink" title="MapReduce" href="http://en.wikipedia.org/wiki/MapReduce" target="_blank" rel="wikipedia"&gt;map-reduce&lt;/a&gt;-style tool to crunch for days or weeks until you achieved some analytical goal.

What I'm hearing now is an acknowledgement that an important use case for big data--perhaps &lt;em&gt;the most&lt;/em&gt; important use case--has little to do with data at rest. Instead, it recognizes that you'll never have time to go back and sift through a vast archive; you have to notice trends by analyzing data as it streams past and disappears into the bit bucket. The data is still big, but the bigness has more to do with volume/throughput, and less to do with cumulative size.

This has interesting implications. Algorithms that were written on the assumption that you can corral the data set under analysis need to be replaced by ones based on &lt;a class="zem_slink" title="Sampling (statistics)" href="http://en.wikipedia.org/wiki/Sampling_%28statistics%29" target="_blank" rel="wikipedia"&gt;statistical sampling&lt;/a&gt;; exactness needs to give way to fuzziness.

Interestingly, I think this will make computer-driven data analysis much more similar to the way humans process information. As I've said elsewhere, when faced with a difficult design problem, a smart question to ask is: &lt;em&gt;how does Mother Nature solve it?&lt;/em&gt;
&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.forbes.com/sites/tomtaulli/2012/11/06/more-data-more-dollars/" target="_blank"&gt;More Data, More Dollars?&lt;/a&gt; (forbes.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://go.theregister.com/feed/www.theregister.co.uk/2012/11/07/big_data_analytics/" target="_blank"&gt;Big Data and analytics: Reg survey crunches the numbers&lt;/a&gt; (go.theregister.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.siliconrepublic.com/strategy/item/29971-humanising-big-data-infogr" target="_blank"&gt;Humanising big data (infographic)&lt;/a&gt; (siliconrepublic.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://arnoldit.com/wordpress/2012/11/07/polyspot-delivers-insights-and-information-from-raw-data/" target="_blank"&gt;&lt;a href="http://betabeat.com/2012/11/nate-silver-predicton-sweep-presidential-election-huge-win-big-data/" target="_blank"&gt;Nate Silver's Sweep Is a Huge Win for Big Data&lt;/a&gt; (betabeat.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>816</ns0:post_id>
  <ns0:post_date>2012-11-07 11:24:25</ns0:post_date>
  <ns0:post_name>big-data-in-motion</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="algorithms">algorithms</category>
  <category domain="post_tag" nicename="analytics">analytics</category>
  <category domain="post_tag" nicename="big-data">big data</category>
  <category domain="post_tag" nicename="cloud-expo">cloud expo</category>
  <category domain="post_tag" nicename="conferences">conferences</category>
  <category domain="post_tag" nicename="data-mining">data mining</category>
  <category domain="post_tag" nicename="data-warehousing">data warehousing</category>
  <category domain="post_tag" nicename="design">design</category>
  <category domain="post_tag" nicename="hadoop">hadoop</category>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <category domain="post_tag" nicename="learning">learning</category>
  <category domain="post_tag" nicename="map-reduce">map-reduce</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:60:"http://farm6.staticflickr.com/5283/5247181522_d9884b37ac.jpg";s:6:"images";a:1:{s:60:"http://farm6.staticflickr.com/5283/5247181522_d9884b37ac.jpg";a:6:{s:8:"file_url";s:60:"http://farm6.staticflickr.com/5283/5247181522_d9884b37ac.jpg";s:5:"width";i:500;s:6:"height";i:332;s:4:"type";s:5:"image";s:4:"area";i:166000;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-11-07 18:24:25";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_twitter_user</ns0:meta_key>
    <ns0:meta_value>dhh1128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:3:{s:7:"twitter";a:1:{i:1511181;i:38;}s:2:"fb";a:1:{i:1511184;i:274;}s:2:"wp";a:1:{i:0;i:22;}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Metrics, Plumb Lines, and System Thinking</title>
  <link>http://codecraft.co/2012/11/12/measurements-plumb-lines-and-system-thinking/</link>
  <pubDate>Mon, 12 Nov 2012 15:30:41 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=820</guid>
  <ns2:encoded>Friday morning I was at a seminar taught by &lt;a href="www.linkedin.com/in/jhtaylorjason" target="_blank"&gt;Jason Taylor&lt;/a&gt;, CTO at &lt;a href="http://www.allegiance.com" target="_blank"&gt;Allegiance&lt;/a&gt;. We were discussing how dev team &lt;a href="http://en.wikipedia.org/wiki/Velocity_(software_development)"&gt;velocity&lt;/a&gt; and product quality can compete for our attention; sometimes we trade one for the other. Jason mentioned that he's a fan of competing metrics, and some neurons connected in my brain.

[caption id="" align="alignright" width="213"]&lt;a href="http://www.flickr.com/photos/suttonhoo22/2600773685/"&gt;&lt;img alt="" src="http://farm4.staticflickr.com/3110/2600773685_8934c3327f_n.jpg" height="320" width="213" /&gt;&lt;/a&gt; Plumb line suspended from the center point of multiple balancing legs. Photo credit: suttonhoo (Flickr)[/caption]

I'm a big believer in measurement. As the old adage goes, you can't improve what you don't measure. Next time someone urges you to change a behavior, or tells you she's going to, ask what measurement of change is being proposed. If you get an unsatisfying answer, I predict you'll also get an unsatisfying outcome.

I'm also a big believer in balance, as I've written about before. &lt;a title="Good Code Is Balanced" href="http://codecraft.co/2012/08/27/good-code-is-balanced/" target="_blank"&gt;Good software balances many considerations&lt;/a&gt;.

Besides these existing predispositions, I'd recently read a &lt;a href="http://sethgodin.typepad.com/seths_blog/2012/11/avoiding-the-false-proxy-trap.html" target="_blank"&gt;blog post by Seth Godin&lt;/a&gt;, cautioning about the need to choose wisely what we measure. And I've been digesting &lt;em&gt;The Fifth Discipline&lt;/em&gt;, by Peter Senge, which advocates wholistic, &lt;a class="zem_slink" title="Systemics" href="http://en.wikipedia.org/wiki/Systemics" target="_blank" rel="wikipedia"&gt;systemic thinking&lt;/a&gt;, where we recognize interrelationships that go well beyond simplistic, direct cause-and-effect.

All of these mental ingredients &lt;!--more--&gt;crystallized when Jason made his comment about competing metrics.

I realized that when we have a system that's out of balance, and we pull a lever to correct, if we measure progress with a single-minded metric, we are setting ourselves up for skew, overcorrection, or puzzlement. I think I've made this mistake several times in my career. We have to measure each factor that contributes to an overall &lt;a class="zem_slink" title="System dynamics" href="http://en.wikipedia.org/wiki/System_dynamics" target="_blank" rel="wikipedia"&gt;system dynamic&lt;/a&gt; if we want to shift balance efficiently and avoid pendulum behavior.

If you can directly measure balanced alignment to an ideal (i.e., you have a single metric that takes all competing factors into account), then you have the best of all worlds. I believe this is why &lt;a title="Net Promoter" href="http://en.wikipedia.org/wiki/Net_Promoter" target="_blank" rel="wikipedia"&gt;net promoter score&lt;/a&gt; is so powerful. These types of measurements are least susceptible to the &lt;a href="http://keen-insights.com/?p=67" target="_blank"&gt;false proxy trap&lt;/a&gt; Godin warns about; we can't "game" the system. But in many cases, the best we can do is measure multiple contributing factors.

If your organization is stuck in a binary tradeoff between quality and velocity, then a simple competing metric pair will suffice. Measure how quickly your team adds features (e.g., with &lt;a href="http://scrummethodology.com/scrum-effort-estimation-and-story-points/" target="_blank"&gt;story points&lt;/a&gt;), and measure how much your quality suffers (e.g., with a variant of &lt;a href="http://www.isixsigma.com/methodology/metrics/exploring-defect-containment-metrics-agile/" target="_blank"&gt;containment rate&lt;/a&gt;), and you'll have a good idea whether you should keep pushing on one side of the scale or the other.

However, a lot of systems are more complex, and it may be helpful to think of metrics as &lt;em&gt;complementary&lt;/em&gt; rather than &lt;em&gt;competing&lt;/em&gt;. Think legs of a tripod (or teepee), with a plumb line in the center. Adjust any leg, and the plumb line shifts. If your org sometimes trades velocity for quality, but also sometimes releases pressure by adding resources or by reducing scope, then you need to be measuring more than just quality and velocity to have a realistic idea of what's happening. You also need to be measuring how often, and by how much, your scope changes, and how often, and by how much, you shift resources around.

In my younger years, I grumbled a few times about how feature creep impacts quality, without providing any useful metrics that made that tradeoff real to product management or executives. I've gradually learned to be better, but now I realize I still have room for improvement. I don't think I've ever measured how many story points get deferred when an emergency drags resources away, or how many story points get done on a 4-month release versus an 8-month release.

I'm going to paint more complete pictures with my metrics, and see where it gets me.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Think of a team problem where you'd like a different balance. How can you measure each factor that plays into the overall dynamics of the situation?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://managementhelp.org/systems/index.htm" target="_blank"&gt;Systems Thinking, Systems Tools and Chaos Theory&lt;/a&gt; (managementhelp.org)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.customerthink.com/blog/customer_metrics_measure_what_matters_most_to_customers" target="_blank"&gt;Customer Metrics: Measure what matters most to customers&lt;/a&gt; (customerthink.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://hbr.org/2010/06/column-you-are-what-you-measure/ar/1" target="_blank"&gt;You Are What You Measure&lt;/a&gt; (Harvard Business Review)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://iterativepath.wordpress.com/2012/11/10/single-metric-you-need-to-care-or-do-you/" target="_blank"&gt;Single metric you need to care - Or do you?&lt;/a&gt; (iterativepath.wordpress.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>820</ns0:post_id>
  <ns0:post_date>2012-11-12 08:30:41</ns0:post_date>
  <ns0:post_name>measurements-plumb-lines-and-system-thinking</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="alignment">alignment</category>
  <category domain="post_tag" nicename="balance">balance</category>
  <category domain="post_tag" nicename="containment-rate">containment rate</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="measurement">measurement</category>
  <category domain="post_tag" nicename="metrics">metrics</category>
  <category domain="post_tag" nicename="net-promoter">net promoter</category>
  <category domain="post_tag" nicename="nps">nps</category>
  <category domain="post_tag" nicename="overcorrection">overcorrection</category>
  <category domain="post_tag" nicename="pendulum">pendulum</category>
  <category domain="post_tag" nicename="quality">quality</category>
  <category domain="post_tag" nicename="resources">resources</category>
  <category domain="post_tag" nicename="scope">scope</category>
  <category domain="post_tag" nicename="skew">skew</category>
  <category domain="post_tag" nicename="story-points">story points</category>
  <category domain="post_tag" nicename="system-dynamics">system dynamics</category>
  <category domain="post_tag" nicename="system-thinking">system thinking</category>
  <category domain="post_tag" nicename="velocity">velocity</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_twitter_user</ns0:meta_key>
    <ns0:meta_value>dhh1128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>twitter_cards_summary_img_size</ns0:meta_key>
    <ns0:meta_value>a:7:{i:0;i:213;i:1;i:320;i:2;i:2;i:3;s:24:"width="213" height="320"";s:4:"bits";i:8;s:8:"channels";i:3;s:4:"mime";s:10:"image/jpeg";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>324</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-11-13 10:15:14</ns0:comment_date>
    <ns0:comment_content>Doug: I hadn't considered the analogy to flight, but I think it's a very insightful one. The problem of optimizing a particular number on the instruments, as opposed to seeking the overall best flying experience, is exactly the sort of problem that Seth Godin talked about with his caution about false proxies. We get enamored of a number and forget that it's only a means to an end.

That said, I'd rather have two or three useful numbers than just a vague intention. This is why it was so smart of you to pick a specific target (e.g., "no modules &amp;gt; 10k lines") and work to hit it in your moab work.</ns0:comment_content>
    <ns0:comment_parent>323</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>323</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2012-11-13 09:58:01</ns0:comment_date>
    <ns0:comment_content>I am not a pilot but I understand "instrument flying" operation.  It is possible to "fly the plane" by chasing the "artificial horizon", constantly trying to keep the horizon 'level'. Yet by solely following that type of flying, it is very easy to lose track of the overall objectuve if actually going somewhere desired. One can fly the plane correctly and safely, yet never get any where.

Tracking bugs fixed is good, but does that tracking increase or decrease the entropy of the code? A metric is there and can be used for reports, but what metric is used to measure "better code", "cleaner code", or "code that properly reflects the model of the problem being solved"?

As always, some great insight</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>965</ns0:comment_id>
    <ns0:comment_author>Adios to &amp;#8220;computer programming&amp;#8221; | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/04/05/adios-to-computer-programming/</ns0:comment_author_url>
    <ns0:comment_date>2013-04-05 09:34:37</ns0:comment_date>
    <ns0:comment_content>[...] need system thinking baked into our industry. We need programming languages that have sufficient expressive power to [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1044</ns0:comment_id>
    <ns0:comment_author>Why Your Software Should Cry | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/05/06/why-your-software-should-cry/</ns0:comment_author_url>
    <ns0:comment_date>2013-05-06 11:51:00</ns0:comment_date>
    <ns0:comment_content>[...] we might aim for an &amp;#8220;error gestalt&amp;#8221; &amp;#8212; the ability to notice system-level phenomena as the aggregate of many isolated signals. This would be analogous to a doctor diagnosing flue from [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4878</ns0:comment_id>
    <ns0:comment_author>Why you should use an IDE instead of vim or emacs | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/05/13/why-you-should-use-an-ide-instead-of-vim-or-emacs/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-13 10:16:26</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] show you a gestalt; they encourage you to think holistically about what you&amp;#8217;re doing. If you write a method, and you don&amp;#8217;t like the hover text that [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Put Your Const Foot Forward</title>
  <link>http://codecraft.co/2012/11/14/put-your-const-foot-forward/</link>
  <pubDate>Wed, 14 Nov 2012 15:38:51 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=830</guid>
  <ns2:encoded>Here are two C++ style habits that I recommend. Neither is earth-shattering, but both have a benefit that I find useful. Both relate to the order in which constness shows up in your syntax.

1. When you write a conditional, consider putting the constant (unchangeable) value first:
&lt;pre style="padding-left:30px;font-size:100%;margin-bottom:1em;"&gt;if (0 == i)&lt;/pre&gt;
... instead of:
&lt;pre style="padding-left:30px;font-size:100%;margin-bottom:1em;"&gt;if (i == 0)&lt;/pre&gt;
The reason is simple. If you forget/mis-type and accidentally write a single &lt;code&gt;=&lt;/code&gt; instead of two, making the expression into an assignment, you'll get a compile error, instead of subtle and difficult-to-find misbehavior. (Thanks to my friend Doug for reminding me about this one not long ago.)

[caption id="" align="alignright" width="252"]&lt;a href="http://xkcd.com/138/"&gt;&lt;img class=" " alt="" src="http://imgs.xkcd.com/comics/pointers.png" height="209" width="252" /&gt;&lt;/a&gt; Ah, the joys of pointers... Image credit: xkcd.[/caption]

2. With any data types that involve pointers, prefer putting the &lt;code&gt;const&lt;/code&gt; keyword &lt;em&gt;after&lt;/em&gt; the item that it modifies:
&lt;pre style="padding-left:30px;font-size:100%;margin-bottom:1em;"&gt;char const * VERSION = "2.5";&lt;/pre&gt;
... instead of:
&lt;pre style="padding-left:30px;font-size:100%;margin-bottom:1em;"&gt;const char * VERSION = "2.5";&lt;/pre&gt;
This rule is simple to follow, and it makes semantics about constness crystal clear. It lets you read data types backwards (from right to left) to get their semantics in plain English, which helps uncover careless errors. In either of the declarations of VERSION given above, the coder probably intends to create a constant, but that's not what his code says. The semantics of the two are identical, as far as a compiler is concerned, but the first variant makes the mistake obvious. Reading right-to-left, the data type of VERSION is "pointer to const char" -- so VERSION could be incremented or reassigned.

Use the right-to-left rule in reverse to solve the problem. If we want a "const pointer to const char", then we want:
&lt;pre style="padding-left:30px;font-size:100%;margin-bottom:1em;"&gt;char const * const VERSION = "2.5";&lt;/pre&gt;
&lt;em&gt;That&lt;/em&gt; is a true string literal constant in C++. (Thanks to my friend &lt;a title="Julie Jones: Learn voraciously." href="/2012/09/24/julie-jones-learn-voraciously/"&gt;Julie&lt;/a&gt; for teaching me this one.)

This might seem like nit-picky stuff, but if you ever get into const_iterator classes and &lt;a class="zem_slink" title="Standard Template Library" href="http://en.wikipedia.org/wiki/Standard_Template_Library" target="_blank" rel="wikipedia"&gt;STL&lt;/a&gt; containers, this particular habit helps you write or use templates with much greater comfort. It also helps if you have pointers to pointers and the like. (For consistency, I prefer to follow the same convention for reference variables as well. However, this is not especially important, since references are inherently immutable and therefore never bind to &lt;code&gt;const&lt;/code&gt;.)
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Share a tip of your own, or tell me why you prefer different conventions.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>830</ns0:post_id>
  <ns0:post_date>2012-11-14 08:38:51</ns0:post_date>
  <ns0:post_name>put-your-const-foot-forward</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="c">c++</category>
  <category domain="post_tag" nicename="coding-style">coding style</category>
  <category domain="post_tag" nicename="conditionals">conditionals</category>
  <category domain="post_tag" nicename="const">const</category>
  <category domain="post_tag" nicename="habits">habits</category>
  <category domain="post_tag" nicename="iterators">iterators</category>
  <category domain="category" nicename="mistakes">Mistakes</category>
  <category domain="post_tag" nicename="pointers">pointers</category>
  <category domain="post_tag" nicename="references">references</category>
  <category domain="post_tag" nicename="stl">stl</category>
  <category domain="category" nicename="tips-and-tricks">Tips and Tricks</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_twitter_user</ns0:meta_key>
    <ns0:meta_value>dhh1128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>392</ns0:comment_id>
    <ns0:comment_author>Julie</ns0:comment_author>
    <ns0:comment_author_email>julie.jones@pobox.com</ns0:comment_author_email>
    <ns0:comment_date>2012-11-26 14:25:09</ns0:comment_date>
    <ns0:comment_content>First, I would like to add a reference for how to use const. It provides a very good description of why to put const after the type. It is the original reference from Dan Saks that I based my style change on. http://www.dansaks.com/articles/1999-02%20const%20T%20vs%20T%20const.pdf

As for assignment in a conditional, I used to recommend the constant on the left. However, I no longer do. Over time two things have changed my mind: 1) compilers issue warnings for use of an assignment in a conditional (which can be turned of by an extra set of parenthesis if that is what you really desire), and 2) It often makes the code harder to understand for a human reader. 

More details about understanding a conditional -

In many languages there are other operators which are similar to "==". In most of those cases changing the order of operands changes the meaning, or is invalid. This would be obvious for an ordering operation such as less than. "a &amp;lt; b&amp;quot; is not at all the same as &amp;quot;b &amp;lt; a&amp;quot;. &amp;quot;a isa b&amp;quot; is not the same as &amp;quot;b isa a&amp;quot;. And one that I use often in Python &amp;quot;a is None&amp;quot; is nonsensical as &amp;quot;None is a&amp;quot;.

I have definitely noticed that unseasoned C/C++ programmers often get confused when they see &amp;quot;if (0 == foo())&amp;quot;. Instead of explaining the reasoning for that non-obvious operand order I explain that turning on compiler warnings is a good idea. :-)</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>333</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-11-14 22:17:13</ns0:comment_date>
    <ns0:comment_content>The trick of choosing good names is so fundamental it deserves its own post. Have a look at &lt;a href="/2012/08/28/good-code-is-named-right/" title="Good Code Is Named Right" rel="nofollow"&gt;Good Code is Named Right&lt;/a&gt;.

(I can tell you've got battlescars; young engineers are often blind to the power of that particular habit. :-)</ns0:comment_content>
    <ns0:comment_parent>330</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>330</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2012-11-14 11:22:17</ns0:comment_date>
    <ns0:comment_content>I have to admit, I learned that (0 == i) trick myself in the past 18 months, but I adopted it myself AND it saved me from introducing several bugs within DAYS of coding it that way. I continue to do it now.

Yeah, the old C "left, right" reading can be very helpful

How this "trick"?  Better variable naming to help the reader of your code understand what you were trying to do!

Instead of:  C   Use:  ConfigurationData</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>394</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-11-26 21:03:12</ns0:comment_date>
    <ns0:comment_content>Julie: So glad you added a reference to the Dan Saks article. He explains it so much better than I could!

The constant on the left is a tradeoff. I agree that it doesn't read as nicely, and that modern compilers are better at warning about the issue. However, I recently started working on some open source code, and there are members of the community for this particular codebase that are using pre-1990s C (not C++) compilers. I kid you not. So dialing up warnings is not always feasible. Where it is, I think I agree that the pendulum swings the other way.</ns0:comment_content>
    <ns0:comment_parent>392</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>477</ns0:comment_id>
    <ns0:comment_author>How Sutter&amp;#8217;s Wrong About const in C++ 11 &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/01/02/how-sutters-wrong-about-const-in-cpp-11/</ns0:comment_author_url>
    <ns0:comment_date>2013-01-02 08:50:24</ns0:comment_date>
    <ns0:comment_content>[...] community&amp;#8217;s attention. I learned something important; I recommend that you watch the talk. Using const well is an essential skill. But I think in his enthusiasm about the way the language has evolved to make semantics clearer, [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>810</ns0:comment_id>
    <ns0:comment_author>3 reasons to prefer references over pointers (C++) | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/03/08/3-reasons-to-prefer-references-over-pointers/</ns0:comment_author_url>
    <ns0:comment_date>2013-03-08 16:08:01</ns0:comment_date>
    <ns0:comment_content>[...] modified. That&amp;#8217;s not really a pointer vs. const thing, but I couldn&amp;#8217;t help myself. See my rant about const. The &amp;amp; tells you that the value of client will not change for the duration of setClient, and it [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1090</ns0:comment_id>
    <ns0:comment_author>Good fences make good neighbors | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/05/15/good-fences-make-good-neighbors/</ns0:comment_author_url>
    <ns0:comment_date>2013-05-15 08:50:30</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] Use const correctly. This forces callers to respect mutability constraints in your corner of the codebase. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>5091</ns0:comment_id>
    <ns0:comment_author>Dan</ns0:comment_author>
    <ns0:comment_author_email>dhaffey@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2014-05-20 20:17:20</ns0:comment_date>
    <ns0:comment_content>Note that as long as the code still at least compiles under newer compilers, I'd argue that this isn't a valid justification for outdated or otherwise sub-optimal practices. If at least one member of the community encounters the warning, in principle the entire community is aware of the problem. A heterogeneous collection of compilers has access to the *union* of their respective warnings, not the intersection.</ns0:comment_content>
    <ns0:comment_parent>394</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1400638642</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>5093</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2014-05-20 20:26:22</ns0:comment_date>
    <ns0:comment_content>@Dan: You make a fair point. Unfortunately, in the codebase I mentioned above, the community as a whole is in the habit of ignoring warnings; if it compiles, it must be good. Aargh!

I wonder if your last sentence is a gem of wisdom that explains the power of open source in general. Good food for thought...</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>24088439898</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1400639183</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
</item>
<item>
  <title>All I Really Need To Know I Didn't Learn In Compugarten</title>
  <link>http://codecraft.co/2012/11/15/all-i-really-need-to-know-i-didnt-learn-in-compugarten/</link>
  <pubDate>Thu, 15 Nov 2012 15:30:19 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=839</guid>
  <ns2:encoded>I'm glad newly minted software engineers are exposed to data structures, compilers, concurrency, graph theory, assembly language, and the other goodies that constitute a computer science curriculum. All that stuff is important.

But it's not enough.

[caption id="" align="aligncenter" width="500"]&lt;a href="http://www.flickr.com/photos/uniinnsbruck/3722413559/"&gt;&lt;img alt="" src="http://farm4.staticflickr.com/3439/3722413559_c3837314a2.jpg" width="500" height="291" /&gt;&lt;/a&gt; Not all classroom material for CS folks should be technical. Photo credit: uniinnsbruck (Flickr).[/caption]

Since I'm half way to curmudgeon-hood, I frequently find myself lamenting educational blindspots in the young. I've even toyed with the idea of teaching at the nearest university, some day when I Have More Time™. If academia would take me, my lesson plans might cover some of the following topics:
&lt;ul&gt;
	&lt;li&gt;How to work with smart but misaligned teammates, &lt;!--more--&gt;manage opinions and personalities, and contribute to a cohesive team. (Software development is a &lt;em&gt;team&lt;/em&gt; sport, young padawan.)&lt;/li&gt;
	&lt;li&gt;The power of metaphor in software design. (See &lt;a title="Good Code Is Named Right" href="/2012/08/28/good-code-is-named-right/"&gt;this post&lt;/a&gt;.)&lt;/li&gt;
	&lt;li&gt;&lt;a title="Why Exceptions Aren’t Enough" href="/2012/10/09/why-exceptions-arent-enough/"&gt;Choosing a good error raising and error handling strategy&lt;/a&gt;. (Assignment: find half a dozen error messages in open source projects, and rewrite them to make them intelligible to the Average Human.)&lt;/li&gt;
	&lt;li&gt;The art of &lt;a title="Good Code Is Balanced" href="/2012/08/27/good-code-is-balanced/"&gt;tradeoffs&lt;/a&gt;. (Usually, there ain't no such thing as a free lunch.)&lt;/li&gt;
	&lt;li&gt;&lt;a title="Coping With Organizational Alzheimers" href="/2012/10/12/coping-with-organizational-alzheimers/"&gt;Managing technical debt&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;Using version control, especially somewhat diverged branches.&lt;/li&gt;
	&lt;li&gt;Communicating effectively with remote collaborators, including those whose native language is not your own.&lt;/li&gt;
	&lt;li&gt;Data- and &lt;a title="Good Code Is Optimized" href="/2012/08/27/good-code-is-optimized/"&gt;use-case-driven optimization&lt;/a&gt;. (Required reading: &lt;em&gt;&lt;a class="zem_slink" title="The Goal: A Process of Ongoing Improvement" href="http://www.amazon.com/Goal-Process-Ongoing-Improvement/dp/0884271781%3FSubscriptionId%3D0G81C5DAZ03ZR9WH9X82%26tag%3Dzemanta-20%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0884271781" target="_blank" rel="amazon"&gt;The Goal&lt;/a&gt;&lt;/em&gt;, by Eliyahu M. Goldratt).&lt;/li&gt;
	&lt;li&gt;Understanding and speaking the language of business.&lt;/li&gt;
	&lt;li&gt;&lt;a title="Six Learning Tips For Tech Folks" href="/2012/09/25/six-learning-tips-for-tech-folks/"&gt;Learning how to learn&lt;/a&gt;, to keep up with the industry after you leave school.&lt;/li&gt;
	&lt;li&gt;Estimating wisely.&lt;/li&gt;
	&lt;li&gt;Finding the non-obvious human and process levers in an organization to get things done.&lt;/li&gt;
	&lt;li&gt;&lt;a title="// Comments on Comments" href="http://codecraft.co/2012/10/31/comments-on-comments/"&gt;Effective commenting&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;Coding for maintainability.&lt;/li&gt;
	&lt;li&gt;Great role models in software development.&lt;/li&gt;
	&lt;li&gt;Common newbie and journeyman mistakes.&lt;/li&gt;
	&lt;li&gt;A running contest where any student is invited to stump the rest of the class to find some problem that doesn't already have at least one useful open-source library you could use as a starting point. (Newton: "I have stood on the shoulders of giants.")&lt;/li&gt;
&lt;/ul&gt;
This is only the beginning of my lesson topics; I'm sure I could come up with dozens more, if I thought for a while.

What would you add to the list?&lt;strong&gt; &lt;span style="color:#000080;"&gt;&lt;em&gt;Please comment. And please subscribe to my blog (top of right sidebar) for explorations of these topics.&lt;/em&gt;&lt;/span&gt;&lt;/strong&gt;
&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://thenextweb.com/entrepreneur/2012/11/04/the-non-developers-guide-to-hiring-software-developers/" target="_blank"&gt;The non-developer's guide to hiring software developers&lt;/a&gt; (thenextweb.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://charlesknutson.net/blog/2010/10/25/puzzle-solving-not-the-driving-function-of-software-construction/" target="_blank"&gt;Puzzle-solving: Not the driving function of software construction&lt;/a&gt; (http://charlesknutson.net/)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>839</ns0:post_id>
  <ns0:post_date>2012-11-15 08:30:19</ns0:post_date>
  <ns0:post_name>all-i-really-need-to-know-i-didnt-learn-in-compugarten</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="comments">comments</category>
  <category domain="post_tag" nicename="communication">communication</category>
  <category domain="post_tag" nicename="compilers">compilers</category>
  <category domain="post_tag" nicename="concurrency">concurrency</category>
  <category domain="post_tag" nicename="design">design</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="errors">errors</category>
  <category domain="post_tag" nicename="estimation">estimation</category>
  <category domain="post_tag" nicename="graph-theory">graph theory</category>
  <category domain="post_tag" nicename="habits">habits</category>
  <category domain="post_tag" nicename="learning">learning</category>
  <category domain="post_tag" nicename="maintainability">maintainability</category>
  <category domain="post_tag" nicename="metaphor">metaphor</category>
  <category domain="post_tag" nicename="nih">NIH</category>
  <category domain="post_tag" nicename="teamwork">teamwork</category>
  <category domain="post_tag" nicename="tech-debt">tech debt</category>
  <category domain="post_tag" nicename="tradeoffs">tradeoffs</category>
  <category domain="post_tag" nicename="version-control">version control</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:60:"http://farm4.staticflickr.com/3439/3722413559_c3837314a2.jpg";s:6:"images";a:1:{s:60:"http://farm4.staticflickr.com/3439/3722413559_c3837314a2.jpg";a:6:{s:8:"file_url";s:60:"http://farm4.staticflickr.com/3439/3722413559_c3837314a2.jpg";s:5:"width";i:500;s:6:"height";i:291;s:4:"type";s:5:"image";s:4:"area";i:145500;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-11-15 15:32:25";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_twitter_user</ns0:meta_key>
    <ns0:meta_value>dhh1128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>352</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-11-15 19:17:02</ns0:comment_date>
    <ns0:comment_content>Now &lt;em&gt;that&lt;/em&gt; is a skill we all need! Are you sure you don't want a career in politics? :-)</ns0:comment_content>
    <ns0:comment_parent>351</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>353</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-11-15 19:18:04</ns0:comment_date>
    <ns0:comment_content>This is a great sidebar topic. Maybe logging systems need some kind of a logIfThisHasntHappenedRecently() function. What ideas do you have about how to achieve this?</ns0:comment_content>
    <ns0:comment_parent>350</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>337</ns0:comment_id>
    <ns0:comment_author>matt</ns0:comment_author>
    <ns0:comment_author_email>mraffel@ugenius.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://ugenius.com</ns0:comment_author_url>
    <ns0:comment_date>2012-11-15 10:20:24</ns0:comment_date>
    <ns0:comment_content>effective logging techniques.  what, when</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>338</ns0:comment_id>
    <ns0:comment_author>matt</ns0:comment_author>
    <ns0:comment_author_email>mraffel@ugenius.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://ugenius.com</ns0:comment_author_url>
    <ns0:comment_date>2012-11-15 10:20:52</ns0:comment_date>
    <ns0:comment_content>what constitutes good code documentation...</ns0:comment_content>
    <ns0:comment_parent>337</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>339</ns0:comment_id>
    <ns0:comment_author>shawn</ns0:comment_author>
    <ns0:comment_author_email>sswinsick@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2012-11-15 10:26:35</ns0:comment_date>
    <ns0:comment_content>I think more information about life cycles would be good to teach, I was taught the basics, but we never went into waterfall or agile, or anything else for that matter.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>340</ns0:comment_id>
    <ns0:comment_author>Brian Bellon</ns0:comment_author>
    <ns0:comment_author_email>briansbellon@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2012-11-15 10:52:06</ns0:comment_date>
    <ns0:comment_content>Coding to facilitate effective QA Automation - Hows, Whys, Benefits

Working with a QA Engineer - What to expect from them - and what should be expected of you as a developer.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>341</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-11-15 10:55:06</ns0:comment_date>
    <ns0:comment_content>Good ones, Brian! Automation is absolutely fundamental, nowadays. And it's definitely the case that some codebases are easier to automate than others.

Working with QA is another great focus. So many developers don't make interactions with testers as productive as they could be. Maybe you should come guest lecture to set us straight. :-)</ns0:comment_content>
    <ns0:comment_parent>340</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>342</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-11-15 10:56:38</ns0:comment_date>
    <ns0:comment_content>Yes. It surprises me how little process/methodologies get discussed. CS classes where you have team assignments might be a good way to expose students to pair programming, sprints and scrum masters, and the rest of that part of what we do.</ns0:comment_content>
    <ns0:comment_parent>339</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>343</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-11-15 10:58:01</ns0:comment_date>
    <ns0:comment_content>Ooh, yes! Just yesterday I was meeting with a customer who was complaining that at normal verbosity, our log files had way too much detail about certain routine operations. Knowing what to put in a log, when--and knowing how to make the info that's written as useful as possible--would be a great topic.</ns0:comment_content>
    <ns0:comment_parent>337</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>344</ns0:comment_id>
    <ns0:comment_author>Erik Dietrich (@daedtech)</ns0:comment_author>
    <ns0:comment_author_email>daedtech@twitter.example.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://twitter.com/daedtech</ns0:comment_author_url>
    <ns0:comment_date>2012-11-15 11:50:22</ns0:comment_date>
    <ns0:comment_content>I think it would be interesting and beneficial to have a CS program where students started a project as freshmen and it extended beyond the "boundaries" of the semester long course.  There are a lot of good lessons to be learned from having to live with your code for months and years rather than days and maybe weeks.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>hc_post_as</ns0:meta_key>
      <ns0:meta_value>twitter</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>hc_avatar</ns0:meta_key>
      <ns0:meta_value>http://a0.twimg.com/profile_images/2564762961/cph5w8r6e84iepkzcomz_normal.jpeg</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>hc_foreign_user_id</ns0:meta_key>
      <ns0:meta_value>442944057</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>345</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-11-15 11:54:06</ns0:comment_date>
    <ns0:comment_content>Great idea. This might be particularly useful if students had to collaborate on the code with others. Imagine seniors having freshmen edit their code, and trying to manage the mentoring and communication to keep the design pure.

Your idea reminds me of a &lt;a href="http://www.ted.com/talks/shimon_schocken_the_self_organizing_computer_course.html" rel="nofollow"&gt;TED talk&lt;/a&gt; I saw recently. A professor decided to have students start by building logic gates, then integrated circuits, then CPUs, then a compiler and programming language, and finally a game. Very cool. I want to take that class.</ns0:comment_content>
    <ns0:comment_parent>344</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>347</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-11-15 12:41:47</ns0:comment_date>
    <ns0:comment_content>Forgot one obvious biggie: antipatterns. Really great opportunity to discuss lots of Dilbert cartoons. :-)</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>357</ns0:comment_id>
    <ns0:comment_author>Linda Hardman</ns0:comment_author>
    <ns0:comment_author_email>lovelymutti@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2012-11-16 16:50:31</ns0:comment_date>
    <ns0:comment_content>Love my awesome, smart, husband Daniel.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>358</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-11-16 16:51:03</ns0:comment_date>
    <ns0:comment_content>Wow, Brian. You should be teaching this imaginary class--and just with your list, I think there'd be material for a semester or two, easily.

Your first time items, especially, had me slapping my forehead. All the legal issues around software development need to be more broadly understood. No doubt about it. And understanding what a healthy tech company looks like, in terms of all the different disciplines it takes to build a business, is absolutely critical.

I agree about the value of velocity estimation. I'm curious to know what techniques you think have been the most helpful on that one; it still feels pretty elusive to me.

The competitive understanding discussion is one that you and the rest of the gang from Symantec could talk about at length. Some of the price/performance analysis you did, (the beating-the-streets aspect, the research through IDC/Gartner databases, the linear regression, the analyst and customer calls), deserves to be legendary. It's too much of a well-kept secret.</ns0:comment_content>
    <ns0:comment_parent>356</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>359</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-11-16 17:02:34</ns0:comment_date>
    <ns0:comment_content>Okay, Sean. You've added a book to my reading list!</ns0:comment_content>
    <ns0:comment_parent>348</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>351</ns0:comment_id>
    <ns0:comment_author>Carl Appellof</ns0:comment_author>
    <ns0:comment_author_email>carl@appellof.org</ns0:comment_author_email>
    <ns0:comment_date>2012-11-15 19:10:53</ns0:comment_date>
    <ns0:comment_content>How to persuade your boss something really IS worth doing, even if it's not in the schedule, not vetted by a product manager, and doesn't look cool on the surface.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>350</ns0:comment_id>
    <ns0:comment_author>Carl Appellof</ns0:comment_author>
    <ns0:comment_author_email>carl@appellof.org</ns0:comment_author_email>
    <ns0:comment_date>2012-11-15 19:08:48</ns0:comment_date>
    <ns0:comment_content>Ways of suppressing repeated errors in logs would be good too.  It does no good to fill a log with the same critical message 10,000 times in a row, even if the error occurs 10,000 times in one minute. Even better if you really CAN record all the errors in compact form, with a smart viewer.  I can't count the times I've asked a customer - "Could you run that failed backup one more time, but with the verbosity turned up just a little?"</ns0:comment_content>
    <ns0:comment_parent>343</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>348</ns0:comment_id>
    <ns0:comment_author>Shawn Holmstead</ns0:comment_author>
    <ns0:comment_author_email>shawn.holmstead@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.landesk.com</ns0:comment_author_url>
    <ns0:comment_date>2012-11-15 15:36:04</ns0:comment_date>
    <ns0:comment_content>Effective refactoring... learning to live with code that has been around for a long time and how to make it better.  Putting in time in a schedule to refactor.
Test driven development (unit, integration, and acceptance tests).
Communicating with product managers through acceptance tests (Required Reading: &lt;a href="http://www.amazon.com/Bridging-Communication-Gap-Specification-Acceptance/dp/0955683610" rel="nofollow"&gt;Bridging the Communication Gap&lt;/a&gt;)</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>356</ns0:comment_id>
    <ns0:comment_author>Brian</ns0:comment_author>
    <ns0:comment_author_email>bwistisen@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2012-11-16 15:45:57</ns0:comment_date>
    <ns0:comment_content>Daniel - a few additional ones that come to mind:

SOWs, Contract Negotiations, Open Source Rules (GPL, etc.), IP Protection, Escrows, Legal issues - Engineers often get pulled into these areas but don’t have the formal background or introduction in many of these topics, aside from what they learn on the job. They will get pulled in at some point.

Roles and Responsibilities – a holistic review of cross-functional players most engineers will interact with throughout their careers.  PGM, PM, Marketing, Sales, Architects, Account Managers, Legal, Support, Q/A, etc.  Building a good software product isn't the end of the line, it’s only the beginning.  Need to have a holistic view of how a functioning software company/division operates, who the players are, what their roles are, and how the rest of the business operates. 

Speaking with and Presenting to Customers – The difference between the language of internal speak vs. external speak, tech speak vs, customer speak.  How to present and speak with customers, partners, OEMs.  What NOT to say is just as important as what to say.

Customer Focus at ALL Times / Usability – Customers are not as smart as you are!  It’s a lot more difficult to take a complex problem and make it easy to understand than it is to take a simple problem and complicate the heck out of it.  There is always a tendency toward the latter – avoid that tendency if you want to sell your products to customers.

The Value of Accurate Velocity Estimation – it impacts all layers of the business, from internal and external roadmap predictability, to budgets, to commitments with customers and partners, to revenues, to reputation, to image, to long-term viability and sustainability.

Globalization / Localization – The world is a small place today.  Most engineers will need to understand good localization techniques and strategies as their products will be shipped all over the world, in a wide variety of different languages, markets, channels, etc.

Competitive Understanding – Where the market’s going, who the players are, who is considered “the best” even if they’re not, what the analysts are saying, how to beat the competition.  NOTE:  It’s not always a technical answer.

Consistency!  Consistency!  Consistency!  - Repeatable, best-practice processes that ensure the success of each release.  Plow improvements into the process with each successive release.  You’d be surprised how few companies actually have good process in place, or how many have no process whatsoever.  Fly-by-the-seat of your pants programming doesn't cut it, unless you’re building your own Angry Birds knockoff in your basement for iTunes.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1208</ns0:comment_id>
    <ns0:comment_author>Courage Counts | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/05/31/courage-counts/</ns0:comment_author_url>
    <ns0:comment_date>2013-05-31 08:33:40</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] need to notice when fear is inhibiting necessary change, take a deep breath, and commit. (Too bad they don&amp;#8217;t teach that to CS majors. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Learned Helplessness, Rats, and People Power</title>
  <link>http://codecraft.co/2012/11/26/learned-helplessness-rats-and-people-power/</link>
  <pubDate>Mon, 26 Nov 2012 15:30:52 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=846</guid>
  <ns2:encoded>In the 1950s, researchers at Johns Hopkins conducted some very troubling experiments. They caught wild rats and squeezed them in their hands until they stopped struggling, teaching them that nothing they did would let them escape the crushing grip of their human captors. Then they dropped the rats in a bucket of water and watched them swim.

Now, wild rats are superb swimmers. On average, rats that had not received the squeeze treatment lasted around 60 hours in the bucket before they gave up from exhaustion and allowed themselves to drown. One unsqueezed rat swam for 81 hours.

[caption id="" align="aligncenter" width="400"]&lt;a href="http://www.flickr.com/photos/mbk/203388870/"&gt;&lt;img alt="" src="http://farm1.staticflickr.com/77/203388870_598e4417bf.jpg" height="391" width="400" /&gt;&lt;/a&gt; A later rats-in-bucket experiment (not quite so brutal). Photo credit: MBK (Marjie) (Flickr).[/caption]

The average squeezed rat sank after 30 minutes.

In the 1960s and 1970s, &lt;a class="zem_slink" title="Martin Seligman" href="http://en.wikipedia.org/wiki/Martin_Seligman" target="_blank" rel="wikipedia"&gt;Martin Seligman&lt;/a&gt; became interested in this phenomenon--he called it "&lt;a class="zem_slink" title="Learned helplessness" href="http://en.wikipedia.org/wiki/Learned_helplessness" target="_blank" rel="wikipedia"&gt;learned helplessness&lt;/a&gt;"--and he was able to trigger similar "giving up" behavior in dogs and other animals. &lt;a href="http://www.annualreviews.org/doi/abs/10.1146/annurev.me.23.020172.002203?journalCode=med" target="_blank"&gt;He theorized&lt;/a&gt; that human depression&lt;!--more--&gt; is a reaction to learned helplessness in the face of emotional or mental challenges against which we repeatedly make zero headway. &lt;a href="http://www.hsu.edu/uploadedFiles/Faculty/Academic_Forum/2000-1/2000-1afHelplessness%20and%20Spatial%20Memory%20in%20Swimming%20Rats.pdf" target="_blank"&gt;Other researchers showed&lt;/a&gt; that not only did squeezed rats stop swimming faster, they also lost some of their spatial reasoning and memory abilities.

Hopefully, this experiment disturbs you on many levels. Even putting aside ethical questions, the implications are enough to make your skin crawl. At least one pundit has &lt;a href="http://www.washingtonmonthly.com/archives/individual/2009_04/017869.php" target="_blank"&gt;connected the rat experiment with waterboarding at Guantanamo&lt;/a&gt;. Probably there are interesting insights about addiction, interpersonal relationships, bullying, politics, and many other social issues to be gleaned as well.

I see interesting connections to tech debt.

&lt;strong&gt;Working In Debt&lt;/strong&gt;

If you've ever worked on a truly yucky codebase--one littered with #ifdefs, massive and arcane functions, and undocumented and surprising logic; one having organizational principles known only to long-gone creators; one possessing far too few unit or regression tests; one smack dab in the middle of the strategic path of the company--then you know what it's like to be squeezed like a rat in a researcher's gloved fist.

You have to fix bugs, but every change causes you to grit your teeth and cross all your fingers and toes, because you have no confidence that the fix won't break something else. &lt;em&gt;Squeeze&lt;/em&gt;.

You know your &lt;a title="Why Mental Models Matter" href="/2012/11/05/why-mental-models-matter/" target="_blank"&gt;mental model&lt;/a&gt; is incomplete--in fact, the mental model of everybody on the team is insufficient, even in the aggregate. You avoid dark corners of the codebase; here there be dragons. &lt;em&gt;Squeeze&lt;/em&gt;.

You desperately want to refactor--but you know the Keepers of the Budget and Schedule™ will never consent to let you rewrite to nearly the degree that you need. And worse, you know that you really can't start this effort anyway, because the risk of destabilizing things is just too high. (Remember, you don't have enough unit or regression tests.) &lt;em&gt;Squeeze.&lt;/em&gt;

In that kind of codebase, you can come to feel like every breath of creativity, every spark of excitement, every hope that you can make a difference, is being squeezed right out of you.

Although this discouraging perspective is not unfamiliar to me, I firmly believe that humans are smarter than rats.

And that matters.

&lt;strong&gt;The Power of Habit&lt;/strong&gt;

I've previously written about my &lt;a title="Tech Debt, Leverage, and Grandma’s Envelope" href="http://codecraft.co/2012/10/30/tech-debt-leverage-and-grandmas-envelope/"&gt;Grandma paying off her mortgage&lt;/a&gt; after many years of diligent effort. This was the harvest of a good habit, applied consistently.

With financial and tech debt, after big setbacks there is a temptation to throw up our hands. "What's the use?" we want to say. "Nothing we do will make any difference." We sympathize with the guy who, saddled with a million dollar medical expense, tells himself that living within his means is irrelevant, and goes on a shopping spree.

This is the equivalent of the squeezed rats giving up after 30 minutes in the bucket. We have to be smarter.

If you are working in a codebase with deep tech debt, you have to be disciplined about good habits. Write unit tests. Name your functions well. Make things as modular as you can. Chip away. And away. And away.

If you are saying: "That's not going to erode the big debts--at least, not fast enough to make any difference!"--then I hear you. Believe me. But:
&lt;ul&gt;
	&lt;li&gt;Being the kind of engineer who pays down tech debt as a matter of habit, instead of the kind who gives up, will make a dramatic difference to your own morale, and to the morale of your team. In other words, having good habits lets you believe.&lt;/li&gt;
	&lt;li&gt;If you can inspire others on your team, you'll be surprised how tractable even large problems become.&lt;/li&gt;
	&lt;li&gt;Things change. M&amp;amp;A, partnerships, and competitor's moves disrupt the natural evolution of codebases in surprising, and sometimes hopeful, ways.&lt;/li&gt;
&lt;/ul&gt;
Over the long haul, thinking about best practice, talking about it, and then doing it, day in and day out, really does pay off. As &lt;a href="http://en.wikipedia.org/wiki/Lao_tse" target="_blank"&gt;Lao Tse&lt;/a&gt; (supposedly) observed:
&lt;blockquote&gt;“Watch your thoughts; they become words. Watch your words; they become actions. Watch your actions; they become habit. Watch your habits; they become character. Watch your character; it becomes your destiny.”&lt;/blockquote&gt;
Although I feel for every engineer struggling in a yucky codebase, I don't have much sympathy for those who use the struggle as an excuse for bad habits.

&lt;strong&gt;The Power of Imagination&lt;/strong&gt;

Besides having a capacity to consciously choose our habits, human beings also surpass rats in their ability to find creative solutions to problems. Remember &lt;a href="http://en.wikipedia.org/wiki/Kobayashi_Maru" target="_blank"&gt;Kirk and the Kobiyashi Maru&lt;/a&gt;?

[youtube=http://youtu.be/bDg674aS-F4]

Brainstorm with like-minded engineers, and see what ideas emerge. Here are a few tried-and-true options to ponder:
&lt;ul&gt;
	&lt;li&gt;Can you (without being disingenuous) associate needed big-ticket changes with a strategically important initiative that everybody has already bought into? This would give you instant &lt;a title="Roland Whatcott: Manage momentum." href="/2012/09/21/roland-whatcott-manage-momentum/" target="_blank"&gt;momentum&lt;/a&gt; to make things better.&lt;/li&gt;
	&lt;li&gt;Can you subdivide the problem? "Refactor the whole stinkin' mess" is less likely to get done, but "refactor class X" might.&lt;/li&gt;
	&lt;li&gt;Can you make a small change that's highly visibile and highly popular, and then spend your newly acquired political capital on a more expensive pay-off?&lt;/li&gt;
	&lt;li&gt;Can you deploy a tool that makes the problem more obvious? Or better yet, a tool that solves part of the problem in an automated way? (If such a tool doesn't exist, could you write one? Or commission one?)&lt;/li&gt;
	&lt;li&gt;Can you outsource a routine task to free up key resources for a frontal assault?&lt;/li&gt;
	&lt;li&gt;Can you place a bounty on an improved design in open source circles?&lt;/li&gt;
&lt;/ul&gt;
Importantly, imagination isn't just a problem-solving tool; independent of answering the "how", it also gives us a "why" to our efforts. In the rat experiment, all the subjects saw during their time in the bucket was a metal wall, with no conceivable egress. The learned helplessness that defeated the squeezed rats was mostly a death of imagination. When Shackleton climbed into a lifeboat to attempt &lt;a href="http://en.wikipedia.org/wiki/Voyage_of_the_James_Caird" target="_blank"&gt;the 1500 km crossing to South Georgia Island&lt;/a&gt;, his goal was just as invisible. But he survived because he could imagine climbing out again, his journey behind him. And he kept imagining that, day after day, until his keel hit pebbles.

So...

Never underestimate the power of habit. Never underestimate the power of imagination.

And keep swimming. :-)
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="text-align:left;padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Find a good coding habit that you've neglected, and re-commit to do it with discipline and vision.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.eric.ed.gov/ERICWebPortal/search/detailmini.jsp?_nfpb=true&amp;amp;_&amp;amp;ERICExtSearch_SearchValue_0=ED102937&amp;amp;ERICExtSearch_SearchType_0=no&amp;amp;accno=ED102937" target="_blank"&gt;Determinants of Learned Helplessness in Problem Solving&lt;/a&gt; (eric.ed.gov)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.kitsapsun.com/news/2012/nov/23/gino-grunberg-your-glass-half-empty-or-half-full/?partner=RSS" target="_blank"&gt;Is your glass half empty or half full?&lt;/a&gt; (kitsapsun.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.nytimes.com/2011/05/30/opinion/30krugman.html" target="_blank"&gt;"Against Learned Helplessness"&lt;/a&gt; (nytimes.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>846</ns0:post_id>
  <ns0:post_date>2012-11-26 08:30:52</ns0:post_date>
  <ns0:post_name>learned-helplessness-rats-and-people-power</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="best-practice">best practice</category>
  <category domain="post_tag" nicename="depression">depression</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="discipline">discipline</category>
  <category domain="post_tag" nicename="habits">habits</category>
  <category domain="post_tag" nicename="imagination">imagination</category>
  <category domain="post_tag" nicename="learned-helplessness">learned helplessness</category>
  <category domain="post_tag" nicename="psychology">psychology</category>
  <category domain="post_tag" nicename="refactoring">refactoring</category>
  <category domain="post_tag" nicename="tech-debt">tech debt</category>
  <category domain="post_tag" nicename="vision">vision</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_twitter_user</ns0:meta_key>
    <ns0:meta_value>dhh1128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>423</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-12-10 13:49:50</ns0:comment_date>
    <ns0:comment_content>I think all of us that have been educated in Western universities need a crash course in gestalt, system thinking. And then we need regular reminders, until we understand that analysis (in the sense of its original meaning, of reducing everything to smaller units) is not the be-all, end-all outcome of serious thought.</ns0:comment_content>
    <ns0:comment_parent>413</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>535</ns0:comment_id>
    <ns0:comment_author>Earned Pragmatism &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/01/18/earned-pragmatism/</ns0:comment_author_url>
    <ns0:comment_date>2013-01-18 08:53:29</ns0:comment_date>
    <ns0:comment_content>[...] this type of &amp;#8220;architect&amp;#8221; tend to be rife with tech debt, with no roadmap or process to haul the team up and out. Where there is no vision, the people [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>468</ns0:comment_id>
    <ns0:comment_author>Ian Nate</ns0:comment_author>
    <ns0:comment_author_email>iannate@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.facebook.com/iannate</ns0:comment_author_url>
    <ns0:comment_date>2012-12-28 23:46:03</ns0:comment_date>
    <ns0:comment_content>Profound and applicable. Love this post. Reminds me of Frank Abignale, Sr., played by the indubitable Christopher Walken, from "Catch Me If You Can": http://youtu.be/51lFmdChOA0</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>hc_foreign_user_id</ns0:meta_key>
      <ns0:meta_value>1340721681</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>hc_avatar</ns0:meta_key>
      <ns0:meta_value>http://graph.facebook.com/1340721681/picture?type=large&amp;_md5=a4ec15c7ea6c0fbd828d8a3a0adb7447</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>hc_post_as</ns0:meta_key>
      <ns0:meta_value>facebook</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>413</ns0:comment_id>
    <ns0:comment_author>Trev</ns0:comment_author>
    <ns0:comment_author_email>trevharmon@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://dld.me/</ns0:comment_author_url>
    <ns0:comment_date>2012-12-05 10:10:55</ns0:comment_date>
    <ns0:comment_content>A professional kitchen needs to be cleaned each and every night, with an occasional deep clean where one pulls out all of the equipment and cleans everywhere. If its not done, Health and Safety will eventually come by close it all down.

The suggested approach reminds me of Old Man Yu (http://ancientchinesestories.com/2009/04/04/ancient-chinese-stories-the-tale-of-old-man-yu-gong-and-the-mountain/). So, the question is how does one combine Eastern long-term thinking with the Western reliance on quarterly earnings?</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>400</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2012-11-28 09:12:53</ns0:comment_date>
    <ns0:comment_content>alright, alright - good reality check - thanks, but I definitely felt the pattern you are describing.  We are having an issue with a grandson who is "helpless" if you will due to a parent who is a corrections officer, and this pattern applies here too.  Hope is key to working in a "tight" environment anywhere.</ns0:comment_content>
    <ns0:comment_parent>395</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>390</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2012-11-26 10:40:35</ns0:comment_date>
    <ns0:comment_content>good model to follow.

dead rat here</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>395</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-11-26 21:05:15</ns0:comment_date>
    <ns0:comment_content>Aw, c'mon, Doug! Maybe a bedraggled and waterlogged rat. You were still cracking jokes last time I saw you coding, so you must be alive and kickin'... :-)</ns0:comment_content>
    <ns0:comment_parent>390</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>396</ns0:comment_id>
    <ns0:comment_author>LisaAn</ns0:comment_author>
    <ns0:comment_author_email>lisaan@juno.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.lisaan.com</ns0:comment_author_url>
    <ns0:comment_date>2012-11-27 09:46:59</ns0:comment_date>
    <ns0:comment_content>I have often wondered why teams don't take the approach of grabbing a few backlog items and stuffing them in the cracks, so to speak, to chip away at the technical debt. Perhaps we are overwhelmed by the task.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>397</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-11-27 10:03:20</ns0:comment_date>
    <ns0:comment_content>One of the more insidious consequences of always stretching to fit in "just one more feature," late in the game, is that all ability to mine nooks and crannies in the schedule is lost. We spend every last cent on new bells and whistles, instead of on cleaning the workshop. Sigh...</ns0:comment_content>
    <ns0:comment_parent>396</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>471</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-12-29 11:06:50</ns0:comment_date>
    <ns0:comment_content>Ian: I had not made that connection, but it is a *great* one. Thanks for pointing it out!</ns0:comment_content>
    <ns0:comment_parent>468</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4880</ns0:comment_id>
    <ns0:comment_author>Why you should use an IDE instead of vim or emacs | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/05/13/why-you-should-use-an-ide-instead-of-vim-or-emacs/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-13 10:16:31</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] larger community use and like. This choice will pay off in enhanced teamwork benefits, and it will encourage the sort of broad, integrated thinking that characterizes the best software [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16581</ns0:comment_id>
    <ns0:comment_author>On Forests and Trees | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/09/02/on-forests-and-trees/</ns0:comment_author_url>
    <ns0:comment_date>2015-09-02 08:48:57</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] reason we don&amp;#8217;t generalize is because we are being crushed by tech debt. We feel like we can&amp;#8217;t afford it. This is a very real problem, but it is [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>George and the Flood</title>
  <link>http://codecraft.co/2012/12/10/george-and-the-flood/</link>
  <pubDate>Mon, 10 Dec 2012 15:47:52 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=858</guid>
  <ns2:encoded>Here's a simple little test that teaches an important lesson. Take a moment to work through all 3 questions. I promise it won't take long. :-)

&amp;nbsp;
&amp;nbsp;

Question 1. A flood is coming. George can only swim for a little while. What should George do?

&lt;a href="http://codecraft.co/2012/12/10/george-and-the-flood/screen-shot-2012-12-09-at-12-27-01-pm/" rel="attachment wp-att-866"&gt;&lt;img class="aligncenter size-medium wp-image-866" alt="Screen Shot 2012-12-09 at 12.27.01 PM" src="http://codecraft.co/wp-content/uploads/2012/12/screen-shot-2012-12-09-at-12-27-01-pm.png?w=300" width="500" height="303" /&gt;&lt;/a&gt;

&amp;nbsp;
&amp;nbsp;

Question 2. A flood is coming. George can only swim for a little while. What should George do?

&lt;a href="http://codecraft.co/2012/12/10/george-and-the-flood/screen-shot-2012-12-09-at-12-28-05-pm/" rel="attachment wp-att-867"&gt;&lt;img class="aligncenter size-medium wp-image-867" alt="Screen Shot 2012-12-09 at 12.28.05 PM" src="http://codecraft.co/wp-content/uploads/2012/12/screen-shot-2012-12-09-at-12-28-05-pm.png?w=300" width="500" height="237" /&gt;&lt;/a&gt;

&amp;nbsp;
&amp;nbsp;

Question 3. A flood is coming. George can only swim for a little while. What should George do?

&lt;a href="http://codecraft.co/2012/12/10/george-and-the-flood/screen-shot-2012-12-09-at-12-28-43-pm/" rel="attachment wp-att-868"&gt;&lt;img class="aligncenter size-medium wp-image-868" alt="Screen Shot 2012-12-09 at 12.28.43 PM" src="http://codecraft.co/wp-content/uploads/2012/12/screen-shot-2012-12-09-at-12-28-43-pm.png?w=300" width="500" height="250" /&gt;&lt;/a&gt;

Ready to grade your answers?

&lt;strong&gt;The Yellow Belt Answer&lt;/strong&gt;

Most people say "go right, toward higher ground" if picture 1 is the only input to their analysis. The logic is pretty indisputable. But...

&lt;!--more--&gt;One of the disturbing lessons of my MBA was that many--perhaps the vast majority--of publicly traded companies operate at the level of insight provided by picture 1. Last quarter they had EPS of 0.27 USD; this quarter they have to do better to keep the stock price up, so they move to higher ground by redoubling their efforts to cut costs, improving their marketing, and adding new features.

The problem with this approach is that it's short-sighted. Leaders that insist on incremental improvement without exception are bound to find themselves, sooner or later, on a low island with the water rising. As &lt;a href="https://www.facebook.com/notes/kent-beck/when-worse-is-better-incrementally-escaping-local-maxima/498576730175196" target="_blank"&gt;Kent Beck recently pointed out&lt;/a&gt;, sometimes you have to wade into the water to get to higher ground.

Have you ever worked on a product team that can't think beyond the current crisis? That's picture 1 thinking.

&lt;strong&gt;The Blue Belt Answer&lt;/strong&gt;

If you said "go right" in picture 1, and "go left" in picture 2, and "go right" in picture 3, then you understand that the scope of vision influences your analysis. That's good.

But that's not the end of the story, either.

You see, many types of strategy require you to take calculated risks, and those risks have probability curves that vary over time. To help George, you have to hold all three analyses of his situation in your mind at the same time, and assess the likelihood that George will be able to swim across a channel in time, against the likelihood that water level will rise past certain key points. If I told you that George can't climb steep hills, then maybe going right in picture 3 isn't so smart after all...

It's not an exact science. Smart CEOs and software architects and investors and product managers and QA leads all get this. They consider the implications of their choices from multiple perspectives, make the best bets they can, and drive risk out of their decisions whenever they can find a way to do so. And often, they make better decisions than those who operate only at the level of a single picture.

&lt;strong&gt;The Black Belt Answer&lt;/strong&gt;

If you said "it depends," then give yourself a star on the forehead. &lt;a title="Steve Tolman: It depends." href="/2012/09/17/steve-tolman-it-depends/"&gt;My friend and mentor Steve Tolman would be proud of you&lt;/a&gt;. If you said, "C'mon, Daniel, you've got to tell me how bad the flood will be, when it's going to arrive, how long it will last, and whether George has the materials and skills to build a boat," then you get two stars, because you're asking specific questions.

It really &lt;em&gt;does&lt;/em&gt; depend, and I have not given you enough information. You could make some reasonable assumptions, but if you can get hard data, so much the better.

Smart black belts don't just notice that these questions need answering--they proactively attack them. I would prefer to fight the competing hordes with a well organized team of black belts around me. Wouldn't you?

&lt;strong&gt;The Master Answer&lt;/strong&gt;

If you said, "learn to swim" or "put on a life preserver" then you have captured truths that many forget. You've fully understood how, why, and on what the short-term answer depends, and you've taught it to less experienced students for years. Along the way, you've identified some core principles that always pay off. You want to be sure those core principles don't get neglected, no matter which way the "it depends" pendulum ends up swinging in a particular circumstance.

&lt;strong&gt;Your Answer&lt;/strong&gt;

How does your team operate most of the time? Are you evaluating the ramifications of your designs, processes, roadmaps, and other plans only by short-term payoff? Or do you think from many perspectives at once? Do you give proper weight to long-term? Do you have core principles that you tenaciously follow, because they're tried-and-true? Do you have a plan to learn to swim?
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;span style="color:#000080;"&gt;&lt;strong&gt;Action Item&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Next time you have a controversial decision to make, listen to how the alternatives are evaluated. Give your team a virtual blue belt or black belt or whatever belt you're wearing, and then consider how to improve.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.thedailysheeple.com/dont-survive-the-collapse-prevent-it_122012" target="_blank"&gt;Don't Survive the "Collapse" - Prevent It&lt;/a&gt; (thedailysheeple.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://iplayoochess.com/2012/12/09/are-you-head-scratching-with-uncertainty-in-your-chess-games-what-should-be-your-guide/" target="_blank"&gt;Are You Head-scratching with Uncertainty in Your Chess Games? What Should Be Your Guide?&lt;/a&gt; (iplayoochess.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>858</ns0:post_id>
  <ns0:post_date>2012-12-10 08:47:52</ns0:post_date>
  <ns0:post_name>george-and-the-flood</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="assumptions">assumptions</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="learning">learning</category>
  <category domain="category" nicename="mistakes">Mistakes</category>
  <category domain="post_tag" nicename="perspective">perspective</category>
  <category domain="post_tag" nicename="planning">planning</category>
  <category domain="post_tag" nicename="principles">principles</category>
  <category domain="post_tag" nicename="proactivity">proactivity</category>
  <category domain="post_tag" nicename="roadmaps">roadmaps</category>
  <category domain="category" nicename="software-architecture">Software Architecture</category>
  <category domain="post_tag" nicename="strategy">strategy</category>
  <category domain="post_tag" nicename="tradeoffs">tradeoffs</category>
  <category domain="post_tag" nicename="vision">vision</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_twitter_user</ns0:meta_key>
    <ns0:meta_value>dhh1128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>420</ns0:comment_id>
    <ns0:comment_author>Andy Lawrence</ns0:comment_author>
    <ns0:comment_author_email>andy3474@msn.com</ns0:comment_author_email>
    <ns0:comment_date>2012-12-10 10:51:38</ns0:comment_date>
    <ns0:comment_content>George is toast. The banks on either side are too steep to get out of the water :)</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>422</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-12-10 13:47:42</ns0:comment_date>
    <ns0:comment_content>Hah! I've just discovered how to make him drink a kryptonite potion so he can sprout gills! :-)

There's a serious side to the comment about steep banks, though. Sometimes you want so badly to get across the water that you don't consider how practical it is to be on the other side. You might be better off taking your chances where you're at. That's why the old "it depends" answer never goes out of style...</ns0:comment_content>
    <ns0:comment_parent>420</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
</item>
<item>
  <title>The Scaling Fallacy</title>
  <link>http://codecraft.co/2012/12/19/the-scaling-fallacy/</link>
  <pubDate>Wed, 19 Dec 2012 15:21:01 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=860</guid>
  <ns2:encoded>&lt;em&gt;If X works for 1 ___ &lt;/em&gt;[&lt;em&gt;minute | user | computer | customer | ...&lt;/em&gt;]&lt;em&gt;, then 100X ought to work for 100, right? And 1000X for 1000?&lt;/em&gt;

Sorry, Charlie. No dice.

One of my favorite books, &lt;a href="http://www.amazon.com/Universal-Principles-Design-Revised-Updated/dp/1592535879" target="_blank"&gt;Universal Principles of Design&lt;/a&gt;, includes a fascinating discussion of our tendency to succumb to scaling fallacies. The book makes its case using the strength of ants and winged flight as examples.

Have you ever heard that an ant can lift many times its own weight--and that if that if one were the size of a human, it could hoist a car over its head with ease? The first part of that assertion is true, but the conclusion folks draw is completely bogus. Exoskeletons cease to be a viable structure on which to anchor muscle and tissue at sizes much smaller than your average grown-up; the &lt;a class="zem_slink" title="Specific strength" href="http://en.wikipedia.org/wiki/Specific_strength" target="_blank" rel="wikipedia"&gt;strength-to-weight ratio&lt;/a&gt; just isn't good enough. Chitin is only about as tough as fingernails.

[caption id="" align="aligncenter" width="500"]&lt;a href="http://www.flickr.com/photos/ink2012/8146750081/"&gt;&lt;img alt="" src="http://farm9.staticflickr.com/8050/8146750081_0e07106d00.jpg" width="500" height="264" /&gt;&lt;/a&gt; Tough little bugger -- but not an olympic champion at human scale. Image credit: D.A.Otee (Flickr)[/caption]

I'd long understood the flaws in the big-ant-lifting-cars idea, but the flight example from the book was virgin territory for me.

Humans are familiar with birds and insects that fly. We know they have wings that beat the air. We naively assume that at much larger and much smaller scales, the same principles apply. But it turns out &lt;!--more--&gt; that at the micro scale, wings don't move enough air molecules to be helpful when they flap, and at the giant scale (say, the size of an elephant), flapping wings become impractical due to structural challenges.

&lt;strong&gt;So what?&lt;/strong&gt;

What does this have to do with software?

For one thing, what works in small codebases often doesn't work in large ones. The need for disciplined practices such as continuous integration, TDD, encapsulation, loose coupling, and so forth is just not profound if you're writing a 50-line bash script for your own consumption. This is one reason why I think &lt;a href="http://steve-yegge.blogspot.com/2007/12/codes-worst-enemy.html" target="_blank"&gt;Steve Yegge's claim that size--not poor design--is code's worst enemy&lt;/a&gt; is actually quite profound.

Setting aside the way scale affects processes and teams, think about what it does to product.

If you've ever tried to apply a design that works well at one scale to a problem domain that's a couple orders of magnitude different, you know that often, scaling is far more difficult that a simple linear calculation.

Grep is a great tool for finding text in files. It can crunch through all the files in a directory in a second or so, and all the files on my hard drive in a handful of minutes. But using grep to search all the documents in a company's archives is impractical.

A traditional enterprise search product is also a great tool for finding text in files. It's too cumbersome to set up to do the quick-and-dirty, small-scale work of grep, but it comes into its own when you need to find all emails sent by a company in the past decade that might be relevant to a lawsuit.

Enter big data...

Google's indexing of the internet is essentially a scaled-up, incredibly sophisticated, optimized version of traditional enterprise search. Last I heard, over 4 million (!) servers were behind www.google.com, servicing the queries that all of us feed it. It's impressive--miraculous, even--how effective the Google service (and Bing, and other competitors) has managed to be. I don't have major complaints about the user experience.

But it's the wrong architecture for internet scale. We're paying way too much for power and hardware to keep these sites running; we need something radically different, which is why technologies like the one I helped productize at &lt;a href="http://www.perfectsearchcorp.com" target="_blank"&gt;Perfect Search&lt;/a&gt; are the wave of the future. Perfect Search can sustain query speeds that are hundreds or thousands of times faster than a traditional index; sooner or later, the world will figure out that that matters.

&lt;strong&gt;Use better scaling assumptions&lt;/strong&gt;

The next time you have to plan for a scale that's well outside original tolerances (whether that scale has to do with numbers of machines/threads/events, or with size of deployment, or whatever), try using the &lt;a class="zem_slink" title="Pareto principle" href="http://en.wikipedia.org/wiki/Pareto_principle" target="_blank" rel="wikipedia"&gt;80:20 rule&lt;/a&gt; instead of a linear formula as your guide: the 20% of the cases at the high end of what you're targeting will take 80% of the effort to address correctly. Recurse: of the 20% at the high end, 80% of those cases might be handled by a modest adjustment of the design, but 20% need a radical improvement. And recurse again.

I don't think there's anything magical about 80:20; maybe a simple exponential function is easier and more accurate. Or maybe you have a stair-step progression. Or maybe you simply can't progress to the higher scale at all, because money or physics or some other factor imposes a hard limit that no amount of hand-waving will overcome.

Bottom line: part of your job as a designer/architect is to understand these issues, wrestle with them, and provide a balanced roadmap that anticipates the best all-around compromises.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Analyze the amount of RAM, CPU, or disk that your program uses at several different scales. Is the curve linear, exponential, logarithmic, a stair-step? What does this tell you about business goals like selling to bigger customers?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://spinnakr.com/blog/ideas/2012/12/three-big-economic-fallacies-behind-growth-hacking/" target="_blank"&gt;Three Big Economic Fallacies Behind Growth Hacking&lt;/a&gt; (spinnakr.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://dead-logic.blogspot.com/2012/12/path-of-critical-thinker-meow.html" target="_blank"&gt;Path of a Critical Thinker (Meow)&lt;/a&gt; (dead-logic.blogspot.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://pandodaily.com/2012/12/12/what-fred-wilson-and-the-vcs-dont-get-about-advertising/" target="_blank"&gt;What Fred Wilson and the VCs don't get about advertising&lt;/a&gt; (pandodaily.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>860</ns0:post_id>
  <ns0:post_date>2012-12-19 08:21:01</ns0:post_date>
  <ns0:post_name>the-scaling-fallacy</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="8020">80:20</category>
  <category domain="post_tag" nicename="ants">ants</category>
  <category domain="post_tag" nicename="architecture">architecture</category>
  <category domain="post_tag" nicename="bash">bash</category>
  <category domain="post_tag" nicename="best-practices">best practices</category>
  <category domain="post_tag" nicename="big-data">big data</category>
  <category domain="post_tag" nicename="continuous-integration">continuous integration</category>
  <category domain="post_tag" nicename="design">design</category>
  <category domain="post_tag" nicename="enterprise-search">enterprise search</category>
  <category domain="post_tag" nicename="fallacies">fallacies</category>
  <category domain="post_tag" nicename="flight">flight</category>
  <category domain="post_tag" nicename="google">google</category>
  <category domain="post_tag" nicename="loose-coupling">loose coupling</category>
  <category domain="category" nicename="mistakes">Mistakes</category>
  <category domain="post_tag" nicename="roadmaps">roadmaps</category>
  <category domain="post_tag" nicename="scaling">scaling</category>
  <category domain="category" nicename="software-architecture">Software Architecture</category>
  <category domain="post_tag" nicename="tdd">tdd</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_twitter_user</ns0:meta_key>
    <ns0:meta_value>dhh1128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:60:"http://farm9.staticflickr.com/8050/8146750081_0e07106d00.jpg";s:6:"images";a:1:{s:60:"http://farm9.staticflickr.com/8050/8146750081_0e07106d00.jpg";a:6:{s:8:"file_url";s:60:"http://farm9.staticflickr.com/8050/8146750081_0e07106d00.jpg";s:5:"width";i:500;s:6:"height";i:264;s:4:"type";s:5:"image";s:4:"area";i:132000;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2012-12-19 16:37:02";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>437</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2012-12-19 10:23:44</ns0:comment_date>
    <ns0:comment_content>good presentation on a principle that I have seen and encountered for 30 years. Though back in the day, 1 MEGA byte of RAM was a big constraint.  Several projects I worked on, trying to get management to understand that last 20% was NON-LINEAR was a huge (if not a NP) issue.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>434</ns0:comment_id>
    <ns0:comment_author>Andy Lawrence</ns0:comment_author>
    <ns0:comment_author_email>andy3474@msn.com</ns0:comment_author_email>
    <ns0:comment_date>2012-12-19 09:18:10</ns0:comment_date>
    <ns0:comment_content>Nice article. Scale means everything to the project I am working on. I have to be able to handle billions of data items in a fast, efficient manner. The software has to be able to break a problem apart so that it can be processed in parallel. The system architecture, the algorithms used, and the data structures used must be designed from the ground up with scaling in mind.

But when people talk about scaling software, they might be mixing up terms. In my blog "How Does It Scale?" at DidgetMaster.blogspot.com I discuss three different dimensions of scaling. While related, they are not the same. Your article touches on a couple of them.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>435</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2012-12-19 09:35:40</ns0:comment_date>
    <ns0:comment_content>The article at didgetmaster is excellent; thanks for the link, Andy.

One aspect of scaling that I totally ignore here, but that you mention (by implication), is scaling *down*. In our rush to get bigger and faster, we sometimes overbuild. Didgets is that rare combination that can play in the world of big data, yet still be super practical at the micro scale. Nice! That's not very common in enterprise software, and I've come to recognize it as the mark of a truly fundamental advance as opposed to lipstick on a pig.</ns0:comment_content>
    <ns0:comment_parent>434</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>798</ns0:comment_id>
    <ns0:comment_author>posicionamiento web</ns0:comment_author>
    <ns0:comment_author_email>cassie.fierro@googlemail.com</ns0:comment_author_email>
    <ns0:comment_date>2013-03-05 07:58:47</ns0:comment_date>
    <ns0:comment_content>I simply couldn't leave your web site without saying that I loved the useful information. I'm going to be back regularly to check up on new posts.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>623</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-02-01 08:14:57</ns0:comment_date>
    <ns0:comment_content>Your comment about "back in the day" leads me to make another connection: if the scale of resources that modern computers consume is so dramatically higher than it used to be, I wonder whether the complexity of the software we're building is drastically different as well. We programmers might be like the proverbial frog that's boiled by swimming in water as it heats on the stove--not noticing how much tougher it's getting to produce good stuff. Perhaps industry best practices like TDD and continuous integration, and better foundational libraries, are providing enough compensation to mostly compensate...</ns0:comment_content>
    <ns0:comment_parent>437</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2253</ns0:comment_id>
    <ns0:comment_author>2 Surprising Truths About The Iron Triangle | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/07/01/2-surprising-truths-about-the-iron-triangle/</ns0:comment_author_url>
    <ns0:comment_date>2013-07-01 16:39:07</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] You&amp;#8217;ll create virtuous cycles that perpetuate the right kinds of tradeoffs for performance, scalability, and [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>How Sutter's Wrong About const in C++ 11</title>
  <link>http://codecraft.co/2013/01/02/how-sutters-wrong-about-const-in-cpp-11/</link>
  <pubDate>Wed, 02 Jan 2013 15:41:07 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=887</guid>
  <ns2:encoded>Herb Sutter &lt;a href="http://channel9.msdn.com/posts/C-and-Beyond-2012-Herb-Sutter-You-dont-know-blank-and-blank"&gt;recently gave a talk&lt;/a&gt; about how the &lt;code&gt;const&lt;/code&gt; keyword and the &lt;code&gt;mutable&lt;/code&gt; keyword have subtle but profoundly different semantics in C++ 11. In a nutshell, he says that C++ 11 corrects the wishy-washy definition of &lt;code&gt;const&lt;/code&gt; in C++ 98; &lt;code&gt;const&lt;/code&gt; used to mean "logically constant," but now it means thread-safe. And &lt;code&gt;mutable&lt;/code&gt; now means thread-safe as well. His summary slide says:
&lt;p style="padding-left:30px;"&gt;&lt;code&gt;const&lt;/code&gt; == &lt;code&gt;mutable&lt;/code&gt; == thread safe (bitwise const or internally synchronized)&lt;/p&gt;
&lt;p style="border:solid 1px black;margin:2em;background-color:#e0e0e0;font-style:italic;padding:1em;"&gt;Editor's note: Since this post was written, Herb has updated his slide. See Herb's note in the comment stream below.&lt;/p&gt;
Now, I think Herb's talk is quite informative, and I don't dispute the core of what he was trying to convey. It's a good insight, well worth the community's attention. I learned something important; I recommend that you watch the talk. &lt;a title="Put Your Const Foot Forward" href="http://codecraft.co/2012/11/14/put-your-const-foot-forward/"&gt;Using &lt;code&gt;const&lt;/code&gt; well is an essential skill&lt;/a&gt;. But I think in his enthusiasm about the way the language has evolved to make semantics clearer, Herb does us a disservice by oversimplifying.

When Herb uses the C++ == operator to boil his point down to a pithy summary, he's implying true equivalence; what's on one side of the operator is, for all intents and purposes, identical to or indistinguishable from what's on the other side. And while &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;mutable&lt;/code&gt; and &lt;em&gt;thread-safe&lt;/em&gt; are highly related concepts, they are not equivalent enough to each other for ==.

To understand why, answer the following question: &lt;em&gt;Why would good code use &lt;/em&gt;&lt;code&gt;const&lt;/code&gt;&lt;em&gt; and/or &lt;/em&gt;&lt;code&gt;mutable&lt;/code&gt;&lt;em&gt; even if it's single-threaded?&lt;/em&gt;

Ah. I imagine you nodding your head sagely. You see where I'm going, don't you?

These two keywords don't just define semantics for cross-thread access; they define the semantics a variable or object supports when accessed by various scopes (e.g., subroutines or code blocks) on the &lt;em&gt;same&lt;/em&gt; thread. If you pass a &lt;code&gt;const Widget &amp;amp;&lt;/code&gt; to a function, that function can't call &lt;code&gt;Widget::modifyState()&lt;/code&gt; even if it's the only thread in the universe. If you declare a &lt;code&gt;m_lazy_init&lt;/code&gt; member variable to be &lt;code&gt;mutable&lt;/code&gt;, you are telling the compiler to let you change it where it would normally be disallowed, including on the same thread.

So: &lt;code&gt;const&lt;/code&gt; means &lt;em&gt;unchangeable in whatever scope sees const (including many threads)&lt;/em&gt;, which is why it also implies &lt;em&gt;thread-safe (if all threads see const)&lt;/em&gt;; &lt;code&gt;mutable&lt;/code&gt; means &lt;em&gt;changing safely in one or many threads&lt;/em&gt;, which is why it also implies &lt;em&gt;thread-safe (if all threads see const)&lt;/em&gt;. In C++ 98, these semantics were a bit loose. You could use them carelessly, cast away parts of their guarantees, and generally operate as a law unto yourself. In C++ 11 the semantics of &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;mutable&lt;/code&gt; are explicit and exacting; the standard library demands thread-safe copy construction. As a result, their role in thread safety is clarified, and we all write better code. Mutexes and atomics and certain kinds of queues are inherently safe to change from any thread; they deserve and require the &lt;code&gt;mutable&lt;/code&gt; keyword.

Instead of Herb's final equation, I'd propose a Venn diagram:

[caption id="attachment_888" align="aligncenter" width="300"]&lt;img class="size-medium wp-image-888" alt="The const and mutable keywords are not equivalent in C++ 11, but they do share guarantees about thread safety." src="http://codecraft.co/wp-content/uploads/2013/01/screen-shot-2013-01-01-at-1-25-14-pm.png?w=300" width="300" height="206" /&gt; The const and mutable keywords are not equivalent in C++ 11, but they do share guarantees about thread safety.[/caption]
&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://herbsutter.com/2013/01/01/video-you-dont-know-const-and-mutable/" target="_blank"&gt;Video: You Don't Know const and mutable&lt;/a&gt; (herbsutter.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://stackoverflow.com/questions/13471628/impossible-to-be-const-correct-when-combining-data-and-its-lock" target="_blank"&gt;Impossible to be const-correct when combining data and its lock?&lt;/a&gt; (stackoverflow.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>887</ns0:post_id>
  <ns0:post_date>2013-01-02 08:41:07</ns0:post_date>
  <ns0:post_name>how-sutters-wrong-about-const-in-cpp-11</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="c">c++</category>
  <category domain="post_tag" nicename="c-11">c++ 11</category>
  <category domain="post_tag" nicename="casting">casting</category>
  <category domain="post_tag" nicename="compiler">compiler</category>
  <category domain="post_tag" nicename="const">const</category>
  <category domain="post_tag" nicename="decoupling">decoupling</category>
  <category domain="post_tag" nicename="encapsulation">encapsulation</category>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <category domain="post_tag" nicename="iso">iso</category>
  <category domain="post_tag" nicename="mutable">mutable</category>
  <category domain="post_tag" nicename="semantics">semantics</category>
  <category domain="post_tag" nicename="standard-library">standard library</category>
  <category domain="post_tag" nicename="standards">standards</category>
  <category domain="post_tag" nicename="stl">stl</category>
  <category domain="post_tag" nicename="thread-safety">thread safety</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_twitter_user</ns0:meta_key>
    <ns0:meta_value>dhh1128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>twitter_cards_summary_img_size</ns0:meta_key>
    <ns0:meta_value>a:6:{i:0;i:429;i:1;i:295;i:2;i:3;i:3;s:24:"width="429" height="295"";s:4:"bits";i:8;s:4:"mime";s:9:"image/png";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>478</ns0:comment_id>
    <ns0:comment_author>Julie</ns0:comment_author>
    <ns0:comment_author_email>julie.jones@pobox.com</ns0:comment_author_email>
    <ns0:comment_date>2013-01-02 09:36:06</ns0:comment_date>
    <ns0:comment_content>I had much the same reaction. Const was extremely useful for both documentation and correctness long before multi-threading was common.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>510</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-01-09 15:40:17</ns0:comment_date>
    <ns0:comment_content>When I said "unchanging in one or many threads," I meant that it is unchanging whether the context is one thread or many, not that a few threads of const enforcement are enough for safety. You are quite correct that something wouldn't be thread-safe if it is visible in some threads that don't treat it as const.

I love the D language; the distinction between immutable and const is a nice enhancement over C++. Thanks for the link and the thoughtful comment.</ns0:comment_content>
    <ns0:comment_parent>509</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>483</ns0:comment_id>
    <ns0:comment_author>Herb Sutter</ns0:comment_author>
    <ns0:comment_author_email>herb.sutter@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://gravatar.com/herbsutter</ns0:comment_author_url>
    <ns0:comment_date>2013-01-03 13:08:02</ns0:comment_date>
    <ns0:comment_content>Thanks, good point. I've updated my slides to use the "implies" sign (=&amp;gt;) rather than "==" to clarify.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>484</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-01-03 14:04:02</ns0:comment_date>
    <ns0:comment_content>Herb: you're a good sport to read my post after the over-the-top title. :-) Thanks for an informative and though-provoking talk--and thanks for all the good work on C++ 11. I haven't felt this much energy on C++ (from myself or others) for a long time!</ns0:comment_content>
    <ns0:comment_parent>483</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>480</ns0:comment_id>
    <ns0:comment_author>Daniel</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-01-02 10:26:32</ns0:comment_date>
    <ns0:comment_content>I'm glad you mentioned const's use in documentation; that had slipped my mind, but I've often noticed it in the past. One of the codebases that I currently work on has C-style comments next to every parameter for every function, noting whether the parameter is an "in" or an "out" parameter. Using "const" instead would tell the programmer the same thing while using the compiler instead of the programmer's attention to detail to enforce it.</ns0:comment_content>
    <ns0:comment_parent>478</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>509</ns0:comment_id>
    <ns0:comment_author>sandforddene</ns0:comment_author>
    <ns0:comment_author_email>sandford@jhu.edu</ns0:comment_author_email>
    <ns0:comment_author_url>http://gravatar.com/sandforddene</ns0:comment_author_url>
    <ns0:comment_date>2013-01-09 12:46:35</ns0:comment_date>
    <ns0:comment_content>&amp;gt; So: const means unchanging in one or many threads, which is why it also implies thread-safe;

Incorrect. To be thread safe, an object must be unchanging in _all_ threads. I.e. the object must be immutable. The D programming language's page has a decent overview of the concepts of const and immutable, including comparisons to their C++ equivalents (http://dlang.org/const3.html)

P.S. Compilers that assume const implies an unchanging object generate incorrect code.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>714</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-02-11 20:40:09</ns0:comment_date>
    <ns0:comment_content>My understanding is as follows: If the state that's mutating is externally visible (e.g., can be read by a public getter), then you can't mark it const. If you're only mutating something like, for example, a private flag that tells you whether you've done lazy init, and if the method is threadsafe, then const is very appropriate. If the method is not threadsafe but does not modify publicly visible state, then you're in a gray area, and the best choice would be to get out of the gray by making the method threadsafe.</ns0:comment_content>
    <ns0:comment_parent>710</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>710</ns0:comment_id>
    <ns0:comment_author>Brian Cole</ns0:comment_author>
    <ns0:comment_author_email>coleb@eyesopen.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://gravatar.com/coleb2</ns0:comment_author_url>
    <ns0:comment_date>2013-02-11 17:52:29</ns0:comment_date>
    <ns0:comment_content>So we're confused around our company. Should methods that mutate state internally, but are thread safe, be marked as "const"? For example, concurrent_queue::push be marked "const"?</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2943</ns0:comment_id>
    <ns0:comment_author>Jam</ns0:comment_author>
    <ns0:comment_author_email>rananthu@outlook.com</ns0:comment_author_email>
    <ns0:comment_date>2013-12-17 10:24:11</ns0:comment_date>
    <ns0:comment_content>Just to understand - 
1. The definition of const in C++ 11 is still "logically" or "observably" const, just like C++ 98. 
2. However, new to C++ 11, const also implies thread safety. 

Right? 

That however implies that the definition of const-ness in C++ 11 is still as ambiguous as ever. For example... 

In one case, Foo.GetValue() could delay load some internal variable, making it reasonable to make GetValue() const. 

In another case, Foo.GetValue() could cause an expensive load of an internal cache that the user of that method should know about. Even if the change is thread safe - would/should I make the method const? I assume I (still) shouldn't. 

Right?</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1387301053</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>18085912456</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2947</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-12-17 20:46:24</ns0:comment_date>
    <ns0:comment_content>Under C++ 98, I could write class Widget with an == operator that was not thread-safe, and I was not violating any requirement other than my own good judgment. I could expect to use such a class with the standard library. Writers of the standard library might have wanted me to declare my operator const, but they couldn't reason about potential race conditions and justify their reasoning by pointing to any standard.

Under C++11, my understanding is that Widget::operator == must be declared const to be used by the standard library, or my templates won't compile. Further, if I write Widget in such a way that == isn't thread-safe, I am out of compliance with the guarantees in the standard library, and writers of the library are justified in telling me that misbehavior is my fault, not theirs.

These changes do have consequences. In one recent port from c++98 to c++11, I had to declare a mutex mutable that had not been qualified that way before, before I could make the compiler happy. However, such examples are unusual.

My original beef with Sutter's claim was that it ignored all the semantics of const within the context of a single thread. Those semantics are important, and they remain useful and unchanged in C++ 11.

Since writing the post, I've also had various commenters point out another problem with Sutter's assertion. They note that constness in one scope doesn't guarantee constness in all other scopes--and a single writer in a non-const context throws all guarantees about thread safety and race conditions out the window. For that reason, I won't disagree if you say that effectively, we still have a squishy definition of const, and one that's not as tied to thread safety as Sutter claimed. But I also think Sutter is correct that our guarantee is stronger than it used to be.

Re. Foo.GetValue() -- I wouldn't decide to qualify the method as const based on whether it does something expensive; I'd still go back to the tried and true "is the state of the object observably different after calling the method" question. I know that's a C++98 mindset, but Sutter didn't move the needle for me.</ns0:comment_content>
    <ns0:comment_parent>2943</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>18107833372</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1387338384</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2953</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-12-20 09:06:37</ns0:comment_date>
    <ns0:comment_content>Jam: That is an excellent and thought-provoking question. As I pondered your example, I began to realize how fuzzy the concept of object state truly is.  I started to answer several times, but my responses left me unsatisfied because I realized I couldn't give a clear enough rule to decide. In a lot of cases, object state is easy to understand--but there are enough corner cases to give me pause.

In some of my other posts, I've been talking about how I want to write a different programming language. One of the concepts I'd been playing around with is formalizing object state (basically, making it super easy to describe the state machine for each class, and the semantics that attach to it, such as "function X can only be called when I'm in state 1 or state 3"). I hadn't spent a lot of time taking that idea from vague to crisp, but your comment makes me think I should ponder the issue a lot more carefully.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>18229030504</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1387555597</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2949</ns0:comment_id>
    <ns0:comment_author>Jam</ns0:comment_author>
    <ns0:comment_author_email>rananthu@outlook.com</ns0:comment_author_email>
    <ns0:comment_date>2013-12-19 10:40:35</ns0:comment_date>
    <ns0:comment_content>Thanks for the reply and the original post - I do follow the points made in the post and subsequent follow ups, and realize my question is a bit orthogonal to the discussion on what const means for thread safety in C++ 11. I had really found Herb's video (and your follow up) when I was searching for whether I should make my method const. 

I guess a part of my confusion in the Foo.GetValue() example I mentioned earlier has more to do with what makes a method "observably" const. I think the confusion is in part because what's "observable" is a little ambiguous for me, and it seemed  that C++ 11 didn't really help to remove that ambiguity like Herb may have indirectly mentioned in his (excellent) presentation. 

Not sure if this blog is the best place to continue this, but lets say we have a method like - 
&lt;code&gt;
shared_ptr  ResourceManager::GetSomeResource(). 
&lt;/code&gt;

Assume we remove thread safety concerns - say access to SomeResource is synchronized. 

If calling GetSomeResource() results in SomeResource getting loaded into memory, should I (as the designer of ResourceManager) make the above method "const" or not? 

It seems that depends on how I (as the user of ResourceManager) would figure if *it* has gone to an "observably" different state after the call to GetSomeResource(). 

Possibility 1:
It is observably different if there exists some API on ResourceManager that will return a different answer before and after my call to ResourceManager.GetSomeResource(). 

Possibility 2:
It's observably different if I there exists some API on either &lt;i&gt;SomeResource&lt;/i&gt; or ResourceManager that will return a different answer before and after my call to ResourceManager.GetSomeResource(). 

Would the answer change depending on whether the resource manager is holding on the resource internally? Lets say, resource manager has a CollectGarbage() call that I need to make after I make calls like GetSomeResource(). Wouldn't making GetSomeResource() const make me think I don't have to call CollectGarbage()? 

Like you mention, seems it shouldn't matter if the resource is expensive or not - that makes it even more ambigous, and more dependent on perspective - what's expensive for a mobile client need not be the case for a desktop client.</ns0:comment_content>
    <ns0:comment_parent>2947</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>18184450714</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1387474835</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2177</ns0:comment_id>
    <ns0:comment_author>earwicker</ns0:comment_author>
    <ns0:comment_author_email>spam@earwicker.com</ns0:comment_author_email>
    <ns0:comment_date>2013-06-28 11:10:23</ns0:comment_date>
    <ns0:comment_content>"So: const means unchanging in one or many threads,"

But const &amp;amp;v means either one of the following:

1. v doesn't change ("bitwise immutable")
2. changes to v are synchronized against reads from other threads

That is:

void reader(const Thing &amp;amp;v)
{
    std::cout &amp;lt;&amp;lt; v.message();
    std::cout &amp;lt;&amp;lt; v.message();
    std::cout &amp;lt;&amp;lt; v.message();
}

Now, suppose other references to v exist on other threads, and these are non-const. So v may be mutated by those threads such that the message is altered. So as foo is executing, it may print a variety of messages, not necessarily the same message three times. This is perfectly okay under the new C++11 rules.

That is, const still doesn&amp;#039;t mean unchanging (in any number of threads).

And it should be noted that this whole thing is totally _optional_. The above restriction only applies if the object is visible to multiple threads. One widely used sure-fire way to stop that is to put a comment in capital letters on the class saying it&amp;#039;s not thread-safe! :)

In fact, that&amp;#039;s the situation for most classes in the standard library, because they would perform horribly if they always protected all mutations against reads from other threads.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>8532639</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2182</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2013-06-28 12:12:40</ns0:comment_date>
    <ns0:comment_content>Excellent point. Well made.

Const isn't claiming that an object can't be changed somewhere else; it's claiming that it can't be changed by the thing that sees it as const.

If I were to fix my verbiage above, I'd probably revise by saying "const means not allowing change from whichever thread(s) see constness".</ns0:comment_content>
    <ns0:comment_parent>2177</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>18509</ns0:comment_id>
    <ns0:comment_author>Always declare std::mutex as mutable in C++11? - ExceptionsHub</ns0:comment_author>
    <ns0:comment_author_url>https://exceptionshub.com/always-declare-stdmutex-as-mutable-in-c11.html</ns0:comment_author_url>
    <ns0:comment_date>2017-12-08 00:18:03</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] What Sutter got wrong about Const in C++11 [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>6630</ns0:comment_id>
    <ns0:comment_author>Lacunas Everywhere | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/16/lacunas-everywhere/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-16 14:14:17</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] Perhaps you&amp;#8217;re saying to yourself: &amp;#8220;Language X has a way to solve problem Y.&amp;#8221; At the micro level, I don&amp;#8217;t necessarily disagree. I have written unit tests that (sort of) proved thread-safety in a codebase. I&amp;#8217;ve created scripts that proved copyright/license compliance. I have found clever ways to enforce one or two high-value coding standards. I know about Ada&amp;#8217;s numeric range types. I&amp;#8217;ve decorated python code in such a way that prototype code was discoverable, so we wouldn&amp;#8217;t ship it. I&amp;#8217;ve used @Override in java. The const and constexpr keywords in C++ tell you something about thread safety. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>3 Commandments of Performance Optimization</title>
  <link>http://codecraft.co/2013/01/08/3-commandments-of-performance-optimization/</link>
  <pubDate>Tue, 08 Jan 2013 15:57:10 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=898</guid>
  <ns2:encoded>In my experience, most programmer attitudes on speed fall into one of these categories:

&lt;em&gt;laissez-faire&lt;/em&gt;
&lt;p style="padding-left:30px;"&gt;Programmers with this mindset think about performance on occasion, but it's not a big focus. Occasionally they're forced to tackle problems because a particular design is too slow, a customer is unhappy, or new scaling requirements materialize. In such cases, they experiment until behavior improves, and then go back to the work they really care about.&lt;/p&gt;
&lt;em&gt;passionate&lt;/em&gt;
&lt;p style="padding-left:30px;"&gt;Programmers with this mindset have a hard time &lt;em&gt;not&lt;/em&gt; thinking about performance. Every design they do reflects elaborate consideration of how to minimize footprint and/or how to complete a task in the shortest possible time. (Note that those two priorities often conflict.) Programmers who are passionate about performance often feel like their laissez-faire counterparts are derelict in their duty.&lt;/p&gt;
I don't think either of these extremes is healthy in all cases. I have seen programmers who chronically think about performance too late,  creating large refactoring burdens and sabotaging their company's success. Sometimes when you go from "make it work" to "make it fast" you find that all your original work is a waste, because a totally different design (even different tests, conceivably) is the only way forward; I wrote about this in "&lt;a title="A Quibble With Martin’s “Optimize Later” Notion" href="http://codecraft.co/2012/08/28/a-quibble-with-martins-optimize-later-notion/" target="_blank"&gt;A Quibble with Martin's 'Optimize Later' Notion&lt;/a&gt;".

On the other hand, it is possible to be &lt;em&gt;too&lt;/em&gt; passionate about performance; optimizing the performance of the dev team (by decreasing coding and testing time) is often a better business choice than optimizing execution speed in ways that make code more complex and harder to verify. I have encountered performance zealots disqualifying a perfectly good design on the grounds that it's not performant enough in a use case that only 2 customers on the entire planet would ever care about. Not smart. As I've said many times, &lt;a title="Good Code Is Balanced" href="http://codecraft.co/2012/08/27/good-code-is-balanced/" target="_blank"&gt;good code is balanced&lt;/a&gt;.

[caption id="" align="aligncenter" width="480"]&lt;a href="http://en.wikipedia.org/wiki/ThrustSSC" target="_blank"&gt;&lt;img class=" " alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/0/06/ThrustSSC_front.jpg/800px-ThrustSSC_front.jpg" width="480" height="320" /&gt;&lt;/a&gt; ThrustSSC -- the first car to break the sound barrier. Sometimes speed is the ultimate criterion. However, most money is made on cars with more modest performance requirements. Photo credit: cmglee (Wikimedia Commons)[/caption]

Let's assume you buy my criticism of the extremes, and you're willing to apply the &lt;a title="Steve Tolman: It depends." href="http://codecraft.co/2012/09/17/steve-tolman-it-depends/" target="_blank"&gt;"it depends" doctrine&lt;/a&gt;. &lt;!--more--&gt;In some cases, you do nothing about performance, because the stakes are low. (Yes, all you performance zealots, there really are cases like this.) In other cases, you have to bring your A game. You want to strive for a pragmatic position that preps the code to be scalable up and down for years to come, that delights customers with its responsiveness, that's not overly complex or expensive to create or maintain, that makes wise use of scarce resources, and that will be friendly to innovations like massive parallelism and faster disk, network, and CPUs.

A tall order.

Here are 3 principles that I believe that will maximize your chances for success.

&lt;strong&gt;I. Thou shalt measure.&lt;/strong&gt;

How many of the following doctrines have been preached to you?
&lt;ul&gt;
	&lt;li&gt;The stack is faster than the heap.&lt;/li&gt;
	&lt;li&gt;RAM is faster than disk.&lt;/li&gt;
	&lt;li&gt;Inlines are faster than normal function calls, which are faster than virtuals.&lt;/li&gt;
	&lt;li&gt;Hand-coded classes are faster than STL.&lt;/li&gt;
	&lt;li&gt;Arrays are faster than linked lists.&lt;/li&gt;
	&lt;li&gt;Parallel is faster than serial.&lt;/li&gt;
	&lt;li&gt;Qsort is faster than bubble sort.&lt;/li&gt;
	&lt;li&gt;"Native code" is faster than interpreted or garbage-collected languages.&lt;/li&gt;
	&lt;li&gt;Atomics are faster than mutexes.&lt;/li&gt;
	&lt;li&gt;In-proc is faster than out-of-proc.&lt;/li&gt;
&lt;/ul&gt;
Want to know the truth?

The truth is, it depends.

It is useful to learn certain rules of thumb. We have to have a &lt;a title="Why Mental Models Matter" href="http://codecraft.co/2012/11/05/why-mental-models-matter/" target="_blank"&gt;mental model&lt;/a&gt; that lets us make simplifying predictions, such as "It's probably going to be a waste of my time to make command-line parsing faster if my program runs as a daemon." We also want to code using techniques that are perennial best-of-breed winners as far as performance is concerned, all other things being equal.

But.

Not all rules of thumb are not equally true or useful to begin with. What's more, not all rules of thumb are equally true for all types of hardware, and most rules of thumb do not hold constant over time. The landscape has shifted repeatedly in recent years due to the advent of mobile devices, NVRAM, GPUs, ultra-low-power CPUs, radically faster networks, hadoop, JVMs hosted in hardware, virtualization, cloud, and dozens of other innovations. You can expect regular flux for the foreseeable future.

The reason our profession is called computer science is because it traffics in provable hypotheses, not hunches. In order to do any serious performance optimization, you must have data. And generic data is suspect; it's probably not good enough to say "I called each function a million times; the one that uses disk is 4000 times slower than the one that uses RAM on my machine." This sort of report sounds good, but it doesn't tell you whether the functions are called with the same frequency and parameters as they would be in production. Your data should reflect the environment most relevant to your customers, under conditions that are likely to matter to your customers. Or as close to it as you can get, given constraints on time and resources.

If you are optimizing by rule of thumb, instead of using cold, hard data, then you are breaking the first commandment of optimization.

Repent!

Side benefit A: Measurement defuses holy wars among passionate developers. We tend to argue more about dogma, and less about data.

Side benefit B: Measurement provides numbers that other smart people (managers, product managers, executives) can use to participate in tradeoff calculations. Saying that a rewrite will make things "faster" is hard for a business person to evaluate; saying that it will make a particular use case 73% faster for the average customer, on a system with average daytime load, is easier.

&lt;strong&gt;II. Thou shalt work the bottleneck.&lt;/strong&gt;

If you have not already read &lt;a href="http://www.amazon.com/Goal-Process-Ongoing-Improvement/dp/0884271951/" target="_blank"&gt;&lt;em&gt;The Goal&lt;/em&gt;, by Eliyahu Goldratt&lt;/a&gt;, then add it to your backlog. Or at least spend a few minutes with the cliff notes. In the book, a manager in a production facility is trying to make more widgets. He tries all sorts of improvements. He threatens and cajoles and "motivates" the troops. Some experiments are fruitless. Some experiments actually make things worse.

Eventually he realizes a profound truth: &lt;em&gt;effort spent on anything other than the current bottleneck will have no immediate benefit.&lt;/em&gt;

Engineers, write this down on a 3x5 card and staple it to your forehead.

If a process is I/O bound, then a better sort algorithm ain't gonna matter, even if the better sort is 1000x faster. Likewise, if you take four milliseconds to read a config file, half a second to query a database, and half a second to format an http response, then building a more efficient config file parser ain't gonna matter.

In order to work the bottleneck (or bottlenecks!) correctly, you must construct a mental model of a processing pipeline, backed by the data you collect, that looks something like this:

[caption id="attachment_901" align="aligncenter" width="500"]&lt;img class="size-full wp-image-901" alt="Sample diagram of a process that might be optimized (in this case, a browser requesting a page that requires database query support). Greater height = greater throughput of a subsection of the process. Current bottleneck = shortest rectangle." src="http://codecraft.co/wp-content/uploads/2013/01/pipeline.png" width="500" height="500" /&gt; Sample pipeline diagram for a process that might be optimized (in this case, a browser requesting a page that requires database query support). Greater height = greater throughput of a subsection of the process. Current bottleneck = shortest rectangle (in this case, security filter).[/caption]

Once you have such a model, the proper focus for optimization should become obvious. (It should also be clear when/whether work on secondary bottlenecks might pay off. For example, if you can increase the capacity of the most constrained section of your pipeline, then perhaps the next-most-constrained section's capacity will become relevant...)

&lt;strong&gt;III. Thou shalt measure.&lt;/strong&gt;

This is not redundant, and it is not simply repeated for dramatic effect.

After you've measured and made your tradeoffs, you must continue to measure, at least often enough to notice if the tradeoffs you made become invalid. Remember the part about how often rules of thumb change? Don't make the assumption that the right tradeoffs today will always be the right tradeoffs tomorrow.

I have worked several times in my career on technologies that were orders of magnitude faster than their competitors in the marketplace. In each case, the faster tech was disruptive, and the established and slower equivalent was long in the tooth. And in each case, the slower technology wasn't nearly so slow to begin with; its performance eroded steadily over time as it became more complex and addressed more and more corner cases. (Consider how the introduction of security affects performance in the pipeline diagram above.) So a word of warning to all purveyors of disruptive, radically faster coolness: if you don't continue to measure the performance of your stuff, on an on-going basis, I predict that you will lose a lot of your edge.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Build a pipeline diagram for a process that you want to optimize. Identify bottlenecks. What aspects of the process should you ignore?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://java.dzone.com/articles/not-all-optimization-premature" target="_blank"&gt;Not All Optimization Is Premature&lt;/a&gt; (java.dzone.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://highscalability.com/blog/2012/12/10/switch-your-databases-to-flash-storage-now-or-youre-doing-it.html" target="_blank"&gt;Switch Your Databases To Flash Storage&lt;/a&gt; (highscalability.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>898</ns0:post_id>
  <ns0:post_date>2013-01-08 08:57:10</ns0:post_date>
  <ns0:post_name>3-commandments-of-performance-optimization</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="attitude">attitude</category>
  <category domain="post_tag" nicename="balance">balance</category>
  <category domain="post_tag" nicename="best-practice">best practice</category>
  <category domain="post_tag" nicename="bottlenecks">bottlenecks</category>
  <category domain="post_tag" nicename="commandments">commandments</category>
  <category domain="post_tag" nicename="measurement">measurement</category>
  <category domain="post_tag" nicename="mental-models">mental models</category>
  <category domain="post_tag" nicename="metrics">metrics</category>
  <category domain="category" nicename="mistakes">Mistakes</category>
  <category domain="post_tag" nicename="optimization">optimization</category>
  <category domain="post_tag" nicename="performance">performance</category>
  <category domain="post_tag" nicename="rules-of-thum">rules of thum</category>
  <category domain="post_tag" nicename="speed">speed</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_twitter_user</ns0:meta_key>
    <ns0:meta_value>dhh1128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>500</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2013-01-08 10:19:35</ns0:comment_date>
    <ns0:comment_content>Can't improve it if you can't measure it!

Measuring twice is key, because then you have two points to compare to each other. Otherwise, one data point is simply a factoid for some tabloid to sell paper.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>512</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-01-10 08:43:47</ns0:comment_date>
    <ns0:comment_content>Andy: I strongly agree with a lot of your comment--especially the part about "too many programmers think that faster processors or bigger pipes can overcome bad algorithms." One of the big insights that should be developed during the CS data structures classes is that some data structures, and some algorithms that work those data structures, are inherently faster that others at large scale. Programmers that choose a solution that's adequate at one scale, but woefully inefficient at another, may be doing themselves and their team a great disservice.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>511</ns0:comment_id>
    <ns0:comment_author>Andy Lawrence</ns0:comment_author>
    <ns0:comment_author_email>andy3474@msn.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.facebook.com/andy.lawrence.9237</ns0:comment_author_url>
    <ns0:comment_date>2013-01-09 22:00:01</ns0:comment_date>
    <ns0:comment_content>Personally I tend to err toward the "passionate" side of optimization. While I am sure that I have wasted some time fine-tuning some code that only ended up being called once or twice; I have also been pleasantly surprised in many cases where the whole product became much more functional just because some code I wrote worked faster than the spec required.

With my current project, I have had a number of features just "fall out" of the design and work simply because the code ran so fast that it became trivial to process some query.

Performance coding is becoming a lost art. Too many programmers think that faster processors or bigger pipes can overcome bad algorithms. That can work in some cases until a competitor comes along who does it right.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>hc_post_as</ns0:meta_key>
      <ns0:meta_value>facebook</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>hc_avatar</ns0:meta_key>
      <ns0:meta_value>http://graph.facebook.com/100002149602602/picture?type=large&amp;_md5=156675b49f3e5ad1205b4a707e4bfde7</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>hc_foreign_user_id</ns0:meta_key>
      <ns0:meta_value>100002149602602</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>505</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-01-08 22:45:09</ns0:comment_date>
    <ns0:comment_content>I agree; it's awfully hard to get the slope of a line from one point...</ns0:comment_content>
    <ns0:comment_parent>500</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2252</ns0:comment_id>
    <ns0:comment_author>2 Surprising Truths About The Iron Triangle | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/07/01/2-surprising-truths-about-the-iron-triangle/</ns0:comment_author_url>
    <ns0:comment_date>2013-07-01 16:39:04</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] will align. You&amp;#8217;ll create virtuous cycles that perpetuate the right kinds of tradeoffs for performance, scalability, and [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2490</ns0:comment_id>
    <ns0:comment_author>The third half of computational economics | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/08/09/the-third-half-of-computational-economics/</ns0:comment_author_url>
    <ns0:comment_date>2013-08-09 11:58:46</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] starvation of a humble process that can&amp;#8217;t adequately compete for resources. It would require measurement and tuning. It might require some variant of genetic algorithms so initial profit formulas would evolve. But I [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16584</ns0:comment_id>
    <ns0:comment_author>On Forests and Trees | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/09/02/on-forests-and-trees/</ns0:comment_author_url>
    <ns0:comment_date>2015-09-02 08:49:02</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] reason we don&amp;#8217;t generalize is because we&amp;#8217;re addicted to details. I have heard performance zealots say that they couldn&amp;#8217;t break up massive C/C++ functions because they couldn&amp;#8217;t trust the [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>8712</ns0:comment_id>
    <ns0:comment_author>Grumpy Old Men, Opacity, and Optimizers | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/09/09/grumpy-old-men-opacity-and-optimizers/</ns0:comment_author_url>
    <ns0:comment_date>2014-09-09 08:48:28</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] I applaud their passion, even if I think they sometimes get carried away. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Don't forget the circuit breakers</title>
  <link>http://codecraft.co/2013/01/11/dont-forget-the-circuit-breakers/</link>
  <pubDate>Fri, 11 Jan 2013 13:01:05 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=913</guid>
  <ns2:encoded>Recently I've been pondering an interesting book called &lt;a href="http://pragprog.com/book/mnee/release-it"&gt;&lt;em&gt;Release It!&lt;/em&gt;, by Michael Nygard&lt;/a&gt;. It's full of anecdotes from someone who has spent a major portion of his career troubleshooting high-profile crashes of some of the most complex production &lt;a class="zem_slink" title="Software system" href="http://en.wikipedia.org/wiki/Software_system" target="_blank" rel="wikipedia"&gt;software systems&lt;/a&gt; in the world--airline reservations, financial institutions, leading online retailers, and so forth.

[caption id="" align="alignright" width="238"]&lt;a href="http://commons.wikipedia.org/wiki/File:Jtecul.jpg" target="_blank"&gt;&lt;img class="zemanta-img-inserted" title="circuit breaker" alt="circuit breaker" src="http://upload.wikimedia.org/wikipedia/commons/f/fd/Jtecul.jpg" width="238" height="295" /&gt;&lt;/a&gt; A circuit breaker. Photo credit: Wikimedia Commons.[/caption]

One &lt;a class="zem_slink" title="Design pattern (computer science)" href="http://en.wikipedia.org/wiki/Design_pattern_%28computer_science%29" target="_blank" rel="wikipedia"&gt;design pattern&lt;/a&gt; that Nygard recommends was new to me, but it rang true as soon as I saw its description. Like many classic patterns, I've implemented variations on it without knowing the terminology. I like Nygard's formulation, so I thought I'd summarize it here; as I've said before, &lt;a title="Good Code Plans for Problems" href="http://codecraft.co/2012/09/03/good-code-plans-for-problems/"&gt;good code plans for problems&lt;/a&gt;.

The pattern is called &lt;strong&gt;circuit breaker&lt;/strong&gt;, and its purpose is to prevent runaway failures.

In systems without circuit breakers, failures in an external call may cause an exception on the caller's side; this can cause the caller to log, retry, and/or execute other specialized logic. Since errors are supposed to be the &lt;a class="zem_slink" title="Corner case" href="http://en.wikipedia.org/wiki/Corner_case" target="_blank" rel="wikipedia"&gt;corner case&lt;/a&gt;, the blocks of code that handle them are often expensive to execute. The very slowness of the error-handling codepath can be the source of further failures, because locks are held longer than normal, or because we poll until a connection is restored, overwhelming a system that's already limping.

Or, to borrow an old idiom, "it never rains but it pours."

In the circuit breaker pattern, on the other hand, the caller assigns each "circuit" (a codepath that invokes an external entity) to one of three possible states: &lt;span style="color:#993366;"&gt;closed&lt;/span&gt;, &lt;span style="color:#993366;"&gt;open&lt;/span&gt;, or &lt;span style="color:#993366;"&gt;half-open&lt;/span&gt;. &lt;!--more--&gt;In the &lt;span style="color:#993366;"&gt;closed&lt;/span&gt; state, all is copacetic; calls succeed quickly. However, if the caller starts seeing failures or brownouts, and if these failures eventually create enough resistance on the circuit, the circuit's state is considered &lt;span style="color:#993366;"&gt;open&lt;/span&gt;--all traffic on the circuit is suspended for a while, allowing backlogs to clear and former equilibrium to return. While in the open state, code that attempts to use the circuit gets an immediate and cheap failure. After enough time has passed, the circuit breaker assumes a &lt;span style="color:#993366;"&gt;half-open&lt;/span&gt; state, where it is willing to try again to see if things are now better. With success, the circuit transitions back to &lt;span style="color:#993366;"&gt;closed&lt;/span&gt; (normal); with failure, it reverts to &lt;span style="color:#993366;"&gt;open&lt;/span&gt; for more waiting.

Nygard's war stories are an excellent argument for building circuit breakers. I see eloquent support in other contexts as well.

Consider biology. Life manages incredible complexity to equilibrium, at both micro and macro scales, in ways that software barely begins to contemplate. In fact, &lt;a class="zem_slink" title="Homeostasis" href="http://en.wikipedia.org/wiki/Homeostasis" target="_blank" rel="wikipedia"&gt;homeostasis&lt;/a&gt; is one of &lt;a title="The 8th Characteristic" href="http://codecraft.co/2012/09/28/the-8th-characteristic/"&gt;life's 8 key characteristics&lt;/a&gt;. I find it interesting that in many cases, life achieves this balance using &lt;a class="zem_slink" title="Feedback" href="http://en.wikipedia.org/wiki/Feedback" target="_blank" rel="wikipedia"&gt;feedback loops&lt;/a&gt; that temporarily suspend or throttle complex processes in much the same way as the circuit breaker pattern we're discussing here. A cell regulates its internal &lt;a class="zem_slink" title="PH" href="http://en.wikipedia.org/wiki/PH" target="_blank" rel="wikipedia"&gt;pH&lt;/a&gt; and salinity based on signals exchanged with the external environment; predator populations grow, shrink, and migrate based upon the abundance of prey; our bodies develop hunger when they need energy, and fatigue when they need time to repair.

If biology isn't your thing, what about finances? Remember the cascading failures in the financial system that led to the &lt;a href="http://en.wikipedia.org/wiki/2010_Flash_Crash" target="_blank"&gt;"flash crash" of 2010&lt;/a&gt;? Remember how &lt;a class="zem_slink" title="Bear Stearns" href="http://en.wikipedia.org/wiki/Bear_Stearns" target="_blank" rel="wikipedia"&gt;Bear Stearns&lt;/a&gt; and &lt;a class="zem_slink" title="Lehman Brothers" href="http://en.wikipedia.org/wiki/Lehman_Brothers" target="_blank" rel="wikipedia"&gt;Lehman Brothers&lt;/a&gt; and &lt;a class="zem_slink" title="American International Group" href="http://en.wikipedia.org/wiki/American_International_Group" target="_blank" rel="wikipedia"&gt;AIG&lt;/a&gt; fell like dominoes before that? The NYSE has instituted &lt;a href="http://en.wikipedia.org/wiki/Trading_curb" target="_blank"&gt;trading curbs&lt;/a&gt; that temporarily suspend normal activity when danger signals are observed. Smart.

We need software built with this same "expect failure and plan to handle it" mindset.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Next time you are designing an interaction with an external component or subsystem, consider implementing a circuit breaker to make the interaction less fragile and more prone to auto-balancing.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://scottladwig.com/2013/01/03/circuit-breakers-the-very-basics-part-1/" target="_blank"&gt;Circuit Breakers - The Very Basics Part 1&lt;/a&gt; (scottladwig.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://seekingalpha.com/article/1000781-the-secret-to-hvdc-grids-abb-unveils-hvdc-circuit-breaker?source=feed" target="_blank"&gt;The Secret To HVDC Grids: ABB Unveils HVDC Circuit Breaker&lt;/a&gt; (seekingalpha.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://jrvarma.wordpress.com/2013/01/11/why-exchanges-should-be-forced-to-use-open-source-software/" target="_blank"&gt;Why exchanges should be forced to use open source software&lt;/a&gt; (jrvarma.wordpress.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.h-online.com/open/news/item/Netflix-open-sources-Hystrix-resilience-library-1757427.html" target="_blank"&gt;Netflix open sources Hystrix resilience library&lt;/a&gt; (h-online.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>913</ns0:post_id>
  <ns0:post_date>2013-01-11 06:01:05</ns0:post_date>
  <ns0:post_name>dont-forget-the-circuit-breakers</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="cascading-failures">cascading failures</category>
  <category domain="post_tag" nicename="circuit-breaker">Circuit breaker</category>
  <category domain="post_tag" nicename="complexity">complexity</category>
  <category domain="post_tag" nicename="defensive-programming">defensive programming</category>
  <category domain="post_tag" nicename="error-handling">error handling</category>
  <category domain="post_tag" nicename="exception-handling">Exception handling</category>
  <category domain="post_tag" nicename="exceptions">exceptions</category>
  <category domain="post_tag" nicename="failure">failure</category>
  <category domain="post_tag" nicename="problems">problems</category>
  <category domain="post_tag" nicename="regulation">regulation</category>
  <category domain="post_tag" nicename="resilience">resilience</category>
  <category domain="category" nicename="software-architecture">Software Architecture</category>
  <category domain="category" nicename="tips-and-tricks">Tips and Tricks</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_twitter_user</ns0:meta_key>
    <ns0:meta_value>dhh1128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>twitter_cards_summary_img_size</ns0:meta_key>
    <ns0:meta_value>a:7:{i:0;i:238;i:1;i:295;i:2;i:2;i:3;s:24:"width="238" height="295"";s:4:"bits";i:8;s:8:"channels";i:3;s:4:"mime";s:10:"image/jpeg";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>762</ns0:comment_id>
    <ns0:comment_author>Architects: manage risk like a Vegas bookie &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/02/21/architects-manage-risk-like-a-vegas-bookie/</ns0:comment_author_url>
    <ns0:comment_date>2013-02-21 09:31:31</ns0:comment_date>
    <ns0:comment_content>[...] Is my architecture properly accounting for risk of environmental problems such as DDOS, routing failures, brownouts, and temporary loss of an internal component? (See my article about circuit breakers.) [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>963</ns0:comment_id>
    <ns0:comment_author>Adios to &amp;#8220;computer programming&amp;#8221; | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/04/05/adios-to-computer-programming/</ns0:comment_author_url>
    <ns0:comment_date>2013-04-05 09:34:31</ns0:comment_date>
    <ns0:comment_content>[...] is just as interconnected. Individual chunks of code depend on one another being alive, can poison one another&amp;#8217;s environment, must respect the constraints implied by one another&amp;#8217;s requirements. Engineers and architects [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>519</ns0:comment_id>
    <ns0:comment_author>Rob Stutton</ns0:comment_author>
    <ns0:comment_author_email>rob@stutton.net</ns0:comment_author_email>
    <ns0:comment_date>2013-01-11 18:25:47</ns0:comment_date>
    <ns0:comment_content>I'm loving coding a fat client UI in JavaScript - and learning to worry less about comms errors; I never change my state unless the call succeeds and just report any failures to the user with no retries or logging. Since all I/O is tied directly to user actions, they are free to retry whatever they did ... it's very relaxing :-)</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>523</ns0:comment_id>
    <ns0:comment_author>Don</ns0:comment_author>
    <ns0:comment_author_email>don_kleinschnitz@hotmail.com</ns0:comment_author_email>
    <ns0:comment_date>2013-01-13 06:42:43</ns0:comment_date>
    <ns0:comment_content>I call this subject, defensive architecture. Its common to write code within an architecture and design based upon a story working. In architecture I think that there is an opportunity to use "circuit breaker" techniques but I also think there is an opportunity to build in sensors and diagnostics that can run inline or better yet in "white space". 
Enterprise code should be written with sensors that pass information to another system whose purpose it is to monitor performance, stability and analyze potential failure. This system could also decide on routing the code another way in case of failure. In this case the routing switches would replace circuit breakers and the "service" essentially reroutes around a failure or poorly functioning element......
Bottom line is that we have lots of sensors in most hardware, few in software ....
I see this need for monitoring from within code becoming more critical as the use of open source increases and enterprises provision their code inside the likes of AWS. I bet that Netflix would agree with this notion after the holiday fiasco .......</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>524</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-01-13 15:05:00</ns0:comment_date>
    <ns0:comment_content>Don: Your background with hardware gives you a valuable angle on this that those of us who are pure software folks miss. Thanks for chiming in. I agree with your prediction about this becoming more and more important as software gets more complex. In fact, I've been meaning for quite a while to write a post about how living systems (in biology) profit from the ability that all living things share, to react to stimuli. Your observation about sensors points to the same truth.</ns0:comment_content>
    <ns0:comment_parent>523</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>520</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-01-11 19:09:02</ns0:comment_date>
    <ns0:comment_content>Interesting. I hadn't considered the benefits of running inside a robust and well implemented browser--but you've certainly put your finger on one of them. +1 for not solving problems when you don't have to!</ns0:comment_content>
    <ns0:comment_parent>519</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>525</ns0:comment_id>
    <ns0:comment_author>LisaAn</ns0:comment_author>
    <ns0:comment_author_email>lisaan@juno.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.lisaan.com</ns0:comment_author_url>
    <ns0:comment_date>2013-01-13 16:40:32</ns0:comment_date>
    <ns0:comment_content>I have often found it interesting that over half the code is devoted to checking for error conditions and dealing with errors but we don't often test error conditions but the "golden path" instead. Perhaps the "circuit breaker" would push us to test errors more often.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>526</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-01-13 19:28:59</ns0:comment_date>
    <ns0:comment_content>One of my favorite job interview questions (for potential dev or QA hires) is to ask someone how they'd test a simple program. Some people stare at me blankly. Some just regurgitate the golden path. The ones I like to hire are the ones that immediately reel off half a dozen ways that they could imagine the code being broken. That kind of thinker is not only better at writing error-resistant code and better at writing comprehensive tests, but is also more creative and fun to work with overall.</ns0:comment_content>
    <ns0:comment_parent>525</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1042</ns0:comment_id>
    <ns0:comment_author>Why Your Software Should Cry | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/05/06/why-your-software-should-cry/</ns0:comment_author_url>
    <ns0:comment_date>2013-05-06 11:50:50</ns0:comment_date>
    <ns0:comment_content>[...] circuit breaker pattern that I described a while back is another example of reacting to [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2918</ns0:comment_id>
    <ns0:comment_author>A Comedy of Carelessness | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/12/09/a-comedy-of-carelessness/</ns0:comment_author_url>
    <ns0:comment_date>2013-12-09 08:35:13</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] like it! Plan for trouble. (It always happens, after all.) Notice the problem. Communicate it. Take steps to cope, without panicking or inconveniencing the user. I&amp;#8217;m not super happy that my internet [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2993</ns0:comment_id>
    <ns0:comment_author>Add some more extra redundancy again | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/01/15/add-some-more-extra-redundancy-again/</ns0:comment_author_url>
    <ns0:comment_date>2014-01-15 08:39:36</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] that their behavior will be important to our users sooner or later are virtually 100%. We need circuit breakers, helpful error messages, documentation about what to do when things aren&amp;#8217;t perfect, APIs that [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>7226</ns0:comment_id>
    <ns0:comment_author>Mountains, Molehills, and Markedness | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/28/mountains-molehills-and-markedness/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-28 08:44:47</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] based on propagation of other marks in the codebase. Marks might be used to generate code for circuit-breaker patterns. Marks might also be used to identify symptoms for pain detecting algorithms. Imagine you could [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>10859</ns0:comment_id>
    <ns0:comment_author>Taming Side Agreements | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/10/28/taming-side-agreements/</ns0:comment_author_url>
    <ns0:comment_date>2014-10-28 08:36:05</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] we need whistleblowers. I have previously written about embedding pain sensors and circuit breakers in code. We need ways to find out that everything isn&amp;#8217;t working right&amp;#8211;ways that are [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>13817</ns0:comment_id>
    <ns0:comment_author>Know Your Limits | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/02/05/know-your-limits/</ns0:comment_author_url>
    <ns0:comment_date>2015-02-05 08:47:46</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] second in this unusual state. I had to fix this by sensing the pain of a retry storm and tripping a circuit breaker to keep the logs moderately [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Earned Pragmatism</title>
  <link>http://codecraft.co/2013/01/18/earned-pragmatism/</link>
  <pubDate>Fri, 18 Jan 2013 15:49:10 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=933</guid>
  <ns2:encoded>&lt;a href="http://alistair.cockburn.us/Oath+of+Non-Allegiance"&gt;&lt;img class="alignright" alt="" src="http://alistair.cockburn.us/get/3037" width="154" height="179" /&gt;&lt;/a&gt;The other day I was on &lt;a href="http://genehughson.wordpress.com/" target="_blank"&gt;Gene Hughson's blog&lt;/a&gt; (he's a smart guy, btw; I recommend a visit), and I noticed a badge that said that he had signed "The Oath of Non-Allegiance."

That piqued my curiosity.

I followed Gene's link and ended up on &lt;a href="http://alistair.cockburn.us/Oath+of+Non-Allegiance" target="_blank"&gt;Alistair Cockburn's website&lt;/a&gt;. Alistair is one of the early torchbearers for the agile software movement. I've written previously about &lt;a title="Manifestos" href="http://codecraft.co/2012/09/13/manifestos/" target="_blank"&gt;signing the Agile manifesto&lt;/a&gt;, so I felt like I was swimming in friendly waters.

The oath is about being open-minded and pragmatic:
&lt;p style="margin:1em;padding:1em;background-color:#eee;border:solid 1px black;"&gt;&lt;em&gt;I promise not to exclude from consideration any idea based on its source, but to consider ideas across schools and heritages in order to find the ones that best suit the current situation.&lt;/em&gt;&lt;/p&gt;
In other words, let's examine ideas on their merit, rather than dismissing them because they don't align with the programming or process or architecture or platform &lt;em&gt;buzzword du jour&lt;/em&gt;.

I signed. Good stuff.

However, the oath got me thinking a bit, and I want to register two notes of caution.

&lt;strong&gt;Caution 1: It is possible to be &lt;em&gt;too&lt;/em&gt; pragmatic.&lt;/strong&gt;

On the continuum that has "ivory-tower idealism" at one end, and "pragmatism" at the other, I'm well past center, favoring the pragmatic side. However, we should not discount the value of idealism. It was pragmatists who found enough compromise to ratify a constitution that made a loose confederacy into the United States of America--but it was the firebrand idealism of folks like &lt;a class="zem_slink" title="Thomas Paine" href="http://en.wikipedia.org/wiki/Thomas_Paine" target="_blank" rel="wikipedia"&gt;Thomas Paine&lt;/a&gt; that articulated a vision, inspired a previously fragmented public, and provided the heat to carry the revolution through its darkest winters.

You need both.

I have seen architects that are way too ivory-tower. They make recommendations based on their favorite patterns and methodologies, with little regard for practical consequences. Smart engineers quickly dismiss them as being out of touch and irrelevant, and they are right to do so.

On the other hand, I have seen "architects" who, despite deep talent as engineers, are forever in the mode of "whatever gets the job done" and "if it ain't broke, don't fix it." I believe this view is short-sighted; it loses touch with the &lt;a class="zem_slink" title="Opportunity cost" href="http://en.wikipedia.org/wiki/Opportunity_cost" target="_blank" rel="wikipedia"&gt;opportunity cost&lt;/a&gt; of sub-optimal decisions, and with the human passion that keeps architectures healthy. Codebases owned by this type of "architect" tend to be rife with &lt;a title="Paying Off Technical Debt" href="http://codecraft.co/2012/10/14/paying-off-technical-debt/"&gt;tech debt&lt;/a&gt;, with no roadmap or process to &lt;a title="Learned Helplessness, Rats, and People Power" href="http://codecraft.co/2012/11/26/learned-helplessness-rats-and-people-power/"&gt;haul the team up and out&lt;/a&gt;. Where there is no vision, the people perish.

&lt;strong&gt;Caution 2: Pragmatism must be earned.&lt;/strong&gt;

Before you can be a pragmatist, you have to understand what's possible, &lt;a title="Good Code Is Balanced" href="http://codecraft.co/2012/08/27/good-code-is-balanced/"&gt;what's good and bad about each alternative&lt;/a&gt;, and why certain considerations might trump others given a certain business context and time horizon. This perspective doesn't come cheap; it's been my experience that only the school of hard knocks teaches these classes, and the tuition is expensive.

I mistrust anyone who lightly dismisses OO or &lt;a class="zem_slink" title="Message passing" href="http://en.wikipedia.org/wiki/Message_passing" target="_blank" rel="wikipedia"&gt;message passing&lt;/a&gt; or actors or whatever the technique is, on the basis of shallow prejudice--but I also mistrust anyone who picks and chooses from the smorgasbord based purely on convenience of the moment. As &lt;a class="zem_slink" title="Oliver Wendell Holmes, Sr." href="http://en.wikipedia.org/wiki/Oliver_Wendell_Holmes%2C_Sr." target="_blank" rel="wikipedia"&gt;Oliver Wendell Holmes&lt;/a&gt; said, "I would not give a fig for the simplicity this side of complexity, but I would give my life for the simplicity on the other side of complexity." Unless you truly wrestle with the complexity, pragmatism can degenerate into cheating and chaos. Or said another way: only seasoned idealists earn the right to be pragmatists.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Consider where you fall on the idealism~pragmatism continuum. Advocate the opposite end of the spectrum with yourself in a mental debate; do you have anything to learn from those who position themselves differently?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://agile.dzone.com/articles/4-agile-teams-avoid" target="_blank"&gt;4 Agile Teams to Avoid&lt;/a&gt; (agile.dzone.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://matthewkr.com/2013/01/03/rortys-consequences-of-pragmatism/" target="_blank"&gt;Rorty's Consequences of Pragmatism&lt;/a&gt; (matthewkr.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://news.dice.com/2012/11/29/10-skills-it-architects/" target="_blank"&gt;10 Skills All IT Architects Should Have&lt;/a&gt; (news.dice.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://offshore-agile.com/2012/03/23/agile-history/" target="_blank"&gt;Brief History of Agile Movement&lt;/a&gt; (offshore-agile.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.theenterprisearchitect.eu/archive/2013/01/05/a-tale-of-a-7-year-journey-in-developing-software-for-the-enterprise" target="_blank"&gt;A tale of a 7 year journey in developing software for the enterprise&lt;/a&gt; (theenterprisearchitect.eu)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.javacodegeeks.com/2012/11/introduction-to-agile-principles.html" target="_blank"&gt;Introduction To Agile Principles&lt;/a&gt; (javacodegeeks.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>933</ns0:post_id>
  <ns0:post_date>2013-01-18 08:49:10</ns0:post_date>
  <ns0:post_name>earned-pragmatism</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="agile">agile</category>
  <category domain="post_tag" nicename="architecture">architecture</category>
  <category domain="post_tag" nicename="battle-scars">battle scars</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="idealism">idealism</category>
  <category domain="post_tag" nicename="manifestos">manifestos</category>
  <category domain="post_tag" nicename="pragmatism">pragmatism</category>
  <category domain="post_tag" nicename="talent">talent</category>
  <category domain="post_tag" nicename="vision">vision</category>
  <category domain="post_tag" nicename="wisdom">wisdom</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:0:"";s:6:"images";a:1:{s:36:"http://alistair.cockburn.us/get/3037";a:6:{s:8:"file_url";s:36:"http://alistair.cockburn.us/get/3037";s:5:"width";i:154;s:6:"height";i:179;s:4:"type";s:5:"image";s:4:"area";i:27566;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2013-01-18 05:49:31";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_twitter_user</ns0:meta_key>
    <ns0:meta_value>dhh1128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>twitter_cards_summary_img_size</ns0:meta_key>
    <ns0:meta_value>a:6:{i:0;i:154;i:1;i:179;i:2;i:3;i:3;s:24:"width="154" height="179"";s:4:"bits";i:8;s:4:"mime";s:9:"image/png";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>544</ns0:comment_id>
    <ns0:comment_author>Trev Harmon</ns0:comment_author>
    <ns0:comment_author_email>trevharmon@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://dld.me/</ns0:comment_author_url>
    <ns0:comment_date>2013-01-19 17:37:41</ns0:comment_date>
    <ns0:comment_content>I think the most important sentence you wrote was:

"You need both."

I find my movement along the continuum is based on the task at hand. There's a time to push for the ivory-tower ideal and other times when doing anything more then the "quick and dirty" is overkill. The trick, and it's a difficult trick to pull off consistently, is to know the difference. I have no lack of examples where what I thought was the best approach turned out to be diametrically opposed to what would have been best. I think that's where experience is king and dogma is the enemy, as I've seen too many push too far into the area of diminishing returns (e.g., we *must* handle every use case--even the one that only occurs once every billion years) and too many dash off something quick that eventually becomes a millstone around the organization's neck.

I guess we could get into a discussion of eastern philosophy at this point....</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>546</ns0:comment_id>
    <ns0:comment_author>trevharmon</ns0:comment_author>
    <ns0:comment_author_email>trevharmon@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2013-01-19 20:36:14</ns0:comment_date>
    <ns0:comment_content>Earlier. My family has long had a connection with the Orient (Asia particularly). 中庸, or the Golden Mean, was at times brought up in home discussions while growing up.

http://en.wikipedia.org/wiki/Doctrine_of_the_Golden_Mean</ns0:comment_content>
    <ns0:comment_parent>545</ns0:comment_parent>
    <ns0:comment_user_id>44057411</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>545</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-01-19 20:27:33</ns0:comment_date>
    <ns0:comment_content>I'm chuckling about the "eastern philosophy" comment. Did you connect to that worldview while in Japan--or earlier?

I also have lots of examples where I haven't struck the balance wisely. Sigh...</ns0:comment_content>
    <ns0:comment_parent>544</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>537</ns0:comment_id>
    <ns0:comment_author>Gene Hughson</ns0:comment_author>
    <ns0:comment_author_email>genehughson@hotmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://genehughson.wordpress.com</ns0:comment_author_url>
    <ns0:comment_date>2013-01-18 09:39:15</ns0:comment_date>
    <ns0:comment_content>First of all, I have to say "thank you" for the compliments.  I don't expect to see those pop up in the feeds I subscribe to - it was a pleasant surprise.

Regarding your follow up points, I definitely agree.  I put pragmatism in the center of a continuum that starts with dogma on one end and anarchy on the other.  Drifting aimlessly is no better than following blindly.  Your second point illustrates the cure to the first - being able to justify your decisions should help to keep you from swinging too far to either side.

Thanks again, and great post!</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>28036074</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>538</ns0:comment_id>
    <ns0:comment_author>Erik Dietrich (@daedtech)</ns0:comment_author>
    <ns0:comment_author_email>daedtech@twitter.example.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://twitter.com/daedtech</ns0:comment_author_url>
    <ns0:comment_date>2013-01-18 11:19:27</ns0:comment_date>
    <ns0:comment_content>One thing I've noticed is that in my experience, my own willingness to burn the midnight oil can make up for the occasional drift too far into the realm of the idealist.  I may look at a functional code base with some technical debt that's not hurting the business and experience a kind of OCD "we can make this better."  If I solve this on the company dime, that's no good, but if I go home with the challenge, prove it out, implement it and present it, it's a win for everyone -- company gets less tech debt for free and I learn something in the process while satisfying my own neurosis.

Long story short -- a way to bridge the idealist-pragmatist gap is to indulge idealism when nothing is at stake.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>hc_post_as</ns0:meta_key>
      <ns0:meta_value>twitter</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>hc_avatar</ns0:meta_key>
      <ns0:meta_value>http://a0.twimg.com/profile_images/2564762961/cph5w8r6e84iepkzcomz_normal.jpeg</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>hc_foreign_user_id</ns0:meta_key>
      <ns0:meta_value>442944057</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>539</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-01-18 12:10:47</ns0:comment_date>
    <ns0:comment_content>Erik: Thank you for a very insightful observation! You've put into words something that I intuited but could never quite articulate--why it's vital that architects tinker and write code on their own time. This is one example of a perfect compromise where everybody comes out ahead.</ns0:comment_content>
    <ns0:comment_parent>538</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>540</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-01-18 13:09:04</ns0:comment_date>
    <ns0:comment_content>Gene: thanks for some great content on your own blog, and for pointing me to the oath. Good learning all around!</ns0:comment_content>
    <ns0:comment_parent>537</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>801</ns0:comment_id>
    <ns0:comment_author>Are You Losing Enough Battles? | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/03/05/are-you-losing-enough-battles/</ns0:comment_author_url>
    <ns0:comment_date>2013-03-05 08:36:01</ns0:comment_date>
    <ns0:comment_content>[...] we&amp;#8217;re grounded in reality rather than ivory tower imagination. It means we value balance and pragmatism over theoretical perfection, and it helps build a healthy regard for the needs of other [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>830</ns0:comment_id>
    <ns0:comment_author>6 Strategies to Simplify Software | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/03/12/6-strategies-to-simplify-software/</ns0:comment_author_url>
    <ns0:comment_date>2013-03-12 08:57:23</ns0:comment_date>
    <ns0:comment_content>[...] is powerful, and that it undergirds many deep architectural breakthroughs. In posts about pragmatism and balance, I&amp;#8217;ve quoted Oliver Wendell Holmes about the simplicity on the other side of [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>835</ns0:comment_id>
    <ns0:comment_author>What Is &amp;#8220;Good Code&amp;#8221;? | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2012/08/26/what-is-good-code/</ns0:comment_author_url>
    <ns0:comment_date>2013-03-12 18:13:23</ns0:comment_date>
    <ns0:comment_content>[...] me that an engineer is practical, business-aware, and customer-focused&amp;#8211;all useful traits. Pragmatism is usually learned in the economic school of hard knocks, and it&amp;#8217;s a critical perspective that should never be forgotten. But I don&amp;#8217;t get a warm [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1207</ns0:comment_id>
    <ns0:comment_author>Courage Counts | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/05/31/courage-counts/</ns0:comment_author_url>
    <ns0:comment_date>2013-05-31 08:33:36</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] fear of the sea was rational, too&amp;#8211;and it was based on traumatic, real-world experience, not theory. But when the need was great, Mafatu plunged in, met his fears, and mastered [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4879</ns0:comment_id>
    <ns0:comment_author>Why you should use an IDE instead of vim or emacs | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/05/13/why-you-should-use-an-ide-instead-of-vim-or-emacs/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-13 10:16:28</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] you peruse my archives, you&amp;#8217;ll see that I&amp;#8217;m a pragmatist. I use IDEs as often as I can, but I&amp;#8217;m wlling to drop into vim when it makes sense. I speak [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2248</ns0:comment_id>
    <ns0:comment_author>2 Surprising Truths About The Iron Triangle | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/07/01/2-surprising-truths-about-the-iron-triangle/</ns0:comment_author_url>
    <ns0:comment_date>2013-07-01 16:38:53</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] you&amp;#8217;ve learned truth 1, then you&amp;#8217;re probably an industry veteran with battle scars, and you&amp;#8217;re the kind of person I want on my team when we do project [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>10860</ns0:comment_id>
    <ns0:comment_author>Taming Side Agreements | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/10/28/taming-side-agreements/</ns0:comment_author_url>
    <ns0:comment_date>2014-10-28 08:36:08</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] the size of your accounting staff depends on the scale of your operation. In other words, be pragmatic, because the proper amount of investment depends. If you&amp;#8217;re writing a few quick scripts, this [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>12975</ns0:comment_id>
    <ns0:comment_author>A More Important Manifesto | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/01/05/a-more-important-manifesto/</ns0:comment_author_url>
    <ns0:comment_date>2015-01-05 08:39:53</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] course I was being idealistic. I get the need for pragmatism. I don&amp;#8217;t think everybody needs to be an idealist about their career; just loving your job and [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Interrupting my interruptions</title>
  <link>http://codecraft.co/2013/01/24/interrupting-my-interruptions/</link>
  <pubDate>Thu, 24 Jan 2013 18:47:57 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=942</guid>
  <ns2:encoded>Tonight I was just settling down for a ponder on some personal stuff when I noticed an email from my brilliant brother-in-law (hi, Stephen!), recommending &lt;a href="http://blog.ninlabs.com/2013/01/programmer-interrupted/" target="_blank"&gt;an article&lt;/a&gt; about the cost of interrupting programmers. Half an hour later, I'm blogging about it. Yes, I see the irony in the read, the blog, and the shout-out, but I just can't help it.

I've heard lots of estimates of the cost of interrupting, but the research in this article seems particularly clear. I think the article oversimplifies by assuming that the problem and solution derive purely from memory, but there's enough insight and clever thinking in the article to make it worth a read...

We've all known that &lt;strong&gt;interruption = bad&lt;/strong&gt;. We've nodded our heads at this wisdom for years. Occasionally we give lip service to it. We try to clump meetings in one portion of the day, leaving blocks of time for serious thinking and work. We advise our teams to use "lighter" interruptions ("ask your question by chat/email instead of in person; it's less disruptive..."). We decline non-essential meetings and urge others to keep their invite lists small. We buy "cones of silence" and "Do Not Disturb" signs and set them up outside the cube of the guy who's trying to finish urgent work for an impending release.

And then we fall off the bandwagon.

At least, I do.

Hi. My name is Daniel, and I'm addicted to interruptions. :-)

[caption id="attachment_943" align="aligncenter" width="500"]&lt;a href="http://xkcd.com/874/"&gt;&lt;img class="size-large wp-image-943" alt="time_management" src="http://codecraft.co/wp-content/uploads/2013/01/time_management.png?w=500" width="500" height="222" /&gt;&lt;/a&gt; Image Credit: xkcd[/caption]

&lt;strong&gt;Symptoms&lt;/strong&gt;

You would see my addiction if you walked past my desk and looked at the tabs in my browser: two for email (work, personal), two or three for calendaring, some chat sessions, a task list, several programming topics, a man page, a python reference, an interesting blog post or two, three wikipedia pages, a ticket I looked up before I ran to my last meeting, a wiki page I'm in the middle of editing, a competitor's product portfolio, a LinkedIn discussion forum on cloud computing, a Google spreadsheet, the PDF of a resume I'm supposed have read before I do an interview in an hour, half a dozen random sites that I visit during the day as I check gossip on a competitor or read the Dilbert cartoon someone emailed me...

How am I supposed to think Deep Thoughts when I've got that much noise?

&lt;!--more--&gt;Browser tabs are just the tip of the iceberg, of course. I carry a cell phone, and I probably text in meetings several times each day. If I walk by somebody's cube and realize that I have a question, I often ask it, even if it looks like they're heads down. I pull people into meetings. My door is always open when I'm in my office, and I'm always up for a chat. And I cheerfully take new tasks and action items without batting an eye. (One reason I don't carry a smartphone is because in my heart of hearts, I know I couldn't handle the escalation in my connectedness.)

&lt;strong&gt;Not quite a catastrophe&lt;/strong&gt;

To be fair, my job is &lt;em&gt;supposed to be&lt;/em&gt; collaborative and communicative; if tech companies just needed architects for their navel-contemplation skills, they could hire much cheaper and quieter employees. As I've said repeatedly on this blog, &lt;a title="Why People Are Part of A Software Architecture" href="http://codecraft.co/2008/06/25/why-people-are-part-of-a-software-architecture/" target="_blank"&gt;people are part of architecture&lt;/a&gt;, and interacting with teammates is both a tool and an end unto itself. Those meetings I'm attending (or calling) are how I &lt;a title="Why Mental Models Matter" href="http://codecraft.co/2012/11/05/why-mental-models-matter/" target="_blank"&gt;develop shared mental models&lt;/a&gt;, motivate and teach, &lt;a title="Roland Whatcott: Manage momentum." href="http://codecraft.co/2012/09/21/roland-whatcott-manage-momentum/" target="_blank"&gt;manage momentum&lt;/a&gt;, and &lt;a title="Don Kleinschnitz: Put a stake in the ground." href="http://codecraft.co/2012/09/14/don-kleinschnitz-stake/" target="_blank"&gt;put a stake in the ground&lt;/a&gt;. Those wikipedia pages and chat sessions and interesting blog posts are part of &lt;a title="Julie Jones: Learn voraciously." href="http://codecraft.co/2012/09/24/julie-jones-learn-voraciously/" target="_blank"&gt;learning voraciously&lt;/a&gt;, which is a strategic imperative for any software architect.

However, it's possible to have too much of a good thing.

&lt;strong&gt;What might work&lt;/strong&gt;

This post is more confessional than pedagogic. I don't think I have great answers, yet. But they say confession is part of the journey out of addiction, so now I've come clean, and I'm going to start a journey to do better. That article I read inspired me.

Here are some things I want to try:
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;1. morning meditation&lt;/em&gt;&lt;/p&gt;
Before I check email and calendars in the morning, I will do a brief morning routine where I ponder priorities for the day and ground myself in my journal and other "sharpen-the-saw" investments. An important outcome from this will be a single goal for the day that merits my concentration. To throw out another phrase from Covey: I'll "begin with the end in mind."
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;2. one dedicated block&lt;/em&gt;&lt;/p&gt;
I will find a 1- or 2-hour stretch each day when I can concentrate. I will turn off email and my cell phone, close all windows on my desktop except ones critical for the task at hand, close the door of my office, and then think hard. I'll try to train people to reach out to me by email (an interruption I can schedule at my convenience) if my office door isn't open. (The luxury of a true office is one I haven't had for most of my career. Darn cubes... But as long as this is an option, I might as well take advantage.)
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;3. more courtesy&lt;/em&gt;&lt;/p&gt;
I'm going to respect other people's time and try to interrupt them less. Email or a post-it or a wiki page instead of meetings, in cases where it's a good tradeoff. Where meetings are the right answer, I'll try to make them shorter and more effective. I'll save friendly conversation for the breakroom and come back later with my questions if I approach and discover a colleague deep in the zone. (I've scheduled this blog post to go live at about lunch time in an effort to practice what I preach...)

I'll report back to you if I discover anything helpful as I work this problem. When your feed reader or email notifies you that I've posted again, I'm sure you'll drop everything to read it immediately. Right? :-)
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;I'd really like to hear your ideas on this topic. Do you have silver bullets that kill the interruption problem? If so, please share! Or if you want to chime in with your own 12-step-style confession, I'm all ears as well...&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.futureof.biz/post/38059568953/office-workers-are-interrupted-or" target="_blank"&gt;"Office workers are interrupted - or self-interrupt - roughly every three minutes, academic studies have..."&lt;/a&gt; (futureof.biz)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.stevepavlina.com/blog/2013/01/please-dont-interrupt/" target="_blank"&gt;Please Don't Interrupt&lt;/a&gt; (stevepavlina.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://scienceblog.com/58928/brief-interruptions-spawn-errors/" target="_blank"&gt;Brief interruptions spawn errors&lt;/a&gt;&lt;span style="color:#333333;"&gt; (scienceblog.com)&lt;/span&gt;&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://minnesota.cbslocal.com/2013/01/10/how-to-manage-your-time-better-at-work/" target="_blank"&gt;How To Manage Your Time Better At Work&lt;/a&gt; (minnesota.cbslocal.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>942</ns0:post_id>
  <ns0:post_date>2013-01-24 11:47:57</ns0:post_date>
  <ns0:post_name>interrupting-my-interruptions</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="chat">chat</category>
  <category domain="post_tag" nicename="communication">communication</category>
  <category domain="post_tag" nicename="email">email</category>
  <category domain="post_tag" nicename="habits">habits</category>
  <category domain="post_tag" nicename="interaction">interaction</category>
  <category domain="post_tag" nicename="interruptions">interruptions</category>
  <category domain="post_tag" nicename="meditation">meditation</category>
  <category domain="post_tag" nicename="meetings">meetings</category>
  <category domain="category" nicename="mistakes">Mistakes</category>
  <category domain="post_tag" nicename="people">people</category>
  <category domain="post_tag" nicename="planning">planning</category>
  <category domain="post_tag" nicename="priorities">priorities</category>
  <category domain="post_tag" nicename="schedules">schedules</category>
  <category domain="post_tag" nicename="sharpen-the-saw">sharpen the saw</category>
  <category domain="post_tag" nicename="time-management">time management</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:70:"http://techknowledgeme.files.wordpress.com/2013/01/time_management.png";s:6:"images";a:1:{s:70:"http://techknowledgeme.files.wordpress.com/2013/01/time_management.png";a:6:{s:8:"file_url";s:70:"http://techknowledgeme.files.wordpress.com/2013/01/time_management.png";s:5:"width";i:630;s:6:"height";i:280;s:4:"type";s:5:"image";s:4:"area";i:176400;s:9:"file_path";b:0;}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2013-01-24 19:08:23";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_twitter_user</ns0:meta_key>
    <ns0:meta_value>dhh1128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>592</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-01-27 17:08:40</ns0:comment_date>
    <ns0:comment_content>I just started reading &lt;em&gt;Peopleware&lt;/em&gt; this last week. Hopefully this reinforces my resolve. My first couple days of new habits have been a mixed bag. I've interrupted others less, and I've tried to be more focused myself, but I'm still averaging an interruption every 5 or 10 minutes, it seems...</ns0:comment_content>
    <ns0:comment_parent>590</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>690</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-02-08 13:58:46</ns0:comment_date>
    <ns0:comment_content>Here's another article with a similar theme: http://architects.dzone.com/articles/four-hours-concentration</ns0:comment_content>
    <ns0:comment_parent>673</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>590</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2013-01-27 12:58:05</ns0:comment_date>
    <ns0:comment_content>Man, I have been pushing Tom DeMarco's book "Peopleware (1988)"{ for over 15years. He describes how to maximize knowledge workers (and programmers are the ultimate in knowledge workers) during their creative periods. Result:  Allow them time to ramp up and time to do their work - KEEP INTERRUPTIONS at bay.

Takes 15-20 minutes to get in to the "engineering flow or zone" and any interruptions will lose that zone - any interruptions: phone, email, boss, co-worker, etc.  Solution: PRIVATE offices, quiet work areas, LESS real time communication work areas (send an email). Most "I got to have this info now from Joe" is false, send an email request for joe to answer when he wants to.

Cube offices make for terrible knowledge worker environments. If people say: I get more done before 7AM and after 5PM, that is an indictment for a bad work environment for a knowledge worker. That is why I rather come in at 10-11AM and work to 7-9PM (I am a empty nester though).

dougbert</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>599</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2013-01-28 17:17:52</ns0:comment_date>
    <ns0:comment_content>it is funny that at Adaptive, people put a sign on their door/cube that says to the effect: Don't bug ME!

I had my dilbert tape which I would put up once in awhile which did the same thing

Allowing an engineer 2 to 4 hours once a day to actually DO WORK in creation/support etc, without interruption (and people honor those CLOSED doors/cubs), much could be done

My most product days were at Novell, where we had a door we could close. I usually left it 6 inches ajar, which allowed others to peek in to see if I would accept them. A small amount of time, I would close the door and program like a devil - LOVED those times

thx again for your thoughful posts, they are great

dougbert</ns0:comment_content>
    <ns0:comment_parent>592</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>600</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-01-28 21:37:12</ns0:comment_date>
    <ns0:comment_content>Just ran into another article that says much the same thing: http://blogs.hbr.org/schwartz/2012/03/the-magic-of-doing-one-thing-a.html</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>666</ns0:comment_id>
    <ns0:comment_author>Smart Geeks Think Like Cheerleaders &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/02/05/smart-geeks-think-like-cheerleaders/</ns0:comment_author_url>
    <ns0:comment_date>2013-02-05 08:57:59</ns0:comment_date>
    <ns0:comment_content>[...] We retreat to our cubes and grumble that people keep getting in the way of us getting work done, but we don&amp;#8217;t get serious enough about managing everybody&amp;#8217;s interruptions wisely. [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>673</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-02-06 09:43:50</ns0:comment_date>
    <ns0:comment_content>I've found another blog post that's a nice complement to this one: http://www.rachellegardner.com/2013/02/be-the-gatekeeper-of-your-mind/.

I've continued to work on my interruptions since I posted, and I can report some fair success on all aspects of my 3-part plan. But I'm not yet at the point where I've entrenched new and better habits...</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>15561</ns0:comment_id>
    <ns0:comment_author>One More Day | Knowinnovation ( dev.knowinnovation.com )</ns0:comment_author>
    <ns0:comment_author_url>http://dev.knowinnovation.com/one-more-day/</ns0:comment_author_url>
    <ns0:comment_date>2015-06-02 08:12:59</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] 24-hour synchronized film, The Clock, raises our awareness about time. Some thoughts about interruptions in the workplace, and managing distractions so you have time to think, thoroughly. Are we really [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Book Review: Universal Principles of Design</title>
  <link>http://codecraft.co/2013/01/29/book-review-universal-principles-of-design/</link>
  <pubDate>Tue, 29 Jan 2013 18:44:40 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=956</guid>
  <ns2:encoded>&lt;a href="http://www.amazon.com/Universal-Principles-Design-Revised-Updated/dp/1592535879"&gt;&lt;img class="alignright" alt="" src="http://ecx.images-amazon.com/images/I/41nQFR%2BFSCL._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA300_SH20_OU01_.jpg" width="300" height="300" /&gt;&lt;/a&gt;A few months back, my friend &lt;a href="http://dld.me" target="_blank"&gt;Trev&lt;/a&gt; recommended &lt;a href="http://www.amazon.com/Universal-Principles-Design-Revised-Updated/dp/1592535879" target="_blank"&gt;this book&lt;/a&gt; to me. I've been digesting it one topic at a time, on my lunch breaks.

It is profound and fascinating reading.

This is not another software pattern book. In fact, it is not really software-centric at all. It describes truths about the way human beings perceive, reason, generalize, and communicate. Many of them have obvious application to UX, UI design, and to software in general. On the scale of profundity, it gets a 9 out of 10; I suspect that I'll be blogging about insights from the book for months to come.

I think it's important to look at familiar problems from new angles; many profound breakthroughs in science are attributable to cross-disciplinary insight. Though time spent in this book won't directly hone your coding skills, it will help you see recurring problems and solutions with new eyes, and it will suggest tried-and-true criteria for evaluating design alternatives.

As a teaser, some of my favorite design principles in the book include: &lt;a href="http://www.apa.org/science/resources/stroop.aspx" target="_blank"&gt;Interference Effects&lt;/a&gt;, &lt;a href="http://www.vanseodesign.com/web-design/anthropomorphic-forms-part-ii/" target="_blank"&gt;Contour Bias&lt;/a&gt;, &lt;a href="http://en.wikipedia.org/wiki/Horror_vacui" target="_blank"&gt;Horror Vacui&lt;/a&gt;, &lt;a class="zem_slink" title="Uncanny valley" href="http://en.wikipedia.org/wiki/Uncanny_valley" target="_blank" rel="wikipedia"&gt;Uncanny Valley&lt;/a&gt;, &lt;a href="http://persuasive-patterns.com/patterns/Recognition-over-recall" target="_blank"&gt;Recognition Over Recall&lt;/a&gt;, &lt;a class="zem_slink" title="Wabi-sabi" href="http://en.wikipedia.org/wiki/Wabi-sabi" target="_blank" rel="wikipedia"&gt;Wabi Sabi&lt;/a&gt;, &lt;a class="zem_slink" title="Satisficing" href="http://en.wikipedia.org/wiki/Satisficing" target="_blank" rel="wikipedia"&gt;Satisficing&lt;/a&gt;, and &lt;a href="http://well-formed-data.net/archives/495/propositional-density-in-visualization" target="_blank"&gt;Propositional Density&lt;/a&gt;.

For now, I'll omit any definition of what these intriguing terms mean, and leave discovery as an exercise for the reader. :-)
&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.cryptosmith.com/node/377" target="_blank"&gt;GUIs: Control, Conveyance, Continuity, and Context&lt;/a&gt; (cryptosmith.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://designagogo.wordpress.com/2013/01/24/get-smart-maxwell/" target="_blank"&gt;&lt;a href="http://www.underpaidgenius.com/post/37027223670" target="_blank"&gt;Biz Stone on Wabi-Sabi&lt;/a&gt;&lt;span style="color:#333333;"&gt; (underpaidgenius.com)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.multi-disciplinary.com/"&gt;multi-disciplinary.com&lt;/a&gt; (have a look at some of the projects these guys do...)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>956</ns0:post_id>
  <ns0:post_date>2013-01-29 11:44:40</ns0:post_date>
  <ns0:post_name>book-review-universal-principles-of-design</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="communication">communication</category>
  <category domain="post_tag" nicename="contour-bias">contour bias</category>
  <category domain="post_tag" nicename="design">design</category>
  <category domain="post_tag" nicename="design-patterns">design patterns</category>
  <category domain="post_tag" nicename="generalization">generalization</category>
  <category domain="post_tag" nicename="hci">hci</category>
  <category domain="post_tag" nicename="horror-vacui">horror vacui</category>
  <category domain="post_tag" nicename="interference-effects">interference effects</category>
  <category domain="post_tag" nicename="perception">perception</category>
  <category domain="post_tag" nicename="propositional-density">propositional density</category>
  <category domain="post_tag" nicename="recognition-over-recall">recognition over recall</category>
  <category domain="category" nicename="reviews">Reviews</category>
  <category domain="post_tag" nicename="satisficing">satisficing</category>
  <category domain="post_tag" nicename="uncanny-valley">uncanny valley</category>
  <category domain="post_tag" nicename="ux">ux</category>
  <category domain="post_tag" nicename="wabi-sabi">wabi sabi</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:132:"http://ecx.images-amazon.com/images/I/41nQFR%2BFSCL._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA300_SH20_OU01_.jpg";s:6:"images";a:1:{s:132:"http://ecx.images-amazon.com/images/I/41nQFR%2BFSCL._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA300_SH20_OU01_.jpg";a:6:{s:8:"file_url";s:132:"http://ecx.images-amazon.com/images/I/41nQFR%2BFSCL._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA300_SH20_OU01_.jpg";s:5:"width";i:300;s:6:"height";i:300;s:4:"type";s:5:"image";s:4:"area";i:90000;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2013-01-29 04:21:25";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_twitter_user</ns0:meta_key>
    <ns0:meta_value>dhh1128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>712</ns0:comment_id>
    <ns0:comment_author>Charity</ns0:comment_author>
    <ns0:comment_author_email>charityomalley@fmail.co.uk</ns0:comment_author_email>
    <ns0:comment_author_url>http://stefanagamou.tumblr.com</ns0:comment_author_url>
    <ns0:comment_date>2013-02-11 19:33:21</ns0:comment_date>
    <ns0:comment_content>Quality articles or reviews is the secret to invite the visitors to go to see the web site, that's what this web site is providing.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>897</ns0:comment_id>
    <ns0:comment_author>Universal Principles of Design | DesignQuest</ns0:comment_author>
    <ns0:comment_author_url>http://idesignquest.wordpress.com/2013/03/23/universal-principles-of-design/</ns0:comment_author_url>
    <ns0:comment_date>2013-03-23 17:01:20</ns0:comment_date>
    <ns0:comment_content>[...] Book Review: Universal Principles of Design (codecraft.co) [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>647</ns0:comment_id>
    <ns0:comment_author>Trev Harmon</ns0:comment_author>
    <ns0:comment_author_email>trevharmon@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://dld.me/</ns0:comment_author_url>
    <ns0:comment_date>2013-02-03 22:34:34</ns0:comment_date>
    <ns0:comment_content>Daniel, thank you for the mention. This really is a great book. Although I have several others that have very similar content, none of the others really convey it in as simple, concise manner as this book.

I've found a number of uses for the concepts beyond your basic graphic design. It's really about how we as humans "load" and "process" information.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>651</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-02-04 09:01:40</ns0:comment_date>
    <ns0:comment_content>I agree that the book is really an insightful description of the way human beings think and understand. That's a subject of inquiry sure to pay off for software folks, but also for many other disciplines. Kind of ties in to epistomology, which ought to be included in the foundation of any serious education.</ns0:comment_content>
    <ns0:comment_parent>647</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
</item>
<item>
  <title>Why</title>
  <link>http://codecraft.co/2013/01/30/why/</link>
  <pubDate>Wed, 30 Jan 2013 23:44:15 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=959</guid>
  <ns2:encoded>Recently I've been digesting &lt;a href="http://www.startwithwhy.com/Read.aspx"&gt;&lt;em&gt;Start With Why&lt;/em&gt;&lt;/a&gt;, by &lt;a class="zem_slink" title="Simon Sinek" href="http://en.wikipedia.org/wiki/Simon_Sinek" target="_blank" rel="wikipedia"&gt;Simon Sinek&lt;/a&gt; (Another nice find, &lt;a href="http://dld.me" target="_blank"&gt;Trev&lt;/a&gt;!) For an overview, watch his &lt;a href="http://youtu.be/qp0HIF3SfI4" target="_blank"&gt;TED talk&lt;/a&gt;.

[caption id="" align="alignright" width="320"]&lt;a href="http://en.wikipedia.org/wiki/Maslow%27s_hierarchy_of_needs"&gt;&lt;img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Maslow%27s_hierarchy_of_needs.png/320px-Maslow%27s_hierarchy_of_needs.png" width="320" height="209" /&gt;&lt;/a&gt; Maslow's hierarchy of needs. A person's "why" can derive from any of these levels, but I think I'll be happiest if I can map mine to the top of the pyramid.[/caption]

I don't buy everything in the book, and I think many of the author's assertions would be stronger if he offered detailed evidence. For example, he asserts that Apple is special because it has a driving "why" that shapes company decisions in fundamental and pervasive ways, and glosses over how Apple lost its vision during the non-Steve-Jobs years.

&lt;strong&gt;Why "why"?&lt;/strong&gt;

Nonetheless, his central premise is insightful and important: &lt;em&gt;&lt;strong&gt;starting with "why" we do things will create greater satisfaction, wisdom, and success&lt;/strong&gt;&lt;/em&gt;. Once we have a why that's correct in our hearts, many of the whats and hows of life flow naturally. Sacrifice, patience, and creativity blossom. This is true of our software architectures, product requirements, general business activities, personal relationships, and other endeavors. People who hate their jobs often feel that way because they find their days filled with activities that they deem empty or soulless. Human beings can't be passionate about stuff that doesn't resonate with their deep values to some degree.

I find interesting resonance between Sinek's thesis and other important ideas such as &lt;a class="zem_slink" title="Good to Great: Why Some Companies Make the Leap... and Others Don't" href="http://www.amazon.com/Good-Great-Companies-Leap-Others/dp/0066620996%3FSubscriptionId%3D0G81C5DAZ03ZR9WH9X82%26tag%3Dzemanta-20%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0066620996" target="_blank" rel="amazon"&gt;Jim Collins' hedgehog concept&lt;/a&gt;, the idea of &lt;a href="http://www.focusgrouptips.com/laddering.html" target="_blank"&gt;laddering in marketing theory&lt;/a&gt;, &lt;a class="zem_slink" title="Maslow's hierarchy of needs" href="http://en.wikipedia.org/wiki/Maslow%27s_hierarchy_of_needs" target="_blank" rel="wikipedia"&gt;Maslow's hierarchy of needs&lt;/a&gt;, and &lt;a href="https://www.stephencovey.com/7habits/7habits.php" target="_blank"&gt;Covey's "begin with the end in mind."&lt;/a&gt; I also find it interesting how congruent this is with a central tenet of &lt;a href="http://www.amazon.com/Bridging-Communication-Gap-Specification-Acceptance/dp/0955683610" target="_blank"&gt;&lt;em&gt;Bridging the Communication Gap&lt;/em&gt;&lt;/a&gt;, by Godjko Adzic; he argues that the "why" of a product requirement, rather than the "what", is the most important thing for product management to articulate. (Thanks, &lt;a href="http://www.linkedin.com/pub/shawn-holmstead/1/13a/942" target="_blank"&gt;Shawn&lt;/a&gt;, for the great book recommendation.)

&lt;strong&gt;My Why&lt;/strong&gt;

Which leads me to this: I need to articulate and then be true to my own "why." Why, exactly, am I in the software industry? What do I hope to accomplish? Why do I work on enterprise software, as opposed to mobile apps or cool &lt;a class="zem_slink" title="Mashup (web application hybrid)" href="http://en.wikipedia.org/wiki/Mashup_%28web_application_hybrid%29" target="_blank" rel="wikipedia"&gt;web mashups&lt;/a&gt;? Why did I start a blog? Why do I pick certain topics for my posts, and then spend significant time articulating my thoughts?

Here's my current answer:
&lt;p style="padding:1em;border:solid 1px black;text-align:center;font-size:150%;background-color:#e8e8e8;font-weight:bold;line-height:160%;"&gt;I believe in making complex computing simple so the world can innovate and improve.&lt;/p&gt;
&lt;strong&gt;Testing My Answer&lt;/strong&gt;

What I like about this answer is that it ties back to my core values. I believe we have opportunities to do lots of good in the world--eradicating poverty and disease, advancing science, learning to understand and value one another better. And I believe an impediment to that is all the complexity we create and discover. Big data is hiding a lot of the insight that would let companies serve customers better. Number crunching supercomputers are needed to predict the weather better, to help predict crop yields in Bangladesh. And so on.

Thus, if I can do my part to make really tough computing problems more tractable, I'm helping make the world a better place.

I also like that this answer tells me when I'm wandering. If I'm building systems that don't hide/manage/solve complexity, I'm probably off track. If I am building software that's frivolous ("Angry Birds" comes to mind), I probably won't be very happy. If I work for a company that aspires to nothing more grandiose than making money, I should either change the company or change my job. If my blog posts don't help me understand or communicate on topics that reinforce that goal, I'm wasting my time.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Challenge&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;What is your "why"? Struggle with it until you come up with a satisfying answer. Then use it to test your current work assignments. Does this exercise give you any insight or point to ways to rebalance your priorities?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://diyblogger.net/apple-rejects-simon-sineks-teachings-steve-jobs-turns-in-his-grave" target="_blank"&gt;Apple Rejects Simon Sinek's Teachings. Steve Jobs Turns In His Grave.&lt;/a&gt; (diyblogger.net)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://antonemgoyak.com/2013/01/27/the-most-important-question-to-answer-in-learning-part-2-of-2/" target="_blank"&gt;The Most Important Question to Answer in Learning (Part 2 of 2)&lt;/a&gt; (antonemgoyak.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://37signals.com/svn/posts/3392-humans-need-to-know-why" target="_blank"&gt;37signals: Humans need to know why&lt;/a&gt; (37signals.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://bloggineducation.wordpress.com/2012/11/27/simon-sinek-how-great-leaders-inspire-action-tedx-talk/" target="_blank"&gt;Simon Sinek: How great leaders inspire action - TEDx Talk&lt;/a&gt; (bloggineducation.wordpress.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://nategibson.net/2012/12/08/start-with-why-how-great-leaders-inspire-everyone-to-take-action-by-simon-sinek/" target="_blank"&gt;Start with Why - How Great Leaders Inspire Everyone to Take Action by Simon Sinek&lt;/a&gt; (nategibson.net)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>959</ns0:post_id>
  <ns0:post_date>2013-01-30 16:44:15</ns0:post_date>
  <ns0:post_name>why</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="apple">apple</category>
  <category domain="post_tag" nicename="big-data">big data</category>
  <category domain="post_tag" nicename="complexity">complexity</category>
  <category domain="post_tag" nicename="covey">covey</category>
  <category domain="post_tag" nicename="godjko-adzic">godjko adzic</category>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <category domain="post_tag" nicename="jim-collins">jim collins</category>
  <category domain="post_tag" nicename="laddering">laddering</category>
  <category domain="post_tag" nicename="marketing">marketing</category>
  <category domain="post_tag" nicename="maslow">maslow</category>
  <category domain="post_tag" nicename="purpose">purpose</category>
  <category domain="category" nicename="reviews">Reviews</category>
  <category domain="post_tag" nicename="simon-sinek">simon sinek</category>
  <category domain="post_tag" nicename="stephen-covey">stephen covey</category>
  <category domain="post_tag" nicename="steve-jobs">steve jobs</category>
  <category domain="post_tag" nicename="vision">vision</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_twitter_user</ns0:meta_key>
    <ns0:meta_value>dhh1128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:0:"";s:6:"images";a:1:{s:130:"http://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Maslow%27s_hierarchy_of_needs.png/320px-Maslow%27s_hierarchy_of_needs.png";a:6:{s:8:"file_url";s:130:"http://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Maslow%27s_hierarchy_of_needs.png/320px-Maslow%27s_hierarchy_of_needs.png";s:5:"width";i:320;s:6:"height";i:209;s:4:"type";s:5:"image";s:4:"area";i:66880;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";i:4597088;s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2013-01-31 04:52:43";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>656</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-02-04 21:17:36</ns0:comment_date>
    <ns0:comment_content>I've been reading some of the later chapters in &lt;em&gt;Start With Why&lt;/em&gt;, and I'm encouraged by the story of Gordon Bethune turning around Continental Airlines. He seems to have tapped into a latent why that many people at the organization could buy into with all their hearts. It's worth noting, however, that he fired 39 of the 60 top executives when he began shaking things up--and that he was able to institute sweeping change from the top down. It's not clear to me how it works to do it the other way, from the ground up.</ns0:comment_content>
    <ns0:comment_parent>652</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>610</ns0:comment_id>
    <ns0:comment_author>Rick</ns0:comment_author>
    <ns0:comment_author_email>rickmckay@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2013-01-31 00:47:10</ns0:comment_date>
    <ns0:comment_content>Great insight here, Daniel. This is definitely a challenge worthy of taking to heart. I'm glad to have a person with your mix of talents working where you do. For me personally, the "why" for what I do (or what I aspire to do) has not emerged as clearly or as easily as I would have liked, but I definitely appreciate the way you've expressed it. I can relate to having a strong desire to contribute to something that I deem truly worthwhile to humanity. I would add that this is a process, and assert that seeking our motivations and then occasionally going back to analyze and reevaluate them is an important exercise as we learn and develop.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>615</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-01-31 08:13:10</ns0:comment_date>
    <ns0:comment_content>Thanks for the thoughtful comment, Rick. I think you've said something important about "start with why" being a process. We learn more about ourselves as life goes by, and if we're tuned in to that sort of discovery, it can lead us to question and refine our why. Having to wrestle with it is a sign that we're being thoughtful and honest; I mistrust easy answers. Hopefully I'll still be thinking carefully about this topic in a few years, and maybe I'll have a better answer. :-)</ns0:comment_content>
    <ns0:comment_parent>610</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>809</ns0:comment_id>
    <ns0:comment_author>kareklesgrafeiou</ns0:comment_author>
    <ns0:comment_author_email>madison.ness@fastmailbox.net</ns0:comment_author_email>
    <ns0:comment_date>2013-03-07 21:04:34</ns0:comment_date>
    <ns0:comment_content>whoah this weblog is fantastic i like studying your articles.
Keep up the great work!</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>648</ns0:comment_id>
    <ns0:comment_author>Trev Harmon</ns0:comment_author>
    <ns0:comment_author_email>trevharmon@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://dld.me/</ns0:comment_author_url>
    <ns0:comment_date>2013-02-03 22:46:13</ns0:comment_date>
    <ns0:comment_content>Daniel,

For me, this has been an interesting one. As you mentioned, the book is by no means perfect, but I've found the ideas resonating more than many of my other business books. Tossing the ideas around has proved interesting, and I've learned a few things.

-- Verbalizing the why can be quite difficult.
-- One really needs to have the why first; retrofitting it doesn't really work.
-- The interaction between our why, other people's whys and organizational whys have a lot more effect than I'd previously realized.
-- Attempting to espouse two different whys creates text-book cognitive dissonance (http://en.wikipedia.org/wiki/Cognitive_dissonance).

I think what your article caused me to ponder was the importance of the personal why. Most of my focus lately has been on organization whys and understanding how they relate to my own. Obviously, in retrospect, attempting a comparison where one thing is loosely defined is really pretty hard. Attempting it when both things are loosely defined is plain near impossible. I've been experiencing both situations recently.

Now I have another line of inquiry to pursue.

Also, thank you for back-to-back mentions.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>650</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-02-04 08:59:44</ns0:comment_date>
    <ns0:comment_content>It was hard for me to put my own "why" into words, and I don't think I've got it completely right, yet. What I have here is pretty close, and I felt like it was important to make the attempt to articulate, even if I missed the center of the target a little. It was healthy to struggle.

You highlight a whole other level of this issue, which is finding a "why" for teams or larger organizations. I conveniently ignored that in this post, but I think it's a vital question. I am wondering if it's possible to discover a why after the fact. Do great organizations always begin with their why well understood, or can you socialize a why and build a groundswell of enthusiasm for it after the fact? I think many companies don't have much of a why at the forefront of their thinking, so if you have to begin already knowing it, the picture is bleak for most enterprises...</ns0:comment_content>
    <ns0:comment_parent>648</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>652</ns0:comment_id>
    <ns0:comment_author>Trev</ns0:comment_author>
    <ns0:comment_author_email>trevharmon@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://dld.me/</ns0:comment_author_url>
    <ns0:comment_date>2013-02-04 10:30:36</ns0:comment_date>
    <ns0:comment_content>After a bit of thought on this, I've come to the conclusion it is possible to install a new why, but not retrofit. We've seen it a couple of times in industry--most impressively with Steve Jobs' return to Apple, though from all accounts that was done with a great deal effort and pain.

Here's the reasoning. I think it is impossible for a person or organization to exist without a why. If one isn't implicitly stated, a "natural" one forms. For enterprise, this naturally occurring why is "to make as much money as possible" or some variation thereof. The things with whys is they are used to make self-reinforcing decisions. For example, hiring decisions will be made consciously or subconsciously based on the why. The chosen person will exhibit the attributes preferred by the why, and will therefore reinforce the why culturally in the organization.

Here's the concerning thing, in our western society there are cautionary tales for those who only seek money (think how the once while name Scrooge has taken on a life of its own). However, those who would object to the accusation that they put money first and foremost in their lives have no problem building a human-based organization to do so. All organizations, even enterprise, are composed of humans with human traits and actions. Hence the reason an appropriate why is necessary.</ns0:comment_content>
    <ns0:comment_parent>650</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>657</ns0:comment_id>
    <ns0:comment_author>Trev Harmon</ns0:comment_author>
    <ns0:comment_author_email>trevharmon@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://dld.me/</ns0:comment_author_url>
    <ns0:comment_date>2013-02-04 21:44:43</ns0:comment_date>
    <ns0:comment_content>Because of the nature of the self-reinforcing decisions, I don't think it is possible for the change to work in a permanent, organization-wide manner from the ground up (save the ground-up movement changing the mind the person at the top, who then institutes it from the top down). At this point, I think those in the best those in the bottom and middle of an organization can do is to affect their own sphere of influence. If enough change is made there, then hopefully it will start to gain traction organization-wide, which conveniently takes the conversation full circle: the importance of the personal why.</ns0:comment_content>
    <ns0:comment_parent>656</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>665</ns0:comment_id>
    <ns0:comment_author>Smart Geeks Think Like Cheerleaders &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/02/05/smart-geeks-think-like-cheerleaders/</ns0:comment_author_url>
    <ns0:comment_date>2013-02-05 08:57:56</ns0:comment_date>
    <ns0:comment_content>[...] We accept all feature requests at face value and don&amp;#8217;t vett them thoughtfully against our why. [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>12976</ns0:comment_id>
    <ns0:comment_author>A More Important Manifesto | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/01/05/a-more-important-manifesto/</ns0:comment_author_url>
    <ns0:comment_date>2015-01-05 09:14:55</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] what makes me tick, as an engineer, an employee, and a company leader. A lot of it grew out of my exposure to Simon Sinek&amp;#8217;s TED talk, &amp;#8220;Start with Why&amp;#8221;, and my readings in Conscious [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Smart Geeks Think Like Cheerleaders</title>
  <link>http://codecraft.co/2013/02/05/smart-geeks-think-like-cheerleaders/</link>
  <pubDate>Tue, 05 Feb 2013 15:52:56 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=968</guid>
  <ns2:encoded>&lt;p style="text-align:right;"&gt;&lt;span style="color:#808080;font-size:90%;"&gt;Technorati code: FMUS579NQBM8&lt;/span&gt;&lt;/p&gt;
Saturday I went to a high school half an hour north of our home, to watch my 16-year-old daughter compete in a cheerleading competition. And I learned something about software.

[caption id="attachment_969" align="aligncenter" width="500"]&lt;a href="http://www.flickr.com/photos/neys/3779763449/"&gt;&lt;img class="size-full wp-image-969" alt="" src="http://codecraft.co/wp-content/uploads/2013/02/screen-shot-2013-02-04-at-9-42-59-pm.png" width="500" height="300" /&gt;&lt;/a&gt; Photo credit: neys (Flickr)[/caption]

I'm not sure how many teams were there--maybe a hundred. The competition started at 9 am and was scheduled to run through 5. Every team consisted of dozens of girls, all dressed in spangles and glitter, with identical ribbons in their hair. They'd march out onto the floor, drop their heads and arms to their sides, and wait for the first blast of music to initiate the routine. Then they'd tumble and dance their hearts out, finishing out of breath with a flourish.

Every hour or so, the performances suspended so judges could announce winners in a particular division that had just fielded its last competitor.

I noticed a pattern. Even though I have no knowledge of competitive cheer scoring, I could tell who had won. &lt;!--more--&gt;It was not the teams that had the most members, the best costumes, the whitest smiles, or the most spectacular acrobatics. It was not even the teams that had the fewest glitches, necessarily.

Winning teams had one thing in common: &lt;em&gt;They were better synchronized.&lt;/em&gt;

&lt;strong&gt;&lt;a class="zem_slink" title="Systems thinking" href="http://en.wikipedia.org/wiki/Systems_thinking" target="_blank" rel="wikipedia"&gt;System Thinking&lt;/a&gt;&lt;/strong&gt;

So how does cheerleading say anything profound about the business of designing and making software?

Judges in cheerleading are looking at a gestalt, not so much at individuals. The lines of the entire team, the volume boost from a simultaneous clap, the way they turn in collective unity to create a visual impression--this is what separates the superb from the average.

I saw several winning teams make small mistakes. One time a girl slipped as her teammates were doing a lift. She was trying to stand on shoulders, but missed; her foot dropped down into the crook of one of the lifter's elbows instead. But she stayed vertical, and she raised her hand to salute the crowd at the same moment as her twin on the opposite side of the formation.

If I hadn't been studying carefully, I would have missed the mistake. I suspect most of the crowd did--they were all focused on the symmetry of the overall performance, which didn't waver.

Cheer is a competition won by harmonious systems, not individual superstars.

So is software.

&lt;strong&gt;Geeks Who Flunk&lt;/strong&gt;

We software pros forget this, sometimes.

We champion the ideal implementation, programming language, product schedule, or architecture--so much so that we lose &lt;a title="Roland Whatcott: Manage momentum." href="http://codecraft.co/2012/09/21/roland-whatcott-manage-momentum/"&gt;momentum&lt;/a&gt; or &lt;a title="Good Code Is Balanced" href="http://codecraft.co/2012/08/27/good-code-is-balanced/"&gt;balance&lt;/a&gt;.

We forget that we are &lt;a title="Ken Ebert: Kill three birds." href="http://codecraft.co/2012/09/19/ken-ebert-kill-three-birds/"&gt;optimizing many variables at once&lt;/a&gt;.

We achieve something important, get enamored of our own success, and forget to be &lt;a title="Humility" href="http://codecraft.co/2012/10/01/humility/"&gt;humble&lt;/a&gt; and to &lt;a title="Julie Jones: Learn voraciously." href="http://codecraft.co/2012/09/24/julie-jones-learn-voraciously/"&gt;learn from others&lt;/a&gt;.

We accept all feature requests at face value and don't &lt;a title="Why" href="http://codecraft.co/2013/01/30/why/"&gt;vett them thoughtfully against our why&lt;/a&gt;.

We retreat to our cubes and grumble that people keep getting in the way of us getting work done, but we don't get serious enough about &lt;a title="Interrupting my interruptions" href="http://codecraft.co/2013/01/24/interrupting-my-interruptions/"&gt;managing everybody's interruptions wisely&lt;/a&gt;.

&lt;strong&gt;Geeks Who Pass With Flying Colors&lt;/strong&gt;

All of these memory lapses can be viewed as failures in system thinking. The software we create, and &lt;a title="Users Aren’t The Only People In Your Software" href="http://codecraft.co/2012/09/04/users-arent-the-only-people-in-your-software/"&gt;the people that surround and permeate it&lt;/a&gt;, constitute a system. We will not be successful unless we create harmony in the whole.

Smart geeks think like cheerleaders!
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;span style="color:#000080;"&gt;&lt;em&gt;Create a new kind of architecture diagram that shows how &lt;/em&gt;all&lt;em&gt; the parts of your system are related--not just the software components, but the people who create requirements, the sales force, the dev team, the executives, support, customers,  your CRM or ERP apps... Instead of arrows for "is-a" or "one-to-many", how about arrows for "provides moral support" and "keeps the lights on" and "frees me to concentrate on the kind of problem I like best"? How is this system compensating for minor imperfections in individual performers? How can you add to its symmetry and synchronization?&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.thinking.net/Systems_Thinking/st_innovation_990401.pdf" target="_blank"&gt;Using Systems Thinking to Increase the Benefits of Innovation Efforts&lt;/a&gt; (thinking.net)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://youtu.be/pElXE9DI9e4" target="_blank"&gt;Systems Thinking&lt;/a&gt; (ideasresearch on youtube)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://h30507.www3.hp.com/t5/Transforming-IT-Blog/System-thinking-in-the-cloud-world-the-secret-to-a-successful/ba-p/110869" target="_blank"&gt;System thinking in the cloud world: the secret to a successful cloud roadmap&lt;/a&gt; (HP Blogs)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>968</ns0:post_id>
  <ns0:post_date>2013-02-05 08:52:56</ns0:post_date>
  <ns0:post_name>smart-geeks-think-like-cheerleaders</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="architecture">architecture</category>
  <category domain="post_tag" nicename="cheerleading">cheerleading</category>
  <category domain="post_tag" nicename="competition">competition</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="humility">humility</category>
  <category domain="post_tag" nicename="interruptions">interruptions</category>
  <category domain="post_tag" nicename="learning">learning</category>
  <category domain="post_tag" nicename="memory">memory</category>
  <category domain="post_tag" nicename="optimization">optimization</category>
  <category domain="post_tag" nicename="schedules">schedules</category>
  <category domain="post_tag" nicename="system-thinking">system thinking</category>
  <category domain="post_tag" nicename="vision">vision</category>
  <category domain="post_tag" nicename="why">why</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:91:"http://techknowledgeme.files.wordpress.com/2013/02/screen-shot-2013-02-04-at-9-42-59-pm.png";s:6:"images";a:1:{s:91:"http://techknowledgeme.files.wordpress.com/2013/02/screen-shot-2013-02-04-at-9-42-59-pm.png";a:6:{s:8:"file_url";s:91:"http://techknowledgeme.files.wordpress.com/2013/02/screen-shot-2013-02-04-at-9-42-59-pm.png";s:5:"width";i:500;s:6:"height";i:300;s:4:"type";s:5:"image";s:4:"area";i:150000;s:9:"file_path";b:0;}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2013-02-05 05:53:20";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>668</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2013-02-05 10:10:01</ns0:comment_date>
    <ns0:comment_content>mmm, yeah, great observation. That "syncs" with me - lol</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>681</ns0:comment_id>
    <ns0:comment_author>Why Software Artisans Should Manage Their Influence &amp;laquo; Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/02/07/why-software-artisans-should-manage-their-influence/</ns0:comment_author_url>
    <ns0:comment_date>2013-02-07 08:49:22</ns0:comment_date>
    <ns0:comment_content>[...] craftsmen, I see direct application of his thinking to our field. Since so much of what we do requires buy-in, coordination and shared mental models, we have to be savvy about how we communicate, advocate, and train. [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1016</ns0:comment_id>
    <ns0:comment_author>My First Tangle With the Tower of Babel | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/04/26/my-first-tangle-with-the-tower-of-babel/</ns0:comment_author_url>
    <ns0:comment_date>2013-04-26 08:48:34</ns0:comment_date>
    <ns0:comment_content>[...] distributed architectures, object lifecycle, and communication may be involved. A facilitation of system thinking may help. I&amp;#8217;m now studying shared transactional memory, actor systems, variants of [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2688</ns0:comment_id>
    <ns0:comment_author>What should code look like when we squint at it? | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/09/19/what-should-code-look-like-when-we-squint-at-it/</ns0:comment_author_url>
    <ns0:comment_date>2013-09-19 08:23:07</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] allow you to encapsulate and suppress details—but they don&amp;#8217;t tell you how they fit into a gestalt. Tests as a form of documentation are helpful, but they make it even harder to distinguish major [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4881</ns0:comment_id>
    <ns0:comment_author>Why you should use an IDE instead of vim or emacs | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/05/13/why-you-should-use-an-ide-instead-of-vim-or-emacs/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-13 10:16:35</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] and like. This choice will pay off in enhanced teamwork benefits, and it will encourage the sort of broad, integrated thinking that characterizes the best software [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>19551</ns0:comment_id>
    <ns0:comment_author>God, Evolution, Systems, and Eternity &amp;#8211; An Eye of Faith</ns0:comment_author>
    <ns0:comment_author_url>https://aneyeoffaith.wordpress.com/2018/12/07/god-evolution-systems-and-eternity/</ns0:comment_author_url>
    <ns0:comment_date>2018-12-07 15:49:11</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] across large spans of time. There&amp;#8217;s incredible interplay and feedback loops. I&amp;#8217;ve blogged about this, more than [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Why Software Artisans Should Manage Their Influence</title>
  <link>http://codecraft.co/2013/02/07/why-software-artisans-should-manage-their-influence/</link>
  <pubDate>Thu, 07 Feb 2013 15:49:18 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=977</guid>
  <ns2:encoded>Just read an &lt;a href="http://sethgodin.typepad.com/seths_blog/2013/02/scarcity-and-abundance-in-the-digital-age.html" target="_blank"&gt;insightful post from Seth Godin&lt;/a&gt;. If you don't already know who Seth is, and follow him, I suggest you get to know him a bit. He's a thought leader in the field of &lt;a class="zem_slink" title="Permission marketing" href="http://en.wikipedia.org/wiki/Permission_marketing" target="_blank" rel="wikipedia"&gt;permission marketing&lt;/a&gt;--the founder of the movement, perhaps. He's spoken at &lt;a class="zem_slink" title="TED (conference)" href="http://www.ted.com" target="_blank" rel="homepage"&gt;TED&lt;/a&gt; conferences numerous times. Every one of his books that I've read is worthy of pondering.

Although Godin isn't speaking specifically about software craftsmen, I see direct application of his thinking to our field. Since so much of what we do &lt;a title="Smart Geeks Think Like Cheerleaders" href="http://codecraft.co/2013/02/05/smart-geeks-think-like-cheerleaders/" target="_blank"&gt;requires buy-in, coordination&lt;/a&gt; and &lt;a title="Why Mental Models Matter" href="http://codecraft.co/2012/11/05/why-mental-models-matter/" target="_blank"&gt;shared mental models&lt;/a&gt;, we have to be savvy about how we communicate, advocate, and train. Assuming equal technical competence, the difference between effective and ineffective technical leaders largely depends on the mastery of this skill.

Have you considered how to grow your influence? Do you have a plan?

[caption id="" align="aligncenter" width="500"]&lt;a href="http://xkcd.com/1170/"&gt;&lt;img class=" " alt="" src="http://imgs.xkcd.com/comics/bridge.png" width="500" height="161" /&gt;&lt;/a&gt; Influence doesn't always work the way we expect. :-) Image credit: xkcd[/caption]
&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://popalx.wordpress.com/2013/01/09/seth-godin-how-to-get-your-ideas-to-spread/" target="_blank"&gt;Seth Godin - How to get your ideas to spread&lt;/a&gt; (popalx.wordpress.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.twistimage.com/blog/archives/the-end-of-permission/" target="_blank"&gt;The End Of Permission | Six Pixels of Separation - Marketing and Communications Blog - By Mitch Joel at Twist Image&lt;/a&gt; (twistimage.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://sanderssays.typepad.com/sanders_says/2010/02/a-few-minutes-with-seth-godin-ted.html" target="_blank"&gt;A few minutes with Seth Godin @ TED&lt;/a&gt; (sanderssays.typepad.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://techcrunch.com/2012/06/23/domo-social-josh-james/" target="_blank"&gt;Domo's Josh James: We're making every employee embrace social media, and it's paying off&lt;/a&gt; (techcrunch.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.informationweek.com/global-cio/interviews/tell-me-again-why-ceos-should-tweet/240144283?cid=RSSfeed_IWK_All" target="_blank"&gt;Tell Me Again Why CEOs Should Tweet&lt;/a&gt; (informationweek.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>977</ns0:post_id>
  <ns0:post_date>2013-02-07 08:49:18</ns0:post_date>
  <ns0:post_name>why-software-artisans-should-manage-their-influence</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="buy-in">buy-in</category>
  <category domain="post_tag" nicename="communication">communication</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="influence">influence</category>
  <category domain="post_tag" nicename="mental-models">mental models</category>
  <category domain="category" nicename="role-models">Role Models</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>686</ns0:comment_id>
    <ns0:comment_author>Don</ns0:comment_author>
    <ns0:comment_author_email>don_kleinschnitz@hotmail.com</ns0:comment_author_email>
    <ns0:comment_date>2013-02-08 06:05:29</ns0:comment_date>
    <ns0:comment_content>The abiltiy to sell your ideas if of paramount importance if you want to drive and particiapte in change.
IMO we have swept though the knee of the change curve. If you stop for a moment and look back you notice that things we saw not so many years ago in our environment are erased. Find me a cassette tape! One sign of change intensity is how many things have changed over a unit of your lifetime.
We are on the cusp of a new industrial revolution that will be owned by small groups of people with great ideas and the ability to get them to market literally by themselves by using our networks and building on "open everything".
The top shelf of these Makers will be those that can sell their ideas on a gloabl stage.....  Thanks for the link I appreciated the Seth videos.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>687</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-02-08 07:59:47</ns0:comment_date>
    <ns0:comment_content>I see the pace of change slowing in some ways, and accelerating in others. For example, I think Moore's law (as he originally stated it, about density of transistors per unit area) has mostly played itself out. In some ways, software as an industry is beginning to look like automobiles; we're settling down into producing refinements rather than radically different things. However, there are still fundamental shifts happening, like the rise of e-readers that redefine the publishing industry, massive distributed parallelism and mobile tech, etc. Your prediction about a new industrial revolution is very intriguing. It's going to be fun to see what happens in the next few years!</ns0:comment_content>
    <ns0:comment_parent>686</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
</item>
<item>
  <title>The Power of Simplicity</title>
  <link>http://codecraft.co/2013/02/15/the-power-of-simplicity/</link>
  <pubDate>Fri, 15 Feb 2013 15:55:22 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=987</guid>
  <ns2:encoded>Most stories about zen masters, gurus, or other paragons of wisdom follow a similar pattern. The pupil discovers a problem. He or she struggles with it. The problem gets more and more overwhelming. Solutions are elusive. Finally the pupil goes to the master and pours out his heart, whereupon the master offers a pearl of insight that radically reinterprets the problem.

[caption id="attachment_989" align="aligncenter" width="500"]&lt;a href="http://www.flickr.com/photos/departingyyz/6858912596/"&gt;&lt;img class="size-full wp-image-989 " alt="Seek the simple... Photo credit: departing(YYZ) (Flickr)" src="http://codecraft.co/wp-content/uploads/2013/02/screen-shot-2013-02-14-at-10-12-29-pm.png" width="500" height="330" /&gt;&lt;/a&gt; Seek the simple... Photo credit: departing(YYZ) (Flickr)[/caption]

There's a reason why this narrative exists in every culture: human beings need the insight that comes from synthesis, pared down to its essence. We crave the simple but profound:
&lt;ul&gt;
	&lt;li&gt;Less is more.&lt;/li&gt;
	&lt;li&gt;Do unto others as you'd have others do unto you.&lt;/li&gt;
	&lt;li&gt;A watched pot never boils.&lt;/li&gt;
	&lt;li&gt;Freedom isn't free.&lt;/li&gt;
&lt;/ul&gt;
The software industry desperately needs this sort of insight, but far too often I see us operate in the stage of the narrative where the pupil misunderstands the problem, struggles, and makes things worse. &lt;!--more--&gt;This is true of all sorts of software--even mobile apps and consumer web sites--but I'm especially thinking about enterprise stacks. The architectures that I encounter today are significantly more complex than the ones I drew on whiteboards a decade ago. Applications used to consist of a binary and a handful of config files. Now they consist of hundreds or thousands of artifacts: executables, shared libraries, plugins, parsers, databases, triggers, stored procedures, data sets, documentation, brandable CSS, image libraries, drivers, rule sets, comm channels... Products have more features--&lt;em&gt;way&lt;/em&gt; more. We sneer at offerings that aren't &lt;em&gt;solutions&lt;/em&gt;. We build federated, distributed, loosely coupled fabrics that run in sophisticated clouds and that abstract physical geography, hardware, network interconnects.

We aren't as troubled by this complexity as we should be. All those features we're building into a product? And all the planning that built those features? They're &lt;em&gt;symptoms of a problem&lt;/em&gt;, not solutions. &lt;a title="Flexibility is No Virtue" href="http://codecraft.co/2012/10/17/flexibility-is-no-virtue/"&gt;Nobody really wants a shopping cart framework with 10,000 configuration options&lt;/a&gt;; they want to sell in a way that delights and engages customers. (Okay, I guess &lt;em&gt;some&lt;/em&gt; software really does make people happy with greater complexity. Photoshop has 10,000 menu items, and its power users love it. Perhaps this is because it enables enables human creativity and passion, and creativity thrives on possibilities. I don't think most software is like this...)

We imagine we're going to outrun all this complexity with kaizen. We'll get smarter, adhere more to agile methods, use more efficient tools, double down on use cases, or implement some other technique &lt;em&gt;du jour&lt;/em&gt;. And we're not crazy--there are gains to be had, and they're important. Continuous integration kicks out dozens of builds per hour. Product management teams accomplish feats of planning, coordination, and analysis that would have caused jaws to drop a few years back. Test automation is light years ahead of where it was when I first did a handoff with a tester. The amount of data that we index, transform, and marshal to achieve business purposes grows at an astonishing rate.

But in the zen master stories, the pupil never wins through sheer grit.

&lt;a href="https://www.adaptivecomputing.com/simiplicty-clouds-hidden-value-proposition/" target="_blank"&gt;On my work blog at Adaptive Computing, I posted an article&lt;/a&gt; about how I think the entire cloud computing community misunderstands the true emotional motivation of its customers. IT folks who buy cloud management software may say that they want "cost savings" and "increased agility"--and I think that's accurate--but they also want simplicity. They want it in the worst way, even if they don't articulate that desire, don't measure it, and don't use it to justify purchase decisions.

IT is &lt;em&gt;drowning&lt;/em&gt; in complexity.

If you want to be a zen master, don't give them 20 more menu items in the next release. Give them a release where 20 menu items become unnecessary.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;For a week, spend 2 minutes per day imagining ways to simplify. Incremental improvements are good, but also push yourself to think more radically. Could you deliver your product in a new way that totally obviates the need for an install, instead of just making the install easier? Instead of making two components talk more robustly through web services, could you collapse a process boundary altogether? Instead of integrating with a third-party app, could you throw away 1/3 of your product and simply use that app to get the job done?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;I will be blogging more about how to simplify in coming weeks, and would be very interested in your thoughts on this topic. Please comment.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://java.dzone.com/articles/why-scrum-won" target="_blank"&gt;Why Scrum Won&lt;/a&gt; (java.dzone.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.theenterprisearchitect.eu/archive/2013/01/05/a-tale-of-a-7-year-journey-in-developing-software-for-the-enterprise" target="_blank"&gt;A tale of a 7 year journey in developing software for the enterprise&lt;/a&gt; (theenterprisearchitect.eu)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.hispanicbusiness.com/2013/2/7/ibm_simplifies_big_data_cloud_computing.htm" target="_blank"&gt;IBM Simplifies Big Data, Cloud Computing&lt;/a&gt; (hispanicbusiness.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>987</ns0:post_id>
  <ns0:post_date>2013-02-15 08:55:22</ns0:post_date>
  <ns0:post_name>the-power-of-simplicity</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="agility">agility</category>
  <category domain="post_tag" nicename="big-data">big data</category>
  <category domain="post_tag" nicename="cloud-computing">cloud computing</category>
  <category domain="post_tag" nicename="complexity">complexity</category>
  <category domain="post_tag" nicename="continuous-integration">continuous integration</category>
  <category domain="post_tag" nicename="cost-savings">cost savings</category>
  <category domain="post_tag" nicename="enterprise">enterprise</category>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <category domain="post_tag" nicename="kaizen">kaizen</category>
  <category domain="category" nicename="mistakes">Mistakes</category>
  <category domain="post_tag" nicename="product-management">product management</category>
  <category domain="post_tag" nicename="roi">ROI</category>
  <category domain="post_tag" nicename="simplicity">simplicity</category>
  <category domain="post_tag" nicename="solutions">solutions</category>
  <category domain="post_tag" nicename="zen">zen</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>twitter_cards_summary_img_size</ns0:meta_key>
    <ns0:meta_value>a:6:{i:0;i:500;i:1;i:330;i:2;i:3;i:3;s:24:"width="500" height="330"";s:4:"bits";i:8;s:4:"mime";s:9:"image/png";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>733</ns0:comment_id>
    <ns0:comment_author>trevharmon</ns0:comment_author>
    <ns0:comment_author_email>trevharmon@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2013-02-15 11:42:58</ns0:comment_date>
    <ns0:comment_content>This is one of those phenomenon I've noticed, as well. In fact, I've spent quite a lot of time trying to understand the reasons behind it in what may be a misguided effort. I think if I can understand the cause, I can fix it. Here are some of the reasons defending complexity:

- Everyone else is doing it --- That argument didn't fly when I was a kid, so I don't see why it's valid now.
- Customers are demanding new features --- Maybe they are, but that doesn't necessarily mean those features should be enabled if they increase complexity. In my experience it's the edge cases that create the most complexity.
- Flexibility is more important than usability --- This is a philosophical debate, and I admit I fall into different camps depending on the circumstance. However, I'm always for simplicity.
- We prove how smart we are by making something complex --- No one ever says this one out loud, though I've seen it implied a number of times. There's an unfounded fear the finesse of a simple approach will hide the creator's brilliance. Oddly, usable simplicity is far more difficult to achieve than complexity. Anyone can make something more complex.

Now, assuming one provides a product and is not a bespoke services shop, I think I comes down to one of two things: fear or greed. Making something simple means one knows and understands their target customer, which by its very definition means one has limited the customer base. A simple to use product is not going to do everything any possible user may want. So, one is either fearful the simple to use product will overly limit the customer base or just plain doesn't want to limit it in any way. So, one falls into the trap of trying to make it work for everyone. Complexity rears its ugly head.

The trick is to truly know your one's customers and allow the product to be no more complex than is absolutely needed for their needs. That's why Photoshop works for some but is far too complex for the majority of digital camera owners.

Too bad it seems everyone feels compelled to build the IT equivalent of Photoshop.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>44057411</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>734</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-02-15 15:18:40</ns0:comment_date>
    <ns0:comment_content>As always, I learn something from your thoughtful comments, Trev. I had not seen, before, such a clear summary of the "prove how smart we are" problem.

One of the reasons why I'm attracted to biology as a metaphor and guiding light for software is that life does incredible--perhaps "awe-inspiring" would be even more apt--things with complexity. The amount of complexity in something as "simple" as a single cell, or even a single strand of DNA, is mind-boggling. And yet that complexity is all encapsulated behind layers and layers of interfaces that allow us, at any given level of detail, to describe and predict interactions in useful ways. We can make sweeping generalizations at the level of an organ, an individual, or even an ecosystem, and find that those generalizations hold true, and allow us to manage with confidence. The system doesn't degenerate into chaos, even at levels of complexity many orders of magnitude beyond a single cell. I would like to be able to say the same about software, but although I see hopeful signs here and there, I think we're nowhere near as good as biology at making the complexity tractable.</ns0:comment_content>
    <ns0:comment_parent>733</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>754</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-02-19 12:42:51</ns0:comment_date>
    <ns0:comment_content>I hadn't thought about it in quite those terms before, Andy, but you're totally right. One more reason for Didgets, which in some ways has the same vision as the old "winfs" idea that MS used to talk about -- describe data in robust and general-purpose ways that provide efficient searching -- without imposing lots of burden on the data due to the particular application that's using it.</ns0:comment_content>
    <ns0:comment_parent>753</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>753</ns0:comment_id>
    <ns0:comment_author>Andy Lawrence</ns0:comment_author>
    <ns0:comment_author_email>andy3474@msn.com</ns0:comment_author_email>
    <ns0:comment_date>2013-02-19 10:48:30</ns0:comment_date>
    <ns0:comment_content>It is not just software and systems where increased complexity has become the norm. Data itself is increasingly "locked" into very complex and proprietary formats. Instead of keeping data in its "raw" format and devising several different ways to view that data, the data itself is being wrapped in a ton of markup, imported into databases, or split into other kinds of separate systems. Such systems make it hard to extract out the original data in order to perform new and interesting functions against it.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>829</ns0:comment_id>
    <ns0:comment_author>6 Strategies to Simplify Software | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/03/12/6-strategies-to-simplify-software/</ns0:comment_author_url>
    <ns0:comment_date>2013-03-12 08:57:20</ns0:comment_date>
    <ns0:comment_content>[...] written that simplicity is powerful, and that it undergirds many deep architectural breakthroughs. In posts about pragmatism and [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1015</ns0:comment_id>
    <ns0:comment_author>My First Tangle With the Tower of Babel | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/04/26/my-first-tangle-with-the-tower-of-babel/</ns0:comment_author_url>
    <ns0:comment_date>2013-04-26 08:48:31</ns0:comment_date>
    <ns0:comment_content>[...] think the answer may lie in finding new accommodations for all the complexity we wrestle. New ways to think about concurrency, distributed architectures, object lifecycle, and [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1041</ns0:comment_id>
    <ns0:comment_author>Why Your Software Should Cry | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/05/06/why-your-software-should-cry/</ns0:comment_author_url>
    <ns0:comment_date>2013-05-06 11:50:48</ns0:comment_date>
    <ns0:comment_content>[...] in a good script with a few lines of code. However, if we want to truly master the bewildering growth of complexity in the universe of bits and bytes, we need pain. And we need to pay attention to [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4949</ns0:comment_id>
    <ns0:comment_author>Why you should be proficient in a tool like vim or emacs | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/05/15/why-you-should-be-proficient-in-a-tool-like-vim-or-emacs/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-15 08:46:17</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] I claim that if you only ever see the complexity of software engineering through the lens of an IDE, you have missed an important&amp;#8211;even revelatory&amp;#8211;learning [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14915</ns0:comment_id>
    <ns0:comment_author>A grumble about buckets | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/04/08/a-grumble-about-buckets/</ns0:comment_author_url>
    <ns0:comment_date>2015-04-08 13:39:21</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] Sometimes developers limit the choices that are offered to their users as a way to simplify. This can be a good thing; I&amp;#8217;m a big fan of simplicity. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16571</ns0:comment_id>
    <ns0:comment_author>On Forests and Trees | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/09/02/on-forests-and-trees/</ns0:comment_author_url>
    <ns0:comment_date>2015-09-02 08:48:39</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] unremarkable. It&amp;#8217;s among the human mind&amp;#8217;s most powerful techniques for coping with complexity, and it&amp;#8217;s a hallmark of vigorous thinkers in any technical discipline. I like what Hegel [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Are You Losing Enough Battles?</title>
  <link>http://codecraft.co/2013/03/05/are-you-losing-enough-battles/</link>
  <pubDate>Tue, 05 Mar 2013 15:25:06 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=997</guid>
  <ns2:encoded>[caption id="" align="alignright" width="320"]&lt;a href="http://upload.wikimedia.org/wikipedia/commons/thumb/e/ef/George_McClellan_at_National_Portrait_Gallery_IMG_4524.JPG/320px-George_McClellan_at_National_Portrait_Gallery_IMG_4524.JPG"&gt;&lt;img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/e/ef/George_McClellan_at_National_Portrait_Gallery_IMG_4524.JPG/320px-George_McClellan_at_National_Portrait_Gallery_IMG_4524.JPG" width="320" height="240" /&gt;&lt;/a&gt; Portrait of McClellan. Image credit: Wikimedia Commons.[/caption]

&lt;a href="http://en.wikipedia.org/wiki/General_mcclellan" target="_blank"&gt;General George B. McClellan&lt;/a&gt; was a brilliant planner, but his overly cautious style &lt;a href="http://myloc.gov/Exhibitions/civil-war-in-america/april-1862-november-1862/ExhibitObjects/Lees-Lost-Orders-and-McClellans-Wasted-Opportunity.aspx" target="_blank"&gt;may have tacked years onto the U.S. civil war&lt;/a&gt;. Lincoln became frustrated, commenting with devastating wit that "McClellan is always almost ready to fight." Eventually McClellan's risk aversion forced Linoln to relieve him of command, after sending a telegram that read, &lt;a href="http://rileyhayes.com/blog/general-inaction-vs-general-in-action-2/" target="_blank"&gt;"If General McClellan isn't going to use his army, I'd like to borrow it for a time."&lt;/a&gt;

Contrast &lt;a title="Colin Powell Leadership Presentation" href="http://www.slideshare.net/guesta3e206/colin-powells-leadership-presentation" target="_blank"&gt;Colin Powell, who recommends&lt;/a&gt;: "Once information is in the 40% to 70% [certainty] range, go with your gut."

I don't recommend that you take stupid risks, that you make no effort to gather data, or that you spend your political capital carelessly. But I do recommend that you follow Powell's example, not McClellan's. To quote Powell again, "You don't know what you can get away with until you try."

Thomas Edison tried 1000 times to invent a light bulb before he succeeded. Why do we expect in software to get our designs right on the first attempt? I submit that if you aren't losing a battle now and then--if you don't make any failed experiments--you are not working smart enough or courageously enough.

If you don't lose the occasional battle, you will never win the war.

Losing an occasional battle keeps us &lt;a title="Humility" href="http://codecraft.co/2012/10/01/humility/" target="_blank"&gt;humble&lt;/a&gt;. It means we're grounded in reality rather than ivory tower imagination. It means we value &lt;a title="Good Code Is Balanced" href="http://codecraft.co/2012/08/27/good-code-is-balanced/" target="_blank"&gt;balance&lt;/a&gt; and &lt;a title="Earned Pragmatism" href="http://codecraft.co/2013/01/18/earned-pragmatism/" target="_blank"&gt;pragmatism&lt;/a&gt; over theoretical perfection, and it helps build a healthy regard for &lt;a title="Users Aren’t The Only People In Your Software" href="http://codecraft.co/2012/09/04/users-arent-the-only-people-in-your-software/" target="_blank"&gt;the needs of other people&lt;/a&gt;.

Go try. A lost battle of the sort we fight with software is never an Antietam or Gettysburg.

“To live a creative life, we must lose our fear of being wrong.” Joseph Chilton Pearce.
&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://abrahamlincolnandthecivilwar.wordpress.com/2013/02/24/lincoln-cabinet-discusses-possible-embarrassment-of-general-george-b-mcclellan/" target="_blank"&gt;Lincoln Cabinet discusses possible embarrassment of General George B. McClellan&lt;/a&gt; (abrahamlincolnandthecivilwar.wordpress.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://theproducermaker.com/2013/02/01/take-action-now/" target="_blank"&gt;Take Action Now&lt;/a&gt; (theproducermaker.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.inc.com/steve-cody/lessons-from-abraham-lincoln.html" target="_blank"&gt;6 Publicity Lessons From Abraham Lincoln&lt;/a&gt; (inc.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://grasshopper.com/blog/2011/01/the-future-is-now-infographic/" target="_blank"&gt;The Future is Now [Infographic]&lt;/a&gt; (grasshopper.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>997</ns0:post_id>
  <ns0:post_date>2013-03-05 08:25:06</ns0:post_date>
  <ns0:post_name>are-you-losing-enough-battles</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="battles">battles</category>
  <category domain="post_tag" nicename="certainty">certainty</category>
  <category domain="post_tag" nicename="courage">courage</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="edison">edison</category>
  <category domain="post_tag" nicename="experiments">experiments</category>
  <category domain="post_tag" nicename="instinct">instinct</category>
  <category domain="post_tag" nicename="war">war</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>twitter_cards_summary_img_size</ns0:meta_key>
    <ns0:meta_value>a:7:{i:0;i:320;i:1;i:240;i:2;i:2;i:3;s:24:"width="320" height="240"";s:4:"bits";i:8;s:8:"channels";i:3;s:4:"mime";s:10:"image/jpeg";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>804</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-03-05 09:24:38</ns0:comment_date>
    <ns0:comment_content>I wrote this post because I caught myself hanging back. I was concerned that some ideas that I had might not stand up to thorough testing, so I didn't propose them at all. What I've realized is that it's fine if my ideas don't stand up, but it's not fine to not do the experiment. I needed a little shot of courage! :-)

Thanks for the reminder that inaction is also a choice.</ns0:comment_content>
    <ns0:comment_parent>803</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>851</ns0:comment_id>
    <ns0:comment_author>CONTINUALLY EDUCATE YOURSELF | Lincoln Daily Management</ns0:comment_author>
    <ns0:comment_author_url>http://lincolndailymanagement.com/2013/03/15/continually-educate-yourself/</ns0:comment_author_url>
    <ns0:comment_date>2013-03-15 23:44:58</ns0:comment_date>
    <ns0:comment_content>[...] visit “Are You Losing Enough Battles?” by Daniel Hardman for more on George [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>803</ns0:comment_id>
    <ns0:comment_author>Gene Hughson</ns0:comment_author>
    <ns0:comment_author_email>genehughson@hotmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://genehughson.wordpress.com</ns0:comment_author_url>
    <ns0:comment_date>2013-03-05 08:45:52</ns0:comment_date>
    <ns0:comment_content>It comes as a great surprise to some people that doing nothing is as much an action as doing something.  As long as there is more than one actor in the world, there is no stasis.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>28036074</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>805</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2013-03-06 12:17:39</ns0:comment_date>
    <ns0:comment_content>spot on. I have learned to gather enough information up front to know the following:  a) it is doable with the resources we have, even if we don't know all of what we need - we will learn. b) We know the general direction we need to go, c) we know mostly WHAT we will have, so we know when we are done.

thanks</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>813</ns0:comment_id>
    <ns0:comment_author>Julie</ns0:comment_author>
    <ns0:comment_author_email>julie.jones@pobox.com</ns0:comment_author_email>
    <ns0:comment_date>2013-03-08 17:54:32</ns0:comment_date>
    <ns0:comment_content>[In my words] You aren't going to invent/create anything really new and interesting in one try. The faster and more often you fail - the sooner you can succeed!</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>814</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-03-08 18:30:28</ns0:comment_date>
    <ns0:comment_content>I find it interesting how "fail faster" is good advice for a program (I'm thinking of preconditions), and also for people... :-)</ns0:comment_content>
    <ns0:comment_parent>813</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>806</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-03-06 13:48:17</ns0:comment_date>
    <ns0:comment_content>We need to figure out a way to work together, Doug. Folks with that kind of a philosophy tend to generate momentum, and I love being on teams with them!</ns0:comment_content>
    <ns0:comment_parent>805</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2277</ns0:comment_id>
    <ns0:comment_author>Continually Educate Yourself - Lincoln Daily Management</ns0:comment_author>
    <ns0:comment_author_url>http://www.lincolndailymanagement.com/2013/06/14/continually-educate-yourself/</ns0:comment_author_url>
    <ns0:comment_date>2013-07-08 19:18:33</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] “Are You Losing Enough Battles?” by Daniel Hardman for more on George [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2326</ns0:comment_id>
    <ns0:comment_author>Lincoln Used Continuing Education to Win the War - Lincoln Daily Management</ns0:comment_author>
    <ns0:comment_author_url>http://www.lincolndailymanagement.com/2013/07/18/continually-educate-yourself/</ns0:comment_author_url>
    <ns0:comment_date>2013-07-18 06:02:00</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] “Are You Losing Enough Battles?” by Daniel Hardman for more on George [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Architects: manage risk like a Vegas bookie</title>
  <link>http://codecraft.co/2013/02/21/architects-manage-risk-like-a-vegas-bookie/</link>
  <pubDate>Thu, 21 Feb 2013 16:31:22 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1001</guid>
  <ns2:encoded>In the world of cloud computing, "risk" is a big buzz word. Lots of analysts are debating how much risk is involved in using &lt;a class="zem_slink" title="Software as a service" href="http://en.wikipedia.org/wiki/Software_as_a_service" target="_blank" rel="wikipedia"&gt;SaaS&lt;/a&gt; offerings like Salesforce, or hosting corporate applications with a public &lt;a class="zem_slink" title="Cloud computing" href="http://en.wikipedia.org/wiki/Cloud_computing" target="_blank" rel="wikipedia"&gt;IaaS&lt;/a&gt; provider like Amazon's EC2. They're worried about &lt;a title="Amazon offline, downtime costs 5 million" href="http://www.networkworld.com/news/2013/013113-amazoncom-suffers-outage-nearly-5m-266314.html" target="_blank"&gt;outages (Amazon's had several ugly ones&lt;/a&gt;, most recently for 49 minutes in January), about security, about &lt;a class="zem_slink" title="Regulatory compliance" href="http://en.wikipedia.org/wiki/Regulatory_compliance" target="_blank" rel="wikipedia"&gt;regulatory compliance&lt;/a&gt;, and so forth.

[caption id="attachment_1004" align="alignright" width="300"]&lt;a href="http://vimeo.com/1386054#at=0"&gt;&lt;img class="size-medium wp-image-1004" alt="Werner Vogels, Amazon CTO, NextWeb 2008: &amp;quot;Everything fails, all the time.&amp;quot;" src="http://codecraft.co/wp-content/uploads/2013/02/screen-shot-2013-02-21-at-9-14-21-am.png?w=300" width="300" height="217" /&gt;&lt;/a&gt; Werner Vogels, Amazon CTO, NextWeb 2008: "Everything fails, all the time."[/caption]

These worries are well founded. However, I pointed out today on &lt;a title="think about cloud risk in terms of diversification" href="http://www.adaptivecomputing.com/the-cloud-isnt-risky-in-the-way-you-think/" target="_blank"&gt;Adaptive Computing's blog that the question "Can I take the risk to use the cloud?" is a bit naive&lt;/a&gt;. Sometimes you can just avoid risk altogether. In many cases, however, risk is endemic, and the smart course is to manage it.

How does risk figure in your architectural vision? You should think about it all the time. You should count it, weigh and balance alternative outcomes in ways that would impress even the gaming industry.

Here are 6 key questions to kick-start your pondering:
&lt;ul&gt;
	&lt;li&gt;Is my architecture properly accounting for risk of environmental problems such as DDOS, routing failures, brownouts, and temporary loss of an internal component? (See my article about &lt;a title="circuit breaker -- enterprise design pattern" href="http://codecraft.co/2013/01/11/dont-forget-the-circuit-breakers/" target="_blank"&gt;circuit breakers&lt;/a&gt;.)&lt;/li&gt;
	&lt;li&gt;When one of my components crashes, will its state be cleanly recoverable (e.g., on transaction boundaries) rather than corrupt? What data loss contract am I targeting?&lt;/li&gt;
	&lt;li&gt;Will it be easy for users or admins to notice when theoretical risks I've planned for become true emergencies? How will they be notified?&lt;/li&gt;
	&lt;li&gt;Is it possible to put the system in a "scabbed" state that's degraded and safe, but functional, while more extensive repairs take place?&lt;/li&gt;
	&lt;li&gt;Am I assuming success too often? (&lt;a title="Werner Vogels at NextWeb 2008: everything fails, all the time" href="http://vimeo.com/1386054#at=0" target="_blank"&gt;Werner Vogels, Amazon's CTO, is fond of saying "everything fails, all the time."&lt;/a&gt; That's on my top 5 list of major insights to remember.)&lt;/li&gt;
	&lt;li&gt;Am I diversifying intelligently, and enabling my customers to do so as well?&lt;/li&gt;
&lt;/ul&gt;
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Make a list of a handful of important risks from your customer's perspective. How many of them can you help with?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.sys-con.com/node/2528403" target="_blank"&gt;Cloud Computing Service Models&lt;/a&gt; (sys-con.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://cloudcomputing.sys-con.com/node/2539596" target="_blank"&gt;Cloud Compliance in IaaS Is Mainly Your Responsibility&lt;/a&gt; (cloudcomputing.sys-con.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a style="font-size:13px;line-height:19px;" href="http://techcrunch.com/2013/01/04/the-enterprise-hey-aws-you-wanna-piece-of-me/" target="_blank"&gt;AWS Needs To Figure Out Its Enterprise Plan&lt;/a&gt;&lt;span style="color:#333333;font-size:13px;line-height:19px;"&gt; (techcrunch.com)&lt;/span&gt;&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://precision-blog.com/2013/01/13/top-5-benefits-of-effective-risk-management/" target="_blank"&gt;Top 5 Benefits of Effective Risk Management&lt;/a&gt; (precision-blog.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://devopsangle.com/2013/02/19/clouds-without-fear-the-big-bang-theory-of-cloud-sprawl/" target="_blank"&gt;Clouds Without Fear: The Big Bang Theory of Cloud Sprawl&lt;/a&gt; (devopsangle.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://blogs.gartner.com/chris-gaun/how-can-public-clouds-reduce-business-risk-for-users/" target="_blank"&gt;How Can Public Clouds Reduce Business Risk For Users?&lt;/a&gt; (blogs.gartner.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>1001</ns0:post_id>
  <ns0:post_date>2013-02-21 09:31:22</ns0:post_date>
  <ns0:post_name>architects-manage-risk-like-a-vegas-bookie</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="abends">abends</category>
  <category domain="post_tag" nicename="brownouts">brownouts</category>
  <category domain="post_tag" nicename="circuit-breakers">circuit breakers</category>
  <category domain="post_tag" nicename="cloud-computing">cloud computing</category>
  <category domain="post_tag" nicename="crashes">crashes</category>
  <category domain="post_tag" nicename="data-loss">data loss</category>
  <category domain="post_tag" nicename="ddos">DDOS</category>
  <category domain="post_tag" nicename="diversification">diversification</category>
  <category domain="post_tag" nicename="ha">HA</category>
  <category domain="post_tag" nicename="iaas">IaaS</category>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <category domain="post_tag" nicename="recovery">recovery</category>
  <category domain="post_tag" nicename="regulatory-compliance">regulatory compliance</category>
  <category domain="post_tag" nicename="risk">risk</category>
  <category domain="category" nicename="role-models">Role Models</category>
  <category domain="post_tag" nicename="saas">SaaS</category>
  <category domain="post_tag" nicename="scabbing">scabbing</category>
  <category domain="post_tag" nicename="transactions">transactions</category>
  <category domain="post_tag" nicename="vision">vision</category>
  <category domain="post_tag" nicename="werner-vogels">werner vogels</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:2:{s:2:"fb";a:1:{i:1511184;i:361;}s:2:"wp";a:1:{i:0;i:54;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:91:"http://techknowledgeme.files.wordpress.com/2013/02/screen-shot-2013-02-21-at-9-14-21-am.png";s:6:"images";a:1:{s:91:"http://techknowledgeme.files.wordpress.com/2013/02/screen-shot-2013-02-21-at-9-14-21-am.png";a:6:{s:8:"file_url";s:91:"http://techknowledgeme.files.wordpress.com/2013/02/screen-shot-2013-02-21-at-9-14-21-am.png";s:5:"width";i:576;s:6:"height";i:417;s:4:"type";s:5:"image";s:4:"area";i:240192;s:9:"file_path";b:0;}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2013-02-22 02:15:16";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>772</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-02-22 11:55:25</ns0:comment_date>
    <ns0:comment_content>Anthony: Thanks so much for the pointer to the ENISA report. I downloaded a copy and ripped through it this morning. Great reading. I know stuff like this is out there, but I don't see it enough.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>763</ns0:comment_id>
    <ns0:comment_author>Gene Hughson</ns0:comment_author>
    <ns0:comment_author_email>genehughson@hotmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://genehughson.wordpress.com</ns0:comment_author_url>
    <ns0:comment_date>2013-02-21 10:02:03</ns0:comment_date>
    <ns0:comment_content>Risk, like complexity, is one of those things that people love to talk about removing.  You can safely remove unnecessary complexity/risk, however, just as there is inherent complexity, there's also inherent risk.  That which is inherent can't be removed, but must be managed.  Great post.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>28036074</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>769</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-02-21 19:08:04</ns0:comment_date>
    <ns0:comment_content>Gene: the connection to complexity is an interesting one--both because the parallel is very strong, and because risk and complexity can be mutually reinforcing. Lots of risk can lead to compensating complexity, and lots of complexity can exacerbate risk. Thanks for pointing it out; I hadn't seen that connection quite so clearly before.

The other day I was observing that simplicity has power, but I didn't give any satisfying suggestions about how to manage it, and I think when I come back to the topic, I need to start with your observation: a lot of complexity is unavoidable. When that's the case, the rest of our job is to encapsulate/hide it, manage it predictably, make its cost apparent to the right people, etc.</ns0:comment_content>
    <ns0:comment_parent>763</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>771</ns0:comment_id>
    <ns0:comment_author>Anthony Langsworth</ns0:comment_author>
    <ns0:comment_author_email>anthony.langsworth@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://randomactsofarchitecture.com</ns0:comment_author_url>
    <ns0:comment_date>2013-02-22 05:58:48</ns0:comment_date>
    <ns0:comment_content>From what I have read, we are not at the same stage of statistical modelling with IT that actuaries use for insurance. However, I would be very willing to be convinced otherwise. 

What we do have in IT is good risk checklists. For example, the European Network and Information Security Agency (ENISA) produces a very thorough list of risks for cloud computing at "http://www.enisa.europa.eu/act/rm/files/deliverables/cloud-computing-risk-assessment".

As for specific examples of non-technical controls for risks, there are things like contractual obligations and clauses in outsourcing arrangements, restrictive licensing, NDAs and background checks for developers and administrators, personnel rotation and segregation of duties. Apart from risk mitigation, there is also risk transference (e.g. insurance), avoidance (dropping a product or feature) or acceptance (deal with it when or if it happens).</ns0:comment_content>
    <ns0:comment_parent>768</ns0:comment_parent>
    <ns0:comment_user_id>28633357</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>768</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-02-21 19:01:56</ns0:comment_date>
    <ns0:comment_content>Quantifying is definitely a challenge. I know actuaries quantify all kinds of insurance risks, but I'm not aware of anybody doing work to formalize risks to business continuity in a widely accepted way. I'm sure something like that exists, but now I've realized my own ignorance and have a learning project. Thanks!

Your last line also resonates strongly for me. Lots of problems aren't best solved with technology--that's for sure. Providing support with a friendly human being instead of a recorded message comes to mind. Did you have any specific examples? This is the sort of statement that I'd love to be able to illustrate better when I teach people the principle.

Thanks for the thoughtful comments.</ns0:comment_content>
    <ns0:comment_parent>767</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>767</ns0:comment_id>
    <ns0:comment_author>Anthony Langsworth</ns0:comment_author>
    <ns0:comment_author_email>anthony.langsworth@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://randomactsofarchitecture.com</ns0:comment_author_url>
    <ns0:comment_date>2013-02-21 18:33:12</ns0:comment_date>
    <ns0:comment_content>Nice post, particularly the emphasis on defensive architecture. One of the biggest challenges I have found is quantifying risks, particularly for non technical stakeholders. Humans are inherently bad judges of risk and IT is particularly difficult because it usually involves unknowns (e.g. undiscovered bugs) or third parties (e.g. outsourcers, cloud providers, hackers). I would also suggest designers and architects remember that technical solutions are not always the best solution to mitigate risk.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>28633357</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2915</ns0:comment_id>
    <ns0:comment_author>A Comedy of Carelessness | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/12/09/a-comedy-of-carelessness/</ns0:comment_author_url>
    <ns0:comment_date>2013-12-09 08:35:05</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] that&amp;#8217;s more like it! Plan for trouble. (It always happens, after all.) Notice the problem. Communicate it. Take steps to cope, without panicking or [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>10862</ns0:comment_id>
    <ns0:comment_author>Taming Side Agreements | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/10/28/taming-side-agreements/</ns0:comment_author_url>
    <ns0:comment_date>2014-10-28 08:36:12</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] you can retrofit discipline into an Enron-like software monstrosity. Understand your risk, and manage it wisely as part of your [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>6 Strategies to Simplify Software</title>
  <link>http://codecraft.co/2013/03/12/6-strategies-to-simplify-software/</link>
  <pubDate>Tue, 12 Mar 2013 14:55:37 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1017</guid>
  <ns2:encoded>How do you make things simple?

I've written that &lt;a title="The Power of Simplicity" href="http://codecraft.co/2013/02/15/the-power-of-simplicity/" target="_blank"&gt;simplicity is powerful&lt;/a&gt;, and that it undergirds many deep architectural breakthroughs. In posts about &lt;a title="Earned Pragmatism" href="http://codecraft.co/2013/01/18/earned-pragmatism/" target="_blank"&gt;pragmatism&lt;/a&gt; and &lt;a title="Good Code Is Balanced" href="http://codecraft.co/2012/08/27/good-code-is-balanced/" target="_blank"&gt;balance&lt;/a&gt;, I've quoted Oliver Wendell Holmes about the simplicity on the other side of complexity.

But I've never talked about how to achieve it.

[caption id="" align="aligncenter" width="500"]&lt;a href="http://www.flickr.com/photos/hurleygurley/16139468/"&gt;&lt;img alt="" src="http://farm1.staticflickr.com/11/16139468_0d14545348.jpg" width="500" height="375" /&gt;&lt;/a&gt; photo credit: hurley gurley (Flickr)[/caption]

This is not an easy question; if we knew how to make things simple, we'd do it more often and more quickly. It takes some serious effort (and genius) to go from centuries of experiments and volumes of equations to &lt;code style="font-size:120%;color:#303048;"&gt;e = mc&lt;sup&gt;2&lt;/sup&gt;&lt;/code&gt;. I've been pondering simplicity in software architecture for a decade, and I'm certain I've only scratched the surface.

Still, simplicity is a learnable skill, and some strategies are consistently helpful...&lt;!--more--&gt;

&lt;strong&gt;1. Encapsulate&lt;/strong&gt;

I put this one first, because it is straightforward and virtually guaranteed to pay off. This strategy isn't a panacea, but it's a good place to start.

When a problem is complicated, fence it off behind a disciplined interface, and then ask yourself what the problem looks like on the outside. This will provide useful constraints. Now peer inside your complicated inner world, and repeat the process. How can the problem be divided into pieces that are individually tractable, even if they have a lot of gory detail inside?

Recurse as needed.

&lt;strong&gt;2. Cut corners&lt;/strong&gt;

In many, many cases, the complexity we wrestle with comes from an overly ambitious scope. Overbuilding is probably my greatest weakness as an architect; I've &lt;a title="Why I don’t blog about great code" href="http://codecraft.co/2012/10/03/why-i-dont-blog-about-great-code/" target="_blank"&gt;made the mistake way too often&lt;/a&gt;.

Perhaps you want to improve logging in your product. At first it seems simple, until you start asking how to localize your logs, and how to handle thousands of logged events per second, and how to silo your logs so one tenant can't see what another tenant is doing.

One important way to simplify is to say: we're not going to localize, and we don't need to run fast when logging thousands of events per second, and we don't need multitenant distinctions in our logs.

You can't always get away with this sort of simplification, but it's worth considering.

&lt;strong&gt;3. Hire a specialist&lt;/strong&gt;

Do you do your own taxes, your own dentistry, and your own legal work? Why not?

This is a complement to the "cut corners" strategy. If you can't make the tax code simpler, perhaps you can ignore the problem most of the time, and occasionally hire an accountant that reframes complexity to be more manageable. To continue the log example, maybe you write a script that gives each tenant a subset of the overall logs, on demand.

&lt;strong&gt;4. Delegate&lt;/strong&gt;

Human beings realized long ago that even the smartest and most well rounded person in the world can't run an entire organization alone. A CEO hires someone else to think about marketing, about sales, about engineering, about support, about facilities, about accounting.

Many software architectures are crushed by complexity because they have a CEO that's trying to empty trash cans, pay the bills, woo customers, and keep the board happy, all at the same time. If your system has a centralized brain, and everything runs through it, consider putting some other brains to work. I have become convinced in the past decade that distributed architectures almost always beat centralized over the long haul, for this reason.

&lt;strong&gt;5. Change your metaphor&lt;/strong&gt;

Suppose you have a workflow engine, and you're struggling to make it more responsive. You normally model worflow as a state machine, because it gives you crispness and predictability.

Well, maybe you should stop thinking of your workflow engine as a state machine, and start thinking of it as a bureaucracy. What makes bureaucracies grind to a halt? How do you get around them? Bribes work wonders in some bureaucracies; should you allow high-priority items to "bribe" their way through for faster outcomes? What if an urgent task walks in the front door of the bureaucracy's office and takes the Grand Poobah's secretary hostage?

I think this strategy is underutilized in almost every long-running architecture. Metaphor can drive insight in ways we don't talk about enough.

One other hint on this one: Do some reading about &lt;a href="http://en.wikipedia.org/wiki/Gossip_protocol" target="_blank"&gt;gossip protocols&lt;/a&gt; and &lt;a href="http://en.wikipedia.org/wiki/Bully_algorithm" target="_blank"&gt;bully algorithms&lt;/a&gt; some time. The richest sources of metaphor for me are human society (families, companies, social networks, politics, fraternities, multi-level marketing schemes, crime syndicates...) and life (cells, ecosystems, packs and herds, predators/prey, ...). This is why I'm writing a whole book about what life can teach software architects. Subscribe to my blog for more news on this.

&lt;strong&gt;6. Ask a child&lt;/strong&gt;

It doesn't have to be someone young, really--the true requirement is that it needs to be someone with some intellectual distance from the problem, who's able to ask probing questions. Children are just the perfect prototype.

Years ago, thieves were raiding high-end clothing stores. They'd run in, sweep all the hangers to the end of the rack, lift off an armful of expensive merchandise, and run out the door before anybody could stop them. Stores tried all kinds of things, but the thieves were organized and fast, and they kept escaping.

Finally someone suggested turning every other hanger top in an opposite direction. Half the hangers would lift off to the left, half to the right. Next time the thieves came in, they discovered that it was impossible to pull an armload of clothes off the rack quickly. Problem solved.

And then there's the story of the &lt;a href="http://www.thesimplest.net/stories/story-empty-soap-box" target="_blank"&gt;factory that went to great lengths&lt;/a&gt; to prevent the 1-in-a-thousand box that exited the assembly line empty. They built xray machines to check the boxes, stationed someone to monitor the xray screen continuously... I bet they felt foolish when someone bought a cheap fan and simply blew the empty boxes off the conveyor belt...

&lt;strong&gt;7. ???&lt;/strong&gt;

Undoubtedly, other helpful strategies can also contribute to simplicity. Like the ones I've listed above, they will probably have their limits. We are unlikely to discover a silver bullet--and even if we did, the arms race of our industry makes it probable that we'll need a silver missile in the near future. It takes hard thinking, and hard work, to wrestle complexity into clean, reusable packages that fit together nicely. And it always will.

But--ah!--the beauty of well crafted minimalism...

Perhaps Leonardo da Vinci said it best: "Simplicity is the ultimate sophistication."
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Identify a metaphor that's important to your architecture. Find at least one other metaphor that you could use to replace it. Spend 5 minutes exploring the alternate metaphor. Do you see strengths, weaknesses, opportunities, and threats to your architecture in new ways?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.jbox.dk/quotations.htm" target="_blank"&gt;&lt;span style="font-size:small;"&gt;&lt;span style="line-height:19px;"&gt;Quotations on simplicity in software design&lt;/span&gt;&lt;/span&gt;&lt;span style="color:#333333;font-size:13px;line-height:19px;"&gt; (jbox.dk)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>1017</ns0:post_id>
  <ns0:post_date>2013-03-12 08:55:37</ns0:post_date>
  <ns0:post_name>6-strategies-to-simplify-software</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="architecture">architecture</category>
  <category domain="post_tag" nicename="biology">biology</category>
  <category domain="post_tag" nicename="complexity">complexity</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="life">life</category>
  <category domain="category" nicename="mistakes">Mistakes</category>
  <category domain="post_tag" nicename="simplicity">simplicity</category>
  <category domain="post_tag" nicename="society">society</category>
  <category domain="category" nicename="software-architecture">Software Architecture</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:56:"http://farm1.staticflickr.com/11/16139468_0d14545348.jpg";s:6:"images";a:1:{s:56:"http://farm1.staticflickr.com/11/16139468_0d14545348.jpg";a:6:{s:8:"file_url";s:56:"http://farm1.staticflickr.com/11/16139468_0d14545348.jpg";s:5:"width";i:500;s:6:"height";i:375;s:4:"type";s:5:"image";s:4:"area";i:187500;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2013-03-09 01:57:20";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>twitter_cards_summary_img_size</ns0:meta_key>
    <ns0:meta_value>a:7:{i:0;i:500;i:1;i:375;i:2;i:2;i:3;s:24:"width="500" height="375"";s:4:"bits";i:8;s:8:"channels";i:3;s:4:"mime";s:10:"image/jpeg";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>841</ns0:comment_id>
    <ns0:comment_author>Julie</ns0:comment_author>
    <ns0:comment_author_email>julie.jones@pobox.com</ns0:comment_author_email>
    <ns0:comment_date>2013-03-13 15:05:25</ns0:comment_date>
    <ns0:comment_content>You hit the nail with a sledgehammer with this post!

Metaphor becomes more important every time I work with a new system that no one can explain. Usually the problem is that they don't have a metaphor to relate it to. People work best with an abstraction in their heads.

And, I will add another vote for simplicity. As systems become more distributed and massive, communication becomes the problem. Funny how that mirrors the human problem when people work together. The answer is often simplicity. Think of the largest autonomous system out there - the internet. TCP/IP works with what might be the simplest solution to multiple machines trying to talk at the same time "wait a bit and try again". I'm sure everyone can think of a much "better" solution. I am also sure it is more complicated, and I am resonable sure that it wouldn't work as well. 

My goal is: make it simple enough to understand and wrap that understanding in a memorable metaphor.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>833</ns0:comment_id>
    <ns0:comment_author>segmation</ns0:comment_author>
    <ns0:comment_author_email>beth@segmation.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.segmation.com</ns0:comment_author_url>
    <ns0:comment_date>2013-03-12 09:04:09</ns0:comment_date>
    <ns0:comment_content>I like ask a child!  Children can come up with the greatest of things!  Thanks for sharing this awesome blog!</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>8088536</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>834</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-03-12 10:22:23</ns0:comment_date>
    <ns0:comment_content>The other day my young nephew and his older brother were having a conversation.

Older brother: "What's a baby dog called?"
Younger nephew: "A puppy."
Older brother: "What's a baby sheep called?"
Younger nephew: "A lamb."
Older brother: "What's a baby chicken called?"
Younger nephew: "A yolk!"

Funny. But also shows how kids have different perspectives that can break us out of the box. :-)</ns0:comment_content>
    <ns0:comment_parent>833</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>842</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-03-13 15:19:21</ns0:comment_date>
    <ns0:comment_content>The internet is such a good example. Not only is TCP/IP amazingly simple (in concept, not necessarily in impl), but so is the HTTP protocol. It seems amazing to me that I ever lived without it. Thank you, Tim Berners-Lee and Roy Fielding and all the other smart people who achieved so much by simplifying so much!</ns0:comment_content>
    <ns0:comment_parent>841</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>877</ns0:comment_id>
    <ns0:comment_author>Small Files Are Your Friends | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/03/21/small-files-are-your-friends/</ns0:comment_author_url>
    <ns0:comment_date>2013-03-21 08:55:47</ns0:comment_date>
    <ns0:comment_content>[...] Another way to say this is that file boundaries are an encapsulation barrier. Use them to hide data. (See my recent post about encapsulation as a simplicity strategy.) [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1014</ns0:comment_id>
    <ns0:comment_author>My First Tangle With the Tower of Babel | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/04/26/my-first-tangle-with-the-tower-of-babel/</ns0:comment_author_url>
    <ns0:comment_date>2013-04-26 08:48:28</ns0:comment_date>
    <ns0:comment_content>[...] think the answer may lie in finding new accommodations for all the complexity we wrestle. New ways to think about concurrency, distributed architectures, [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1040</ns0:comment_id>
    <ns0:comment_author>Why Your Software Should Cry | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/05/06/why-your-software-should-cry/</ns0:comment_author_url>
    <ns0:comment_date>2013-05-06 11:50:46</ns0:comment_date>
    <ns0:comment_content>[...] how much we can accomplish in a good script with a few lines of code. However, if we want to truly master the bewildering growth of complexity in the universe of bits and bytes, we need pain. And we need [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14914</ns0:comment_id>
    <ns0:comment_author>A grumble about buckets | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/04/08/a-grumble-about-buckets/</ns0:comment_author_url>
    <ns0:comment_date>2015-04-08 13:39:18</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] developers limit the choices that are offered to their users as a way to simplify. This can be a good thing; I&amp;#8217;m a big fan of [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16570</ns0:comment_id>
    <ns0:comment_author>On Forests and Trees | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/09/02/on-forests-and-trees/</ns0:comment_author_url>
    <ns0:comment_date>2015-09-02 08:48:37</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] possible become unremarkable. It&amp;#8217;s among the human mind&amp;#8217;s most powerful techniques for coping with complexity, and it&amp;#8217;s a hallmark of vigorous thinkers in any technical discipline. I like [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>3 reasons to prefer references over pointers (C++)</title>
  <link>http://codecraft.co/2013/03/08/3-reasons-to-prefer-references-over-pointers/</link>
  <pubDate>Fri, 08 Mar 2013 23:07:49 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1029</guid>
  <ns2:encoded>I still remember what it was like, as a C programmer, to be introduced to the newfangled concept of references in C++. I thought: "This is dumb. It's just another way to use pointers. More syntactic sugar for no good reason..."

For a long time, I thought of pointers vs. references as a stylistic choice, and I've run into lots of old C pros who feel the same. (The debate on &lt;a href="http://www.cplusplus.com/forum/beginner/3958/" target="_blank"&gt;this comment stream&lt;/a&gt; is typical.) If you're one of them, let me see if I can explain why I now think I was wrong, and maybe convince you to use references where it makes sense. I won't try to enumerate every reason--just hit a few highlights.

[caption id="" align="aligncenter" width="500"]&lt;a href="http://xkcd.com/371/"&gt;&lt;img class=" " src="http://imgs.xkcd.com/comics/compiler_complaint.png" alt="" width="500" height="135" /&gt;&lt;/a&gt; image credit: xkcd.com[/caption]

&lt;strong&gt;1. References have clearer semantics&lt;/strong&gt;

&lt;code&gt;NULL&lt;/code&gt; is a perfectly valid value for a pointer, but you have to do some headstands to create a reference to &lt;code&gt;NULL&lt;/code&gt;. Because of these headstands, and because testing a reference for NULL-ness is a bit arcane, you can assume that references are not expected to be &lt;code&gt;NULL&lt;/code&gt;. Consider this function prototype, typical of so much "C++" code written by folks with a C mindset:
&lt;pre style="padding-left:30px;"&gt;void setClient(IClient * client);&lt;/pre&gt;
With only that line, you don't know very much. Will client's state change during the call? Is it valid to pass &lt;code&gt;NULL&lt;/code&gt;? In the body of the call, will client ever point to anything other than the value it had at the top of the function?

Veteran C programmers recognize that the semantics are unclear, so they come up with doc conventions to plug the gap, and they check assumptions at the top of the function:
&lt;pre style="padding-left:30px;"&gt;&lt;span style="color:#008000;"&gt;/**&lt;/span&gt;
&lt;span style="color:#008000;"&gt; * @param client IN, cannot be NULL&lt;/span&gt;
&lt;span style="color:#008000;"&gt; */&lt;/span&gt;
void setClient(IClient * client) {
    if (client != NULL) { &lt;span style="color:#008000;"&gt;//...do something&lt;/span&gt;&lt;/pre&gt;
This is fine, except why depend on a comment and a programmer's inclination to read and obey, when you can enforce your intentions at compile time, and write less code, too?&lt;!--more--&gt;
&lt;pre style="padding-left:30px;"&gt;void setClient(IClient const &amp;amp; client) { &lt;span style="color:#008000;"&gt;//...do something&lt;/span&gt;&lt;/pre&gt;
The &lt;code&gt;const&lt;/code&gt; in this declaration tells you that client won't be modified. That's not really a pointer vs. ref thing, but I couldn't help myself. See &lt;a title="Put Your Const Foot Forward" href="http://codecraft.co/2012/11/14/put-your-const-foot-forward/"&gt;my notes about &lt;code&gt;const&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;&amp;amp;&lt;/code&gt; tells you that the value of client will not change for the duration of &lt;code&gt;setClient&lt;/code&gt;, and it also tells you that callers are not supposed to pass &lt;code&gt;NULL&lt;/code&gt;. The comment and the check for &lt;code&gt;NULL&lt;/code&gt; become unnecessary. As a caller of this function, if you're working with a pointer and you use the * operator to convert it to a pointer, you now know you have a responsibility to guarantee non-&lt;code&gt;NULL&lt;/code&gt;-ness. The function writer has firewalled that issue out of his or her scope of concern, and forced someone who should understand it better to deal with it.

References also tell you that ownership of a particular resource lies elsewhere. Non-const pointers leave ownership ambiguous.

Using references is not always possible, precisely because their semantics are slightly different from those of pointers. If &lt;code&gt;NULL&lt;/code&gt; is a valid value, then you have to use pointers. If you intend to assign to the same variable more than once, you have to use a pointer.

But when you &lt;em&gt;can&lt;/em&gt; use a reference, you should. It's good defensive programming for the function writer, and it communicates intentions very clearly.

&lt;strong&gt;2. References allow value semantics in templates and operators&lt;/strong&gt;

Algorithms and containers in the standard C++ library are written as if operating on values, not pointers. References allow the standard library to work transparently on objects in custom classes that you write, without writing messy adapters, because operators are invoked on values and references identically. For example, &lt;code&gt;std::sort()&lt;/code&gt; will work on anything that defines the &lt;code&gt;&amp;lt;&lt;/code&gt; less-than operator -- but it will never work on pointers to things that define &lt;code&gt;&amp;lt;&lt;/code&gt;. References are also transparent to &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; stream operators, to boolean comparison operators, and so forth.

If you've done serious template work in C++, you know that this is important. This issue is what forced me to reassess my perspective that it was all a matter of style.

&lt;strong&gt;3. References enable move semantics in C++ 11&lt;/strong&gt;

This is a huge deal. If you haven't already fallen in love with the performance optimization that move semantics offer, and you're an old C pro, then you're missing out. One of the common complaints that old C folks have about C++ is that things like std::vector are horribly inefficient to pass by value, and that smart pointers involve a lot of ref counting nonsense that's just useless overhead. The introduction of move semantics turns that on its ear. (&lt;a title="move semantics" href="http://thbecker.net/articles/rvalue_references/section_02.html"&gt;Thomas Becker's explanation of move semantics&lt;/a&gt; is a great place to start exploring this topic, if you're curious.)

&lt;strong&gt;Don't get me wrong...&lt;/strong&gt;

If you think I'm a reference bigot, then I've failed. Pointers and references are just alternate incarnations of indirection, which (as my friend Moray is fond of pointing out) is one of the truly foundational techniques of CS. It's amazing how much more tractable certain problems become when you add a layer of indirection. And pointers were my first experience with the technique, so I can't help but be a fan. Besides the virtues of mutability and nullability, pointers are the easiest way to work with classes of functions having a common signature, and they are used in many advanced idioms. If you looked at my code, you'd see that I still use pointers in C-like ways sometimes. For example, I think functions that take a const char * instead of a std::string const &amp;amp; may make sense in many cases, depending on how layers are organized and how the parameters are used.

But I now try to use references wherever they seem to fit; if I can use either, I always prefer references. I think it makes my code more robust and cleaner--and it sets me up for good performance optimizations in the future.
&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://katyscode.wordpress.com/2013/02/27/c-explained-object-initialization-and-assignment-lvalues-and-rvalues-copy-and-move-semantics-and-the-copy-and-swap-idiom/" target="_blank"&gt;C++ Explained: Object initialization and assignment, lvalues and rvalues, copy and move semantics and the copy-and-swap idiom&lt;/a&gt; (katyscode.wordpress.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://stackoverflow.com/questions/15188894/why-doesnt-polymorphism-work-without-pointers-references" target="_blank"&gt;Why doesn't polymorphism work without pointers/references?&lt;/a&gt; (stackoverflow.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>1029</ns0:post_id>
  <ns0:post_date>2013-03-08 16:07:49</ns0:post_date>
  <ns0:post_name>3-reasons-to-prefer-references-over-pointers</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="best-practices">best practices</category>
  <category domain="post_tag" nicename="c">c++</category>
  <category domain="post_tag" nicename="c11">C++11</category>
  <category domain="category" nicename="mistakes">Mistakes</category>
  <category domain="post_tag" nicename="pointers">pointers</category>
  <category domain="post_tag" nicename="references">references</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_zemanta_has_recommendations</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>twitter_cards_summary_img_size</ns0:meta_key>
    <ns0:meta_value>a:6:{i:0;i:710;i:1;i:192;i:2;i:3;i:3;s:24:"width="710" height="192"";s:4:"bits";i:8;s:4:"mime";s:9:"image/png";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_job_id</ns0:meta_key>
    <ns0:meta_value>12305499236</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>816</ns0:comment_id>
    <ns0:comment_author>katyscode</ns0:comment_author>
    <ns0:comment_author_email>djkaty@start.no</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.djkaty.com</ns0:comment_author_url>
    <ns0:comment_date>2013-03-09 04:12:21</ns0:comment_date>
    <ns0:comment_content>Thanks for the citation, agree 100% with what you wrote here. The non-nullability of references is both a blessing and a curse; it is frustrating not to be able to declare a reference as a class member and initialize it later, since it of course must be initialized in the constructor's initializer list, so you often end up being forced to use -&amp;gt; in your mehods when it would be syntactically cleaner and safer to use ".". As you said though, references are an important and integral part of C++, not just a syntactic sometimes-alternative to pointers.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>35745371</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>818</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-03-09 09:41:32</ns0:comment_date>
    <ns0:comment_content>Yes, I've often found myself saying: "I'm happy to live with the limitation that I can only assign to this reference once; I just wish I could do it later than the constructor..." Lazy initialization is one obvious use case.

Great article on lvalues, rvalues, and move semantics, btw.</ns0:comment_content>
    <ns0:comment_parent>816</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>3713</ns0:comment_id>
    <ns0:comment_author>ardanew</ns0:comment_author>
    <ns0:comment_author_email>ardanew@mail.ru</ns0:comment_author_email>
    <ns0:comment_date>2014-03-06 23:42:12</ns0:comment_date>
    <ns0:comment_content>1) void setClient(const IClient *const client);
2) template sort(...)
3) no use for move semantics when passing a pointer</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>22320890418</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1394174532</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>3714</ns0:comment_id>
    <ns0:comment_author>ardanew</ns0:comment_author>
    <ns0:comment_author_email>ardanew@mail.ru</ns0:comment_author_email>
    <ns0:comment_date>2014-03-06 23:43:12</ns0:comment_date>
    <ns0:comment_content>2) was cutted... sort with comparator</ns0:comment_content>
    <ns0:comment_parent>3713</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>22320902843</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1394174594</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>3720</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2014-03-07 11:20:44</ns0:comment_date>
    <ns0:comment_content>All three of your points are valid. However, I'm not claiming that references are radically better than pointers--only that they're a better fit for certain problems. And they are:

1) -- answers my questions about changeability of the parameter during the course of the function, but does not clarify any semantics about NULL. The const * const prototype is more verbose and less rich in semantics than using a reference.

2) -- yes, you can use sort with a comparator, but you have to write a pointer-aware comparator that dereferences your pointers, in addition to implementing comparison logic. That violates the single responsibility principle; it's cleaner in many cases to implement comparison logic, and keep pointer-walking outside the comparator. STL is prejudiced this way; swimming against the stream results in code that's bigger and messier, except in trivial examples. (I'm not a purist on this; I've done exactly what you suggested, lots of times. But I do think it's a bit sub-optimal.)

3) -- passing pointers works fine, but you open yourself up to exception safety problems by not guaranteeing RAII. Not a big deal in a lot of code, but worth considering.</ns0:comment_content>
    <ns0:comment_parent>3713</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>22331696989</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1394216446</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>26751</ns0:comment_id>
    <ns0:comment_author>Corinne</ns0:comment_author>
    <ns0:comment_author_email>corinnewall798@yahoo.com</ns0:comment_author_email>
    <ns0:comment_author_url>https://www.corinnewall.com/</ns0:comment_author_url>
    <ns0:comment_date>2022-10-20 13:03:12</ns0:comment_date>
    <ns0:comment_content>I enjoyed readingg your post</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>77912684035</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1666292594</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
</item>
<item>
  <title>Farewell to Google Reader</title>
  <link>http://codecraft.co/2013/03/14/farewell-to-google-reader/</link>
  <pubDate>Thu, 14 Mar 2013 23:18:46 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1052</guid>
  <ns2:encoded>If you've been following blogs with Google Reader, you were probably unhappy with Google's recent decision to kill it.

&lt;strong&gt;Observation&lt;/strong&gt;: this is a great illustration of the &lt;a title="The 8th Characteristic" href="http://codecraft.co/2012/09/28/the-8th-characteristic/"&gt;phenomenon of software death&lt;/a&gt; that I wrote about a few months ago.

&lt;strong&gt;Suggestion 1&lt;/strong&gt;: If you're following my blog in Google Reader, click on the "Follow" button at the top of the right sidebar so you can follow this blog by email. I need your email address more than your launch coordinates. ;-)

[caption id="" align="aligncenter" width="500"]&lt;a href="http://xkcd.com/970/"&gt;&lt;img class=" " alt="" src="http://imgs.xkcd.com/comics/the_important_field.png" width="500" height="217" /&gt;&lt;/a&gt; image credit: xkcd.com[/caption]

&lt;strong&gt;Suggestion 2&lt;/strong&gt;: For any other sites you're following in Google Reader, look for an email subscription link as a replacement. Or use &lt;a href="http://blogtrottr.com/" target="_blank"&gt;blogtrottr&lt;/a&gt; to scan RSS feeds and email you updates at whatever frequency you prefer. Or check out &lt;a href="http://marketingland.com/12-google-reader-alternatives-36158" target="_blank"&gt;feedly, taptu, and other reader alternatives&lt;/a&gt;.</ns2:encoded>
  <ns0:post_id>1052</ns0:post_id>
  <ns0:post_date>2013-03-14 17:18:46</ns0:post_date>
  <ns0:post_name>farewell-to-google-reader</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:2:{s:2:"fb";a:1:{i:1511184;i:386;}s:2:"wp";a:1:{i:0;i:58;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>845</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-03-14 21:52:24</ns0:comment_date>
    <ns0:comment_content>Let me know how you like those options. Seems like a good way to go, if you have a server where installing arbitrary packages is possible.</ns0:comment_content>
    <ns0:comment_parent>844</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>857</ns0:comment_id>
    <ns0:comment_author>Jesse Harris</ns0:comment_author>
    <ns0:comment_author_email>elforesto@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.coolestfamilyever.com/</ns0:comment_author_url>
    <ns0:comment_date>2013-03-17 23:19:51</ns0:comment_date>
    <ns0:comment_content>I've tried out Tiny Tiny RSS and Fever. The former is a pretty faithful recreation of the Google Reader interface (provided it is setup correctly), but I'd have to write some plugins to get all of the sharing options I want. I can understand not having something for HootSuite, but nothing for Facebook? That's just weird. And Google Reader would let you easily setup your own sharing links.

Fever is an interested approach to RSS. You classify feeds into "kindling" and "sparks". The sparks are feeds with a low signal-to-noise that helps bump other posts higher on the food chain. You can then use a "hot" view to show you a summary of the items that are getting the most buzz. If you're a news junkie, this is a great way to follow what's going on without reading 50 different takes on the same story.

One problem with both solutions is that they update feeds with a cron job. I've gotten spoiled by Google's scale that updates feeds almost instantly. I guess that's a required trade-off. I still need to try out the self-install version of NewsBlur to see if it offers anything distinctive.</ns0:comment_content>
    <ns0:comment_parent>845</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>861</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-03-18 06:59:43</ns0:comment_date>
    <ns0:comment_content>Really good info, Jesse. Fever sounds kind of intriguing. I assume both packages just install by calling yum/apt-get or the equivalent package mgr? Are they hard to configure?</ns0:comment_content>
    <ns0:comment_parent>857</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>862</ns0:comment_id>
    <ns0:comment_author>Jesse Harris</ns0:comment_author>
    <ns0:comment_author_email>elforesto@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.coolestfamilyever.com/</ns0:comment_author_url>
    <ns0:comment_date>2013-03-18 09:07:25</ns0:comment_date>
    <ns0:comment_content>I downloaded Tiny Tiny RSS directly, but it's possible it could be in a repository. It doesn't have an installer, so there's a few manual steps. It's about as easy as decompress, run the DB install script for MySQL or Postgres, and either setup the cron job or run the PHP daemon script in a screen session. You shouldn't have any issues with it, but Joe User sure wouldn't. (Fun note: it supports self-registration and multiple users, so you can host an instance for your friends.)

Fever is a paid app, but it's just $30. You upload the installer, it verifies compatibility, then completes the install once you buy a key. Even if I don't use it long-term, it was worth $30 to give it a spin. Heck, it might be a good supplemental reader for when I get busy and just need to see the biggest news items.</ns0:comment_content>
    <ns0:comment_parent>861</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>844</ns0:comment_id>
    <ns0:comment_author>Jesse Harris</ns0:comment_author>
    <ns0:comment_author_email>elforesto@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.coolestfamilyever.com/</ns0:comment_author_url>
    <ns0:comment_date>2013-03-14 17:58:50</ns0:comment_date>
    <ns0:comment_content>I'm investigating options such as Tiny Tiny RSS and Fever since I can install them on my server and basically use them forever. We all need to take more control of our software that way.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Small Files Are Your Friends</title>
  <link>http://codecraft.co/2013/03/21/small-files-are-your-friends/</link>
  <pubDate>Thu, 21 Mar 2013 14:53:05 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1057</guid>
  <ns2:encoded>Yesterday I was discussing refactoring priorities with a colleague who's a brilliant engineer, and I happened to mention my strong desire for smaller files in our codebase. I told him that I thought .h and .cpp (or .py or .java or .whatever) files with thousands of lines were a problem.

He asked me why.

He told me that he wasn't opposed to the idea, but he always felt like it was more of a stylistic choice than a true imperative for good code. And he was curious to see if I could convince him differently.

After I pondered his question for a while, I realized that some of my opinion really is traceable to prejudice. I usually use IDEs instead of vim/emacs, and I think that promotes &lt;em&gt;click-back-and-forth-and-hyperlink-in-many-little-files&lt;/em&gt; instead of &lt;em&gt;open-a-big-file-and-scroll&lt;/em&gt;. My compatriots that are more console-centric are just as smart and effective--maybe more. So I'll write that part off.

However, I also found some arguments for the small-file principle that feel more substantive. Small files are your friends.

[caption id="" align="aligncenter" width="500"]&lt;a href="http://www.flickr.com/photos/miguelandresen/5166773331/"&gt;&lt;img alt="" src="http://farm5.staticflickr.com/4002/5166773331_bb50dfa3b0.jpg" width="500" height="320" /&gt;&lt;/a&gt; More small friends. Photo credit: miguelandresen (Flickr)[/caption]

&lt;strong&gt;Named scopes and cognitive complexity&lt;/strong&gt;

The case for small functions is more discussed than the case for small files, and it has been made by almost every luminary in computer science. My colleague immediately conceded it, and I won't repeat it here--but I will claim that many of the same arguments apply to files as well, because &lt;em&gt;files as well as functions are an important named scope in software development&lt;/em&gt;. This in turn suggests some constraints on files with respect to cognitive complexity.

Studies of memory and human attention consistently demonstrate that &lt;a title="short-term memory and cognitive complexity" href="http://www.simplypsychology.org/short-term-memory.html" target="_blank"&gt;we think best about small sets&lt;/a&gt;. This fact is reflected by the amount of detail visible within any given named scope, both in programming and in other thought tasks. How many top-level menus in the average application? Colors in most cultures' divisions of the rainbow? Parameters in an easy-to-understand function? Sections in the average book store? Steps in easy-to-follow driving directions? (There's a whole field called cognitive ergonomics that explores why these questions always have similar answers.)

How many functions should we put in a reasonable file?

For me, 2 or 5 or 10 feels tractable. 50 feels excessive.

If a "good function" also respects the cognitive complexity constraints of the human brain--not being too big to read in a screen or two, for example--then you end up with a reasonable upper boundary on file sizes of, maybe, 500 or 1000 lines. (See Steve Yegge's insightful rant about &lt;a title="code size (and complexity) make software development difficult" href="http://steve-yegge.blogspot.com/2007/12/codes-worst-enemy.html" target="_blank"&gt;code size being an engineer's worst enemy&lt;/a&gt;. He focuses on codebase size, but much of what he says applies just as well at the next level down.)

I suppose that this argument is weakened by the features of some IDEs, which collapse tangential code blocks, display treeviews of functions, and support lots of hypertext-style navigation. But not all programmers use the same IDEs, and not all interactions with code are IDE-driven; file size remains relevant. There's a reason why C# created &lt;a class="zem_slink" title="Class (computer programming)" href="http://en.wikipedia.org/wiki/Class_%28computer_programming%29" target="_blank" rel="wikipedia"&gt;partial classes&lt;/a&gt; to improve on java's lump-it-all-in-a-single-file constraint...

When humans try to remember more than their brains can fit, stuff falls out. Big files mean that coders have to &lt;a title="Why Mental Models Matter" href="http://codecraft.co/2012/11/05/why-mental-models-matter/" target="_blank"&gt;mentally model&lt;/a&gt; relationships between stuff that's separated by way too much screen real estate. This is a recipe for bugs. It is also a serious impediment to learnability.

&lt;strong&gt;Loose coupling and encapsulation&lt;/strong&gt;

Files are a natural unit of coupling. In most programming languages, you can declare a construct (a variable, an internal function, or class) within a file, and have that construct be invisible to the outside world. This means there is a built-in temptation for functions and classes to bind more tightly when they're in the same file, because they have access to common but private knowledge. By breaking large files apart, you remove the temptation, break unnecessary dependencies, and promote looser coupling.

Another way to say this is that file boundaries are an encapsulation barrier. Use them to hide data. (See my recent post about &lt;a title="encapsulate to simplify" href="http://codecraft.co/2013/03/12/6-strategies-to-simplify-software/" target="_blank"&gt;encapsulation as a simplicity strategy&lt;/a&gt;.)

&lt;strong&gt;Code reuse and testability&lt;/strong&gt;

A consequence of files hiding data is that when you have a function that might be useful in a dozen different modules, but the function is buried in a large file with lots of dependencies extraneous to that function, reuse and testability are both frustrated. If the function is in a file of its own, it's more discoverable, and it's reusable and testable without extra baggage.

&lt;strong&gt;Link optimization&lt;/strong&gt;

A C/C++ corollary to the file boundary issue has to do with linkers and binary sizes. In many cases, linkers remove unused functions at &lt;em&gt;&lt;a class="zem_slink" title="Translation unit (programming)" href="http://en.wikipedia.org/wiki/Translation_unit_%28programming%29" target="_blank" rel="wikipedia"&gt;compilation unit&lt;/a&gt;&lt;/em&gt; level, rather than at the individual function level. A .c or .cpp file is either in or out, as a unit. This means that if you have a .cpp file with 50 functions in it, and you call only 1 of them, all 50 get linked into the final binary. The result is bloated binaries. So: smaller .cpp files ==&amp;gt; smaller binaries. (Before you flame me about linker optimizations, I will admit that some linkers get more granular, depending on which switches you use. But it's surprising how hard it is to do better than what I've described. Experiment and comment with your results.)

&lt;strong&gt;Counter Argument&lt;/strong&gt;

I suppose you could argue that by making lots of small files, you're &lt;em&gt;creating&lt;/em&gt; more complexity in directories, in makefiles or projects, and so forth. Is 250 files in a folder worse than 15? Doesn't that violate the "cognitive complexity" guideline above?

My comeback is: use packages or subdirectories or libraries (another level of management). You can't subdivide forever, but you don't need to.

The bottom line for me is experiential, not theoretical. I nearly always have cruddy experiences in code bases where large files are common. Small files don't guarantee pleasant and productive work, but big ones seem to go hand-in-hand with other problems. I find it telling that codebases with big files are also codebases where people lament the &lt;a title="// Comments on Comments" href="http://codecraft.co/2012/10/31/comments-on-comments/" target="_blank"&gt;lack of comments&lt;/a&gt; the most, for example. Over the years, I've become convinced that a simple rule of thumb about keeping files small will pay off more handsomely than almost any other coding best practice.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Leave a comment to tell me what you think. Am I making a mountain out of a molehill? Or do you feel strongly about small file sizes as well? Have I omitted any important pros and cons from the discussion?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://sinemasite.wordpress.com/2013/03/06/lecture-two-interactive-design/" target="_blank"&gt;Lecture Two: Interactive Design&lt;/a&gt; (sinemasite.wordpress.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.sciencedaily.com/releases/2013/02/130219102202.htm" target="_blank"&gt;We know when we're being lazy thinkers: Human thinkers are conscious cognitive misers&lt;/a&gt; (sciencedaily.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>1057</ns0:post_id>
  <ns0:post_date>2013-03-21 08:53:05</ns0:post_date>
  <ns0:post_name>small-files-are-your-friends</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="c">c++</category>
  <category domain="post_tag" nicename="code-reuse">code reuse</category>
  <category domain="post_tag" nicename="code-size">code size</category>
  <category domain="post_tag" nicename="cognitive-complexity">cognitive complexity</category>
  <category domain="post_tag" nicename="cognitive-ergonomics">cognitive ergonomics</category>
  <category domain="post_tag" nicename="encapsulation">encapsulation</category>
  <category domain="post_tag" nicename="file-size">file size</category>
  <category domain="post_tag" nicename="loose-coupling">loose coupling</category>
  <category domain="post_tag" nicename="testability">testability</category>
  <category domain="category" nicename="tips-and-tricks">Tips and Tricks</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>998</ns0:comment_id>
    <ns0:comment_author>How to turn coding standards into epic fails &amp;#8212; or not | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2012/09/27/coding-standards/</ns0:comment_author_url>
    <ns0:comment_date>2013-04-18 17:33:43</ns0:comment_date>
    <ns0:comment_content>[...] Keep files small. (Value: high for casual maintainers. Cost: usually low. Many good habits are tied to this guideline, including loose coupling, encapsulation, refactoring, and modularity.) [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>879</ns0:comment_id>
    <ns0:comment_author>Andy Lawrence</ns0:comment_author>
    <ns0:comment_author_email>andy3474@msn.com</ns0:comment_author_email>
    <ns0:comment_date>2013-03-21 10:43:52</ns0:comment_date>
    <ns0:comment_content>Good article. I think you made some great points.

I think your strongest argument for small files is the loose coupling and encapsulation one. It can impose an artificial constraint that forces the programmer to think more about those issues. It is kind of like if your company has a coding standard that says "no function can be longer than x number of lines". This can force the programmer to think more about modular programming and break that mammoth function into several smaller ones which can enhance readability and code re-use.

Having every class definition and method in its own separate file can be great if your IDE makes it very easy to navigate and manage all related files as a group, but it can become a file management nightmare if using traditional editors and file folders. The benefit of having everything in a single file is that if you copy just one file, you get all your code. If every function is in a separate file, you run the risk of forgetting to copy one of them or having one of them in a folder that isn't backed up.

We have probably all had bad experiences with files and/or functions that were too big or too small. Finding the right balance is what keeps programming as much of an art as it is a science.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>880</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2013-03-21 10:44:44</ns0:comment_date>
    <ns0:comment_content>Exactly my points as well, but again well presented by you.
My mind cache is 7-8 items, ANYWAY to factor things to have a 'collective' of that size is wonderful for my sanity. If more are added, then a refactor is needed to reduce the size by some sort of organization.

If some files is SO big, I ask: WHY?  Usually it is some huge monster OBJECT that has so many attributes, that action functions just plain explode.

Object relationship then need some refactoring.  Huge files are like huge objects, a mass of confusion and disorder</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>882</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-03-21 12:05:44</ns0:comment_date>
    <ns0:comment_content>Doug: I'm so grateful that you pushed on this issue in Moab. Although we're not very close to the ideal yet, we're much better off because of your efforts.</ns0:comment_content>
    <ns0:comment_parent>880</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>883</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-03-21 12:35:44</ns0:comment_date>
    <ns0:comment_content>Your observation about balance really resonates with me. That's one of my pet themes (see http://codecraft.co/2012/08/27/good-code-is-balanced/). 

One thing that I find interesting is the different nature of the consequences at the two ends of the spectrum. At the &lt;em&gt;files-are-too-big&lt;/em&gt; end, the consequences seem a bit scary. They make problems less understandable; they steal velocity, accuracy, and quality of design from developers. At the &lt;em&gt;files-are-too-small&lt;/em&gt; end, you start paying a "silliness tax" where you have to recurse down too many levels while coding and debugging. This can also make it hard to see the bigger picture (so in that respect the two ends of the continuum are similar) -- but I don't think it impedes loose coupling and code reuse. It's also easier to undo/change, I think.</ns0:comment_content>
    <ns0:comment_parent>879</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>884</ns0:comment_id>
    <ns0:comment_author>Jason Law</ns0:comment_author>
    <ns0:comment_author_email>jason@lawcasa.com</ns0:comment_author_email>
    <ns0:comment_date>2013-03-21 15:24:38</ns0:comment_date>
    <ns0:comment_content>Great points, Daniel. Early in my career, I found that small classes and small methods let me model more complex problems. Encapsulation is key, and it's how I think our brains work. Reminds me of some of the points made in Robert C. Martin's Clean Code. Nice article.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>887</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-03-21 21:44:49</ns0:comment_date>
    <ns0:comment_content>Jason! Great to hear from you. Long time no see. Thanks for all the Oracle goodness you taught me.

Robert Martin is one of my heros, but I haven't read Clean Code. So now I've got something new for my reading list. Thanks!</ns0:comment_content>
    <ns0:comment_parent>884</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>889</ns0:comment_id>
    <ns0:comment_author>Wally</ns0:comment_author>
    <ns0:comment_author_email>mbelnap@adaptivecomputing.com</ns0:comment_author_email>
    <ns0:comment_date>2013-03-22 15:36:31</ns0:comment_date>
    <ns0:comment_content>I'm going to have to disagree that small files should be a "goal".  I think that the goal is to have good data encapsulation and boundaries.  Files are one way of accomplishing this via scoping, but they don't ensure that a project breaks itself up into manageable pieces.  Splitting a monstrous files into multiple small files that still utilize externs and global includes to share all the same data they had in the first place ends up being a zero-sum change.

The important goal should be to separate and isolate the various project components into logical divisions.  If they don't have logical cleavage planes, then refactor them until they do. The location of the pieces in specific files is really an afterthought that follows naturally.  Just splitting things into smaller files to achieve a certain line/function quota seems useless to me.  

I like to think of this from an organic perspective.  Many garden plants grow larger and larger until they start to choke themselves out.  They can be divided and replanted and you can get multiples from one original.  However, you don't just take a shovel and slice the thing apart indiscriminately.   You also don't want to leave roots and connections back to the parent plant.  Instead, you carefully disentangle roots and tubers and find places where things look like they belong together and then you make judicious cuts and sacrifices and end up with smaller plants that can survive on their own.  Cutting up a plant just to fit it in a smaller pot is never a good idea.   http://gardening.about.com/od/perennials/ss/DividingSBS.htm</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>890</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-03-22 15:51:25</ns0:comment_date>
    <ns0:comment_content>I think that's a very true and insightful analogy, Wally. Thanks so much for adding to the conversation!

I guess implicit in my thinking was the idea that if you have big files, and you split them, that the activity becomes an enabler for many of the forms of true goodness that you're highlighting.

I do think that it's harder to accomplish the encapsulation and logical division if you leave things in a single file -- mainly because the ugliness of globals and other forms of coupling aren't as obvious.</ns0:comment_content>
    <ns0:comment_parent>889</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1091</ns0:comment_id>
    <ns0:comment_author>Good fences make good neighbors | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/05/15/good-fences-make-good-neighbors/</ns0:comment_author_url>
    <ns0:comment_date>2013-05-15 08:50:33</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] Divide code into modules and files that gives you a rational, mentally tractable separation of concerns. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2501</ns0:comment_id>
    <ns0:comment_author>Headers, babies, and bathwater | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/08/12/headers-babies-and-bathwater/</ns0:comment_author_url>
    <ns0:comment_date>2013-08-12 11:02:26</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] This couples all details of the system together in a single giant hairball. It may be fine for a project with 2 or 3 classes, but for dozens or hundreds of classes, it&amp;#8217;s a major problem, and it violates the small file rule. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>20010</ns0:comment_id>
    <ns0:comment_author>Doug</ns0:comment_author>
    <ns0:comment_author_email>middlefraz@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2019-07-08 12:28:49</ns0:comment_date>
    <ns0:comment_content>I came to software through a background in hardware at Bell Labs in the mid 1980s.

I learned embedded C development from a couple of DMTS level engineers and I still cherish how they bootstrapped my transition into software.

They had a few hard rules that required enormous justification to override.

Only one external function per file. You could have static helpers, but only one globally accessible function.

No function was more than 100 lines.

Those two were the biggies. There were other coding style rules, but the two above you would violate at your peril. Much for the reasons you list above, but one you did not. In most organizations of any size, your code is going to end up in a repository of some form, and over time, parts of it are going to be edited to either extend features, or to fix a defect, and likely be someone other than you.
If there are numerous functions in a single file, it increases the chance that a single file will be out being modified by more than one person, and then having to be merged. Small, single function files are less likely to face merge conflicts.

One other note that goes along with some of your other posts. When you write code, it is easy to fall into the trap of thinking you are writing for the machine, but you are really writing for other humans that will come after you. If you always design and code as if you are writing for people, you will be doing your future self a huge favor.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1562610531</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16579</ns0:comment_id>
    <ns0:comment_author>On Forests and Trees | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/09/02/on-forests-and-trees/</ns0:comment_author_url>
    <ns0:comment_date>2015-09-02 08:48:53</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] is partly why small files and small functions are your friends. It also explains why boilerplate comments are worse than useless, and bears on why encapsulation [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Programming Language Popularity Index</title>
  <link>http://codecraft.co/2013/03/22/programming-language-popularity-inde/</link>
  <pubDate>Fri, 22 Mar 2013 20:52:14 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1069</guid>
  <ns2:encoded>Here's an&lt;a href="http://langpop.corger.nl/" target="_blank"&gt; interesting chart&lt;/a&gt;, giving a realtime view of which programming languages have high mindshare. The chart has one axis devoted to number of lines in code commits on GitHub, and another to how often the language shows up in tags on StackOverflow.

[caption id="attachment_1075" align="aligncenter" width="500"]&lt;a href="http://langpop.corger.nl/" target="_blank"&gt;&lt;img class="size-full wp-image-1075" alt="langpop" src="http://codecraft.co/wp-content/uploads/2013/03/langpop.png" width="500" height="372" /&gt;&lt;/a&gt; Programming languages: what's hot (top right), what's not (bottom left). Top 3 rows of buttons are clearly where mindshare is at in the industry. Click for details.[/caption]

I don't think the chart is perfect. I've seen it billed as a "popularity index," but I think it might be better described as a measure of how busy the coders are who use each language. If most of the coders who use a language hate it, I don't think it's fair to call it "popular." Some apples-to-apples issues are glossed over, such as the fact that certain languages are very verbose, and some languages tend to get used mostly for "big" projects or for "small" ones. And the chart says nothing about the quality of systems built with the languages, or about the velocity of teams.

&lt;!--more--&gt;Nonetheless, it's an insightful view. I'm not surprised to see C#, Java, Javascript, PHP, C++, C, and Python as the clear hotspots. It's interesting to see where some older and less glamorous languages fall, like Perl and Visual Basic. If you're wondering which languages you ought to learn, this view might tell you the relative value of, say, Haskell vs. Erlang vs. F# vs. D.

&lt;strong&gt;Observations&lt;/strong&gt;
&lt;ul&gt;
	&lt;li&gt;There are &lt;em&gt;a lot&lt;/em&gt; of languages out there. What a busy world we live in! All the more reason to &lt;a title="Julie Jones: Learn voraciously." href="http://codecraft.co/2012/09/24/julie-jones-learn-voraciously/"&gt;learn voraciously&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;Languages with a mediating runtime (JVM, .NET) are very popular, with languages that compile at runtime as a large subset. I don't think bare bones C/C++/Assembly/Objective C will ever go away, but the evolution toward higher level environments is clear.&lt;/li&gt;
	&lt;li&gt;It's interesting to ponder what commonalities exist between sets such as languages that are growing quickly, languages that are stale and neglected, and so forth. Fodder for &lt;a title="My First Tangle With the Tower of Babel" href="http://codecraft.co/2013/04/26/my-first-tangle-with-the-tower-of-babel/"&gt;my experiments with language design&lt;/a&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;strong&gt;Questions&lt;/strong&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;span style="line-height:13px;"&gt;What languages are on your list for learning?&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;What other comparisons of programming languages would you like to see? Average bugs per KLOC? Length of learning curve? Average team size? Geographical distribution? ...&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>1069</ns0:post_id>
  <ns0:post_date>2013-03-22 14:52:14</ns0:post_date>
  <ns0:post_name>programming-language-popularity-inde</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="c">c++</category>
  <category domain="post_tag" nicename="github">github</category>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <category domain="post_tag" nicename="java">java</category>
  <category domain="post_tag" nicename="javascript">javascript</category>
  <category domain="post_tag" nicename="mindshare">mindshare</category>
  <category domain="post_tag" nicename="perl">perl</category>
  <category domain="post_tag" nicename="php">php</category>
  <category domain="post_tag" nicename="python">python</category>
  <category domain="post_tag" nicename="stackoverflow">stackoverflow</category>
  <category domain="post_tag" nicename="visual-basic">visual basic</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:62:"http://techknowledgeme.files.wordpress.com/2013/03/langpop.png";s:6:"images";a:1:{s:62:"http://techknowledgeme.files.wordpress.com/2013/03/langpop.png";a:6:{s:8:"file_url";s:62:"http://techknowledgeme.files.wordpress.com/2013/03/langpop.png";s:5:"width";i:500;s:6:"height";i:372;s:4:"type";s:5:"image";s:4:"area";i:186000;s:9:"file_path";b:0;}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2013-03-22 20:52:14";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:2:{s:2:"fb";a:1:{i:1511184;i:387;}s:2:"wp";a:1:{i:0;i:60;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>898</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-03-23 17:30:37</ns0:comment_date>
    <ns0:comment_content>Hah! I'm old enough that I learned Pascal and had teachers threaten to teach me Fortran, but I also missed the COBOL fun. Too bad; I could have made a mint on the Y2K bug. :-)</ns0:comment_content>
    <ns0:comment_parent>896</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>896</ns0:comment_id>
    <ns0:comment_author>Erik Prusse</ns0:comment_author>
    <ns0:comment_author_email>eprusse@comcast.net</ns0:comment_author_email>
    <ns0:comment_date>2013-03-23 11:38:28</ns0:comment_date>
    <ns0:comment_content>What about COBOL, Pascal, Modula-2 and the other languages I learned in school? OK, I didn't learn COBOL in school; I'm not that old.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Do Androids Browse (For Electric Sheep)?</title>
  <link>http://codecraft.co/2013/03/25/do-androids-browse-for-electric-sheep/</link>
  <pubDate>Mon, 25 Mar 2013 17:33:45 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1079</guid>
  <ns2:encoded>The movie &lt;em&gt;&lt;a class="zem_slink" title="Blade Runner (Movie-Tie-In Edition)" href="http://www.amazon.com/Blade-Runner-Movie-Tie-Philip-Dick/dp/0345350472%3FSubscriptionId%3D0G81C5DAZ03ZR9WH9X82%26tag%3Dzemanta-20%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0345350472" target="_blank" rel="amazon"&gt;Blade Runner&lt;/a&gt;&lt;/em&gt; is based on a &lt;a class="zem_slink" title="Philip K. Dick" href="http://www.philipkdick.com" target="_blank" rel="homepage"&gt;Philip K. Dick&lt;/a&gt; short story entitled "&lt;a href="http://en.wikipedia.org/wiki/Do_Androids_Dream_of_Electric_Sheep%3F"&gt;Do Androids Dream of Electric Sheep?&lt;/a&gt;"

Perhaps some new questions should be added to this classic...

In an interesting example of science fiction becoming reality, a group of researchers is now creating a sort of world wide web for the robots of the world. Whether or not androids dream, they may soon be able to use social networks for robots, and use public, internet-accessible resources to get their day-to-day work done. The initiative is called "&lt;a title="roboearth.org" href="http://www.roboearth.org/"&gt;RoboEarth&lt;/a&gt;":

[youtube=http://youtu.be/4-ir1ieqKyc]

I believe this sort of technological evolution is the wave of the future. It represents a promising confluence of cloud computing, distributed architecture, big data, hadoop-like map-reduce, supercomputing, ubiquitous internet connectivity, and the every-device-has-an-IP-address promise of IPv6. It would be nice if my next Roomba didn't have to relearn the floorplan of my house, but could simply download knowledge that the older model has laboriously developed. I'll bet over the next decade, the market will discover hundreds of variations on that theme.

I just hope we're smart enough to stop before robots start frittering away their time clicking cows on Facebook... :-)
&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.philipkdickfans.com/mirror/websites/pkdweb/Man,%20Android%20and%20Machine.htm" target="_blank"&gt;Man, Android and Machine&lt;/a&gt; (philipkdickfans.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.hpcinthecloud.com/hpccloud/2013-03-11/robots_of_the_world_unite.html" target="_blank"&gt;Robots of the World Unite&lt;/a&gt; (hpcinthecloud.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>1079</ns0:post_id>
  <ns0:post_date>2013-03-25 11:33:45</ns0:post_date>
  <ns0:post_name>do-androids-browse-for-electric-sheep</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="androids">androids</category>
  <category domain="post_tag" nicename="big-data">big data</category>
  <category domain="post_tag" nicename="cloud-computing">cloud computing</category>
  <category domain="post_tag" nicename="distributed-architecture">distributed architecture</category>
  <category domain="post_tag" nicename="hadoop">hadoop</category>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <category domain="post_tag" nicename="ipv6">ipv6</category>
  <category domain="post_tag" nicename="map-reduce">map-reduce</category>
  <category domain="post_tag" nicename="robots">robots</category>
  <category domain="post_tag" nicename="supercomputing">supercomputing</category>
  <category domain="post_tag" nicename="www">www</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_zemanta_has_recommendations</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2013-03-25 17:33:45";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:2:{s:2:"fb";a:1:{i:1511184;i:386;}s:2:"wp";a:1:{i:0;i:61;}}</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Adios to "computer programming"</title>
  <link>http://codecraft.co/2013/04/05/adios-to-computer-programming/</link>
  <pubDate>Fri, 05 Apr 2013 15:31:36 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1088</guid>
  <ns2:encoded>Have you noticed how seldom people put the modifier "computer" in front of "programming" nowadays?

This may be because our formerly esoteric discipline is now so mainstream that it needs no elaboration.

It may be that we're all growing lazy.

But I think there's something deeper.

&lt;strong&gt;"Software Engineering" isn't good enough&lt;/strong&gt;

The set of things besides traditional computers that need to be programmed is growing by leaps and bounds: TV remotes, holiday light displays, e-readers, smartphones and tablets, &lt;a class="zem_slink" title="Arduino" href="http://arduino.cc" target="_blank" rel="homepage"&gt;Arduino&lt;/a&gt; boards, fuel injectors, point-of-sale terminals, MRI machines, 3D printers, LEGO MindStorm robots, networks (software-defined networking / &lt;a title="Software-defined networking" href="http://en.wikipedia.org/wiki/Software-defined_networking" target="_blank" rel="wikipedia"&gt;SDN&lt;/a&gt;), storage (&lt;a title="Software defined storage" href="http://en.wikipedia.org/wiki/Software_defined_storage" target="_blank" rel="wikipedia"&gt;software-defined storage&lt;/a&gt; / SDS), nanobots, social networks, clouds...

[caption id="" align="aligncenter" width="432"]&lt;a href="http://www.flickr.com/photos/photonquantique/484826733/"&gt;&lt;img alt="" src="http://farm1.staticflickr.com/229/484826733_713c781d55.jpg" width="432" height="288" /&gt;&lt;/a&gt; Nanobots replicating in a petri dish. Is it fair to say we "program" nanobots? Photo credit: PhOtOnQuAnTiQuE (Flickr)[/caption]

"Right," I hear you say. "That's why I like the term &lt;em&gt;software engineering&lt;/em&gt;. Wherever you see programming, it's software that's in play. And engineering implies a more sophisticated approach than mere hackish programming."

Okay.

I think that's true, but it misses the really &lt;em&gt;big&lt;/em&gt; insight.&lt;!--more--&gt;

&lt;strong&gt;Systems thinking is the wave of the future&lt;/strong&gt;

Technology is evolving--rapidly--to depend upon complex &lt;em&gt;systems&lt;/em&gt;, not isolated devices, as the dominant unit of value delivery. More and more often, programming tasks demand a greater scope of design than a single computer.

That's big.

The TV remote isn't programmed in isolation anymore. The vendor of the TV also has to provide a whole firmware update process; has to provide a way for the remote and the TV to interact during configuration; has to think about users who want to upload profiles of their remote settings to the company's web site, so they can be persisted across upgrades and converted into equivalent choices in a smartphone app.

Nanobots achieve goals as a swarm.

3D printers have user forums and public blueprint-sharing sites and import-from-sketchup features to support.

Auto manufacturers have to release replacement parts on a schedule that correlates to the upgraded diagnostic features and the bug fixes they offer for their onboard computers.

&lt;strong&gt;Implications&lt;/strong&gt;

&lt;a title="History of Germ Theory" href="http://www.sciencemuseum.org.uk/broughttolife/techniques/germtheory.aspx" target="_blank"&gt;Germ theory&lt;/a&gt; revolutionized medicine; mortality rates plunged as doctors acknowledged for the first time how hand-washing translated into better recovery from surgery.

Software is just as interconnected. Individual chunks of code depend on one another &lt;a title="The 8th Characteristic" href="http://codecraft.co/2012/09/28/the-8th-characteristic/" target="_blank"&gt;being alive&lt;/a&gt;, can &lt;a title="Don’t forget the circuit breakers" href="http://codecraft.co/2013/01/11/dont-forget-the-circuit-breakers/" target="_blank"&gt;poison one another's environment&lt;/a&gt;, must &lt;a title="Are You Designing an Apex Predator?" href="http://codecraft.co/2012/09/06/designing-an-apex-predator/"&gt;respect the constraints implied by one another's requirements&lt;/a&gt;. Engineers and architects and CS professors, we have to stop thinking at the level of a single app(lication). We know we need the databases behind our app(lication), the web servers that host our UI, the people that maintain our infrastructure... When we pursue "integration" we acknowledge that we're joined at the hip to other products. Cloud computing makes our dependence on the internet explicit.

But do we get it?

We need &lt;a title="Metrics, Plumb Lines, and System Thinking" href="http://codecraft.co/2012/11/12/measurements-plumb-lines-and-system-thinking/"&gt;system thinking&lt;/a&gt; baked into our industry. We need programming languages that have sufficient expressive power to &lt;a title="Why Mental Models Matter" href="http://codecraft.co/2012/11/05/why-mental-models-matter/"&gt;model&lt;/a&gt; entire ecosystems, in all their chaotic and evolving complexity. We need development processes that are agile for ecosystems, not just for a feature of an app.

We don't use the term "computer programming" much anymore, but when are we going to start talking about "software ecosystem engineering" instead?

Until we do, I think we're missing the boat.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;span style="color:#000080;"&gt;&lt;em&gt;Discuss the idea of ecosystems in software with a colleague. How do you see the metaphor relating to your day-to-day work?&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;padding-left:30px;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://nathanmarz.com/blog/principles-of-software-engineering-part-1.html" target="_blank"&gt;Principles of Software Engineering, Part 1&lt;/a&gt; (nathanmarz.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://kennethmiralles.wordpress.com/2013/03/22/the-paradigm-of-the-software-developer-the-engineer-vs-the-artist-and-how-it-affects-software-development/" target="_blank"&gt;The Paradigm of the Software Developer: the Engineer vs. the Artist and How it Affects Software Development&lt;/a&gt; (kennethmiralles.wordpress.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://bertrandmeyer.com/2013/04/04/the-origin-of-software-engineering/" target="_blank"&gt;The origin of "software engineering"&lt;/a&gt; (bertrandmeyer.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>1088</ns0:post_id>
  <ns0:post_date>2013-04-05 09:31:36</ns0:post_date>
  <ns0:post_name>adios-to-computer-programming</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="3d-printers">3D printers</category>
  <category domain="post_tag" nicename="biology">biology</category>
  <category domain="post_tag" nicename="cloud-computing">cloud computing</category>
  <category domain="post_tag" nicename="dependencies">dependencies</category>
  <category domain="post_tag" nicename="ecosystems">ecosystems</category>
  <category domain="post_tag" nicename="engineering">engineering</category>
  <category domain="post_tag" nicename="evolution">evolution</category>
  <category domain="post_tag" nicename="firmware">firmware</category>
  <category domain="post_tag" nicename="germ-theory">germ theory</category>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <category domain="post_tag" nicename="interconnectedness">interconnectedness</category>
  <category domain="post_tag" nicename="internet">internet</category>
  <category domain="post_tag" nicename="nanobots">nanobots</category>
  <category domain="post_tag" nicename="programming">programming</category>
  <category domain="post_tag" nicename="sdn">SDN</category>
  <category domain="post_tag" nicename="sds">SDS</category>
  <category domain="post_tag" nicename="tv">TV</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:58:"http://farm1.staticflickr.com/229/484826733_713c781d55.jpg";s:6:"images";a:1:{s:58:"http://farm1.staticflickr.com/229/484826733_713c781d55.jpg";a:6:{s:8:"file_url";s:58:"http://farm1.staticflickr.com/229/484826733_713c781d55.jpg";s:5:"width";i:432;s:6:"height";i:288;s:4:"type";s:5:"image";s:4:"area";i:124416;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2013-04-05 16:48:12";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>28217</ns0:comment_id>
    <ns0:comment_author>Andrew Titenko</ns0:comment_author>
    <ns0:comment_author_email>andrewtitenko378@yahoo.com</ns0:comment_author_email>
    <ns0:comment_author_url>https://medium.com/@arkadyt</ns0:comment_author_url>
    <ns0:comment_date>2023-05-12 11:49:15</ns0:comment_date>
    <ns0:comment_content>Great blog you havee</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1683913758</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
</item>
<item>
  <title>My First Tangle With the Tower of Babel</title>
  <link>http://codecraft.co/2013/04/26/my-first-tangle-with-the-tower-of-babel/</link>
  <pubDate>Fri, 26 Apr 2013 14:40:42 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1115</guid>
  <ns2:encoded>A while back, I was reading the blog of somebody smart (can't remember who), and a comment jumped out at me: "If you &lt;em&gt;really&lt;/em&gt; want a black belt in computer science, try writing a programming language. The depth and breadth of experience you get when you invent Python or Lisp or Smalltalk or C++ or C#--and implement its ecosystem, not just code a parser for a CS class--gives you a wisdom and education that's rare and precious." (I'm paraphrasing here, but that's the gist of it.)

&lt;em&gt;Sounds good&lt;/em&gt;, I thought. &lt;em&gt;I think I'll give it a shot.&lt;/em&gt;

[caption id="" align="alignright" width="289"]&lt;img class=" " alt="" src="http://upload.wikimedia.org/wikipedia/commons/a/af/Confusion_of_Tongues.png" width="289" height="334" /&gt; "Confusion of Tongues", by Gustave Doré. The Tower of Babel resonates beyond moral history. Image credit: Wikimedia Commons.[/caption]

I began doing research and taking notes. I thought hard about which features I liked and detested in programming languages. I read critiques and tributes to various languages by detractors and fans. I identified pieces of syntactic sugar that I wanted to support. I took a wad of existing code and tried to rewrite it using the language I was drafting. I picked some conventions for filenames. I played with yacc and antlr and experimented with definitions of context-free grammars.

And then I stalled.

It wasn't good enough.

My new language was nifty. It combined a lot of the best features of my favorite languages: closures, list comprehensions, lambdas, static if, robust type inference, unified function call syntax, with blocks, variadic templates, mixins, nullable primitives, built-in support for design by contract, and more. I actually believed (perhaps naively) that I knew how to implement a good portion of these ideas in a compiler.

But I began to intuit that nifty != great. And the longer and harder I thought about it, the more convinced I became.

&lt;!--more--&gt;Some of you know that I have a background in linguistics (which may explain why this project appealed to me). One of the lessons I learned in my graduate program is that language and world view are profoundly related. Choices we make in our languages affect our thinking, not just our productivity. My favorite example is the from &lt;em&gt;Women, Fire, and Dangerous Things&lt;/em&gt;, by George Lakoff: the Dyirbal language in Australia has four "gender" categories for nouns, and one of them includes everything in Lakoff's title. You can't talk about nouns in this language without using its gender mechanism, and this requires you to perceive and communicate categories according to its system. &lt;a title="Why Mental Models Matter" href="http://codecraft.co/2012/11/05/why-mental-models-matter/"&gt;Mental models matter&lt;/a&gt;.

I connected this insight from natural human language to my experiment with computer language creation like this: &lt;em&gt;All of the coolness I was throwing into my language wasn't changing the way a programmer would think about a coding problem all that much.&lt;/em&gt; Sure, some of these innovations would let you short-circuit a problem, eliminate redundancy, write tighter or simpler code. But if I could port java or python into it more or less directly, then the languages were kissing cousins, and I didn't feel like I could go out and evangelize my creation as being &lt;em&gt;better enough&lt;/em&gt; to be worth the bother of a new learning curve. Programmers have better things to do than learn languages just for fun, and I have better things to do than to write a vanity language.

I turned to deeper investigations. I was intrigued by &lt;a title="Alan Kay OOP Messaging" href="http://c2.com/cgi/wiki?AlanKayOnMessaging" target="_blank"&gt;Alan Kay claiming that OOP was misnamed and should have highlighted messages, with objects as a secondary concern&lt;/a&gt;. I downloaded Smalltalk and played around a little.

I spent some time studying bugs. Why do they happen? Is there a way to make a language discourage or prevent them, and is the juice worth the squeeze? Can a language be immune to certain kinds of &lt;a title="Tech Debt, Leverage, and Grandma’s Envelope" href="http://codecraft.co/2012/10/30/tech-debt-leverage-and-grandmas-envelope/"&gt;tech debt&lt;/a&gt;, by design?

I investigated some more exotic (largely functional) languages: Erlang, Haskell, OCaml, Clojure. I learned a little Lisp. I read an &lt;a href="http://www.winestockwebdesign.com/Essays/Lisp_Curse.html" target="_blank"&gt;insightful essay&lt;/a&gt; that made me think about the social aspects of programming languages and about the personality and zen of language communities.

I have concluded that in order for a new, general-purpose programming language to provide significant value to the community, it doesn't just have to be Turing complete and cool. It must:
&lt;ul&gt;
	&lt;li&gt;&lt;span style="color:#000080;"&gt;Have a consistent and powerful organizing paradigm that inspires creativity and design insight.&lt;/span&gt; &lt;span style="color:#808080;"&gt;(Lisp and Smalltalk are both outstanding in this dimension; Java's a bit anal about OOP but I think misses the forest for the trees [&lt;a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html" target="_blank"&gt;&lt;span style="color:#808080;"&gt;nod to Yegge&lt;/span&gt;&lt;/a&gt;]. PHP is awful on this dimension, IMO.)&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;&lt;span style="color:#000080;"&gt;Solve compelling problems unusually well.&lt;/span&gt; &lt;span style="color:#808080;"&gt;(C or C++ is the go-to answer for performance; Perl used to be the de facto solution for serious text crunching, before other languages matured their regex libraries; Ruby's great for MVC web apps...)&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;&lt;span style="color:#000080;"&gt;Attract a community of people that are disposed to cooperate and that buy into the zen of the language.&lt;/span&gt; &lt;span style="color:#808080;"&gt;(This is Lisp's fatal weakness; it attracted a community, but it was a community of maverik loner geniuses who used immense power to reinvent everything per personal preference. Java, Python, Ruby, and C++ are strong here.)&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;&lt;span style="color:#000080;"&gt;Advance the state of the art in significant ways.&lt;/span&gt; &lt;span style="color:#808080;"&gt;(I'm not sure a language has truly changed the way we think about programming problems for a generation. See Alan Kay's Turing Award lecture. D pushes the limits of a C/C++ worldview pretty darn far, but it's a proximate evolution, not a quantum leap. Some experimental languages out of academia are promising, but are too weak on the other dimensions to get any traction. Am I wrong?)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
So I've had my first tangle with the Tower of Babel, and I'm now in ponder mode. What would truly change programming paradigms for the better in a basic way?

I think the answer may lie in &lt;a title="6 Strategies to Simplify Software" href="http://codecraft.co/2013/03/12/6-strategies-to-simplify-software/"&gt;finding new accommodations&lt;/a&gt; for all the &lt;a title="The Power of Simplicity" href="http://codecraft.co/2013/02/15/the-power-of-simplicity/"&gt;complexity&lt;/a&gt; we wrestle. New ways to think about concurrency, distributed architectures, object lifecycle, and communication may be involved. A facilitation of &lt;a title="Smart Geeks Think Like Cheerleaders" href="http://codecraft.co/2013/02/05/smart-geeks-think-like-cheerleaders/"&gt;system thinking&lt;/a&gt; may help. I'm now studying shared transactional memory, actor systems, variants of declarative programming, and so forth. I'm not sure where I'll end up, but I plan to blog about my discoveries as I go along. Look for posts in the "better programming language" category...

I am also very interested in your insights. &lt;span style="color:#000080;"&gt;What do you think would make a new programming language not just fun or interesting, but so compelling that you'd have to master it and tell all your friends?&lt;/span&gt;
&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://redmonk.com/dberkholz/2013/03/25/programming-languages-ranked-by-expressiveness/" target="_blank"&gt;Programming languages ranked by expressiveness&lt;/a&gt; or &lt;a href="http://redmonk.com/sogrady/2013/02/28/language-rankings-1-13/" target="_blank"&gt;popularity&lt;/a&gt; (redmonk.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.javacodegeeks.com/2013/04/choosing-a-programming-language.html" target="_blank"&gt;Choosing a Programming Language&lt;/a&gt; (javacodegeeks.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>1115</ns0:post_id>
  <ns0:post_date>2013-04-26 08:40:42</ns0:post_date>
  <ns0:post_name>my-first-tangle-with-the-tower-of-babel</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="alan-kay">Alan Kay</category>
  <category domain="category" nicename="better-programming-language">better programming language</category>
  <category domain="post_tag" nicename="clojure">Clojure</category>
  <category domain="post_tag" nicename="d">D</category>
  <category domain="post_tag" nicename="erlang">Erlang</category>
  <category domain="post_tag" nicename="george-lakoff">George Lakoff</category>
  <category domain="post_tag" nicename="haskell">Haskell</category>
  <category domain="post_tag" nicename="java">java</category>
  <category domain="post_tag" nicename="lisp">Lisp</category>
  <category domain="post_tag" nicename="object-oriented-programming">Object-oriented programming</category>
  <category domain="post_tag" nicename="ocaml">OCaml</category>
  <category domain="post_tag" nicename="oop">OOP</category>
  <category domain="post_tag" nicename="ruby">ruby</category>
  <category domain="post_tag" nicename="smalltalk">Smalltalk</category>
  <category domain="post_tag" nicename="turing-complete">Turing complete</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>1017</ns0:comment_id>
    <ns0:comment_author>The genesis of a new realm called &amp;#8220;possibility&amp;#8221; | power of language blog: partnering with reality by JR Fibonacci</ns0:comment_author>
    <ns0:comment_author_url>http://jrfibonacci.wordpress.com/2013/04/26/the-genesis-of-a-new-realm-called-possibility/</ns0:comment_author_url>
    <ns0:comment_date>2013-04-26 15:04:24</ns0:comment_date>
    <ns0:comment_content>[...] My First Tangle With the Tower of Babel (codecraft.co) [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1045</ns0:comment_id>
    <ns0:comment_author>Why Your Software Should Cry | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/05/06/why-your-software-should-cry/</ns0:comment_author_url>
    <ns0:comment_date>2013-05-06 11:51:03</ns0:comment_date>
    <ns0:comment_content>[...] was writing recently about my adventures designing a programming language. I concluded that more sugary syntax isn&amp;#8217;t really a great value to the community&amp;#8211;but a [...]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1203</ns0:comment_id>
    <ns0:comment_author>Programming Language Popularity Index | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/03/22/programming-language-popularity-inde/</ns0:comment_author_url>
    <ns0:comment_date>2013-05-31 01:28:48</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] It&amp;#8217;s interesting to ponder what commonalities exist between sets such as languages that are growing quickly, languages that are stale and neglected, and so forth. Fodder for my experiments with language design&amp;#8230; [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1092</ns0:comment_id>
    <ns0:comment_author>Good fences make good neighbors | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/05/15/good-fences-make-good-neighbors/</ns0:comment_author_url>
    <ns0:comment_date>2013-05-15 08:50:36</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] my pondering on programming languages leads me to believe that encouraging correct thinking about encapsulation is a desirable attribute. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2503</ns0:comment_id>
    <ns0:comment_author>Headers, babies, and bathwater | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/08/12/headers-babies-and-bathwater/</ns0:comment_author_url>
    <ns0:comment_date>2013-08-12 11:02:33</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] simple interface that consumers can read. This is the basic idea behind Lazy C++, but if I were writing my own programming language, I&amp;#8217;d take it much [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2638</ns0:comment_id>
    <ns0:comment_author>Julie Jones</ns0:comment_author>
    <ns0:comment_author_email>julie.jones@pobox.com</ns0:comment_author_email>
    <ns0:comment_date>2013-09-08 22:19:18</ns0:comment_date>
    <ns0:comment_content>I think you really hit the nail on the head with "change the way we think". Of all the languages that come and gone none have really changed the way we think about solving problems in the last thirty years. There have been a few that had potential, but I can't think of any that brought a new paradigm to light. Erlang is the only one I can think of that has picked up a decent following by managing to make one previously hard thing easy (multi-processing), but it is hardly revolutionary.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2491</ns0:comment_id>
    <ns0:comment_author>The third half of computational economics | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/08/09/the-third-half-of-computational-economics/</ns0:comment_author_url>
    <ns0:comment_date>2013-08-09 11:58:48</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] I don&amp;#8217;t think a system like this would be worth building in all cases, and it might have some unpleasant side effects like starvation of a humble process that can&amp;#8217;t adequately compete for resources. It would require measurement and tuning. It might require some variant of genetic algorithms so initial profit formulas would evolve. But I can imagine this approach having nice benefits for a certain class of thorny problems. I wonder if I could build this concept into a better programming language&amp;#8230; [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2395</ns0:comment_id>
    <ns0:comment_author>Programmers: learn how to &amp;#8220;cloudify&amp;#8221; | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/07/23/programmers-learn-how-to-cloudify/</ns0:comment_author_url>
    <ns0:comment_date>2013-07-23 11:43:09</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] new installments. I&amp;#8217;ll be making connections back to concepts here on codecraft, such as what the programming language of the future ought to look like, how to encapsulate for cloud, and so [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>9265</ns0:comment_id>
    <ns0:comment_author>Exploring the Power of Deixis | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/09/23/exploring-the-power-of-deixis/</ns0:comment_author_url>
    <ns0:comment_date>2014-09-23 08:34:56</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] of the goals of the intent programming ecosystem I&amp;#8217;ve begun to create is to empower this sort of deixis without creating any new overhead for engineering teams. As [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Why Your Software Should Cry</title>
  <link>http://codecraft.co/2013/05/06/why-your-software-should-cry/</link>
  <pubDate>Mon, 06 May 2013 17:47:46 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1129</guid>
  <ns2:encoded>The problem of pain has bothered philosophers--particularly those with a religious bent--for a long time. What might be the purpose of suffering, they've wondered, and how does it relate to the human experience?

But pain barely impinges on the thinking of software engineers at all. Computers never wince, or complain, or mourn the loss of a favorite program (Marvin the paranoid android excepted). An OS runs at full speed until the instant when its kernel "panics" without warning; once you reboot, it acts as if nothing ever happened. No sniffles, no whimpers, no scabs...

[caption id="" align="aligncenter" width="500"]&lt;a href="http://www.flickr.com/photos/lsuchick142/4480361923/"&gt;&lt;img alt="" src="http://farm3.staticflickr.com/2717/4480361923_229a1eb003.jpg" width="500" height="333" /&gt;&lt;/a&gt; photo credit: nanny snowflake (Flickr)[/caption]

This is unfortunate.

Reaction to stimuli is one of the &lt;a title="The 8th Characteristic" href="http://codecraft.co/2012/09/28/the-8th-characteristic/"&gt;8 characteristics of life&lt;/a&gt;. That means that living things are aware, in some sense, of their relationship to the larger environment. They distinguish between good and bad stimuli. They hurt. And they learn from their pain.

&lt;strong&gt;Lessons from a protist&lt;/strong&gt;

This ability to use pain is not limited to complex organisms. The lowly &lt;em&gt;Stentor roeselii&lt;/em&gt; (a single-celled protozoan that anchors for filter feeding) exhibits an incredible repertoire of behaviors to optimize its relationship with the environment. Squirt it with water from a pipette, and it contracts for defense. 30 seconds later, it unfurls again. Keep squirting, and it eventually learns to ignore the false alarms.

Gently introduce a poison into the water current, &lt;!--more--&gt;and &lt;em&gt;Stentor roeselii&lt;/em&gt; will do nothing at first. However, after a short time it senses that something is "wrong," and bends itself out of the path of the noxious particles. If that doesn't work, the cell begins contracting cilia in a sequence that ejects the undesirable particles. This strategy may be combined with bending one way or another.

If that still doesn't achieve the necessary effect, this cell will contract into a protective sheath and stop feeding altogether. It will stay cocooned for a while, then cautiously extend feelers to see if the poison is gone. Repeated encounters with the poison will cause faster and faster triggers of the sheathing reaction, until, finally, the reaction is violent enough that the foot attachment breaks, and the protozoa swims away, looking for a better home (see &lt;em&gt;Wetware: a Computer in Every Living Cell&lt;/em&gt;, by Dennis Bray, p. 14-17). This is a single cell, folks, less than a milimeter in size--a blob of protoplasm and proteins in a semi-permeable membrane!

[caption id="" align="aligncenter" width="461"]&lt;a href="http://en.wikipedia.org/wiki/File:Stentor_roeseli_composite_image.jpg"&gt;&lt;img class=" " alt="" src="http://upload.wikimedia.org/wikipedia/commons/5/5a/Stentor_roeseli_composite_image.jpg" width="461" height="287" /&gt;&lt;/a&gt; Stentor roeseli. photo credit: Protist Image Database (Wikimedia Commons)[/caption]

I believe that pain--and, more generally, optimized reactions to stimuli--is one reason why life is capable of organizing into complex ecosystems that put our most sophisticated software constructions to shame. Make zebras careless of crocodile bites, and half the herd will die when they migrate across an African river. Make ants insensitive to heat and moisture, and they'll build a hill where the whole colony will bake or drown. Subtract neurological feedback from humans, and you get the disfiguring of leprosy—spreading freely, since nobody feels a need for quarantine.

Life values pain.

Not all software needs neurology, I suppose. Prions and viruses are important players in the game of life, and they're hardly more than mindless algorithms; in software, it's remarkable how much we can accomplish in a good script with a few lines of code. However, if we want to truly &lt;a title="6 Strategies to Simplify Software" href="http://codecraft.co/2013/03/12/6-strategies-to-simplify-software/"&gt;master&lt;/a&gt; the bewildering &lt;a title="The Power of Simplicity" href="http://codecraft.co/2013/02/15/the-power-of-simplicity/"&gt;growth of complexity&lt;/a&gt; in the universe of bits and bytes, we need pain. And we need to pay attention to it.

&lt;strong&gt;Modest beginnings&lt;/strong&gt;

I see isolated, simplistic examples that give me hope.

Fail2Ban is a nifty little utility that monitors logs of sshd, httpd, and similar daemons, and instructs the firewall to block connections from IP addresses that have been guilty of repeated, failed login attempts. Kind of sounds like &lt;em&gt;Stentor roeselii&lt;/em&gt; bending away from the poison, doesn't it?

The &lt;a title="Don’t forget the circuit breakers" href="http://codecraft.co/2013/01/11/dont-forget-the-circuit-breakers/"&gt;circuit breaker pattern&lt;/a&gt; that I described a while back is another example of reacting to stimuli.

&lt;a href="http://techtripper.com/fijibot-is-an-autonomous-solar-powered-robot-that-lives-by-finding-light-on-its-own/" target="_blank"&gt;Fijibot&lt;/a&gt; is a cool little machine that fights hunger pains by parking itself in the light to recharge batteries.

Unfortunately, examples like this are few and far between. It's hard enough to &lt;a title="Good Code Plans for Problems" href="http://codecraft.co/2012/09/03/good-code-plans-for-problems/"&gt;bake a rational error-handling strategy into software&lt;/a&gt;, let alone make it sophisticated enough to monitor its environment and take proactive steps to avoid problems.

&lt;strong&gt;Thought experiment&lt;/strong&gt;

What would be different if software had pain receptors?

Let's take a simple problem that all software ought to handle: resource exhaustion. I wager that all of us have written routines that call malloc, or that write files to disk. Most of us probably have at least one scar from a time that the software failed miserably when RAM or disk space was unavailable. Perhaps that experience taught us to check the return value of malloc, or to trap I/O exceptions more carefully. But if that's where our vision stops, the lowly protist is still way out of our league.

What if we wrote our software so that it grew increasingly "uncomfortable" as RAM became more and more scarce? Maybe under ideal conditions, malloc returns immediately, with no pain. In a semi-constrained system, malloc returns after a modest pause, because it incurs the extra overhead of some quick garbage collecting, AND it also signals a central sensor in its app that memory is becoming a problem. &lt;em&gt;Ouch!&lt;/em&gt; In a highly constrained environment, a pain-savvy malloc might do a very aggressive garbage collection, plus issue an urgent interrupt, possibly beyond the boundary of a single app, to make sure that it gets someone's attention.

What if programs could jostle one another, or "fight" (inflict pain) in a battle for scarce resources?

I've seen designs that pre-allocate a 1 GB disk file so they can have something that's guaranteed to be deleteable, as a failsafe, if disk space gets too low. This is a step in the right direction, but if they don't also propagate a pain signal, they're not taking the idea far enough.

What are some other ways that software might use pain to its advantage?
&lt;ul&gt;
	&lt;li&gt;Since all software dies, pain might be an indicator of old age (impending EOL, breakages in compatibility, etc).&lt;/li&gt;
	&lt;li&gt;In the context of security, software might notice when it's under attack, and take protective measures (Fail2Ban's strategy, replicated in a hundred other contexts).&lt;/li&gt;
	&lt;li&gt;We might introduce "error memory" into our software. One thrown exception, once in a blue moon, might be something we just log--but if we start seeing it happen many times in rapid succession, we might treat it as a different problem entirely. This is the analog to humans telling the difference between a slight itch and a blister from our hand in the fire.&lt;/li&gt;
	&lt;li&gt;Similarly, we might aim for an "error gestalt" -- the ability to &lt;a title="Metrics, Plumb Lines, and System Thinking" href="http://codecraft.co/2012/11/12/measurements-plumb-lines-and-system-thinking/"&gt;notice system-level phenomena&lt;/a&gt; as the aggregate of many isolated signals. This would be analogous to a doctor diagnosing flue from the combination of sore throat, fever, chills, headache, and extreme fatigue.&lt;/li&gt;
	&lt;li&gt;Could software develop protective "fear" based on repeated exposure to "pain"?&lt;/li&gt;
&lt;/ul&gt;
I was writing recently about &lt;a title="My First Tangle With the Tower of Babel" href="http://codecraft.co/2013/04/26/my-first-tangle-with-the-tower-of-babel/"&gt;my adventures designing a programming language&lt;/a&gt;. I concluded that more sugary syntax isn't really a great value to the community--but a language that allows programmers to reason about, describe, and react to various kinds of pain might do wonders for the health of the ecosystems we build.

&lt;span style="color:#000080;"&gt;What do you think? Please drop me a line&lt;/span&gt; in the comments or through the "Contact" tab at the top. Include your ideas about pain and software, and maybe (with your permission) I can refer to them in my upcoming book about what software has to learn from living systems.</ns2:encoded>
  <ns0:post_id>1129</ns0:post_id>
  <ns0:post_date>2013-05-06 11:47:46</ns0:post_date>
  <ns0:post_name>why-your-software-should-cry</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="category" nicename="better-programming-language">better programming language</category>
  <category domain="post_tag" nicename="cell">cell</category>
  <category domain="post_tag" nicename="ecosystems">ecosystems</category>
  <category domain="post_tag" nicename="life">life</category>
  <category domain="post_tag" nicename="pain">pain</category>
  <category domain="post_tag" nicename="poison">poison</category>
  <category domain="post_tag" nicename="protist">protist</category>
  <category domain="post_tag" nicename="protozoa">protozoa</category>
  <category domain="post_tag" nicename="security">security</category>
  <category domain="post_tag" nicename="stimuli">stimuli</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:86:"http://upload.wikimedia.org/wikipedia/commons/5/5a/Stentor_roeseli_composite_image.jpg";s:6:"images";a:1:{s:86:"http://upload.wikimedia.org/wikipedia/commons/5/5a/Stentor_roeseli_composite_image.jpg";a:6:{s:8:"file_url";s:86:"http://upload.wikimedia.org/wikipedia/commons/5/5a/Stentor_roeseli_composite_image.jpg";s:5:"width";i:576;s:6:"height";i:359;s:4:"type";s:5:"image";s:4:"area";i:206784;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2013-05-06 17:34:21";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>1049</ns0:comment_id>
    <ns0:comment_author>Gene Hughson</ns0:comment_author>
    <ns0:comment_author_email>genehughson@hotmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://genehughson.wordpress.com</ns0:comment_author_url>
    <ns0:comment_date>2013-05-06 19:17:17</ns0:comment_date>
    <ns0:comment_content>very interesting...I think the increasing interest in resilience is a sign of growing industry maturity.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>28036074</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1056</ns0:comment_id>
    <ns0:comment_author>François Reynald</ns0:comment_author>
    <ns0:comment_author_email>francois.reynald@bettersoftwareprojects.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.bettersoftwareprojects.com</ns0:comment_author_url>
    <ns0:comment_date>2013-05-07 07:46:59</ns0:comment_date>
    <ns0:comment_content>Daniel: That is the only notification I know of but I am not (yet) an UIKit expert. It may be because memory is such a big deal for mobile devices.</ns0:comment_content>
    <ns0:comment_parent>1054</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1055</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-05-07 07:24:52</ns0:comment_date>
    <ns0:comment_content>Yes, I think the industry is gradually starting to "get it." I'm just impatiently trying to hurry us along. :-)</ns0:comment_content>
    <ns0:comment_parent>1049</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1054</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-05-07 07:24:08</ns0:comment_date>
    <ns0:comment_content>François: Thanks for the information. I was not aware of this feature in UIKit. I'm glad Apple has added it. Do they also have a way to be notified about low disk space, or is that not considered an issue in iOS?

Resource exhaustion is only one of many possible situations where software needs sensors. Another obvious one is connectivity problems; those plague software all the time and are poorly diagnosed and handled in most software that I've seen. There are many other sources of "pain" as well.</ns0:comment_content>
    <ns0:comment_parent>1052</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1052</ns0:comment_id>
    <ns0:comment_author>François Reynald</ns0:comment_author>
    <ns0:comment_author_email>francois.reynald@bettersoftwareprojects.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.bettersoftwareprojects.com</ns0:comment_author_url>
    <ns0:comment_date>2013-05-07 02:15:19</ns0:comment_date>
    <ns0:comment_content>What you describes already exists in Apple's UIKit framework. ViewControllers get notified by the system of low memory situations. It's the developer's responsibility to implement the didReceiveMemoryWarning method. I have copied the relevant excerpt from the class reference page below.

didReceiveMemoryWarning
Sent to the view controller when the app receives a memory warning.

- (void)didReceiveMemoryWarning
Discussion
Your app never calls this method directly. Instead, this method is called when the system determines that the amount of available memory is low.

You can override this method to release any additional memory used by your view controller. If you do, your implementation of this method must call the super implementation at some point.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1046</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2013-05-06 12:53:08</ns0:comment_date>
    <ns0:comment_content>great thoughts</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1167</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.facebook.com/sivaneaman</ns0:comment_author_url>
    <ns0:comment_date>2013-05-24 15:41:25</ns0:comment_date>
    <ns0:comment_content>Nice connection to Bayesian statistics. I used to work on search, and hit ranking uses Bayesian models (in a subset of search products); I should have seen that link more quickly. Very good point to ponder.

Totally agree about life being driven by heuristics.

Thanks for the comment!</ns0:comment_content>
    <ns0:comment_parent>1166</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>hc_foreign_user_id</ns0:meta_key>
      <ns0:meta_value>502940911</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>hc_avatar</ns0:meta_key>
      <ns0:meta_value>http://graph.facebook.com/502940911/picture?type=large&amp;_md5=99d5652e235dfbfc71430721605654d4</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>hc_post_as</ns0:meta_key>
      <ns0:meta_value>facebook</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2988</ns0:comment_id>
    <ns0:comment_author>Add some more extra redundancy again | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/01/15/add-some-more-extra-redundancy-again/</ns0:comment_author_url>
    <ns0:comment_date>2014-01-15 08:39:20</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] we have multiple ways to get someone&amp;#8217;s attention when something goes wrong? It&amp;#8217;s all well and good to log errors&amp;#8211;but what if the error [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1166</ns0:comment_id>
    <ns0:comment_author>RalfMC</ns0:comment_author>
    <ns0:comment_author_email>ralfmc@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2013-05-24 14:39:07</ns0:comment_date>
    <ns0:comment_content>This is an interesting line of thought. Personally, I would generalize to conditioning pretty fast, as pain is 'just' a kind of reinforcement. Maybe take a look at classical and operant conditioning.

Coincidentally, Bayesian statistics seem like a related subject and have indeed found their way into spam filters, for instance ("hey, this message smells like a rotten apple").

I think one important thing to remember is that life is driven by heuristics, averages, etc. Stuff works 'most of the time' and 'in general'; however, by the time my programming gives me 95% reliable software, I will not have gained much.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2916</ns0:comment_id>
    <ns0:comment_author>A Comedy of Carelessness | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/12/09/a-comedy-of-carelessness/</ns0:comment_author_url>
    <ns0:comment_date>2013-12-09 08:35:08</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] that&amp;#8217;s more like it! Plan for trouble. (It always happens, after all.) Notice the problem. Communicate it. Take steps to cope, without panicking or inconveniencing the user. I&amp;#8217;m not [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>7227</ns0:comment_id>
    <ns0:comment_author>Mountains, Molehills, and Markedness | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/28/mountains-molehills-and-markedness/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-28 08:44:50</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] to generate code for circuit-breaker patterns. Marks might also be used to identify symptoms for pain detecting algorithms. Imagine you could declare remediation strategies for common problems (Internet down? Retry in 5 [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2489</ns0:comment_id>
    <ns0:comment_author>The third half of computational economics | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/08/09/the-third-half-of-computational-economics/</ns0:comment_author_url>
    <ns0:comment_date>2013-08-09 11:58:42</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] I suspect that most of us have written an application that is a bit too cavalier with its use of resources. We want to allocate 9 GB of RAM to store a monster bitmap, so we call malloc. It might fail, but if it doesn&amp;#8217;t, we have no sense at all of how much burden we&amp;#8217;ve placed on a scarce resource. We don&amp;#8217;t &amp;#8220;pay&amp;#8221; for the allocation in any way. There&amp;#8217;s no pain. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>10858</ns0:comment_id>
    <ns0:comment_author>Taming Side Agreements | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/10/28/taming-side-agreements/</ns0:comment_author_url>
    <ns0:comment_date>2014-10-28 08:36:03</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] we need whistleblowers. I have previously written about embedding pain sensors and circuit breakers in code. We need ways to find out that everything isn&amp;#8217;t working [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>17433</ns0:comment_id>
    <ns0:comment_author>On pains and brains | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2016/01/01/on-pains-and-brains/</ns0:comment_author_url>
    <ns0:comment_date>2016-01-01 14:30:08</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] while back, I wrote a post on why software should feel pain. Since then, I&amp;#8217;ve had that lesson reinforced in my mind, and I&amp;#8217;ve also understood [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>13816</ns0:comment_id>
    <ns0:comment_author>Know Your Limits | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/02/05/know-your-limits/</ns0:comment_author_url>
    <ns0:comment_date>2015-02-05 08:47:43</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] logs flood with over 200k retry attempts per second in this unusual state. I had to fix this by sensing the pain of a retry storm and tripping a circuit breaker to keep the logs moderately [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16576</ns0:comment_id>
    <ns0:comment_author>On Forests and Trees | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/09/02/on-forests-and-trees/</ns0:comment_author_url>
    <ns0:comment_date>2015-09-02 08:48:48</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] 2: A few months ago, I noticed that a volume on one of our production servers was nearly full. No alarms had gone off about it&amp;#8211;I just stumbled on the problem&amp;#8211;and that concerned me. I did some research and [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14921</ns0:comment_id>
    <ns0:comment_author>A grumble about buckets | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/04/08/a-grumble-about-buckets/</ns0:comment_author_url>
    <ns0:comment_date>2015-04-08 13:39:42</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] to be software that&amp;#8211;either by carelessness or intent&amp;#8211;provides no way whatsoever for its creators to find out if they&amp;#8217;ve got the buckets wrong. The financial services company with the dumb security [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Good fences make good neighbors</title>
  <link>http://codecraft.co/2013/05/15/good-fences-make-good-neighbors/</link>
  <pubDate>Wed, 15 May 2013 14:49:48 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1150</guid>
  <ns2:encoded>In Robert Frost's poem, "Mending Wall", two farmers meet each spring to rebuild the rock wall between their properties. One farmer is the narrator. He notes that the unseen forces of winter and weather always cause some decay ("something there is that doesn't love a wall"), and he wonders why the wall is necessary. There's apple orchard on one side, and pine forest on the other--it's not as if something will be kept in or out. The other farmer answers with the repeated aphorism "good fences make good neighbors."

[caption id="" align="aligncenter" width="500"]&lt;a href="http://www.flickr.com/photos/dragonwoman/226824603/"&gt;&lt;img alt="" src="http://farm1.staticflickr.com/74/226824603_1285fc9181.jpg" width="500" height="333" /&gt;&lt;/a&gt; photo credit: DragonWoman (Flickr)[/caption]

This poem could be a treatise for the principle of encapsulation in software. In software as in life:
&lt;ul&gt;
	&lt;li&gt;Something there is that doesn't love a wall.&lt;/li&gt;
	&lt;li&gt;Good fences make good neighbors.&lt;/li&gt;
&lt;/ul&gt;
&lt;strong&gt;What doesn't love a wall?&lt;/strong&gt;

Subroutines, formal interfaces, data hiding, class hierarchies, the &lt;a class="zem_slink" title="Opaque pointer" href="http://en.wikipedia.org/wiki/Opaque_pointer" target="_blank" rel="wikipedia"&gt;pimpl idiom&lt;/a&gt;, and similar mechanisms all create barriers in software between consumers and providers of functionality. These techniques are well known, but we still have codebases littered with protected data members, unnecessary class declarations in headers, goto, and other suboptimal choices.

Why?&lt;!--more--&gt;

I believe there are many causes, but the most insidious is that we just don't care enough to make encapsulation our default habit. We take the easy way out.

How often have you seen code like the following in C++:
&lt;pre style="margin-left:2em;padding:1em;background-color:#eee;border:solid 1px black;"&gt;class FooInternals { ... }

class Foo {
  public:
    Foo() { ... }
    std::string getName();
    void changeInternals(FooInternals const &amp;amp;);
    ...
};&lt;/pre&gt;
&amp;nbsp;

or in java:
&lt;pre style="margin-left:2em;padding:1em;background-color:#eee;border:solid 1px black;"&gt;class Foo {
    String name;
    String getName() { return name; }
    ....
}&lt;/pre&gt;
&amp;nbsp;

What is wrong with these snippets of code?

In the first one, the programmer has a habit of immediately counteracting the private-by-default visibility rule for classes in C++; the first line makes what follows public. We can tell this is laziness rather than serious design, because the FooInternals class is fully declared in the header even though it's unnecessary, and the implementation of getName() is also wrong. It returns a string by value instead of const &amp;amp;, and it doesn't declare the method const either. This coder hasn't bought into the encapsulation that C++ offers.

In the second, the programmer uses default java visibility everywhere, without bothering to be more specific. Result: the getter has the same visibility as the instance variable that ought to be private; it is totally useless.

&lt;strong&gt;How to make good fences and good neighbors&lt;/strong&gt;

Make a habit of being very deliberate about what information you expose. The default position ought to be to expose to consumers of your code as little as you can get away with. In other words, put a wall around your private domain and then maintain it.

What coding habits are evidence of this mindset?

In C++:
&lt;ul&gt;
	&lt;li&gt;Use forward decls anywhere you can. (Using a class by ptr, by ref, or as a return value does not mean you need its definition.)&lt;/li&gt;
	&lt;li&gt;Use #include correctly. This means: #include everything you must have, but nothing you don't absolutely need. (This topic is probably worth a post of its own; in my entire career, I've only seen a handful of programmers who do this right.)&lt;/li&gt;
	&lt;li&gt;Avoid headers that declare too much. 15 classes in my-master-header.h = bad.&lt;/li&gt;
	&lt;li&gt;Keep implementation out of headers. (Templates are a special case that's worthy of separate discussion.)&lt;/li&gt;
	&lt;li&gt;Consider using the pimpl idiom where it makes sense.&lt;/li&gt;
	&lt;li&gt;&lt;a title="How Enums Spread Disease — And How To Cure It" href="http://codecraft.co/2012/10/29/how-enums-spread-disease-and-how-to-cure-it/"&gt;Use enums carefully&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;Use anonymous namespaces and/or static scopes to hide private classes from the linker.&lt;/li&gt;
	&lt;li&gt;Never have protected members. (Public members are okay for POD structs, but are otherwise just as toxic.)&lt;/li&gt;
	&lt;li&gt;&lt;a title="Put Your Const Foot Forward" href="http://codecraft.co/2012/11/14/put-your-const-foot-forward/"&gt;Use const correctly&lt;/a&gt;. This forces callers to respect mutability constraints in your corner of the codebase.&lt;/li&gt;
	&lt;li&gt;Eliminate goto.&lt;/li&gt;
&lt;/ul&gt;
In Java:
&lt;ul&gt;
	&lt;li&gt;Consider using abstract classes instead of interfaces. (Another topic that's worthy of a post by itself. Java interfaces are overused and, because they are wholly public, sometimes force details out into the open.)&lt;/li&gt;
	&lt;li&gt;Get in the habit of making members and methods private.&lt;/li&gt;
	&lt;li&gt;Pray that the keepers of the language implement partial classes, like they did in C#. :-)&lt;/li&gt;
&lt;/ul&gt;
In Python:
&lt;ul&gt;
	&lt;li&gt;Use the _ prefix convention to signal private implementation details.&lt;/li&gt;
	&lt;li&gt;Look for better alternatives to accessing _ prefixed internals. (Since at least python 2.2, the language has consistently added better alternatives to dirty hooks.)&lt;/li&gt;
&lt;/ul&gt;
In all languages:
&lt;ul&gt;
	&lt;li&gt;&lt;a title="Small Files Are Your Friends" href="http://codecraft.co/2013/03/21/small-files-are-your-friends/"&gt;Divide code into modules and files&lt;/a&gt; that gives you a rational, mentally tractable separation of concerns.&lt;/li&gt;
	&lt;li&gt;Be on the lookout for tight coupling and unnecessary leakage of implementation details.&lt;/li&gt;
&lt;/ul&gt;
(BTW, my &lt;a title="My First Tangle With the Tower of Babel" href="http://codecraft.co/2013/04/26/my-first-tangle-with-the-tower-of-babel/"&gt;pondering on programming languages&lt;/a&gt; leads me to believe that encouraging correct thinking about encapsulation is a desirable attribute. Not all languages do it equally well. Contrast the C++ guidelines above with what needs to be said about Smalltalk or Erlang; I think it's a bit eye-opening...)
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Talk back. What coding habits do you feel are most helpful at promoting encapsulation?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://blog.startifact.com/posts/overwhelmed-by-javascript-dependencies.html" target="_blank"&gt;Overwhelmed by JavaScript Dependencies&lt;/a&gt; (startifact.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.scilogs.com/endless_forms/2013/04/24/do-good-fences-make-good-neighbors-for-mesopredators/" target="_blank"&gt;Do Good Fences Make Good Neighbors for Mesopredators?&lt;/a&gt; (scilogs.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>1150</ns0:post_id>
  <ns0:post_date>2013-05-15 08:49:48</ns0:post_date>
  <ns0:post_name>good-fences-make-good-neighbors</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="include">#include</category>
  <category domain="post_tag" nicename="c">c++</category>
  <category domain="post_tag" nicename="const">const</category>
  <category domain="post_tag" nicename="data-hiding">data hiding</category>
  <category domain="post_tag" nicename="encapsulation">encapsulation</category>
  <category domain="post_tag" nicename="erlang">Erlang</category>
  <category domain="post_tag" nicename="fences">fences</category>
  <category domain="post_tag" nicename="goto">goto</category>
  <category domain="post_tag" nicename="headers">headers</category>
  <category domain="post_tag" nicename="java">java</category>
  <category domain="post_tag" nicename="pimpl-idiom">pimpl idiom</category>
  <category domain="post_tag" nicename="poetry">poetry</category>
  <category domain="post_tag" nicename="python">python</category>
  <category domain="post_tag" nicename="robert-frost">Robert Frost</category>
  <category domain="post_tag" nicename="smalltalk">Smalltalk</category>
  <category domain="post_tag" nicename="walls">walls</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_zemanta_has_recommendations</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:57:"http://farm1.staticflickr.com/74/226824603_1285fc9181.jpg";s:6:"images";a:1:{s:57:"http://farm1.staticflickr.com/74/226824603_1285fc9181.jpg";a:6:{s:8:"file_url";s:57:"http://farm1.staticflickr.com/74/226824603_1285fc9181.jpg";s:5:"width";i:500;s:6:"height";i:333;s:4:"type";s:5:"image";s:4:"area";i:166500;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2013-05-15 15:01:33";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:2:{s:2:"fb";a:1:{i:1511184;i:413;}s:2:"wp";a:1:{i:0;i:70;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>1093</ns0:comment_id>
    <ns0:comment_author>tianyuzhu</ns0:comment_author>
    <ns0:comment_author_email>tian.tian098@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://gravatar.com/tianyuzhu</ns0:comment_author_url>
    <ns0:comment_date>2013-05-15 12:04:21</ns0:comment_date>
    <ns0:comment_content>Why should you avoid headers that "declare too much"?

In C++, public headers are used to define modules, which contain a set of declarations that work together. Consider the standard  module. It's got tons of declarations.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1094</ns0:comment_id>
    <ns0:comment_author>tianyuzhu</ns0:comment_author>
    <ns0:comment_author_email>tian.tian098@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2013-05-15 12:05:30</ns0:comment_date>
    <ns0:comment_content>Sorry to double post. In my previous post, it says "Consider the standard module". I meant, "Consider the standard type_traits module".</ns0:comment_content>
    <ns0:comment_parent>1093</ns0:comment_parent>
    <ns0:comment_user_id>11176301</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1095</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-05-15 13:03:58</ns0:comment_date>
    <ns0:comment_content>Excellent question.

Part of the issue is that big headers are hard to digest, mentally. See http://codecraft.co/2013/03/21/small-files-are-your-friends/.

This matters much more in high-level application code than it does in the headers for standard libraries, because we usually discover what we need to know about standard library functions and datatypes by reading a man page or similar documentation--not by browsing headers.

The headers in the c++ standard library have an additional dynamic that makes them outliers, which is that they're very template-centric. This means they not only have declarations, but also large blocks of implementation.

My "declare too much" comment basically reflects the following mindset: ideally, a header should declare only what a *consumer* of your code needs to know, not what the *implementation* of your code needs to know. Anything else is "too much," at least in theory, because it will obscure your intent about interfaces and tempt other coders to use the code incorrectly. However, I am pragmatic--sometimes the juice is not worth the squeeze.</ns0:comment_content>
    <ns0:comment_parent>1093</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1103</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2013-05-16 11:08:51</ns0:comment_date>
    <ns0:comment_content>I concur with (and have done it myself) with smaller headers: I have an external interface header to my module for others to utilize, and internal header(s) for implementation only use. The two "should" never met, IMHO. Well, better said: A one way street. Implementation needs the external header to implement that interface, but external consumers don't need internal headers/interfaces.

Good thoughts/post as usually</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1104</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-05-16 11:32:20</ns0:comment_date>
    <ns0:comment_content>Doug: On an intuitive level, I have been splitting my headers into the internal and external categories for years, without realizing exactly why. Your comment made me realize that's what was going on, somewhere in the back of my mind. Thanks for twisting the focus knob!</ns0:comment_content>
    <ns0:comment_parent>1103</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2687</ns0:comment_id>
    <ns0:comment_author>What should code look like when we squint at it? | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/09/19/what-should-code-look-like-when-we-squint-at-it/</ns0:comment_author_url>
    <ns0:comment_date>2013-09-19 08:23:04</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] classes out of a sea of thousands is not particularly easy. Interfaces allow you to encapsulate and suppress details—but they don&amp;#8217;t tell you how they fit into a gestalt. Tests as a form [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2254</ns0:comment_id>
    <ns0:comment_author>2 Surprising Truths About The Iron Triangle | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/07/01/2-surprising-truths-about-the-iron-triangle/</ns0:comment_author_url>
    <ns0:comment_date>2013-07-01 16:39:10</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] In a way, I&amp;#8217;m suggesting the opposite strategy: if you push on quality in the right way, speed will accrue organically. Not at first, especially if you&amp;#8217;re starting with an unhealthy codebase. Not with every checkin; sometimes you have to take one step back to take two steps forward. But over time, if you continue to invest in quality, your patient will get more healthy, and you will see your speed go up, not down. The mental models of your engineers and the entire value chain will align. You&amp;#8217;ll create virtuous cycles that perpetuate the right kinds of tradeoffs for performance, scalability, and encapsulation. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2396</ns0:comment_id>
    <ns0:comment_author>Programmers: learn how to &amp;#8220;cloudify&amp;#8221; | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/07/23/programmers-learn-how-to-cloudify/</ns0:comment_author_url>
    <ns0:comment_date>2013-07-23 11:43:12</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] here on codecraft, such as what the programming language of the future ought to look like, how to encapsulate for cloud, and so [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>6629</ns0:comment_id>
    <ns0:comment_author>Lacunas Everywhere | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/16/lacunas-everywhere/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-16 13:58:50</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] language shouldn&amp;#8217;t be indicted for creating useless redundancy that undermines encapsulation and the accuracy of [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Courage Counts</title>
  <link>http://codecraft.co/2013/05/31/courage-counts/</link>
  <pubDate>Fri, 31 May 2013 14:33:12 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1163</guid>
  <ns2:encoded>If you've read &lt;em&gt;Call it Courage&lt;/em&gt;, then you know the story of Mafatu, the boy who was afraid.

Mafatu grows up in Polynesia, surrounded by the ocean—but everything about the sea terrifies him, because he remembers his mother drowning when he was young. Determined to conquer his fear or die trying, Mafatu sets out alone in a dugout canoe, into the element that terrifies him most. He ends up stranded on an island that harbors cannibals. In one memorable scene, his faithful companion dog is endangered by a tiger shark; Mafatu jumps in the water and attacks with only a knife. When he kills the shark, he realizes that something fundamental in his heart is now different.

He still feels fear, but it no longer overpowers him.

He is free.

I've been blogging about the skills and mindset of effective software architects for quite a while now, but I recently realized that I've omitted the fundamental subject of courage.

[caption id="" align="aligncenter" width="500"]&lt;a href="http://www.flickr.com/photos/nalsa/2888919972/"&gt;&lt;img alt="" src="https://farm4.staticflickr.com/3134/2888919972_b79a8432ff_z.jpg?zz=1" width="500" height="332" /&gt;&lt;/a&gt; image credit: nalsa (Flickr)[/caption]

This is an important gap, because &lt;em&gt;courage counts&lt;/em&gt;. The cleverest, most skilled architect or engineer will accomplish very little, at key junctures in a career, without it.

&lt;strong&gt;Symptoms of fear&lt;/strong&gt;

In the past two decades, I've heard many people (myself included) make statements like the following:&lt;!--more--&gt;
&lt;ul&gt;
	&lt;li&gt;"We cannot do &lt;em&gt;&amp;lt;risky change X&amp;gt;&lt;/em&gt; because it might destabilize the code."&lt;/li&gt;
	&lt;li&gt;"Stay away from &amp;lt;&lt;em&gt;module Y&lt;/em&gt;&amp;gt;. Here be dragons."&lt;/li&gt;
	&lt;li&gt;"I'm not sure &amp;lt;&lt;em&gt;technique Z&lt;/em&gt;&amp;gt; is wise. There are too many unknowns."&lt;/li&gt;
	&lt;li&gt;"If I try to sell that idea to &amp;lt;&lt;em&gt;executives/product management/the dev team&lt;/em&gt;&amp;gt;, they'll just roll their eyes and change the subject."&lt;/li&gt;
	&lt;li&gt;"Nobody will buy into the need to &lt;a title="Paying Off Technical Debt" href="http://codecraft.co/2012/10/14/paying-off-technical-debt/"&gt;pay down technical debt&lt;/a&gt;."&lt;/li&gt;
&lt;/ul&gt;
Such statements are really just fear, dressed up in fancy clothing.

I'm not going to claim that these fears are irrational. It could very well be that your change is risky, courting allies is a recipe for frustration, and you'll fail.

Mafatu's fear of the sea was rational, too--and it was based on &lt;a title="Earned Pragmatism" href="http://codecraft.co/2013/01/18/earned-pragmatism/"&gt;traumatic, real-world experience, not theory&lt;/a&gt;. But when the need was great, Mafatu plunged in, met his fears, and mastered them.

Sometimes we need to do that as technical thought leaders.

&lt;strong&gt;When to confront our fears&lt;/strong&gt;

This is particularly important in pivotal moments when the choice is between a "safe" dead end and a risky but maybe game-changing innovation. If we believe that without a change, our codebase or our product or our team is headed for extinction (especially, when it's "not with a bang, but a whimper"), we have a duty—to ourselves, our employers, and our customers—to jump in the water with our knife and do battle with the shark.

I am not advocating that we recklessly battle about every issue that lights up our radar. But I do think we need to notice when fear is inhibiting necessary change, take a deep breath, and commit. (Too bad &lt;a title="All I Really Need To Know I Didn’t Learn In Compugarten" href="http://codecraft.co/2012/11/15/all-i-really-need-to-know-i-didnt-learn-in-compugarten/"&gt;they don't teach that to CS majors&lt;/a&gt;. :-)

&lt;strong&gt;Case study 1&lt;/strong&gt;

A while back, a large and mission-critical codebase under my purview was exhibiting frightening stability problems. My boss was beside himself. I was newly hired, and not yet battle-tested at the company or even in the industry where the codebase was focused. After some analysis, I recommended the commissioning of a "tiger team" to surge on a handful of key architectural initiatives.

This must have been scary for my boss. Should he bet his personal reputation, the credibility of the engineering team, and the revenue stream of the company on advice that he couldn't easily validate? Not only was I an unknown quantity, but I was proposing radical changes to an already shaky codebase; the possibility of making things worse was very real.

I halfway expected to be ignored, but my boss (and a lot of other stakeholders) had guts. He championed the strategy all the way to the CEO. The tiger team was born; in about 7 weeks we made a fundamental improvements to process, build, test framework, and code organization. The next release was a significant improvement.
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;Score&lt;/em&gt;: &lt;span style="color:red;"&gt;Fear&lt;/span&gt; 0, &lt;span style="color:green;"&gt;Courage&lt;/span&gt; 1.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;Outcome&lt;/em&gt;: Big &lt;span style="color:green;"&gt;success&lt;/span&gt;.&lt;/p&gt;
&lt;strong&gt;Case study 2&lt;/strong&gt;

From about 2004 to 2007, I worked to transition backup technologies at Symantec from a tape-centric to a disk-centric model. A big problem for us was the &lt;a title="Why Cannibalism May Be Smart Business" href="http://codecraft.co/2012/10/05/why-cannibalism-may-be-smart-business/"&gt;fear of cannibalizing the revenue stream&lt;/a&gt; of the traditional product. We ended up dithering long enough that the opportunity to ride a disruptive wave largely passed us by. Cloud and virtualization and SaaS all combined to erode the value prop of traditional backup.
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;Score&lt;/em&gt;: &lt;span style="color:red;"&gt;Fear&lt;/span&gt; 1, &lt;span style="color:green;"&gt;Courage&lt;/span&gt; 0.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;Outcome&lt;/em&gt;: Painful, lingering, and preventable &lt;span style="color:red;"&gt;failure&lt;/span&gt;. Shame on us. (A coward dies a thousand deaths; a hero only one...)&lt;/p&gt;
&lt;strong&gt;Case study 3&lt;/strong&gt;

In 2008, I started a company with several of my MBA buddies. We'd been experimenting with product concepts for months. We wrote a comprehensive business plan, bought the IP of a silicon valley startup that was looking to liquidate, and began to pitch to investors. We believed we had a technology recipe that could alter the social media landscape.

Remember what happened to the stock market in 2008?

Yeah.

That all went down just after I emptied my personal savings to fund our startup, and just before we were hoping for an infusion of investor capital.

I'll skip a long story and simply say that I've paid some tuition in the school of hard knocks.
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;Score&lt;/em&gt;: &lt;span style="color:red;"&gt;Fear&lt;/span&gt; 0, &lt;span style="color:green;"&gt;Courage&lt;/span&gt; 1.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;Outcome&lt;/em&gt;: One of my best &lt;span style="color:red;"&gt;failure&lt;/span&gt;s.&lt;/p&gt;
&lt;strong&gt;The moral, part 1&lt;/strong&gt;

If you're into combinatorial math, you'll notice that I've given you 3 out of 4 possible scenarios: &lt;span style="color:green;"&gt;+courage&lt;/span&gt; —&amp;gt; &lt;span style="color:green;"&gt;success&lt;/span&gt;, &lt;span style="color:red;"&gt;-courage&lt;/span&gt; —&amp;gt; &lt;span style="color:red;"&gt;failure&lt;/span&gt;, and &lt;span style="color:green;"&gt;+courage&lt;/span&gt; —&amp;gt; &lt;span style="color:red;"&gt;failure&lt;/span&gt;.

There's no 4th story, because &lt;span style="color:red;"&gt;-courage&lt;/span&gt; —&amp;gt; &lt;span style="color:green;"&gt;success&lt;/span&gt; is about as rare as frog fur; it only happens by random mutation.

If you want a chance to change the world, you need courage; listen to fear, and it's not hard to predict the outcome.

&lt;strong&gt;The moral, part 2&lt;/strong&gt;

Most of the failures we fear are not all that catastrophic. I'm still kicking.

&lt;strong&gt;The moral, part 3&lt;/strong&gt;

It's worth noting that I have no regrets about my "failure" where I took a risk. It didn't work out. Like Edison, I now know another way not to invent a lightbulb. I'm good with that. As &lt;a title="hierarchy of failures" href="http://sethgodin.typepad.com/seths_blog/2013/05/a-hierarchy-of-failure-from-brave-to-shameful.html" target="_blank"&gt;Seth Godin says&lt;/a&gt;, even mistakes can pay off in the long run.

On the other hand, I still bore anybody who'll listen, with my harangues about head-in-the-sand thinking in the backup market.

&lt;strong&gt;Challenge&lt;/strong&gt;

In Shakespeare's &lt;em&gt;Henry IV, Part I&lt;/em&gt;, Falstaff claims that discretion is the better part of valor--or in other words, it pays to be cautious.

This is certainly true. Sometimes. Mafatu was probably wise not to tangle with tiger sharks every day.

However, Falstaff is rationalizing. The audience knows it, and so does he.

I'm going to make a conscious effort to notice when I'm listening to fear more than I should, and I'm going to try to be more courageous when it matters.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Find a moment when courage counts, and seize it. Celebrate the success of the commitment, regardless of the outcome.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.slaw.ca/2013/05/22/practicing-courage/" target="_blank"&gt;Practicing Courage&lt;/a&gt; (slaw.ca)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="https://plus.google.com/110981030061712822816/posts/KaSKeg4vQtz" target="_blank"&gt;Notes from the Mystery Machine Bus&lt;/a&gt; (Steve Yegge, Google +)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>1163</ns0:post_id>
  <ns0:post_date>2013-05-31 08:33:12</ns0:post_date>
  <ns0:post_name>courage-counts</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="backup">backup</category>
  <category domain="post_tag" nicename="cannibalism">cannibalism</category>
  <category domain="post_tag" nicename="caution">caution</category>
  <category domain="post_tag" nicename="cloud">cloud</category>
  <category domain="post_tag" nicename="consensus">consensus</category>
  <category domain="post_tag" nicename="courage">courage</category>
  <category domain="post_tag" nicename="edison">edison</category>
  <category domain="post_tag" nicename="failure">failure</category>
  <category domain="post_tag" nicename="fear">fear</category>
  <category domain="post_tag" nicename="luck">luck</category>
  <category domain="category" nicename="mistakes">Mistakes</category>
  <category domain="post_tag" nicename="mistakes">mistakes</category>
  <category domain="post_tag" nicename="refactoring">refactoring</category>
  <category domain="post_tag" nicename="rewrite">rewrite</category>
  <category domain="category" nicename="role-models">Role Models</category>
  <category domain="post_tag" nicename="saas">SaaS</category>
  <category domain="post_tag" nicename="shakespeare">Shakespeare</category>
  <category domain="post_tag" nicename="shark">shark</category>
  <category domain="post_tag" nicename="startups">startups</category>
  <category domain="post_tag" nicename="success">success</category>
  <category domain="post_tag" nicename="virtualization">virtualization</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:60:"http://farm4.staticflickr.com/3134/2888919972_b79a8432ff.jpg";s:6:"images";a:1:{s:60:"http://farm4.staticflickr.com/3134/2888919972_b79a8432ff.jpg";a:6:{s:8:"file_url";s:60:"http://farm4.staticflickr.com/3134/2888919972_b79a8432ff.jpg";s:5:"width";i:500;s:6:"height";i:332;s:4:"type";s:5:"image";s:4:"area";i:166000;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2013-05-31 19:51:06";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>4882</ns0:comment_id>
    <ns0:comment_author>Why you should use an IDE instead of vim or emacs | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/05/13/why-you-should-use-an-ide-instead-of-vim-or-emacs/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-13 10:16:38</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] IDE-land for a while; I think they&amp;#8217;d find it easier to generate momentum on unit tests, to eliminate fear of ambitious refactors, and to see their way past nagging tech debt. However, bigger concerns have [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1214</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-05-31 10:48:26</ns0:comment_date>
    <ns0:comment_content>When I first read Dune as a teenager, I thought of the Bene Gesserit litany as pseudo martial arts mumbo jumbo that added some nice artistic flair to the milieu of the novel.

Since then I've decided that it's quite profound--maybe Herbert's great philosophical contribution.

Thanks for reminding me about it; I have something else that I need to print out and put on my door for inspiration.

BTW, your post on fear at http://dld.me/fear/ is awesome!</ns0:comment_content>
    <ns0:comment_parent>1210</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1211</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2013-05-31 09:56:40</ns0:comment_date>
    <ns0:comment_content>Again spot on the mark.  Been there done that many times (fear and courage both). As I near retirement (13 years from now), I am more able to push on with MY ideas on things, backed up with some new ideas I read in a new book or a blog along with some ideas from here.

You second witness many things I come up with as well.

* Courage is being afraid but saddling up anyway . - John Wayne</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1213</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-05-31 10:44:49</ns0:comment_date>
    <ns0:comment_content>That's an awesome quote from the Duke! Thanks for sharing.</ns0:comment_content>
    <ns0:comment_parent>1211</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>1210</ns0:comment_id>
    <ns0:comment_author>trevharmon</ns0:comment_author>
    <ns0:comment_author_email>trevharmon@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2013-05-31 09:11:27</ns0:comment_date>
    <ns0:comment_content>Well said, Daniel. It is much better to succeed or fail in spectacular fashion for one's passion than to linger in the soul-sucking mediocrity. As Henry David Thoreau wrote in Walden, "The mass of men lead lives of quiet desperation. What is called resignation is confirmed desperation." And, I agree with you, it is scary... really scary sometimes. That's why I appreciated you calling out the fact you're still kicking even after failures.

I must not fear.
Fear is the mind-killer.
Fear is the little-death that brings total obliteration.
I will face my fear.
I will permit it to pass over me and through me.
And when it has gone past I will turn the inner eye to see its path.
Where the fear has gone there will be nothing.
Only I will remain.

- Bene Gesserit Litany Against Fear - From Frank Herbert's Dune Book Series</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>44057411</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4086</ns0:comment_id>
    <ns0:comment_author>How to make a const-correct codebase in 4300 easy steps | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/03/25/how-to-make-a-const-correct-codebase-in-4300-easy-steps/</ns0:comment_author_url>
    <ns0:comment_date>2014-03-25 11:44:36</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] the other hand, courage counts. A festering problem finally got fixed, because I was crazy enough to [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16813</ns0:comment_id>
    <ns0:comment_author>Are We Smart Enough to Use Kind Words? | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/10/06/use-kind-words/</ns0:comment_author_url>
    <ns0:comment_date>2015-10-06 16:35:53</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] by trial and error. Part of &amp;#8220;tech progress&amp;#8221; is raising the experience, confidence, and courage of those around us; in doing so, we learn more ourselves, and we are usually repaid in spades. Over [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>2 Surprising Truths About The Iron Triangle</title>
  <link>http://codecraft.co/2013/07/01/2-surprising-truths-about-the-iron-triangle/</link>
  <pubDate>Mon, 01 Jul 2013 22:38:45 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1197</guid>
  <ns2:encoded>Project management 101 teaches that, when managing outcomes, you cannot alter scope, schedule, or cost (resources) without affecting at least one of the other dimensions. This interrelationship is known colloquially as the "Iron Triangle." Sometimes we put "quality" in the middle to show how it is unavoidably shaped by choices on the other constraints:

[caption id="" align="aligncenter" width="429"]&lt;a href="http://en.wikipedia.org/wiki/Project_triangle"&gt;&lt;img class=" " alt="" src="http://upload.wikimedia.org/wikipedia/commons/a/a6/The_triad_constraints.jpg" width="429" height="313" /&gt;&lt;/a&gt; Image credit: John M. Kennedy T (Wikimedia Commons)[/caption]

Lots of Dilbert cartoons derive their humor from the unwillingness of the Pointy Haired Boss (PHB) to acknowledge this relationship. These cartoons are funny because they are so eerily similar to conversations we've all had, where someone wants us to deliver ultra-high quality, on a limited budget, in an aggressive timeframe, with a boatload of features.

It ain't gonna happen, folks. We engineers are clever, but we're not magicians. Triangles don't work that way.

You've learned some good principles when you can articulate this geometry lesson.

But there's more.

&lt;strong&gt;Truth 1: Scope is a trickster&lt;/strong&gt;

Many well meaning managers and executives understand this trilemma, and they distance themselves from Dilbert's PHB by acknowledging that something has to give. "I pick scope," they'll say. "We absolutely must have the product before the summer doldrums, and we only have &lt;em&gt;X&lt;/em&gt; dollars to spend, but I'm willing to sacrifice a few features."

This can give product management heartburn--feature sets sometimes hang together in ways that make slicing and dicing dangerous. An airplane that's good at takeoffs but that can't land is unlikely to be a commercial success. Good product managers will point this out, and they'll be right.

&lt;!--more--&gt;Can feature-cutting be done judiciously? Yes. If you're careful. But that's &lt;em&gt;still&lt;/em&gt; not the whole story.

Most software projects are not building version 1.0. This means that what you're releasing at the end of the project is your new features PLUS all the old features that you already had. On mature products, the ratio of old to new features may be enormous--easily 100:1. I've worked on software that was 15 years old, had millions of lines of code in the codebase, and represented hundreds or thousands of man-years of investment. When you pull 1 or 2 features out of the next release in that kind of a codebase, how much are you really saving?

The PHB is foolishly optimistic. "We have 6 major initiatives slated for the next release, and I'm cancelling 2. We just reduced scope by 33%."

Well, sorry, Charlie. The trickster got the better of you.

&lt;strong&gt;Elastic quality&lt;/strong&gt;

What usually happens in these scenarios, if engineering is not able to articulate the carrying cost of old features in a way that execs grok, is that cost and schedule remain fixed, and the scope vertex shifts much less than execs believe. Pressure is not alleviated; instead, it steadily mounts. Since all vertices are fixed, the nice straight lines that define the sides of the triangle begin to bow inward, squeezing the area available to quality. Result: an on-time, on-budget release, with the constrained feature set, but far less quality than anybody wanted. Nobody is happy.

If the execs, PMs, customers, and engineers in your orbit talk regularly about quality, but you can't seem to make headway, I predict that this phenomenon is at least partly to blame.

The problem of sacrificing quality when we meant to reduce scope is so ubiquitous that sometimes the iron triangle is formulated like this:

[caption id="" align="aligncenter" width="400"]&lt;a href="http://en.wikipedia.org/wiki/File:Project-triangle.svg"&gt;&lt;img class=" " alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/fc/Project-triangle.svg/500px-Project-triangle.svg.png" width="400" height="393" /&gt;&lt;/a&gt; cosmocatalano (Wikimedia Commons)[/caption]

Fast. Good. Cheap. Pick any 2.

In this world view, scope is not a lever, and the tradeoffs with quality are explicit.

If you've learned truth 1, then you're probably an &lt;a title="Earned Pragmatism" href="http://codecraft.co/2013/01/18/earned-pragmatism/"&gt;industry veteran with battle scars&lt;/a&gt;, and you're the kind of person I want on my team when we do project planning.

But there's more.

&lt;strong&gt;Truth 2: Quality vs. speed is a false dichotomy&lt;/strong&gt;

This assertion is bound to raise some eyebrows. In fact, I nearly got in a shouting match about it with a brilliant coworker who has lots of wisdom. Think of the TV show MASH. How many times does Hawkeye lament that he can't save the lives of the wounded because he doesn't have the time to operate properly? How often do we see young soldiers die because he's too tired, or has to improvise solutions because there's no time to requisition proper equipment?

Trying to do too much, with too little, is a recipe for quality failure. No question.

But.

Flip the scenario on its head for a minute. Focus less on the quality of Hawkeye's work, and more on the quality of the &lt;em&gt;patients&lt;/em&gt;. Is it faster to operate on lightly wounded soldiers who were physically healthy before their injury, or on those who are riddled with shrapnel, and went into battle with a bad heart, diabetes, kidney failure, tuberculosis, and cancer?

Now translate. Think of a codebase like a patient, and an engineer like a doctor.

Can engineers get more done in a high-quality codebase, or a low-quality one? I claim the former, &lt;em&gt;even if the high-quality codebase disallows kludges that look like they save time in the short run.&lt;/em&gt;

I have personally worked in codebases that are modular, well encapsulated, thoroughly unit tested, and automated to the hilt. And I have worked in codebases that were just the opposite. There is no question where an engineer is more productive. The comparison is not even close. The speed with which you can reproduce, isolate, and fix a bug is greater in high-quality code. Adding incremental features can be orders of magnitude faster. Altering architecture to reinvent functionality is doable in such a codebase, and virtually impossible in spaghetti code.

&lt;strong&gt;But can we handle the truth?&lt;/strong&gt;

Part of the reason why my colleague had strong emotion about this claim is because he'd been burned by the facile belief that you can hold quality constant (or increase it) as you push relentlessly for speed. That belief is dangerous. If a Dilbertesque PHB is told that he can have both, misery will ensue. That's not opinion--it's historical fact, as most of us can witness.

That way lies madness.

&lt;strong&gt;Quality yields speed&lt;/strong&gt;

In a way, I'm suggesting the opposite strategy: if you push on quality &lt;em&gt;in the right way&lt;/em&gt;, speed will accrue organically. Not at first, &lt;em&gt;especially&lt;/em&gt; if you're starting with an unhealthy codebase. Not with every checkin; sometimes you have to take one step back to take two steps forward. But over time, if you continue to invest in quality, your patient will get more healthy, and you will see your speed go up, not down. The &lt;a title="Why Mental Models Matter" href="http://codecraft.co/2012/11/05/why-mental-models-matter/"&gt;mental models&lt;/a&gt; of your engineers and the &lt;a title="Users Aren’t The Only People In Your Software" href="http://codecraft.co/2012/09/04/users-arent-the-only-people-in-your-software/"&gt;entire value chain&lt;/a&gt; will align. You'll create virtuous cycles that perpetuate the right kinds of &lt;a title="Good Code Is Balanced" href="http://codecraft.co/2012/08/27/good-code-is-balanced/"&gt;tradeoffs&lt;/a&gt; for &lt;a title="3 Commandments of Performance Optimization" href="http://codecraft.co/2013/01/08/3-commandments-of-performance-optimization/"&gt;performance&lt;/a&gt;, &lt;a title="The Scaling Fallacy" href="http://codecraft.co/2012/12/19/the-scaling-fallacy/"&gt;scalability&lt;/a&gt;, and &lt;a title="Good fences make good neighbors" href="http://codecraft.co/2013/05/15/good-fences-make-good-neighbors/"&gt;encapsulation&lt;/a&gt;.

There are limits, of course. Hawkeye might be amazingly fast with mostly healthy patients, but he'll never operate on a thousand patients an hour.

Within those limits, though, it's amazing what quality can do for you.

In order to pursue this strategy, you have to get management to take their foot off the gas pedal and let you build things right. That can be a difficult (maybe even impossible) task. I'm not claiming it's easy. I'm not offering a recipe to convince them (though &lt;a title="Roland Whatcott: Manage momentum." href="http://codecraft.co/2012/09/21/roland-whatcott-manage-momentum/"&gt;momentum&lt;/a&gt; will probably be an ingredient). I'm just saying it's worth the effort, because there is a happy land on the other side of the rainbow where you get better and faster at the same time.

I've been there.
&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.codypowell.com/taods/2013/06/tragedy-of-the-common-library.html" target="_blank"&gt;Tragedy of the Common Library&lt;/a&gt; (codypowell.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://thinkrelevance.com/blog/2013/05/21/entropy-and-evolution-of-a-codebase" target="_blank"&gt;Entropy and Evolution of a Codebase&lt;/a&gt; (thinkrelevance.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://agile.dzone.com/articles/pair-programming-0" target="_blank"&gt;On Pair Programming&lt;/a&gt; (agile.dzone.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>1197</ns0:post_id>
  <ns0:post_date>2013-07-01 16:38:45</ns0:post_date>
  <ns0:post_name>2-surprising-truths-about-the-iron-triangle</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="budget">budget</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="encapsulation">encapsulation</category>
  <category domain="post_tag" nicename="mental-models">mental models</category>
  <category domain="category" nicename="mistakes">Mistakes</category>
  <category domain="post_tag" nicename="momentum">momentum</category>
  <category domain="post_tag" nicename="performance">performance</category>
  <category domain="post_tag" nicename="product-management">product management</category>
  <category domain="post_tag" nicename="project-management">project management</category>
  <category domain="post_tag" nicename="quality">quality</category>
  <category domain="post_tag" nicename="resources">resources</category>
  <category domain="post_tag" nicename="scalability">scalability</category>
  <category domain="post_tag" nicename="schedule">schedule</category>
  <category domain="post_tag" nicename="scope">scope</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_zemanta_has_recommendations</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:2:{s:2:"fb";a:1:{i:1511184;i:424;}s:2:"wp";a:1:{i:0;i:74;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>2383</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2013-07-22 13:08:15</ns0:comment_date>
    <ns0:comment_content>great insight, and codebases do have a health metric - bad or good.
We are the "doctors" who work to better that metric - or do something else when things look bad

dougbert</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2258</ns0:comment_id>
    <ns0:comment_author>Gene Hughson</ns0:comment_author>
    <ns0:comment_author_email>genehughson@hotmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://genehughson.wordpress.com</ns0:comment_author_url>
    <ns0:comment_date>2013-07-02 10:48:36</ns0:comment_date>
    <ns0:comment_content>Dan,

Excellent analogy re: the codebase is like a doctor's patient.  One of the best reasons for managing technical debt is to avoid the situation where the patient is too fragile to withstand the surgery it needs to live.

Great post.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>28036074</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2257</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-07-02 09:02:20</ns0:comment_date>
    <ns0:comment_content>Don: Thanks for a meaty response. I had not heard of KANO before, so your comments led me to some interesting study. I really like distinguishing between BASIC, STANDARD, and EXCITING. This makes explicit a set of tradeoffs that I've usually seen being managed entirely by intuition.

When are we going to see a book with all your accumulated wisdom? :-)</ns0:comment_content>
    <ns0:comment_parent>2256</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2256</ns0:comment_id>
    <ns0:comment_author>Don</ns0:comment_author>
    <ns0:comment_author_email>don_kleinschnitz@hotmail.com</ns0:comment_author_email>
    <ns0:comment_date>2013-07-02 07:01:22</ns0:comment_date>
    <ns0:comment_content>You struck a cord :)
I have been using the iron triangle with teams for years successfully and I think it works but there are alot of misconceptions about its use in management especially as it relates to quality (Q).

In fact some agile seekers look for speed from agile and I think speed is not the main focus, cadence, velocity and value is.  Optimizing the area under the time and value curve is the management challenge.

The core idea is to deliver the most valuable payload in each increment for the capacity that the team has been given. The increments timing is based on the minimal impactful payload delivered at an estimated velocity and capacity. My experience is that in most cases it is better to deliver a small valuable payload on time than a killer payload late. My experience also is that teams are late because they do not have the capacity to perform the planned work within the time envelope when all unknows ar finially realized. That is why you start with a balanced triangle and keep it that way, sprint to sprint until you deliver. When the triangle balance is communicated transparently it allows management to participate in making critical decisions, like to add resources or to change the arrival time vs loosing function. It also drives an appreciation for what the development team is facing when unknowns arrive.

Now Quality? This has bothered me for some time in that I always assumed that Q, the center of the triangle was held constant but that seemed more thoretical than practice. The key to adding Q into the equation lies in the KANO model. It outlines NPD quality (which is different than the quality that manufacturing provides) in three dimensions BASIC-STANDARD-EXCITING.
The constant part is "BASIC" and that cannot be traded off. When you ship below BASIC, customers stop buying and talking with you. The core design process must have artifacts that get to BASIC within the iron triangle constraints. That means there is standard work on every backlog that defines BASIC Q and BASIC Q eclipses all other tradeoffs. Now it gets complex (as NPD is). The remaining two dimensions (standard and exciting) can be traded for each other. They are chosen based on the competitions function (standard) and functions that eclipse the competition (exciting). Explaining these tradeoffos would require alot of posting realestate so I will stop here. Suffice it to say that that the balance of STANDARD + EXCITING while not trading off BASIC is the key to a balanced release using the triangle.

Lastly how do you plan and communicate this balance. The secret is "DONENESS". In agile DONENESS=Q! Part of every releases plan should include identifying DONENESS. This is where BASIC and any other "you arent done until this is done" criterea is documented. When you add these to the backog of STANDARD and EXCITING tradeoffs you have the release plan and the "TOTALLY DONE" criterea. This is the intersection of NPD-Q and the triangle.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2261</ns0:comment_id>
    <ns0:comment_author>Gene Hughson</ns0:comment_author>
    <ns0:comment_author_email>genehughson@hotmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://genehughson.wordpress.com</ns0:comment_author_url>
    <ns0:comment_date>2013-07-03 10:14:13</ns0:comment_date>
    <ns0:comment_content>I agree...in fact, in one of my posts I've discussed platform rot (e.g. not keeping up with .Net, OS, and SQL Server versions) as an example of technical debt.  Sometimes debt is justified to reach a goal, but if it's not managed, chances are it will come back to haunt you.</ns0:comment_content>
    <ns0:comment_parent>2259</ns0:comment_parent>
    <ns0:comment_user_id>28036074</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2259</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-07-02 14:56:36</ns0:comment_date>
    <ns0:comment_content>Good connection, Gene. I heard someone yesterday try to define "technical debt" primarily in terms of unimplemented features. I think that's too narrow. No matter how complete the feature matrix, you're in debt if your codebase is unhealthy.</ns0:comment_content>
    <ns0:comment_parent>2258</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2268</ns0:comment_id>
    <ns0:comment_author>donkleinschnitz</ns0:comment_author>
    <ns0:comment_author_email>don_kleinschnitz@hotmail.com</ns0:comment_author_email>
    <ns0:comment_date>2013-07-06 07:37:27</ns0:comment_date>
    <ns0:comment_content>Sorry but I don't buy this death ...... I would also like to know what practical tool replaced it? I have witnessed the improper use of this tool and in fact the link provided to the PMI and the comments and dialog seem to prove such. For example, this is not a strategic planning tool it is a tool that is used to adjust sprint payloads based on a teams velocity as it works down a backlog. Its the only "reality check" in the agile process.

Perhaps the problem is in the missuse of this tool and that is its application as a project management tool, which it is not. This tool is used by architects, product owners and designers to make design tradeoffs based on balancing work capacity, function and time. I can't imagine how a scrum team rationally adjusts its payload without such a tool used at each increment review.

Is it the old way of just hoping that there is enough capacity or guessing what is needed to deliver some content on some optomistic date, then punishing developers when things didn't happen like project management imagined. How about we return to time carding and track every move a software developer makes to see how productive she is ...... then there is PERT planning, we could return to critical path planning and relearn that in NPD everything is new and uncertain and underfunded and changing ...... and....

I would like to see some clarity around what has replaced the triangle, in the mean time I wll continue to coach my 300 scrum teams on its use?</ns0:comment_content>
    <ns0:comment_parent>2267</ns0:comment_parent>
    <ns0:comment_user_id>1604283</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2264</ns0:comment_id>
    <ns0:comment_author>PM Hut</ns0:comment_author>
    <ns0:comment_author_email>pmhut2@itoctopus.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.pmhut.com</ns0:comment_author_url>
    <ns0:comment_date>2013-07-05 09:13:36</ns0:comment_date>
    <ns0:comment_content>Hi Daniel,

The iron triangle has been proclaimed dead years ago. See: http://www.pmhut.com/the-death-of-the-project-management-triangle

It was killed by PMBOK 4.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2267</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-07-05 22:44:12</ns0:comment_date>
    <ns0:comment_content>Interesting. I knew that there were many competing theories, but not that the discipline believes it is "dead." I still think it's a useful source of insight.

Thanks for the link to the blog post; very helpful.</ns0:comment_content>
    <ns0:comment_parent>2264</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
</item>
<item>
  <title>Programmers: learn how to "cloudify"</title>
  <link>http://codecraft.co/2013/07/23/programmers-learn-how-to-cloudify/</link>
  <pubDate>Tue, 23 Jul 2013 17:41:40 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1215</guid>
  <ns2:encoded>The blogosphere has plenty to say about cloud computing, but most content targets the business, CIO, or IT crowds. Information exists for developers who want to produce software friendly to cloud computing, but it's more scattered, it's vendor-centric, and it doesn't match the SEO profile that obsesses much of the industry. As a result, I believe that many developers have only hazy ideas about how they can leverage the power of the cloud to provide radical improvements in scale, responsiveness, and connectivity for their customers.

This ought to change. Cloud computing isn't just interesting to datacenter managers; it enables many new technological strategies. Cloud-savvy engineering can boldly go where no software has gone before—if we're smart enough to take it there.

[caption id="" align="aligncenter" width="480"]&lt;img class=" " alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Anvil_shaped_cumulus_panorama_edit_crop.jpg/800px-Anvil_shaped_cumulus_panorama_edit_crop.jpg" width="480" height="197" /&gt; Clouds on the horizon... Photo credit: &lt;a href="http://www.flagstaffotos.com.au/" target="_top"&gt;fir0002 | flagstaffotos.com.au&lt;/a&gt;[/caption]

On my company's website, I've begun a new series of blog posts about how to "cloudify" your code and designs. Read the &lt;a title="&amp;quot;Cloudify&amp;quot; series at Adaptive Computing" href="http://www.adaptivecomputing.com/blog-cloud/how-to-cloudify-your-software-part-1-enders-homework/" target="_blank"&gt;inaugural post&lt;/a&gt;, and check back on Fridays for new installments in &lt;a title="cloudify series" href="http://codecraft.co/category/cloudify"&gt;the series&lt;/a&gt;. I'll be making connections back to concepts here on codecraft, such as what &lt;a title="My First Tangle With the Tower of Babel" href="http://codecraft.co/2013/04/26/my-first-tangle-with-the-tower-of-babel/"&gt;the programming language of the future&lt;/a&gt; ought to look like, how to &lt;a title="Good fences make good neighbors" href="http://codecraft.co/2013/05/15/good-fences-make-good-neighbors/"&gt;encapsulate&lt;/a&gt; for cloud, and so forth.

I believe that a competence with cloud--cloud-oriented programming, if you will--will be a checkbox on future tech resumes.</ns2:encoded>
  <ns0:post_id>1215</ns0:post_id>
  <ns0:post_date>2013-07-23 11:41:40</ns0:post_date>
  <ns0:post_name>programmers-learn-how-to-cloudify</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="adaptive-computing">adaptive computing</category>
  <category domain="post_tag" nicename="cloud">cloud</category>
  <category domain="post_tag" nicename="cloud-computing">cloud computing</category>
  <category domain="post_tag" nicename="cloudify">cloudify</category>
  <category domain="post_tag" nicename="connectivity">connectivity</category>
  <category domain="post_tag" nicename="datacenter">datacenter</category>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <category domain="post_tag" nicename="scaling">scaling</category>
  <category domain="post_tag" nicename="seo">SEO</category>
  <category domain="category" nicename="software-architecture">Software Architecture</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:150:"http://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Anvil_shaped_cumulus_panorama_edit_crop.jpg/800px-Anvil_shaped_cumulus_panorama_edit_crop.jpg";s:6:"images";a:1:{s:150:"http://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Anvil_shaped_cumulus_panorama_edit_crop.jpg/800px-Anvil_shaped_cumulus_panorama_edit_crop.jpg";a:6:{s:8:"file_url";s:150:"http://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Anvil_shaped_cumulus_panorama_edit_crop.jpg/800px-Anvil_shaped_cumulus_panorama_edit_crop.jpg";s:5:"width";i:800;s:6:"height";i:329;s:4:"type";s:5:"image";s:4:"area";i:263200;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2013-07-26 17:22:14";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>2448</ns0:comment_id>
    <ns0:comment_author>Convoys as a model for distributed architectures | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/07/26/convoys-as-a-model-for-distributed-architectures/</ns0:comment_author_url>
    <ns0:comment_date>2013-07-26 11:20:43</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] tuned for further installments of this series each Friday. As I said in Part 1, I believe that a competence with cloud&amp;#8211;cloud-oriented programming, if you will&amp;#8211;will be [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2500</ns0:comment_id>
    <ns0:comment_author>What are your software&amp;#8217;s vital signs? | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/08/11/what-are-your-softwares-vital-signs/</ns0:comment_author_url>
    <ns0:comment_date>2013-08-11 18:31:24</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] tuned for further installments of this series each Friday. As I said in Part 1, I believe that a competence with cloud–cloud-oriented programming, if you will–will be a [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Features are not chunks of code</title>
  <link>http://codecraft.co/2013/07/25/features-are-not-chunks-of-code/</link>
  <pubDate>Thu, 25 Jul 2013 17:18:24 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1221</guid>
  <ns2:encoded>Before the industrial age, "features" were noteworthy aspects of a face or a geography: a patch of color, abundant wrinkles, a scar... The human brain is stunningly good at identifying and comparing such features--perhaps because that ability has been central to our nurture as children, our bonding into family units, and our survival as a species.

&lt;img class="size-full wp-image-6794 aligncenter" src="https://codecraft.co/wp-content/uploads/2013/07/danie-franco-o1pkm7-8ah4-unsplash.jpg" alt="danie-franco-o1PKM7-8AH4-unsplash" width="5731" height="3821" /&gt;
&lt;p style="text-align:center;"&gt;Photo by &lt;a href="https://unsplash.com/@dani_franco?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Danie Franco&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/face-wrinkles-scars?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
When we want to say what a face looks like, we describe its features. They are an entrée into experience with it.

At the dawn of the computer age, the advertising and publishing industries were already talking about how products--or aspects of them--could be "featured" in media. Highlighted characteristics were called "features", and this metaphor transferred seamlessly into digital language. Software product managers now traffic in "features" and "feature sets."

We use the term so comfortably that we sometimes forget what it has to teach us.

&lt;!--more--&gt;I have met software pros--brilliant ones!--who think features and coded output are good functional equivalents. They think that if they embody a capability in a function or a class or a command-line switch, and check it in, they've added a feature. And if they undo their checkin, the feature is gone. That's the way they talk about it.

There is a certain truth to this simple view. But it's a dangerous simplification, and the roots of the metaphor tell us why.

&lt;strong&gt;Layers and regions and teamwork&lt;/strong&gt;

First of all, no facial feature is simple. A nose has internal structure--bone and cartilage, skin and capillaries and nerves. It has layers and regions. It demands a certain context. Likewise, a software feature is more than code; it includes documentation, an attendant set of upgrade and forward/backward compatibility assumptions, visual and perhaps auditory manifestations, a test matrix, security implications, localization work, perhaps some install tweaks or an API with versioning constraints.

Anybody who tells you they can add a new feature in a "mere &lt;em&gt;X&lt;/em&gt; hours" has forgotten this.

I cannot count the number of times I've heard the naive assertion that a feature is done because the coding is complete. I periodically fall into this trap myself. But it remains a lie, no matter how often it's repeated.

In most production codebases, smart coders don't create codebases. &lt;a title="Humility" href="http://codecraft.co/2012/10/01/humility/"&gt;Teams do&lt;/a&gt;. That takes time and coordination from multiple disciplines.

&lt;strong&gt;Pieces and gestalt&lt;/strong&gt;

Secondly, facial features are experienced together, not in isolation. The portion of the face that constitutes an eyebrow is hard to define without speaking of eyes, lids, forehead, and temples. Likewise, any given feature in a software package relies on other features (can't add a command-line switch unless your app already has a CLI), and the presence or absence of a feature alters the whole. This means that adding and subtracting features is not nearly as surgical as we sometimes pretend. If we added a dialog to edit widgets, but the middleware that supports those edits has a fatal flaw, have we really added a feature? Or do we have a nose that's only half-attached to the face behind it? If we subtract a "little" feature but the UX goes from wonderful to abominable, have we done more damage than we realized?

&lt;strong&gt;Tempus fugit&lt;/strong&gt;

Thirdly, facial features evolve over time. The DNA code that tells a body how to build a nose gets expressed pretty early in a human's lifetime, and we may be able to distinguish some uniqueness of the code from the outset. Maybe big noses show up early. :-) But that code has only built one version of the nose by babyhood; all the other versions of that same nose are still waiting to manifest in the future.

What this means, in practical terms, is that, even if you can code a feature in &lt;em&gt;X&lt;/em&gt; hours, and even if it's a simple feature with unusually minor demands on the rest of a team, its cost is &lt;strong&gt;never&lt;/strong&gt; &lt;em&gt;X&lt;/em&gt; hours. All features have a carrying cost, which is the ongoing expense of keeping the feature alive and connected to the blood supply on the rest of the face, through all future incarnations. In this sense, features are never "done." Sticking our heads in the sand to avoid this truth is a surefire way to &lt;a title="Paying Off Technical Debt" href="http://codecraft.co/2012/10/14/paying-off-technical-debt/"&gt;incur tech debt&lt;/a&gt;, and not accounting for it with each release is a &lt;a title="Coping With Organizational Alzheimers" href="http://codecraft.co/2012/10/12/coping-with-organizational-alzheimers/"&gt;sin of omission&lt;/a&gt;.

&lt;strong&gt;Three eyes&lt;/strong&gt;

A final lesson of the feature metaphor is that it's possible to have too much of a good thing. Two beautiful eyes might lure a mate; three, not so much. &lt;a title="Good Code Is Balanced" href="http://codecraft.co/2012/08/27/good-code-is-balanced/"&gt;Balance and proportion matter&lt;/a&gt;.

In software, we often make the mistake of adding new features when we ought to be improving the ones we have, or even subtracting a scar here or there.

&lt;strong&gt;Summary&lt;/strong&gt;

Features are great. I've spent most of my career building them. They sell product. And coders should be proud when they execute quickly to contribute code for features. But let's be a little more &lt;a title="Lynn Bendixsen: Listen." href="http://codecraft.co/2012/10/02/lynn-bendixsen-listen/"&gt;humble&lt;/a&gt;, patient, and team-oriented when we think about them. Let's recognize their complexity. And let's add them selectively, understanding their &lt;a title="Ken Ebert: Kill three birds." href="http://codecraft.co/2012/09/19/ken-ebert-kill-three-birds/"&gt;value in the overall scheme of things&lt;/a&gt;, their ongoing cost, and the commitments they imply.

That'll put more smiles on our faces.</ns2:encoded>
  <ns0:post_id>1221</ns0:post_id>
  <ns0:post_date>2013-07-25 11:18:24</ns0:post_date>
  <ns0:post_name>features-are-not-chunks-of-code</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="api">API</category>
  <category domain="post_tag" nicename="balance">balance</category>
  <category domain="post_tag" nicename="checkin">checkin</category>
  <category domain="post_tag" nicename="cli">CLI</category>
  <category domain="post_tag" nicename="complexity">complexity</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="dna">DNA</category>
  <category domain="post_tag" nicename="documentation">documentation</category>
  <category domain="post_tag" nicename="faces">faces</category>
  <category domain="post_tag" nicename="features">features</category>
  <category domain="post_tag" nicename="humility">humility</category>
  <category domain="category" nicename="mistakes">Mistakes</category>
  <category domain="post_tag" nicename="qa">QA</category>
  <category domain="post_tag" nicename="switch">switch</category>
  <category domain="post_tag" nicename="teamwork">teamwork</category>
  <category domain="post_tag" nicename="upgrade">upgrade</category>
  <category domain="post_tag" nicename="versioning">versioning</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_job_id</ns0:meta_key>
    <ns0:meta_value>65080319802</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_last_editor_used_jetpack</ns0:meta_key>
    <ns0:meta_value>block-editor</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>4876</ns0:comment_id>
    <ns0:comment_author>Why you should use an IDE instead of vim or emacs | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/05/13/why-you-should-use-an-ide-instead-of-vim-or-emacs/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-13 10:16:19</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] that a text-editor-centric worldview is a little too comfortable thinking of every problem as a series of discrete editing tasks. Integration details fall through the cracks; mental models remain simplistic. After all, the tool [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14321</ns0:comment_id>
    <ns0:comment_author>&amp;#8220;Rockstar Developers&amp;#8221; are a dangerous myth | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/03/04/rockstars/</ns0:comment_author_url>
    <ns0:comment_date>2015-03-05 20:15:26</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] 1. Making a valuable software product is way more than writing clever code. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Convoys as a model for distributed architectures</title>
  <link>http://codecraft.co/2013/07/26/convoys-as-a-model-for-distributed-architectures/</link>
  <pubDate>Fri, 26 Jul 2013 17:20:34 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1241</guid>
  <ns2:encoded>It occurred to me this past week that convoys--especially the kind where truckers form and manage ad hoc communities through chatter on CB radio--are an excellent model for the sort of distributed software architecture that cloud-native software demands. In part 2 of my &lt;a title="cloudify series" href="http://codecraft.co/category/cloudify"&gt;series of posts about how to "cloudify"&lt;/a&gt; your code and designs on &lt;a title="Adaptive Computing" href="http://www.adaptivecomputing.com" target="_blank"&gt;Adaptive Computing's website&lt;/a&gt;, I discuss the lessons that programmers ought to absorb from their role models in big rigs. Head over there and &lt;a title="cloudify with CB radio" href="http://www.adaptivecomputing.com/blog-cloud/how-to-cloudify-your-software-part-2-get-out-your-cb/" target="_blank"&gt;check it out&lt;/a&gt;.

[caption id="" align="aligncenter" width="500"]&lt;a href="http://www.adaptivecomputing.com/blog-cloud/how-to-cloudify-your-software-part-2-get-out-your-cb/"&gt;&lt;img class=" " alt="" src="http://farm9.staticflickr.com/8171/8061740015_fd5a9d82d5.jpg" width="500" height="333" /&gt;&lt;/a&gt; Convoys require frequent, real-time, adaptive coordination by many independent actors. Photo credit: Sangudo (Flickr)[/caption]

Stay tuned for further installments of &lt;a title="Cloudify software designs" href="http://codecraft.co/category/cloudify/"&gt;this series&lt;/a&gt; each Friday. As I said in &lt;a title="Programmers: learn how to “cloudify”" href="http://codecraft.co/2013/07/23/programmers-learn-how-to-cloudify/"&gt;Part 1&lt;/a&gt;, I believe that a competence with cloud--cloud-oriented programming, if you will--will be a checkbox on future tech resumes.</ns2:encoded>
  <ns0:post_id>1241</ns0:post_id>
  <ns0:post_date>2013-07-26 11:20:34</ns0:post_date>
  <ns0:post_name>convoys-as-a-model-for-distributed-architectures</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="cloudify">cloudify</category>
  <category domain="post_tag" nicename="communication">communication</category>
  <category domain="post_tag" nicename="convoys">convoys</category>
  <category domain="post_tag" nicename="distributed-architecture">distributed architecture</category>
  <category domain="post_tag" nicename="distributed-computing">Distributed computing</category>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <category domain="post_tag" nicename="patterns">patterns</category>
  <category domain="post_tag" nicename="semi">semi</category>
  <category domain="category" nicename="software-architecture">Software Architecture</category>
  <category domain="post_tag" nicename="trucks">trucks</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:2:{s:2:"fb";a:1:{i:1511184;i:426;}s:2:"wp";a:1:{i:0;i:75;}}</ns0:meta_value>
  </ns0:postmeta>
  </item>
<item>
  <title>Encapsulation isn't just for code</title>
  <link>http://codecraft.co/2013/08/02/encapsulation-isnt-just-for-code/</link>
  <pubDate>Fri, 02 Aug 2013 16:31:24 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1246</guid>
  <ns2:encoded>When computer science folks talk about encapsulation, they are usually thinking of how the principle applies to objects and functions inside a codebase. Best practice calls for a separation of concerns--each object responsible for one type of work, hiding all details from its neighbors.

That's great. But it's not the only way encapsulation ought to show up in software.

In actual deployment, software packages often manifest anti-patterns in the way that they are configured. A web server has to know all about three different database servers that contribute data for its pages; HA failover scripts must know the identity and responsibility of every actor in the system, as well as many particulars about how these entities use resources to accomplish their tasks.

No wonder our deployments are fragile and high-maintenance...

The cloud computing wave is raising the bar for encapsulation in the way applications--not just objects--discover and interact with one another. In this week's installment of my &lt;a title="cloudify series" href="http://codecraft.co/category/cloudify"&gt;series of posts about how to "cloudify"&lt;/a&gt;, I discuss how &lt;a href="http://www.adaptivecomputing.com/blog-cloud/how-to-cloudify-your-software-part-3-do-you-want-fries-with-that/" target="top"&gt;role-based interactions insulate components&lt;/a&gt; from details they don't need to know. It's encapsulation all over again. And this encapsulation pattern manifests itself in unlikely places--like the order queue at McDonald's...

[caption id="" align="aligncenter" width="500"]&lt;a href="http://www.adaptivecomputing.com/blog-cloud/how-to-cloudify-your-software-part-3-do-you-want-fries-with-that/"&gt;&lt;img class=" " alt="" src="http://farm1.staticflickr.com/102/258253832_927e23b2b9.jpg" width="500" height="375" /&gt;&lt;/a&gt; What can McDonalds teach a developer of cloud-friendly software? &lt;a href="http://www.flickr.com/photos/derfokel/258253832/sizes/m/in/photolist-oPBSh-F14J9-MQh6J-4c1HXK-4mEHoC-4ovGHD-4upuzt-4wYDLv-5jWmpq-5Xv7Wr-729ALs-76Locf-7E3LgF-9e8N8c-buruPp-bxadb4-biwGXv-e8ySUj-cEmmDf-ebusvW-8MBDdG-bvALeU-b5yiwg-9D3wMX/" target="_blank"&gt;photo credit: phogel (Flickr)&lt;/a&gt;[/caption]

Stay tuned for further installments of this series each Friday. As I said in &lt;a title="learn how to cloudify" href="/2013/07/23/programmers-learn-how-to-cloudify/"&gt;Part 1&lt;/a&gt;, I believe that a competence with cloud–cloud-oriented programming, if you will–will be a checkbox on future tech resumes.</ns2:encoded>
  <ns0:post_id>1246</ns0:post_id>
  <ns0:post_date>2013-08-02 10:31:24</ns0:post_date>
  <ns0:post_name>encapsulation-isnt-just-for-code</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="anti-pattern">Anti-pattern</category>
  <category domain="post_tag" nicename="cloud-computing">cloud computing</category>
  <category domain="post_tag" nicename="cloudify">cloudify</category>
  <category domain="post_tag" nicename="configuration">configuration</category>
  <category domain="post_tag" nicename="deployment">deployment</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="encapsulation">encapsulation</category>
  <category domain="post_tag" nicename="ha">HA</category>
  <category domain="post_tag" nicename="separation-of-concerns">Separation of concerns</category>
  <category domain="category" nicename="software-architecture">Software Architecture</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:2:{s:2:"fb";a:1:{i:1511184;i:428;}s:2:"wp";a:1:{i:0;i:75;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:58:"http://farm1.staticflickr.com/102/258253832_927e23b2b9.jpg";s:6:"images";a:1:{s:58:"http://farm1.staticflickr.com/102/258253832_927e23b2b9.jpg";a:6:{s:8:"file_url";s:58:"http://farm1.staticflickr.com/102/258253832_927e23b2b9.jpg";s:5:"width";i:500;s:6:"height";i:375;s:4:"type";s:5:"image";s:4:"area";i:187500;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2013-08-02 16:33:07";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>2601</ns0:comment_id>
    <ns0:comment_author>SutoCom</ns0:comment_author>
    <ns0:comment_author_email>dennes777@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.sutocom.net</ns0:comment_author_url>
    <ns0:comment_date>2013-09-04 03:51:41</ns0:comment_date>
    <ns0:comment_content>Reblogged this on &lt;a href="http://sutocom.net/2013/09/04/encapsulation-isnt-just-for-code/" rel="nofollow"&gt;Sutoprise Avenue, A SutoCom Source&lt;/a&gt;.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>9083961</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>reblog_ping</ns0:meta_key>
      <ns0:meta_value>1</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
</item>
<item>
  <title>The third half of computational economics</title>
  <link>http://codecraft.co/2013/08/09/the-third-half-of-computational-economics/</link>
  <pubDate>Fri, 09 Aug 2013 17:58:29 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1251</guid>
  <ns2:encoded>If you look up "computational economics" on wikipedia, you'll find out all about software models that economists use to study game theory, recessions, scarcity, and so forth.

Tweak your search terms a bit, and google takes you to discussions about the economics of the computer industry--how Moore's Law plays out in changing prices for compute power, why cloud computing and cheap GPUs are changing how much we expect to pay, how the mobile revolution is killing traditional PCs, what the job market looks like for us software geeks.

That's all well and good.

But there is a third half of the computer+economics interaction that I don't hear anybody talking about.

[caption id="attachment_1252" align="aligncenter" width="500"]&lt;img class="size-full wp-image-1252" alt="3-fingers" src="http://codecraft.co/wp-content/uploads/2013/08/3-fingers.jpg" width="500" height="385" /&gt; My buddy &lt;a href="http://codecraft.co/2012/09/19/ken-ebert-kill-three-birds/"&gt;Ken Ebert&lt;/a&gt; likes to joke about incomplete thinking by saying, "There are 2 aspects of the issue..." -- while he raises three fingers. :-) Interestingly, this three-fingered gesture is a symbol of sustainable development, which connects nicely to our theme of economics. Photo credit: &lt;a href="http://www.flickr.com/photos/dragonpreneur/2918061941"&gt;\!/_PeacePlusOne (Flickr)&lt;/a&gt;[/caption]

&lt;!--more--&gt;Why don't we use economic principles to model scarcity and tradeoffs within our applications and ecosystems?

I suspect that most of us have written an application that is a bit too cavalier with its use of resources. We want to allocate 9 GB of RAM to store a monster bitmap, so we call malloc. It might fail, but if it doesn't, we have no sense at all of how much burden we've placed on a scarce resource. We don't "pay" for the allocation in any way. There's &lt;a title="Why Your Software Should Cry" href="http://codecraft.co/2013/05/06/why-your-software-should-cry/"&gt;no pain&lt;/a&gt;.

This same scenario plays out in how applications bottleneck a network pipe, how disks fill up, how threads contend, how jobs are scheduled and pre-empted in a supercomputer, how data is moved back and forth in &lt;a class="zem_slink" title="Hierarchical storage management" href="http://en.wikipedia.org/wiki/Hierarchical_storage_management" target="_blank" rel="wikipedia"&gt;HSM&lt;/a&gt;, and how heads move across a spinning platter to satisfy I/O requests...

The general approach in industry is to introduce some kind of prioritization algorithm that arbitrates between competing consumers. We talk about "fair share" and "starvation."

This feels a bit like the centralized planning of communist regimes. History tells us that despite the theoretical attractiveness of such models, in practice they are much less efficient than Adam Smith's invisible hand.

So why not apply the free market in software?
&lt;ul&gt;
	&lt;li&gt;Give independent entities in software (applications, threads, users, etc) a certain amount of capital with which to purchase resources.&lt;/li&gt;
	&lt;li&gt;Also give them a goal to maximize "profit". Profit would be defined differently for each entity, but would probably involve getting their work done while maximizing speed or other metrics.&lt;/li&gt;
	&lt;li&gt;Allow resource providers to "sell" their wares as they see fit, and give them the goal of maximizing "profit" as well.&lt;/li&gt;
&lt;/ul&gt;
I don't think a system like this would be worth building in all cases, and it might have some unpleasant side effects like starvation of a humble process that can't adequately compete for resources. It would require &lt;a title="3 Commandments of Performance Optimization" href="http://codecraft.co/2013/01/08/3-commandments-of-performance-optimization/"&gt;measurement and tuning&lt;/a&gt;. It might require some variant of genetic algorithms so initial profit formulas would evolve. But I can imagine this approach having nice benefits for a certain class of thorny problems. I wonder if I could build this concept into a &lt;a title="My First Tangle With the Tower of Babel" href="http://codecraft.co/2013/04/26/my-first-tangle-with-the-tower-of-babel/"&gt;better programming language&lt;/a&gt;...
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;What complications do you foresee in such an approach? And how would you enhance it?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://mashable.com/2013/08/08/ibm-cognitive-computing/" target="_blank"&gt;IBM Developing Computer System That Thinks Like a Human&lt;/a&gt; (mashable.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://theoverthinker.org/2013/07/11/the-economics-of-sustainability-a-comparison-of-economic-models/" target="_blank"&gt;The Economics of Sustainability - A Comparison of Economic Models&lt;/a&gt; (theoverthinker.org)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>1251</ns0:post_id>
  <ns0:post_date>2013-08-09 11:58:29</ns0:post_date>
  <ns0:post_name>the-third-half-of-computational-economics</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="adam-smith">Adam Smith</category>
  <category domain="category" nicename="better-programming-language">better programming language</category>
  <category domain="post_tag" nicename="bottlenecks">bottlenecks</category>
  <category domain="post_tag" nicename="contention">contention</category>
  <category domain="post_tag" nicename="economics">economics</category>
  <category domain="post_tag" nicename="fair-share">fair share</category>
  <category domain="post_tag" nicename="game-theory">Game theory</category>
  <category domain="post_tag" nicename="genetic-algorithms">genetic algorithms</category>
  <category domain="post_tag" nicename="gpus">GPUs</category>
  <category domain="post_tag" nicename="hsm">HSM</category>
  <category domain="post_tag" nicename="malloc">malloc</category>
  <category domain="post_tag" nicename="performance">performance</category>
  <category domain="post_tag" nicename="preemption">preemption</category>
  <category domain="post_tag" nicename="prioritization">prioritization</category>
  <category domain="post_tag" nicename="scarcity">Scarcity</category>
  <category domain="category" nicename="software-architecture">Software Architecture</category>
  <category domain="post_tag" nicename="supercomputers">supercomputers</category>
  <category domain="post_tag" nicename="threading">threading</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_zemanta_has_recommendations</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:2:{s:2:"fb";a:1:{i:1511184;i:427;}s:2:"wp";a:1:{i:0;i:75;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:64:"http://techknowledgeme.files.wordpress.com/2013/08/3-fingers.jpg";s:6:"images";a:1:{s:64:"http://techknowledgeme.files.wordpress.com/2013/08/3-fingers.jpg";a:6:{s:8:"file_url";s:64:"http://techknowledgeme.files.wordpress.com/2013/08/3-fingers.jpg";s:5:"width";i:500;s:6:"height";i:385;s:4:"type";s:5:"image";s:4:"area";i:192500;s:9:"file_path";b:0;}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2013-08-09 18:05:23";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>2492</ns0:comment_id>
    <ns0:comment_author>tianyuzhu</ns0:comment_author>
    <ns0:comment_author_email>tian.tian098@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://gravatar.com/tianyuzhu</ns0:comment_author_url>
    <ns0:comment_date>2013-08-09 16:17:49</ns0:comment_date>
    <ns0:comment_content>I'm going to argue that free markets aren't necessary in *general* in software development because economics assumes that everyone is selfish.

For example, when you're writing a function, you establish a contract saying, "If you provide me with the proper resources and fulfill the preconditions, I will perform this service for you." Now the function trusts that it will be used properly, and the user trusts that the function will do its job. In software development, you don't try to sneakily call the function without satisfying all of its preconditions. In fact, you probably go to extra lengths to meet them.

Take another example. When you're writing an application for a certain OS, the OS, the kernel tells you, "your process can have these resources and do its work provided that it is well-behaved and that it doesn't consume more than this much memory/file descriptors/etc." In return, when you write this well-behaved application, you trust that the kernel won't starve your process, etc.

In short, selfishness isn't an issue in software development, since every entity strives to trust and be trustworthy in the name of getting stuff done. Now it's true that things might seem a bit communist at times. Misbehaving processes are ruthlessly terminated by the kernel. But in return well-behaving processes have peace of mind that they will get their fair share of resources -- and that's important, because watching your back all the time is an expensive endeavour.

So if we introduced free market mechanics into software development, what might happen? I suspect it will be similar to the real world. Some entities who think they're more important than others will try to manipulate the system and hog all the resources. "My process has better performance because it messes up other processes' stack pointers, causing them to crash. MUAHAHA." Everybody will have to start watching their backs. It'll be impossible to program for.

The thing is, you see economic models in programming all the time. All you have to do is look at systems where humans can make certain parts of the system more selfish. For example, ISPs give you higher bandwidth and limits if you pay more.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2493</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.facebook.com/sivaneaman</ns0:comment_author_url>
    <ns0:comment_date>2013-08-09 17:07:12</ns0:comment_date>
    <ns0:comment_content>Thanks for the thoughtful response.

I agree that software doesn't translate perfectly into the economic metaphor. There are some examples where it shows up -- the ISP example you mention is a good one -- and there are also examples where central planning is very helpful.

Your example about processes getting resources from the kernel is worth pondering. In my experience, it is very common for processes to be selfish and to abuse the kernel's generosity. There are some kernels that are more militant about enforcing good behavior, but it's not at all difficult for me in most cases to write software that uses all resources with utter disregard to the needs of other processes on a box. That's a case where I wonder if economics might help. However, as you point out, watching your back at all times is expensive, so introducing the extra complexity of modeling resource allocation economically would have to provide a fairly big benefit to be worthy of consideration.</ns0:comment_content>
    <ns0:comment_parent>2492</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>What are your software's vital signs?</title>
  <link>http://codecraft.co/2013/08/11/what-are-your-softwares-vital-signs/</link>
  <pubDate>Mon, 12 Aug 2013 00:31:16 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1258</guid>
  <ns2:encoded>Most software has a profoundly inadequate concept of "health." In order for applications to run, they must:
&lt;ul&gt;
	&lt;li&gt;have adequate resources (RAM, disk, network, CPU)&lt;/li&gt;
	&lt;li&gt;receive cooperation from services exposed by the operating system or by network endpoints&lt;/li&gt;
	&lt;li&gt;be adequately and correctly configured&lt;/li&gt;
	&lt;li&gt;not be hacked&lt;/li&gt;
	&lt;li&gt;acquire delegated privileges from users&lt;/li&gt;
&lt;/ul&gt;
... and so forth. And yet, most software that I've encountered in my career does little to see whether it's working properly and has what it needs. Sure, it may log a catastrophic error if the disk fills up, but it makes no effort to see the problem coming or to plan more graceful recovery than a crash.

In my &lt;a title="cloudify - check vital signs" href="http://www.adaptivecomputing.com/blog-cloud/how-to-cloudify-your-software-part-4-check-those-vital-signs/" target="_blank"&gt;most recent post&lt;/a&gt; on &lt;a title="cloudify software series" href="http://codecraft.co/category/cloudify" target="_blank"&gt;cloudifying your software&lt;/a&gt;, I explore how cloud computing is magnifying the need to understand and to regularly check your software's vital signs. Head on over to adaptivecomputing.com/blog and check it out.

[caption id="" align="aligncenter" width="500"]&lt;img alt="" src="http://farm8.staticflickr.com/7323/9009986079_3ecc0332bc.jpg" width="500" height="333" /&gt; Checking vitals isn't just for healthcare... Photo credit: U.S. Pacific Fleet (Flickr)[/caption]

Stay tuned for further installments of this series each Friday. As I said in &lt;a title="Programmers: learn how to “cloudify”" href="http://codecraft.co/2013/07/23/programmers-learn-how-to-cloudify/" target="_blank"&gt;Part 1&lt;/a&gt;, I believe that a competence with cloud–cloud-oriented programming, if you will–will be a checkbox on future tech resumes.</ns2:encoded>
  <ns0:post_id>1258</ns0:post_id>
  <ns0:post_date>2013-08-11 18:31:16</ns0:post_date>
  <ns0:post_name>what-are-your-softwares-vital-signs</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="cloud-computing">cloud computing</category>
  <category domain="category" nicename="cloudify">cloudify</category>
  <category domain="post_tag" nicename="connectivity">connectivity</category>
  <category domain="post_tag" nicename="health">health</category>
  <category domain="post_tag" nicename="monitoring">monitoring</category>
  <category domain="post_tag" nicename="resources">resources</category>
  <category domain="category" nicename="software-architecture">Software Architecture</category>
  <category domain="post_tag" nicename="vitals">vitals</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_reach</ns0:meta_key>
    <ns0:meta_value>a:2:{s:2:"fb";a:1:{i:1511184;i:427;}s:2:"wp";a:1:{i:0;i:75;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>tagazine-media</ns0:meta_key>
    <ns0:meta_value>a:7:{s:7:"primary";s:60:"http://farm8.staticflickr.com/7323/9009986079_3ecc0332bc.jpg";s:6:"images";a:1:{s:60:"http://farm8.staticflickr.com/7323/9009986079_3ecc0332bc.jpg";a:6:{s:8:"file_url";s:60:"http://farm8.staticflickr.com/7323/9009986079_3ecc0332bc.jpg";s:5:"width";i:500;s:6:"height";i:333;s:4:"type";s:5:"image";s:4:"area";i:166500;s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:7:"4597088";s:7:"blog_id";s:7:"4361534";s:9:"mod_stamp";s:19:"2013-08-12 03:56:23";}</ns0:meta_value>
  </ns0:postmeta>
  </item>
<item>
  <title>Headers, babies, and bathwater</title>
  <link>http://codecraft.co/2013/08/12/headers-babies-and-bathwater/</link>
  <pubDate>Mon, 12 Aug 2013 17:00:43 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1262</guid>
  <ns2:encoded>I claim that by eliminating the C/C++-style dichotomy between headers and implementation, most modern programming languages have thrown out the baby with the bathwater.

[caption id="attachment_1264" align="aligncenter" width="500"]&lt;a href="http://codecraft.co/wp-content/uploads/2013/08/screen-shot-2013-08-11-at-7-35-35-pm.png"&gt;&lt;img class="size-large wp-image-1264" alt="Don't throw out the baby with the bathwater! Photo credit: StubbyFingers (Flickr)" src="http://codecraft.co/wp-content/uploads/2013/08/screen-shot-2013-08-11-at-7-35-35-pm.png?w=500" width="500" height="438" /&gt;&lt;/a&gt; Don't throw out the baby with the bathwater! Photo credit: &lt;a href="http://www.flickr.com/photos/stubbyfingers/5940964193" target="_blank"&gt;StubbyFingers (Flickr)&lt;/a&gt;[/caption]

If that sounds crazy, just hang with me for a minute.

I know my claim runs counter to popular wisdom; have a look at &lt;a title="stackoverflow thread on headers" href="http://stackoverflow.com/questions/752793/should-c-eliminate-header-files"&gt;this thread on stackoverflow.com&lt;/a&gt;. Designers of languages like python and go and D and ruby and java consider it a feature that developers don't have two redundant pictures of the same functionality. This comment from the C# 5.0 specification is typical:
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;"Because an assembly is a self-describing unit of functionality containing both code and metadata, there is no need for #include directives and header files in C#. The public types and members contained in a particular assembly are made available in a C# program simply by referencing that assembly when compiling the program"&lt;/em&gt; (p 3)&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
I agree.

Sort of...

&lt;strong&gt;Bad headers are a royal pain&lt;/strong&gt;

It can be onerous to maintain the parallelism between a .h and a .cpp. And most C/C++ headers are managed so poorly that the benefits you might claim for them are theoretical rather than real. Three common antipatterns that I particularly detest:&lt;!--more--&gt;

1. Putting everything in one monster header.
&lt;p style="padding-left:30px;"&gt;This couples all details of the system together in a single giant hairball. It may be fine for a project with 2 or 3 classes, but for dozens or hundreds of classes, it's a major problem, and it violates the &lt;a title="Small Files Are Your Friends" href="http://codecraft.co/2013/03/21/small-files-are-your-friends/"&gt;small file rule&lt;/a&gt;.&lt;/p&gt;
2. Writing function prototypes without any parameter names, because it's less typing:
&lt;pre style="padding-left:30px;"&gt;int do_something(Foo *, bar *, char const *);&lt;/pre&gt;
&lt;p style="padding-left:30px;"&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;This is wrong-headed. It means that the only way you can understand how to call the implementation is to study the implementation itself, instead of just reading the header.&lt;/p&gt;
3. Mismanaging #includes.
&lt;p style="padding-left:30px;"&gt;When you #include  stuff that a consumer of a header doesn't really need, just for "convenience", what you're really doing is artificially coupling the system (see problem #1), making your build more fragile, subverting incremental builds, and making compile time longer.&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;When you leave out #includes because the .cpp files already #include what they need, you are making it harder to trace dependencies. If you ever hear that header X must be #included before header Y, you're suffering the consequences of this antipattern.&lt;/p&gt;
&lt;strong&gt;What headers could be good for&lt;/strong&gt;

One of the insights often attributed to Guido van Rossum (inventor of python) is that code is meant to be read--by humans. This insight is enshrined in the zen of python (by Tim Peters) with the pithy statement that "Readability counts." It reflects the same sentiment articulated by Martin Fowler, who said, "Any fool can write code that computers can understand. Good programmers write code that humans can understand." And it echoes the observation of the venerable C.A.R. Hoare: "The readability of programs is immeasurably more important than their writeability" (&lt;em&gt;Hints on Programming Language Design&lt;/em&gt;, 1973).

These are not dumb guys.

So let me ask: &lt;span style="color:#993300;"&gt;&lt;em&gt;Which is easier for a human to read and understand--a 50-line header, or a 800-line implementation?&lt;/em&gt;&lt;/span&gt;

This is the the first baby that's being thrown out with the bathwater. Think &lt;a title="Progressive Disclosure Everywhere" href="http://codecraft.co/2012/09/16/progressive-disclosure-everywhere/"&gt;progressive disclosure&lt;/a&gt;: headers could dramatically simplify what a consumer of code has to wade through. &lt;em&gt;If&lt;/em&gt; they worked right. &lt;em&gt;If&lt;/em&gt;.

You might say that modern IDEs make this a non-issue. When you open an 800-line .java file, you get a treeview with all the methods in the class, and you can sort and filter them in any way you like.

I don't buy it. The default views don't hide details that are irrelevant for the &lt;em&gt;consumer&lt;/em&gt; of the code, because they're assuming you want to work on the &lt;em&gt;implementation&lt;/em&gt;. That's the file you opened, after all. You see all the private methods and members, all the nested inner classes, all the gobbledygook.

But let me ask another question: &lt;span style="color:#993300;"&gt;&lt;em&gt;In java or D or C#, if you make an innocuous change (say, renaming a private member or fixing a typo in a comment), who has to know?&lt;/em&gt;&lt;/span&gt;

The answer is: &lt;em&gt;everybody!&lt;/em&gt;

Consumers of your code are bound to the code's implementation, not its fixture. Because those are not separate constructs, distributed builds are impractical, and SDKs for these languages must test the consumer's compliance against compiled binaries.

You might say that since these languages compile so much faster than C++, recompiling has become painless. Fair enough. You might say that with JIT-compilation or interpreted languages, you can defer this problem until it goes away. But neither solution helps you if you have IP you must protect. For a C++ codebase, it's possible to provide headers to a third party without giving away patents and trade secrets. In languages without headers, you're up a creek. The best you can do is obfuscate, which may not satisfy the paranoid or the government regulator worried about export controls.

&lt;strong&gt;How headers ought to work&lt;/strong&gt;

I can think of a way to have the best of both worlds: let implementers stop worrying about headers, and let consumers stop worrying about implementation:
&lt;p style="padding-left:30px;"&gt;Generate the headers.&lt;/p&gt;
Every time a compiler processes code, have it generate from the implementation a pure, simple interface that consumers can read. This is the basic idea behind &lt;a title="lazy c++" href="http://www.lazycplusplus.com/" target="_blank"&gt;Lazy C++&lt;/a&gt;, but if I were &lt;a title="My First Tangle With the Tower of Babel" href="http://codecraft.co/2013/04/26/my-first-tangle-with-the-tower-of-babel/"&gt;writing my own programming language&lt;/a&gt;, I'd take it much further:
&lt;ul&gt;
	&lt;li&gt;Have the compiler produce an "etag" or version stamp that unambiguously hashes the relevant header content, so consumers can identify a version to which they are bound. This etag should depend only on important details, not on comments or parameter names or other stylistic variations.&lt;/li&gt;
	&lt;li&gt;Before replacing the old version of the header, have the compiler compare function/class signatures in old and new to see if compatibility has been broken. Distinguish between incremental additions (new functions don't break compatibility with old clients) and changes (renaming a function or removing a parameter). Besides writing out an etag for the header, have the compiler write out an incremented version number, plus the oldest version number of the header that existing consumers would still be compatible with.&lt;/li&gt;
	&lt;li&gt;Compile the headers (not just the impl) into the final binaries to facilitate &lt;a title="Decoupling Interfaces As Versions Evolve, Part 1" href="http://codecraft.co/2008/07/29/decoupling-interfaces-as-versions-evolve-part-1/"&gt;semantic versioning&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;Make sure the language can identify preconditions, postconditions, and invariants unambiguously, so these can be documented (automatically) in the header.&lt;/li&gt;
	&lt;li&gt;Distinguish between public and private comments (using something a little slicker than javadoc), so that comments from the implementation can be carried across to the header as well.&lt;/li&gt;
&lt;/ul&gt;
I'm not sure headers like this would be worth creating for python, which often has code that's so simple it doesn't need a summary. But for large, complex codebases, I think this would be a real boon. If you've ever had to wrestle your way through half a million lines of C or java or C# without good headers, I'm guessing you know what I mean.
&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://stackoverflow.com/questions/18058937/how-do-compilers-know-when-not-to-recompile" target="_blank"&gt;How do compilers know when not to recompile?&lt;/a&gt; (stackoverflow.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://stackoverflow.com/questions/3935183/forward-declaration-include-on-top-of-declaration-include-classfwd-h-class-h" target="_blank"&gt;Forward declarations and #include&lt;/a&gt; (stackoverflow.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>1262</ns0:post_id>
  <ns0:post_date>2013-08-12 11:00:43</ns0:post_date>
  <ns0:post_name>headers-babies-and-bathwater</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="better-programming-language">better programming language</category>
  <category domain="post_tag" nicename="comments">comments</category>
  <category domain="post_tag" nicename="design-by-contract">design by contract</category>
  <category domain="post_tag" nicename="etag">etag</category>
  <category domain="post_tag" nicename="headers">headers</category>
  <category domain="post_tag" nicename="implementation">implementation</category>
  <category domain="post_tag" nicename="interfaces">interfaces</category>
  <category domain="post_tag" nicename="invariants">invariants</category>
  <category domain="post_tag" nicename="javadoc">javadoc</category>
  <category domain="post_tag" nicename="postconditions">postconditions</category>
  <category domain="post_tag" nicename="preconditions">preconditions</category>
  <category domain="post_tag" nicename="versioning">versioning</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>2655</ns0:comment_id>
    <ns0:comment_author>Julie Jones</ns0:comment_author>
    <ns0:comment_author_email>julie.jones@pobox.com</ns0:comment_author_email>
    <ns0:comment_date>2013-09-10 23:15:45</ns0:comment_date>
    <ns0:comment_content>I have been thinking about this from a different perspective, although it would be easy to extend to generating separate header files. I really like the self contained modules in languages like Java and C#. I think implementation in header files in C++ is a huge wart. What I want is everything in one file in one place. However, I want to be able to control the view of the module or class. When I look at is as client I just want to see the public interface (aka header). But when I need to see how something works I just want to drill down (think light table) and see more detail</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2686</ns0:comment_id>
    <ns0:comment_author>What should code look like when we squint at it? | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2013/09/19/what-should-code-look-like-when-we-squint-at-it/</ns0:comment_author_url>
    <ns0:comment_date>2013-09-19 08:23:01</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] by code flow or by structural role. Headers insulate you from some details of an implementation, as I&amp;#8217;ve noted—but finding the &amp;#8220;important&amp;#8221; classes out of a sea of thousands is not particularly [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2506</ns0:comment_id>
    <ns0:comment_author>Ryan Marcus</ns0:comment_author>
    <ns0:comment_author_email>ryan@rmarcus.info</ns0:comment_author_email>
    <ns0:comment_author_url>http://rmarcus.info</ns0:comment_author_url>
    <ns0:comment_date>2013-08-12 15:18:48</ns0:comment_date>
    <ns0:comment_content>I generally agree with you -- but I had one question.

What's the difference between the "automatically generated headers" you suggest and, say, JavaDocs? It seems like, in Java code (and in other languages via Doxygen), the part of a 3rd-party package you are supposed to look at for understanding is the documentation. This doesn't seem unreasonable to me.

It seems like a header file provides an easy way to see function signatures. JavaDoc (and any good documentation engine) seems to do this for free, with the addition of providing multiple output formats and a standardized format for describing what those signatures mean.

Is it this "code should be readable" idea? It seems like automatically generated header files wouldn't really be "code" (written by the user) anymore than JavaDoc output is "code."

Please correct my misunderstanding. :)

Thanks for the post -- very thought provoking.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2507</ns0:comment_id>
    <ns0:comment_author>weberc2</ns0:comment_author>
    <ns0:comment_author_email>weberc2@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2013-08-12 16:28:16</ns0:comment_date>
    <ns0:comment_content>When you describe how headers "ought to work", you're describing Ada's Specification/Body files. Specs contain the API details (the interface), and the Body contains the implementation. And you get that as a guarantee, enforced by the compiler.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2508</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-08-12 17:58:44</ns0:comment_date>
    <ns0:comment_content>You may be different, Dougbert--but I wish all the C++ programmers I've worked with over the years were different in exactly the same way! It would be a lot more fun to code if they understood how to keep interfaces clean... :-)</ns0:comment_content>
    <ns0:comment_parent>2505</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2509</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-08-12 18:14:25</ns0:comment_date>
    <ns0:comment_content>Ryan: thanks for the thoughtful response!

You're right that javadoc overlaps quite a bit with the idea I'm suggesting. When I first discovered doxygen and javadoc long ago, I was infatuated with the tools, and I didn't see much gap between what they offered and the ideal I describe.

However, some differences remain:

- You can't compile against javadoc. Headers enable another programmer to not just understand the interface to your code, but to test his/her code against it, with full compiler enforcement. Headers or something similar is what you need to outsource a project without supplying implementation code.

- I have become disillusioned with forms of communication external to the code itself. On several codebases that I've worked with, I've gone to significant effort to write good doc comments, and to set up doc generation--only to see this doc get ignored by developers. They simply won't pull up a browser to read docs if the code is in front of them. (This is less true of java, where most IDEs have hover text based on javadocs--but in C++, it's the unfortunate truth.)

I do think there is a difference between generated headers and generated javadoc. Whether you call either or both of them "code", in one case you read the output with your code editor; in the other, you read with a browser. Also, in practice, the source for javadoc is checked into vcs, but not the output. So you can't browse the "code" output of javadoc in git logs. If you generated headers, you'd be checking them in to the vcs.

Nonetheless, I think your point about generated docs is a good one and somewhat weakens the value of what I'm proposing.</ns0:comment_content>
    <ns0:comment_parent>2506</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2510</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-08-12 18:15:34</ns0:comment_date>
    <ns0:comment_content>Thanks for the note. I'm unfamiliar with Ada, but you are the third person who's told me that. Which tells me that it was a memorable feature of the language. I wonder why it got discarded?</ns0:comment_content>
    <ns0:comment_parent>2507</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2512</ns0:comment_id>
    <ns0:comment_author>Brady Kimball (@bradykimball)</ns0:comment_author>
    <ns0:comment_author_email>bradykimball@twitter.example.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://twitter.com/bradykimball</ns0:comment_author_url>
    <ns0:comment_date>2013-08-13 08:19:25</ns0:comment_date>
    <ns0:comment_content>Good points.  A few thoughts that I have on the matter include maintainability and syntactic cruft.  Why have separated interfaces for every class unless you need to?  Obviously, you should use interfaces for things like layer abstraction or collaborative projects with teams that you don't want to be dependent on.  I know this is a dangerous assumption that every developer is savvy enough to understand when to use them, but I would argue that part of the point that some of these more terse languages is to work around manual busy work overhead.

Your proposals at the end of the post are good food for thought as how to combat the maintenance and cruft issues.  Maybe it is personal preference, but I prefer good developer documentation.  This doesn't mean the developer needs to write a thesis on the class.  Often, the method signatures are enough with a simple description of any prerequisites or post conditions are sufficient.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>hc_foreign_user_id</ns0:meta_key>
      <ns0:meta_value>46373088</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>hc_post_as</ns0:meta_key>
      <ns0:meta_value>twitter</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>hc_avatar</ns0:meta_key>
      <ns0:meta_value>http://a0.twimg.com/profile_images/378800000243705814/a2daaa3cfe388c0a077557dd804aa011_normal.jpeg</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2660</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-09-12 19:55:59</ns0:comment_date>
    <ns0:comment_content>Self-contained modules are nice, most of the time. However, I periodically write java classes that are 1k to 2k lines, and that starts to feel a bit cumbersome. Certainly I could decompose further, but sometimes I wish I could split the impl into several files in the way that C# partial classes supports. I like those partial classes; they're a nice way to keep the eventing for a UI class separate from the procedural code. Also, I don't think that a pure view is adequate if you want to share an interface with someone without sharing the implementation (e.g., to protect IP).</ns0:comment_content>
    <ns0:comment_parent>2655</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2513</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-08-13 16:54:03</ns0:comment_date>
    <ns0:comment_content>Good point about pragmatism, Brady. Although it might be nice to be able to separate interface and impl on key classes, perhaps doing it for everything is overkill.

I guess the developer docs vs. code question boils down to personal preference. I have never seen developers read docs consistently. They'll look up a prototype in a reference, but they like to be in the code rather than in some other tool. However, as I mentioned in the response to Ryan, modern IDEs often provide hover autoexpansion which makes this tool discrepancy vanish.</ns0:comment_content>
    <ns0:comment_parent>2512</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2505</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2013-08-12 12:10:21</ns0:comment_date>
    <ns0:comment_content>I know what you mean. I really, really know what you mean.

To me, the headers represent the INTERFACE, not the implementation of an object. Sometimes I put an adapter pattern between the INTERFACE and internal implementation - I don't what my consumer to make assumptions that he/she can use to touch inside my box.

then again - I am a bit different</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>When good comments mean bad language</title>
  <link>http://codecraft.co/2013/08/22/when-good-comments-mean-bad-language/</link>
  <pubDate>Thu, 22 Aug 2013 14:55:22 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1273</guid>
  <ns2:encoded>I've had an epiphany.

For years, I've urged developers to &lt;a title="// Comments on Comments" href="http://codecraft.co/2012/10/31/comments-on-comments/"&gt;write better comments&lt;/a&gt;. I still claim that's a good idea (a &lt;em&gt;very&lt;/em&gt; good one), but as I've pondered &lt;a title="better programming language" href="http://codecraft.co/category/better-programming-language/" target="_blank"&gt;what a better programming language might look like&lt;/a&gt;, I've come to an important conclusion:
&lt;p style="text-align:center;font-size:110%;border:solid 1px #333;background-color:#eee;padding:1em;font-style:italic;"&gt;A lot of "best practice" commenting is just workarounds for inadequate language design.&lt;/p&gt;
This might seem like a crazy or arrogant claim. The Wirths and Matsumotos and Hejlsbergs and van Rossums and McCarthys of the world are incredibly smart people; how could I claim to know something that they do not? Each of these language designers has probably forgotten more about computer science than I will ever learn.

And yet, I think Randall Munroe (the cartoonist at xkcd) was right to make fun of our industry's facile assumption that context-free grammar is all you need to know about formal language:

[caption id="" align="aligncenter" width="480"]&lt;img class=" " alt="" src="http://imgs.xkcd.com/comics/formal_languages.png" width="480" height="209" /&gt; image credit: xkcd.com[/caption]

To show you what I mean, I've inlined snippets of code from a variety of programming languages below. Don't worry about digesting them carefully right now, but give them a quick glance and then move on to my analysis, and see if you agree with my claim about an unhealthy pattern.&lt;!--more--&gt;

&lt;strong&gt;Exhibit 1 (C++)&lt;/strong&gt;
&lt;pre style="padding:1em;border:solid 1px #333;margin-bottom:2em;font-size:8pt;"&gt;&lt;span style="color:#080;"&gt;/**
* Process serialized string; update attr for associated Vehicle.
*
* Assumes string starts at first attr~value pair, not at vehicleid
* (ex. format: vehicleid:&amp;lt;field&amp;gt;=&amp;lt;value&amp;gt;;[&amp;lt;field&amp;gt;=&amp;lt;value&amp;gt;;])
*
* &lt;span style="color:gray;"&gt;@param&lt;/span&gt; serializedAttrs (I) -- can't be null
* &lt;span style="color:gray;"&gt;@param&lt;/span&gt; attrList (O) [optional, should be empty when passed in]
* &lt;span style="color:gray;"&gt;@param&lt;/span&gt; maxLoadCount (I) [optional, range [1..100); -1=="all"]
*/&lt;/span&gt;
&lt;span style="color:blue;"&gt;int&lt;/span&gt; Vehicle::LoadVehicleFromStr(&lt;span style="color:#c000c0;"&gt;const&lt;/span&gt; &lt;span style="color:blue;"&gt;char&lt;/span&gt; * attrs,
    std::list&amp;lt;Attr&amp;gt; * attrList, int maxLoadCount)
{
    &lt;span style="color:#c000c0;"&gt;if&lt;/span&gt; (serializedAttrs == NULL || *seralizedAttrs == 0)
        &lt;span style="color:#c000c0;"&gt;return&lt;/span&gt; FALSE;&lt;/pre&gt;
&lt;strong&gt;Exhibit 2 (C)&lt;/strong&gt;
&lt;pre style="padding:1em;border:solid 1px #333;margin-bottom:2em;font-size:8pt;"&gt;&lt;span style="color:#c000c0;"&gt;while&lt;/span&gt; (*ptr != '')
{
&lt;span style="color:#c000c0;"&gt;if&lt;/span&gt; ((tail = strchr(ptr,';')) != NULL)
&lt;span style="color:#080;"&gt;/************ about 100 lines omitted... ************/&lt;/span&gt;
&lt;span style="color:#c000c0;"&gt;if&lt;/span&gt; (tail == NULL)
  &lt;span style="color:#c000c0;"&gt;break&lt;/span&gt;;
ptr = tail + 1;
}  &lt;span style="color:#080;"&gt;/* END while ((ptr[0] != '') */&lt;/span&gt;&lt;/pre&gt;
&lt;strong&gt;Exhibit 3 (java)&lt;/strong&gt;
&lt;pre style="padding:1em;border:solid 1px #333;margin-bottom:2em;font-size:8pt;"&gt;&lt;span style="color:#080;"&gt;/**
 * Tracks where/how an app uses folders on disk.
 */&lt;/span&gt;
&lt;span style="color:#c000c0;"&gt;public interface&lt;/span&gt; DiskLayout {
    &lt;span style="color:#080;"&gt;/** 
     * Record where an app installs and stores data. This method
     * is used instead of setters on individual properties because
     * changing root locations typically has cascading effects on
     * many other disk locations.
     *   
     * &lt;span style="color:gray;"&gt;@param&lt;/span&gt; installRoot
     *    Path to folder where package is installed. Need not exist,
     *    but must be a conceivable path (e.g., not null)
     * &lt;span style="color:gray;"&gt;@param&lt;/span&gt; dataRoot
     *    Path to folder where application stores data. Same
     *    constraints as with installRoot.
     */&lt;/span&gt;
    &lt;span style="color:#c000c0;"&gt;void&lt;/span&gt; configure(&lt;span style="color:blue;"&gt;String&lt;/span&gt; installRoot, &lt;span style="color:blue;"&gt;String&lt;/span&gt; dataRoot);

    &lt;span style="color:#080;"&gt;/** 
     * The install root is the folder where an app looks for
     * .bin, ./conf, ./lib, and so forth. May be read-only to this
     * process.
     *   
     * &lt;span style="color:gray;"&gt;@return&lt;/span&gt; Fully qualified path where app is installed.
     */&lt;/span&gt;
    &lt;span style="color:blue;"&gt;String&lt;/span&gt; getInstallRoot();    &lt;span style="color:#080;"&gt;/** &lt;span style="color:gray;"&gt;@return&lt;/span&gt; Fully qualified path where app stores its data. */&lt;/span&gt;
    &lt;span style="color:blue;"&gt;String&lt;/span&gt; getDataRoot();&lt;/pre&gt;
&lt;strong&gt;Exhibit 4 (python)&lt;/strong&gt;
&lt;pre style="padding:1em;border:solid 1px #333;margin-bottom:2em;font-size:8pt;"&gt;&lt;span style="color:#c000c0;"&gt;def&lt;/span&gt; start(timeout, name='Timeout Monitor', killfunc=_defkill_func):
    &lt;span style="color:#080;"&gt;'''
    Start a thread that forces exit if we hang. Return a monitor
    object that can be kept alive with .keep_alive(), released
    by calling .stop().
    '''&lt;/span&gt;
    monitor = Monitor()
    kill_thread = threading.Thread(target=_kill_process, name=name,
             kwargs={'timeout': timeout, 'killfunc': killfunc,
             'monitor': monitor})
    kill_thread.start()
    &lt;span style="color:#c000c0;"&gt;return&lt;/span&gt; monitor&lt;/pre&gt;
&lt;strong&gt;Exhibit 5 (C#)&lt;/strong&gt;
&lt;pre style="padding:1em;border:solid 1px #333;margin-bottom:2em;font-size:8pt;"&gt;&lt;span style="color:#080;"&gt;/// &lt;span style="color:gray;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;Give cash from my wallet.&lt;span style="color:gray;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
/// &lt;span style="color:gray;"&gt;&amp;lt;param name="amount"&amp;gt;&lt;/span&gt;The amount of cash to give&lt;span style="color:gray;"&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
/// &lt;span style="color:gray;"&gt;&amp;lt;returns&amp;gt;A&lt;/span&gt;mount I gave, or 0 if I don't have enough&lt;span style="color:gray;"&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span style="color:#c000c0;"&gt;public&lt;/span&gt; &lt;span style="color:blue;"&gt;int&lt;/span&gt; GiveCash(&lt;span style="color:blue;"&gt;int&lt;/span&gt; amount) {
    &lt;span style="color:#c000c0;"&gt;if&lt;/span&gt; (amount &amp;lt;= Cash &amp;amp;&amp;amp; amount &amp;gt; 0) {
        Cash -= amount;
        &lt;span style="color:#c000c0;"&gt;return&lt;/span&gt; amount;
    } &lt;span style="color:#c000c0;"&gt;else&lt;/span&gt; {
        &lt;span style="color:#c000c0;"&gt;return&lt;/span&gt; 0;
    }
}&lt;/pre&gt;
&lt;strong&gt;Analysis&lt;/strong&gt;

What do these snippets have in common, as far as comments are concerned?
&lt;ul&gt;
	&lt;li&gt;Most of the comments are useful. They may not be perfect, but at least they are not &lt;a title="dumb comments" href="http://msdn.microsoft.com/en-us/library/debx8sh9.aspx?cs-save-lang=1&amp;amp;cs-lang=vb#code-snippet-27" target="_blank"&gt;inane comments that just distract readers&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;A lot of the comments explain the semantics of parameters and return values.&lt;/li&gt;
	&lt;li&gt;Most have at least one usage of a "doc comment" style (allowing comments to be transformed to developer documentation).&lt;/li&gt;
	&lt;li&gt;Several of the comments are inaccurate in one way or another.&lt;/li&gt;
&lt;/ul&gt;
Taken individually, these observations are hardly earth-shattering. But if you step back from the details and squint a bit to see just the rough details, a pattern emerges: these comments (and many, many others that I've read or written over the years) are all a sort of kludge. They tell the programmer something using a back channel, because the language they supplement won't let you communicate the idea directly. And that's a shame.

Let me show you what I mean.

In Exhibit 1 (C++), the author of the code obviously cares about preconditions. He or she has gone to some trouble to differentiate between IN and OUT parameters, and to explain the contract between caller and callee. In spite of an error in describing the constraints on the &lt;code&gt;attrs&lt;/code&gt; parameter (it isn't just &lt;code&gt;NULL&lt;/code&gt; that's illegal...), this is likely to help a maintainer or consumer of the code quite a bit.

But it doesn't help as much as it ought to.

If a C++ function declaration required you to specify the semantics of each parameter and return type, the compiler could use knowledge about preconditions to make better optimization choices. It could enforce the semantics in a number of clever ways. Unit tests could be generated automatically. The behavior of the function and the knowledge imparted by generated developer docs could be guaranteed to stay accurate and in sync.

Too bad the scope of the C++ language ends with syntax, not semantics.

&lt;strong&gt;A detour into the history of linguistics&lt;/strong&gt;

I should explain that snide comment.

When I was doing graduate studies in computational linguistics at BYU, I spent quite a bit of time studying generative grammar, transformational grammar, and related systems. These are equation-like approaches to analyzing human languages; they map a specific language instance onto formal structures that can be manipulated algorithmically, and they aim to generate an abstraction that's language-neutral and hard-wired into the human brain. These grammars became &lt;em&gt;de rigueur &lt;/em&gt;when computer science and mathematics met linguistics back in the '60s, in the person of Noam Chomsky and his disciples. You can imagine how these grammars might resemble that holy grail of compiler designers, the context-free grammar.

Yep.

While all my CS confederates were writing their own programming language and a lexer/parser to turn it into machine code, I was performing eerily similar exercises on human language as I studied machine translation. If you can reduce a sentence to an intermediate, language-neutral representation and then re-render it using the surface-level conventions of a different language, translation should be easy, right?

Except it doesn't work that way.

Oh, sure, we have &lt;em&gt;good enough&lt;/em&gt; translation that lets us say "Where's the bathroom?" in a hundred languages from an Android app. That's mostly just dictionary lookup with fuzzy matching and a few other bells and whistles. But when Dan Quayle accused Al Gore of "pulling a Slick Willy on me"&lt;sup&gt;[&lt;a href="#footnote1"&gt;1&lt;/a&gt;]&lt;/sup&gt; during vice presidential debates in 1992, 50 million Americans understood exactly what he meant, immediately--even though the phrase he used did not exist in any dictionary, had never been uttered to anyone in the audience, and mapped onto a linguistic structure that suggested none of what he managed to imply. (I'm not lauding Quayle here, just making a point about language.)

This sort of phenomenon in language gives computerized translation fits, because syntax and a dictionary don't explain it.

It tells us that there's more to language.

There's &lt;strong&gt;semantics&lt;/strong&gt;, for example. (And numerous other layers/aspects as well. Deep topic. Go read &lt;em&gt;The Possibility of Language&lt;/em&gt;, by Alan Melby, if this sounds intriguing.)

&lt;strong&gt;Analysis again&lt;/strong&gt;

Back to the exhibits.

Exhibit 2 (C) identifies the end of a block with a comment--again, because the language doesn't give the programmer any other way to do so. The fact that there's been drift (the comment maps back to an "if" statement that's been tweaked since the comment was created) highlights why this mechanism is less than optimal.

Exhibit 3 (java) shows conscientious use of javadoc, but notice how the semantics on &lt;code&gt;installRoot&lt;/code&gt; are spread across two separate function comments, and how the semantics for &lt;code&gt;dataRoot&lt;/code&gt; reference knowledge about &lt;code&gt;installRoot&lt;/code&gt; in an ambiguous way. If we "compiled" the semantics of these parameters, logical inconsistencies could be flagged, implicit relationships could be disambiguated in developer docs, and so forth.

Exhibit 4 (python) is notable for its terseness. Python functions don't have to have consistent return semantics (exit a function at point A and return &lt;code&gt;None&lt;/code&gt;; exit at point B and return an int; exit at point C and return a dictionary or a 6-way tuple--the interpreter doesn't care). The programmer has compensated by telling the caller what to expect. Telling the &lt;em&gt;interpreter&lt;/em&gt; what to expect, instead, would provide a standard way to inform the programmer, and facilitate tests or sanity checks that could prevented many of the python bugs I've written over the years.

Exhibit 5 (C#) is more of the same. Notice the logic error in the comment about when 0 is returned. Again, fixable and better if managed by compiler.

&lt;strong&gt;Could a programming language really encode more semantics? And could it do so elegantly and easily?&lt;/strong&gt;

Absolutely! Ada addresses the issue of range precondition for parameters by changing the way programmers think about types. Instead of &lt;code style="color:blue;"&gt;short&lt;/code&gt; and &lt;code style="color:blue;"&gt;int&lt;/code&gt;, you have stuff like this:
&lt;pre style="padding:1em;border:solid 1px #333;margin-bottom:2em;font-size:8pt;"&gt;&lt;span style="color:#c000c0;"&gt;type&lt;/span&gt; Day_type   &lt;span style="color:#c000c0;"&gt;is range&lt;/span&gt;    1 ..   31;
&lt;span style="color:#c000c0;"&gt;type&lt;/span&gt; Month_type &lt;span style="color:#c000c0;"&gt;is range&lt;/span&gt;    1 ..   12;&lt;/pre&gt;
What about the C example, where a programmer wanted to delimit the end of a block? Well, bash has one solution:
&lt;pre style="padding:1em;border:solid 1px #333;margin-bottom:2em;font-size:8pt;"&gt;&lt;span style="color:#c000c0;"&gt;if&lt;/span&gt; [ conditional expression ]
&lt;span style="color:#c000c0;"&gt;then&lt;/span&gt;
    statement1
    statement2
&lt;span style="color:#c000c0;"&gt;fi&lt;/span&gt;&lt;/pre&gt;
We simply mark the end of the block in a way that ties it back to the statement that began it. Ada and Pascal do something similar. Python elegantly obviates half of the issue by taking indents more seriously. But for gnarly nesting, I might like something like this:
&lt;pre style="padding:1em;border:solid 1px #333;margin-bottom:2em;font-size:8pt;"&gt;&lt;span style="color:#c000c0;"&gt;while&lt;/span&gt; &lt;span style="color:gray;"&gt;we have more items in the linked list&lt;/span&gt; (*ptr != ''):
  &lt;span style="color:#c000c0;"&gt;if&lt;/span&gt; &lt;span style="color:gray;"&gt;we can find another semicolon&lt;/span&gt; ((tail = strchr(ptr,';')) != NULL):
&lt;span style="color:#080;"&gt;    # about 100 lines omitted... &lt;/span&gt;
  &lt;span style="color:#c000c0;"&gt;end if&lt;/span&gt; &lt;span style="color:gray;"&gt;another semicolon&lt;/span&gt;
&lt;span style="color:#c000c0;"&gt;end while&lt;/span&gt; &lt;span style="color:gray;"&gt;more items in the linked list&lt;/span&gt;&lt;/pre&gt;
In this imaginary language, a block like &lt;code style="color:#c0c;"&gt;while&lt;/code&gt; or &lt;code style="color:#c0c;"&gt;if&lt;/code&gt; can have an explanatory comment between its initiating keyword and the parenthesized syntax that defines its condition. Then, when we unnest, we can optionally add an assertion about which block is ending. The assertion is invoked with &lt;code style="color:#c0c;"&gt;end&lt;/code&gt; followed by whichever keyword began the block, plus a few words from the comment to identify which block it is. The compiler can then alert us if we've unnested incorrectly, and programmers can remember where they are based on the intent rather than the fiddly details of the block's syntax. With no clutter. And no Pascal-style mandatory &lt;code style="color:#c0c;"&gt;begin&lt;/code&gt; or &lt;code style="color:#c0c;"&gt;end&lt;/code&gt;.

&lt;strong&gt;Advanced semantics&lt;/strong&gt;

How about the "can't be null, can't be empty" preconditions? How about more complicated semantics? Won't we end up cluttering the language and becoming horribly verbose? Java's annotations and C#'s attributes offer a glimmer of hope. In my explorations of a better programming language, I've been playing around with a cousin to this sort of mechanism, which I'm calling "marks" (after the linguistic concept of "markedness"). Here's a sample, just to whet your appetite:
&lt;pre style="padding:1em;border:solid 1px #333;margin-bottom:2em;font-size:8pt;"&gt;&lt;span style="color:#c000c0;"&gt;class&lt;/span&gt; vehicle: &lt;span style="color:#a60;"&gt;+threadsafe&lt;/span&gt;
  &lt;span style="color:#c000c0;"&gt;func&lt;/span&gt; react_to_hazard:
    &lt;span style="color:#c000c0;"&gt;takes&lt;/span&gt;:
      which_hazard_type: hazard_type &lt;span style="color:#a60;"&gt;+sensable&lt;/span&gt;
      hazard_location: coordinates &lt;span style="color:#a60;"&gt;+within&lt;/span&gt;(50&lt;span style="color:#a60;"&gt;meters&lt;/span&gt;, this.location)
      descrip: &lt;span style="color:blue;"&gt;str&lt;/span&gt; &lt;span style="color:#a60;"&gt;+text&lt;/span&gt;(1, 25) &lt;span style="color:#a60;"&gt;-nullable&lt;/span&gt; &lt;span style="color:#a60;"&gt;-empty&lt;/span&gt;
      severity_of_hazard: &lt;span style="color:blue;"&gt;int&lt;/span&gt; &lt;span style="color:#a60;"&gt;+range&lt;/span&gt;(0, 100)
    &lt;span style="color:#c000c0;"&gt;returns&lt;/span&gt;:
      coped_safely: &lt;span style="color:blue;"&gt;bool&lt;/span&gt;&lt;/pre&gt;
There's a lot here, and I'll explain marks in greater detail in another post. For now, let me just say that the marks are the small words like &lt;span style="color:#a60;"&gt;+threadsafe&lt;/span&gt; that decorate parameters, classes, and so forth. They are not reserved words in the language, and the parser doesn't have to work all that hard (notice the different color for &lt;code style="color:#c000c0;"&gt;func&lt;/code&gt;). Marks in this chunk of code are declarative rather than algorithmic; they can be enforced in one or more places in code that the compiler generates.

Some marks are preconditions. Others express units (&lt;span style="color:#a60;"&gt;meters&lt;/span&gt;), and can be used to guarantee that you never wait 1000 seconds for a timeout, when 1000 milliseconds was what you intended. Like decorator mechanisms in other languages, they're easy to build and add. But there are some big differences, such as the fact that it would be easy (and often, automatic) to connect semantics implied by these marks to compiler behaviors of a hundred useful varieties. And the fact that implications of marks would be an aspect-oriented programming feature, where you can inject (in IoC fashion) the desired treatment by the compiler or a runtime environment.

Think about the semantic density of this snippet, and how it compares to the semantic density in any of the exhibits listed above. Would it be cumbersome to write or read code like this? I don't think so.

Now notice how many comments this snippet has.

Don't get me wrong--we need comments. I am a big advocate. I just wish we didn't have to use them as a crutch to compensate for languages that do too little to help the user and the compiler be smart.

&lt;hr style="width:200px;" /&gt;
&lt;p style="padding-left:30px;"&gt;[1&lt;a name="footnote1"&gt;&lt;/a&gt;] I found a youtube clip where Quayle says "pull a Bill Clinton on me", but I can't find one for "pull a Slick Willy on me". Maybe I'm remembering it wrong. Either way, the linguistic phenomenon is the same.&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://www.codinghorror.com/blog/2008/07/coding-without-comments.html" target="_blank"&gt;Coding Without Comments&lt;/a&gt; (codinghorror.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>1273</ns0:post_id>
  <ns0:post_date>2013-08-22 08:55:22</ns0:post_date>
  <ns0:post_name>when-good-comments-mean-bad-language</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="ada">Ada</category>
  <category domain="post_tag" nicename="bash">bash</category>
  <category domain="category" nicename="better-programming-language">better programming language</category>
  <category domain="post_tag" nicename="block">block</category>
  <category domain="post_tag" nicename="c">c++</category>
  <category domain="post_tag" nicename="comments">comments</category>
  <category domain="post_tag" nicename="compiler">compiler</category>
  <category domain="post_tag" nicename="crutches">crutches</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="end">end</category>
  <category domain="post_tag" nicename="if">if</category>
  <category domain="post_tag" nicename="intentions">intentions</category>
  <category domain="post_tag" nicename="preconditions">preconditions</category>
  <category domain="post_tag" nicename="python">python</category>
  <category domain="post_tag" nicename="semantics">semantics</category>
  <category domain="post_tag" nicename="while">while</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>twitter_cards_summary_img_size</ns0:meta_key>
    <ns0:meta_value>a:6:{i:0;i:533;i:1;i:232;i:2;i:3;i:3;s:24:"width="533" height="232"";s:4:"bits";i:8;s:4:"mime";s:9:"image/png";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>2537</ns0:comment_id>
    <ns0:comment_author>trevharmon</ns0:comment_author>
    <ns0:comment_author_email>trevharmon@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://dld.me</ns0:comment_author_url>
    <ns0:comment_date>2013-08-22 09:58:59</ns0:comment_date>
    <ns0:comment_content>Excellent article, Daniel.

I wonder where the line is between accepting a certain amount of context-sensitive ambiguities as just being a part of human communication (which programming is, in some sense) and allowing the creation of arbitrary grammers like in Perl 6 (http://en.wikipedia.org/wiki/Perl_6_rules#Grammars), which I would expect leads to the emergence of dialects, like we see in spoken and written human language.

Don't get me wrong, I agree with the premise and conclusions of the post. I just wonder how far we can really go in marrying context, semantics and syntax without making it overly burdensome to manage and grok.

Putting forth a logically flawed argument, I really don't want to have to learn a new grammar for every function call. :-)

Like always, your article provides me with much to ponder and consider.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2538</ns0:comment_id>
    <ns0:comment_author>Samuel A. Falvo II</ns0:comment_author>
    <ns0:comment_author_email>kc5tja@arrl.net</ns0:comment_author_email>
    <ns0:comment_author_url>http://gravatar.com/kc5tja</ns0:comment_author_url>
    <ns0:comment_date>2013-08-22 11:32:08</ns0:comment_date>
    <ns0:comment_content>Extreme programming advocates coding without comments to the greatest degree possible, but no more than that.  The idea is to use well-chosen, verbose names for types and methods that work on those types.  For example, instead of your C++ code in listing 1, we might see:

[1] int Vehicle::VehicleFromString(const char * source, std::list * attributes, int maxLoadCount) {
[2]   if(ISNT_EMPTY(source)) return FALSE;
[3]   if(!(LIST_EMPTY(attributes)) return FALSE;
[4]   if(!BETWEEN(maxLoadCount, 1, 100) &amp;amp;&amp;amp; (maxLoadCount != -1)) return FALSE;

In line [1], some names were changed to protect the intent.  In general, programming communities seem to have adopted the XfromY naming convention for procedures used to convert from one type to another.  It seems that's what this method is doing, so I made the appropriate change.  Following conventions reduces mental burden.  Additionally, I changed the string parameter's name to "source", since that's the source code of the data.  Presumably, VehicleFromString is a parser, and you feed source code to parsers.  Also, notice the code you wrote in listing 1 is buggy -- you have no parameter named serializedAttrs.  ;-)  Your list of attributes implies a plurality of attributes, and so I just called those "attributes."  Short, simpler, and carries the full semantic load of the concept.

In line [2], [3], and [4], I use preprocessor macros to make common range-based and pointer validation checks succinct and easily re-used.  Indeed, if the "return false on invalid input" thing is a pattern, then each if-statement can be replaced by a suitable macro, or even the entire block of if-statements if they repeat often.

Now, people can derive everything you just expressed in comments by reading actionable source-code, and it's English-enough to be understood by a large number of people; the only prerequisite is that they know how to read and understand C++.  As far as _why_ this code was written the way it was, XP advocates looking at your commit logs in your revision control system of choice.  E.g., one could use "git blame" to identify who last affected the code you're interested in, and it will also show the most recent commit hash for each line in the code.  Use "git log" on that commit hash to then read why the change was put in place.  The advantage to this is that a _single comment_ can then apply automatically to a large number of related changes in a plurality of source files.  Normal program comments _cannot_ do that, no matter how hard you try.

One last thing about coding preconditions like this, if I may.  This is such a good idea, in fact, that Eiffel, Sather, and if I recall correctly, Ada actually has first-class support for pre-conditions, post-conditions, and class-wide invariants, expressed using real, actionable, compilable code.  They can be turned off with a compiler switch if performance is too adversely affected.

This kind of ruthless refactoring can apply to virtually any language.  Your listing 2 can be easily rewritten:

while (*ptr != '')
{
if ((tail = strchr(ptr,';')) != NULL)  process_line(ptr, tail);
if (tail == NULL)  break;
ptr = tail + 1;
}

Full stop.  That's all you need.  If you need more than three variables shared, use a common data structure and pass in its address, like so:

struct Blort b;
// ...
while (*b.ptr) {
  if(!(b.tail = strchr(b.ptr, ';'))) break;
  process_line(&amp;amp;b);
  b.ptr = b.tail + 1;
}

Linguistic idioms come into play as well; *ptr != '' looks weird to me, so I rewrote it simply *ptr, as is common in most other C code.  Also, restructuring if-statements to serve as invariant guards, instead of expressing high-level thought processes, often simplifies the code.  Compare the original C code to that above.  It's requires fewer characters to type in, proportionately reducing the opportunity for inadvertent bugs.  Of course, it's perhaps best to wrap the entire while-statement in a function of its own as well.  Be sure to use a good quality name for it!

I should point out that Forth is the king of writing expressive code, *IF* you know how to use its power for good.  The secret is to write your code declaratively:

( etc... )
: semicolon   ptr @ [char] ; strchr dup if process-line then ;
: line   semicolon  dup 0= if r&amp;gt; 2drop then ;
: lines   begin ptr @ c@ while line 1+ ptr ! repeat ;

To the uninitiated, this is baud-barf from the 80s.  But, let me explain...

The 'lines' definition expresses the same outer while-loop that the C code does.  But notice I expect the response for 'line' to be a non-null value which I update ptr with.  This implies, by reading this one line, that 'line' _must_ check for this condition and act upon it accordingly.  I simply don't have to worry about it at this level of abstraction.

'line', attempts to process a semicolon-delimited line.  Somehow.  Again, details aren't important at this stage.  But, we expect it to return a value (the tail pointer).  If zero (null), we the return address of line off their respective stacks, and return.  Popping the return address of line will terminate the activation of 'lines', which is why we need to clean up the stack here, and not within lines itself.  Still, we've expressed in just two lines of code what it took 4 in C, and it's every bit as readable, once you know enough Forth to competently read it.  Also notice that code reads left to right, like English; it does not read top-down, and also notice that you can read individual lines of code in total isolation from any other line, and derive useful knowledge from it.  That's powerful.

Note that Forth prefers short names over long names, but this is due to Forth's context sensitivity.  A program that reads lines of text from a file and uses them to draw lines on the screen will likely have two or three definitions of 'lines', if not of 'line.'  This is also incredibly useful, and I often wish other languages provided similar behavior.  But, I digress.

Notice also that I can refactor common predicates into definitions that manipulate return and data stacks, and as long as I call these definitions from words that have the same stack shapes on entry, I can re-use these predicates WITHOUT having to rely on macros, as I would in C and C++.  This not only improves the readability of code, making it that much more declarative in nature, but it also saves valuable program space by preventing repetitious code in the compiled binary image.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2541</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-08-22 16:26:46</ns0:comment_date>
    <ns0:comment_content>Yes, I agree that making language more rich can be taken too far. Python is one of my favorite languages, but it foregoes a lot of the ideas I'm advocating, in favor of terseness and simplicity. And it works. I think the reason why has something to do with the problem domain that's its sweet spot, which I think is on somewhat smaller and less complex projects than the sort I've spent most of my career leading. When you need to rip through a thousand files and slice and dice the data they contain, for a quick-and-dirty project, you don't really want "semantic density" getting in the way. You can hold the whole problem in your head, more or less, and you just want to get on with expressing the solution. On the other hand, if you're writing a hairy system with a dozen or a hundred other programmers at multiple sites, and it will be maintained and enhanced for years to come, being crystal clear about your intentions is probably worthwhile.</ns0:comment_content>
    <ns0:comment_parent>2537</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2542</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-08-22 16:33:45</ns0:comment_date>
    <ns0:comment_content>Samuel: Your craftsmanship is showing. :-)

I picked these samples from actual production codebases that were conveniently laying around. They weren't intended to be great code, only realistic. The C++ snippet is one I had to rewrite slightly to protect the (semi)innocent, and my rewrite introduced the bug you caught.

In practice, I would likely do much of the same refactoring that you advocate, although I don't think I'd be as good at it as you are. It puzzles me how often my fellow programmers leave yuckiness around when they could be clearer and more terse if they spent a *very* few minutes improving the code. Maybe they look at my code and wonder why I put up with stuff that seems arcane to them. I dunno.

Your comments about Forth are very intriguing. More for me to study! :-)

Thanks for the thoughtful response.</ns0:comment_content>
    <ns0:comment_parent>2538</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2543</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-08-22 16:51:38</ns0:comment_date>
    <ns0:comment_content>Good observation, Tianyuzhu. Thanks for the comment.

I agree that it is *possible* to express most or all of the ideas in this post, using cutting-edge C++. We must think alike. On several C++ codebases, I've done stuff like this--only to see a majority of the other programmers on the teams react with puzzlement and eye-rolling. This frustrates me.

I think the reason I don't see this idea catching on in C++ is because:

A) Most C++ today is still written against the C++ 98 standard (partly due to mental inertia and partly due to compatibility concerns). Sigh...
B) C++ makes tons of stuff *possible* but does a poor job of encouraging it or making it attractive and easy. Look at how hard Alexandrescu had to work to write Loki for traits-based programming, and how foreign his idiom is to most C++ coders.

I guess I can't blame C++ compilers for cheerfully consuming code that uses none of the techniques you've identified. The set of use cases that C++ aims to address is incredibly broad, and careful communication is not always worthwhile if you're writing small or short-lived projects.</ns0:comment_content>
    <ns0:comment_parent>2540</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2544</ns0:comment_id>
    <ns0:comment_author>j2kun</ns0:comment_author>
    <ns0:comment_author_email>kun.jeremy@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://jeremykun.wordpress.com</ns0:comment_author_url>
    <ns0:comment_date>2013-08-22 17:54:46</ns0:comment_date>
    <ns0:comment_content>Great post! My two cents:

It seems to me that there's a fine line between semantics of a programming language and "semantics" as you describe it in this post. I would consider many tasks like generating unit tests and documentation generation to be programmer tools, not strictly part of the language itself. Are you arguing that these *should* be part of the language? If so, I would say you're expecting too much of semantics and the compiler. Besides, those programmers who care that much about fine optimizations are hugging the machine architecture so tightly that (I imagine) they'd rather do it themselves and have it be explicit in the code than rely on the contextual knowledge of which compiler optimization is in play at what time. I imagine the compiler would be able to optimize something if you have +range(0,N) but not +range(0,N+1) for some sufficiently large value of N, and this would just add to the contextual knowledge needed.

That being said, I think you're thinking too small! With the current state of technology, why restrict yourself to text? Moreover, if you want simplicity and cleanliness without sacrificing "semantic density," why not design a language as you wish, and design an editor that transforms terse and detailed representations back and forth at the will of the coder? (say, by mouseover, or C-x M-c M-expand, or whatever mechanism you like) Or why not have the compiler learn the appropriate constraints? A dynamically written Python-style program could be transformed into a statically-typed version which can then be compiled and optimized as desired.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>20153648</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2540</ns0:comment_id>
    <ns0:comment_author>tianyuzhu</ns0:comment_author>
    <ns0:comment_author_email>tian.tian098@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://gravatar.com/tianyuzhu</ns0:comment_author_url>
    <ns0:comment_date>2013-08-22 12:38:39</ns0:comment_date>
    <ns0:comment_content>With some effort, we can convey a sense of semantics in C++. For example we should be able to write:

int Vehicle::LoadVehicleFromStr(std::string serializedAttrs,
    optional&amp;lt;std::list&amp;amp;&amp;gt; attrList, IntRange maxLoadCount);

Now optional isn't in the standard yet, and IntRange probably won't ever be in the standard, but you can write both types fairly easily.

In fact, efficiently encapsulating semantics in types is something that C++ specializes in. And of course, since C++ is statically typed, doing so allows the compiler to verify semantics for you.

Here's a short list of how different types have different semantics when used as function arguments. For some type T:

T: means you're passing object by value. The function gets it's own instance of T and owns it (will destroy it or transfer ownership of it to somewhere else).
T &amp;amp;: A reference to an instance of T. It can't be null. The function does not own it.
T *: A pointer to an instance of T. It can be null. The function does not own it.
optional: Like passing T by value, except it can be "null".
unique_ptr: Like "T *", except the function gets unique ownership of the instance.
shared_ptr: Like "T *", except the funciton gets shared ownership of the instance.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2545</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-08-22 18:02:04</ns0:comment_date>
    <ns0:comment_content>Jeremy: Thanks for a thought-provoking idea. Implementing an optimized editor along with a language is what the designers of Smalltalk did, and lo and behold, the modern IDE was born. It sounds like a lot of work, but maybe a lot of coolness would result. I'll have to chew on that for a while...</ns0:comment_content>
    <ns0:comment_parent>2544</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2546</ns0:comment_id>
    <ns0:comment_author>j2kun</ns0:comment_author>
    <ns0:comment_author_email>kun.jeremy@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://jeremykun.wordpress.com</ns0:comment_author_url>
    <ns0:comment_date>2013-08-22 18:04:07</ns0:comment_date>
    <ns0:comment_content>Have you heard of LightTable? They are already doing some things in the realm of automated test generation, but their goal is somewhat different: they wish to alleviate and add inspiration to the process of writing new code.</ns0:comment_content>
    <ns0:comment_parent>2545</ns0:comment_parent>
    <ns0:comment_user_id>20153648</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2547</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-08-22 18:13:17</ns0:comment_date>
    <ns0:comment_content>Wow! I went and watched the kickstarter video, and I started salivating. That is an awesome concept. I want to get me one, today! I'm going to download the preview and see if they do more than lisp... Thanks for the suggestion.</ns0:comment_content>
    <ns0:comment_parent>2546</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2548</ns0:comment_id>
    <ns0:comment_author>j2kun</ns0:comment_author>
    <ns0:comment_author_email>kun.jeremy@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://jeremykun.wordpress.com</ns0:comment_author_url>
    <ns0:comment_date>2013-08-22 18:19:25</ns0:comment_date>
    <ns0:comment_content>Well now that I've got your attention :) the Light Table project was inspired by a talk of Bret Victor called Inventing on Principle, and he has a second talk called The Future of Programming which I think you'll enjoy. Both bring up some very important questions about the way we interact with computers in designing programs.</ns0:comment_content>
    <ns0:comment_parent>2547</ns0:comment_parent>
    <ns0:comment_user_id>20153648</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2550</ns0:comment_id>
    <ns0:comment_author>tianyuzhu</ns0:comment_author>
    <ns0:comment_author_email>tian.tian098@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2013-08-22 21:34:45</ns0:comment_date>
    <ns0:comment_content>It's kind of funny because there are libraries like Guava that implement things like Optional for Java, and Java developers happily use it.

Here's the thing:
A) A lot of useful features like optional can be implemented in C++98. There's no excuse for not using them, especially if they're already available in libraries such as Loki.
B) Although it isn't easy to implement things like optional, it's still valuable because such components are highly reusable. And honestly, they're not that hard to use.</ns0:comment_content>
    <ns0:comment_parent>2543</ns0:comment_parent>
    <ns0:comment_user_id>11176301</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>10854</ns0:comment_id>
    <ns0:comment_author>Taming Side Agreements | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/10/28/taming-side-agreements/</ns0:comment_author_url>
    <ns0:comment_date>2014-10-28 08:35:54</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] makes a concerted effort to expose many of the subtleties I listed above, although I think docs and comments are often a band-aid. The proxy technique that I recommended, to codify human concerns in a codebase, is another way of [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>6626</ns0:comment_id>
    <ns0:comment_author>Lacunas Everywhere | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/16/lacunas-everywhere/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-16 13:58:45</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] The problem, I think, is caused by our industry undervaluing the human dimension of software development. We are taught to analyze and create context-free grammars. That&amp;#8217;s a hard task, and perhaps we can be forgiven for thinking that once we get there, with a fast and robust compiler, a nice runtime, documentation, and other tools, we&amp;#8217;ve mostly achieved the mandate of a programming language. Everything else goes in the comments. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>6838</ns0:comment_id>
    <ns0:comment_author>Thoughts On Bridging the &amp;#8220;Lacuna Humana&amp;#8221; | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/21/bridging-the-lacuna-humana/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-21 08:49:26</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] possibility is comments. This has been the answer of choice, for years. You can say anything you want in comments. (Hmm. Notice the semantic power in that, and [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>What should code look like when we squint at it?</title>
  <link>http://codecraft.co/2013/09/19/what-should-code-look-like-when-we-squint-at-it/</link>
  <pubDate>Thu, 19 Sep 2013 14:19:44 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1314</guid>
  <ns2:encoded>It's the start of another school year, and my seventh-grade son is learning algebra. As I sat beside him to coach him through some homework the other night, I shared my favorite bit of wisdom about how to make math problems—even complex ones—simple and error-free:
&lt;p style="text-align:center;font-size:110%;border:solid 1px #333;background-color:#eee;padding:1em;font-style:italic;"&gt;Write the progression from known to unknown, one step at a time.&lt;/p&gt;
In my experience, the surest recipe for disaster is to short-circuit this rule. Collapse a few steps in your head in the name of &lt;em&gt;efficiency, &lt;/em&gt;and you'll forget a minus sign, or you'll group incorrectly, or you'll lose track of an exponent or an absolute value—and you'll end up with a mess. You'll have to debug your solution by slogging back through the problem from the beginning until you figure out where you went wrong.

It's interesting—and maybe, profound—how nicely this piece of advice maps onto the design principle of &lt;a title="Progressive Disclosure Everywhere" href="http://codecraft.co/2012/09/16/progressive-disclosure-everywhere/"&gt;progressive disclosure&lt;/a&gt;. The human mind is simply wired to perceive in broad outlines, and then to gradually clarify, a few details at a time.

Don't believe me? Try a short experiment: draw this fractal.

[caption id="" align="aligncenter" width="500"]&lt;a href="http://www.flickr.com/photos/fabio_dsp/150592235/"&gt;&lt;img alt="" src="http://farm1.staticflickr.com/45/150592235_fcfe235767.jpg" width="500" height="375" /&gt;&lt;/a&gt; Fractals embody the principle of progressive disclosure. Image credit: Fábio Pinheiro (Flickr).[/caption]

I'll bet that instead of laying down every pixel, like a printer, you immediately produce a simplification that captures the general shape as lines, with a lot of detail suppressed. You did this as a kid, when you drew stick figures and triangle+half-circle sailboats.

Artists sometimes squint to blur out what they don't want to see, leaving only general patterns and colors. But coders never do, because we don't expect code to work that way.&lt;!--more--&gt;

&lt;strong&gt;Drowning in details&lt;/strong&gt;

I think this is one of the flaws in most programming languages I know: they immediately plunge you waist-deep into implementation details that hide the forest among the trees. To see what I mean, try this experiment, which I did a couple weekends ago:
&lt;ol&gt;
	&lt;li&gt;Download an interesting and complex codebase that you haven't worked with before.&lt;/li&gt;
	&lt;li&gt;Try to add a new feature that sounds conceptually simple to your naive ears. For example, just add a command-line switch or make the program crash in a common code path.&lt;/li&gt;
&lt;/ol&gt;
I did this with the &lt;a title="julia programming language" href="http://julialang.org" target="_blank"&gt;Julia programming language&lt;/a&gt;, but you could download Mozilla or Apache or Hadoop or anything else that sound interesting, and I think you'd have similar results: like me, I predict that you'll quickly be overwhelmed with questions. Which of 3 likely entry points is the true top of the call graph? What do all these #ifdefs mean, and which ones are going to be active in my build? Which parts of the code have dependencies I need to understand?&lt;a title="download julia programming language source" href="https://github.com/JuliaLang/julia" target="_blank"&gt;
&lt;/a&gt;

This is the equivalent of trying to solve the entire algebra problem by holding all the transformations of an equation in your head at the same time. It can be paralyzing. None of the techniques that are popular in programming communities today give satisfactory answers to this problem—not BDD or TDD, not golden threads, not design docs, not javadoc/doxygen, not aggressive commenting, not ER or UML diagrams, not architecture description languages.

This need for context, for a high-level picture, for a sketch that gives you a useful skeleton of a &lt;a title="Why Mental Models Matter" href="http://codecraft.co/2012/11/05/why-mental-models-matter/"&gt;mental model&lt;/a&gt;, is the reason why any new hire into a team with a complex codebase gets a whiteboard-ish orientation from smart teammates. We intuitively know we need it, and we'll never get it from the code itself. On a codebase that I currently own, it is a major reason why the team hates the code and tells horror stories about its learning curve.

There's just no easy entrée.

&lt;strong&gt;What's in a book?&lt;/strong&gt;

You could claim that all is for the best in this best of all possible worlds (nod to Pangloss). After all, teams &lt;em&gt;do&lt;/em&gt; provide overviews and walkthroughs and design docs, and sooner or later, we get through the learning curve. But I think code could do a much better job of communicating, if we raised the bar.

Think about books for a minute. Hopefully you bought a print book recently enough to remember what it was like to pick it up and consider reading. How did you decide? If you're like me, you probably read a blurb on the front or back cover. Did you glance at the foreword or preface? Did you read the first page to see if it felt interesting? Did you scan a table of contents? Did you flip to an index to see everywhere that your favorite subtopic was referenced?

Code has only weak parallels for these broad-brushstroke mechanisms.  In some sense, the main() routine is like chapter 1—but what comes after that may quickly become indecipherable, especially if you're doing OOP or AOP or event-driven programming. You might liken java packages to a rough structure, but I think that in practice, they only deliver mediocre value because they tend to group by topic, not by code flow or by structural role. Headers insulate you from some details of an implementation, &lt;a title="Headers, babies, and bathwater" href="http://codecraft.co/2013/08/12/headers-babies-and-bathwater/" target="_blank"&gt;as I've noted&lt;/a&gt;—but finding the "important" classes out of a sea of thousands is not particularly easy. Interfaces allow you to &lt;a title="Good fences make good neighbors" href="http://codecraft.co/2013/05/15/good-fences-make-good-neighbors/" target="_blank"&gt;encapsulate&lt;/a&gt; and suppress details—but they don't tell you how they fit into a &lt;a title="Smart Geeks Think Like Cheerleaders" href="http://codecraft.co/2013/02/05/smart-geeks-think-like-cheerleaders/" target="_blank"&gt;gestalt&lt;/a&gt;. Tests as a form of documentation are helpful, but they make it even harder to distinguish major themes from trivia. IDEs give you tree views, but trivia is intermixed with overarching concepts. Nowhere in a codebase do you typically find an explicit discussion about which constructs matter at install time, or which ones are important during startup but not during the later lifetime of the program.

&lt;strong&gt;Toward utopia&lt;/strong&gt;

I don't think this lack-of-a-big-picture problem can be solved with a single silver bullet. But here are a few ways that a better programming language/environment/ecosystem might make things better:
&lt;ul style="padding-left:30px;"&gt;
	&lt;li&gt;&lt;a href="http://codecraft.co/wp-content/uploads/2013/09/screen-shot-2013-09-18-at-10-25-28-pm.png"&gt;&lt;img class="alignright size-full wp-image-1326" alt="google maps zoom slider" src="http://codecraft.co/wp-content/uploads/2013/09/screen-shot-2013-09-18-at-10-25-28-pm.png" width="33" height="228" /&gt;&lt;/a&gt;Imagine a "granularity slider" in a code view, analogous to the zoom in/zoom out slider in google maps. What if a language understood the distinction between vital/domain/first-class objects and trivia, and could suppress details in a treeview or a code editor depending on your current zoom level? (IDEs already support collapsing class and file/folder views, and collapsing or expanding blocks of code. But to my knowledge, they don't analyze a callgraph and decide that some functions are unimportant at a particular level of detail, and they don't collapse file boundaries to make holistic program flow visible at a single glance.)&lt;/li&gt;
	&lt;li&gt;Imagine that an IDE could generate, from some combination of static code analysis, profiling, and annotations in the language, a picture of how an application's object model evolves through its lifecycle. And imagine that this diagram's granularity could also be dialed in or out: &lt;em&gt;In the startup phase, you might have a hierarchy of objects that looks like X. In the config phase, it looks like X'. In the collaboration phase, it looks like X''...&lt;/em&gt;&lt;/li&gt;
	&lt;li&gt;Imagine that a programming language supported—or even required—a mapping between a customer-facing use case (a "story" or "golden thread") and a theory of operation (and/or maybe a set of UML diagrams). And a further mapping between a theory of operation and a particular flow through the code. This would mean that you could explore the code at the highest level by saying "show me what happens when the 'Admin cancels a job' story is handled" -- and correlate that to object model state, call graphs, and architectural views at arbitrary levels of detail.&lt;/li&gt;
	&lt;li&gt;Imagine that instead of working on an algorithm one function at a time, you could work one subset of a callgraph at a time. So the code for the whole callgraph is displayed as a tree (with adjustable detail). Using a REPL, you feed in a piece of input to a top-level function, and immediately see how those parameters change and flow into all the functions that the top-level function depends on.  (This is a feature of a cool IDE called &lt;a title="LightTable IDE" href="http://www.lighttable.com/" target="_blank"&gt;LightTable&lt;/a&gt;; I'd love to see it become more mainstream.)&lt;/li&gt;
	&lt;li&gt;Imagine a language that lets you stub in rough broad-brush strokes, and just generates stubs automatically. This is two or three steps beyond what IDEs do today, where you can write code and highlight half a line and hit a keystroke that generates a stub, whereupon the IDE switches you to the generated stub and forces you to write an implementation then and there. I want to be able to write a line of pseudocode and have the compiler recognize that it's pseudocode, and just silently generate a stub that will compile, with a default impl that A) writes/logs something telling me the name of the stub I just hit, where it's called from, and what parameters it received; B) matches it to a stubbed unit test; C) lets me assign a hard-coded value; D) embeds a breakpoint in the impl such that when I run in a debugger, and hit the stub, I am prompted to supply more impl or more hard-coded values. I want to do all of that without breaking the flow of the higher-level algorithm I'm working on. Something like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre style="margin-left:3em;margin-right:5em;margin-bottom:2em;font-size:9pt;border:solid 1px gray;padding:1em;"&gt;&lt;span style="color:green;"&gt;// normal function, not stubbed&lt;/span&gt;
&lt;span style="color:blue;"&gt;int&lt;/span&gt; x = do_something(); 
&lt;span style="color:green;"&gt;// stub declared, assigned a placeholder return value,
// and expected to compile with a working unit test
// without me ever leaving my flow&lt;/span&gt;
&lt;span style="color:blue;"&gt;int&lt;/span&gt; y = do_something_else(a, b) &lt;span style="color:#a0a;"&gt;stubbed with return&lt;/span&gt; 25;&lt;/pre&gt;
&lt;ul&gt;
	&lt;li&gt;Imagine that you could create classes without declaring their methods, and then start a debugger session where you (and teammates) could role play different class interactions to model what you expect to have happen--and that as you role played, the IDE recorded your choices as new stubs, methods, and workflows, so that by "playing" the system, you gradually build it. (See my &lt;a title="role-play centered design" href="http://codecraft.co/?s=rpcd"&gt;posts about role-play centered design&lt;/a&gt; for more on this.)&lt;/li&gt;
&lt;/ul&gt;
I have a few other ideas about how progressive disclosure might work in a &lt;a title="better programming language" href="http://codecraft.co/category/better-programming-language/" target="_blank"&gt;better programming language&lt;/a&gt;, but I think I'll stop there. I'm very curious to see if other smart people out there have good suggestions of their own.
&lt;p style="padding-left:30px;text-align:center;"&gt;&lt;strong&gt;&lt;span style="color:#000080;"&gt;Action Item&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="padding-left:30px;"&gt;&lt;em&gt;&lt;span style="color:#000080;"&gt;Tell me what you think would make it easier to perceive the rough behavior and structure of a big, complicated codebase in more efficient ways.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h6 class="zemanta-related-title" style="font-size:1em;"&gt;Related articles&lt;/h6&gt;
&lt;ul class="zemanta-article-ul"&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://blog.jetbrains.com/pycharm/2013/08/working-with-uml-class-diagrams/" target="_blank"&gt;Working with UML class diagrams&lt;/a&gt; (jetbrains.com)&lt;/li&gt;
	&lt;li class="zemanta-article-ul-li"&gt;&lt;a href="http://techblog.stickyworld.com/abandoning-php-for-python.html" target="_blank"&gt;Abandoning PHP for Python&lt;/a&gt; (techblog.stickyworld.com)&lt;/li&gt;
&lt;/ul&gt;</ns2:encoded>
  <ns0:post_id>1314</ns0:post_id>
  <ns0:post_date>2013-09-19 08:19:44</ns0:post_date>
  <ns0:post_name>what-should-code-look-like-when-we-squint-at-it</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="algebra">algebra</category>
  <category domain="post_tag" nicename="aspect-oriented-programming">Aspect-oriented programming</category>
  <category domain="category" nicename="better-programming-language">better programming language</category>
  <category domain="post_tag" nicename="books">books</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="fractals">fractals</category>
  <category domain="post_tag" nicename="granularity">granularity</category>
  <category domain="post_tag" nicename="lifecycle">lifecycle</category>
  <category domain="post_tag" nicename="methodologies">Methodologies</category>
  <category domain="post_tag" nicename="object-oriented-programming">Object-oriented programming</category>
  <category domain="post_tag" nicename="overview">overview</category>
  <category domain="post_tag" nicename="progressive-disclosure">progressive disclosure</category>
  <category domain="post_tag" nicename="successive-refinement">successive refinement</category>
  <category domain="post_tag" nicename="table-of-contents">table of contents</category>
  <category domain="post_tag" nicename="temporal-perspectives">temporal perspectives</category>
  <category domain="post_tag" nicename="uml">uml</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>2689</ns0:comment_id>
    <ns0:comment_author>trevharmon</ns0:comment_author>
    <ns0:comment_author_email>trevharmon@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://dld.me</ns0:comment_author_url>
    <ns0:comment_date>2013-09-19 14:45:15</ns0:comment_date>
    <ns0:comment_content>Daniel, I know you and I discussed this for some length of time earlier, but I've come across another thought. And, it deals with the different approaches we use when coding. Naturally, I can only use myself as an example.

I wonder if some of this behavior comes from doing some form of bottom-up programming. What I mean by this is after the brainstorming that goes on when planning a project, do programmers naturally start by building the objects or building the flow?

Let's compare this to writing a paper vs. a computer program.

If I'm writing something small (e.g., for my blog), I'm likely to just do stream-of-conscience writing. Whatever comes into my head as the next logical step will be put directly written down without much thought. I do the same thing with quick-and-dirty scripts.

Now, when I'm writing something larger, my behavior changes. Even though the brainstorming may have resulting in many, many individual pieces, I start the actual writing process by defining a clear flow of ideas (usually through defining chapter/section/sub-section headings). The details are then filled in using the brainstormed material.

When coding a large project, I tend to do something different. Instead of starting with the overall flow, I go to creating the underlying objects. I build all of this infrastructure-providing pieces first. Later, I go back and add the logical flow. While both tasks are completed, it's clear my main focus is on the building blocks, not the overall flow.

Interestingly enough, on medium-sized programming projects, I do sometimes follow the pattern of doing flow first. That's seen in the progressive disclosure MAIN: section we were discussing. I have a section of code at the beginning of an obvious file that consists of the following:

- Initialization
- Functions and flow control
- Termination

In this case it's always clear what the flow is and everything else is built around it. If I do this first and use good function names, those function (in their call order) are then copied to later in the file to be used as the skeleton for the rest of the code.

Obviously, these are not large projects and are heavily skewed to procedural programming paradigms. As stated, in larger code bases my behavior appears to be different.

So, that's my long-winded way of agreeing with you that program flow and progressive disclosure are often not given the level of attention they deserve.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2698</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-09-20 12:27:14</ns0:comment_date>
    <ns0:comment_content>Vladimir: I had not thought about how codebases are often associated with books, and how those books provide the sort of "granularity slider" I was wishing for. That's a good insight! Thanks.

I am somewhat familiar with SPARK, but I need to study it a little more. I think that it provides one kind of progressive disclosure, but not many of the other ones I want.

Thanks for the thoughtful comment!</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2696</ns0:comment_id>
    <ns0:comment_author>Vladimir Starostenkov</ns0:comment_author>
    <ns0:comment_author_email>vladimir.starostenkov@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>https://www.facebook.com/vladimir.starostenkov</ns0:comment_author_url>
    <ns0:comment_date>2013-09-20 09:36:17</ns0:comment_date>
    <ns0:comment_content>Daniel, I thought you were talking mostly about project with existing code base in the post. Looks like Trev starts from scratch or POC. That's a huge difference. Consider adding few lines into linux kernel without being professional in it. No way. You have to take a book which has this built-in “granularity slider”.

You mentioned Hadoop. That's one more case. That's easy to read a pair of papers on Map-Reduce paradigm, look through a book on Hadoop and write your project on top of it. But you don't need to go through Hadoop code at all. That is why Hadoop is popular. The same case is Qt for C++ developer. You don't have to know how it works to use it properly. You have to accept the paradigm. If you want to learn the core without the “granularity slider” - you'd better start from scratch. Qt has it's audience not only because it's architectural integrity, but detailed documentation.

One more interesting example is SPARK project by Berkley AMP lab. It gives a Scala programmer the ability to work with distributed data structures just the same way he does with the local ones. That is against "Artists sometimes squint to blur out what they don’t want to see, leaving only general patterns and colors. But coders never do, because we don’t expect code to work that way." Sorry :)</ns0:comment_content>
    <ns0:comment_parent>2691</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>hc_post_as</ns0:meta_key>
      <ns0:meta_value>facebook</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>hc_avatar</ns0:meta_key>
      <ns0:meta_value>http://graph.facebook.com/100003911933384/picture?type=large&amp;_md5=755983ece59098e3a5d6ba4dc29c3e83</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>hc_foreign_user_id</ns0:meta_key>
      <ns0:meta_value>100003911933384</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2691</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-09-19 21:52:39</ns0:comment_date>
    <ns0:comment_content>Interesting analysis, Trev. You've got me wondering if I do the same thing. I know I jump right into flow on small stuff, but I'm not sure what I do on large stuff; next time I embark, I'll turn my radar on.

I wonder if the "create the objects first" behavior comes from a subconsciously recognized need to have useful tools at your disposal before exploring flow. Maybe we can't think about flow until we have the object-level constructs to work with...</ns0:comment_content>
    <ns0:comment_parent>2689</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4886</ns0:comment_id>
    <ns0:comment_author>Why you should use an IDE instead of vim or emacs | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/05/13/why-you-should-use-an-ide-instead-of-vim-or-emacs/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-13 10:16:50</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] I&amp;#8217;ve got some exciting ideas that I&amp;#8217;m eager to share. Much of what&amp;#8217;s possible is more likely to be realized in an IDE; where I&amp;#8217;m headed, text editors won&amp;#8217;t be [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16578</ns0:comment_id>
    <ns0:comment_author>On Forests and Trees | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/09/02/on-forests-and-trees/</ns0:comment_author_url>
    <ns0:comment_date>2015-09-02 08:48:51</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] way to tell that code&amp;#8217;s been wisely generalized is to ask yourself this question: &amp;#8220;Can I see the forest for the trees?&amp;#8220; If a quick glance at any level of detail (a class, a function, a module, a project [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>9264</ns0:comment_id>
    <ns0:comment_author>Exploring the Power of Deixis | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/09/23/exploring-the-power-of-deixis/</ns0:comment_author_url>
    <ns0:comment_date>2014-09-23 08:34:54</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] to &amp;#8220;flatland&amp;#8221; dimensions. What might be the analog to image maps or tag clouds in a visual view of code? Could we shop in dependency stores and fill our carts with &amp;#8220;code reuse packages&amp;#8221;? [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>On bread recipes, maps, and intentions</title>
  <link>http://codecraft.co/2013/10/24/on-bread-recipes-maps-and-intentions/</link>
  <pubDate>Thu, 24 Oct 2013 14:26:02 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1339</guid>
  <ns2:encoded>&lt;p style="font-style:italic;margin-left:3em;font-size:92%;color:#555;"&gt;[I've been quiet for the past three weeks--not because I have less that I want to talk about, but because I have more. Major wheels turning in my head. I'm having a hard time getting from the "intuited ideas" mode to the "crisp enough to put it in writing" mode, though. Consider this a down payment on some future discussions...]&lt;/p&gt;
One of my mother's talents is bread-making. She's been kneading and baking and pulling beautiful loaves out of the oven for as long as I can remember. Bread is one of the ways she says "I love you" to family and friends.

[caption id="" align="aligncenter" width="500"]&lt;img alt="" src="http://farm5.staticflickr.com/4121/4860405142_3c49fd683f.jpg" width="500" height="500" /&gt; photo credit: &lt;a href="http://www.flickr.com/photos/treehouse1977/4860405142/" target="_blank"&gt;treehouse1977 (Flickr)&lt;/a&gt;[/caption]

A few years back, she created a cookbook full of family recipes, and gave one to each adult child for Christmas. I was struck by how she began the bread section. Instead of launching right into the recipes, she included a couple of pages of "bread theory", if you will. The section about water is typical:
&lt;p style="padding-left:30px;"&gt;"Water -- Just about any edible liquid could be used as the base for bread. Some that come to mind are vegetable cooking water, potato water, milk, and so on. There is no problem with substituting any of these for liquid called for in a recipe, but you should keep in mind that if the liquid is salty, the salt should be adjusted; if the liquid is sweet, the sugar should be adjusted... Fresh milk can be a problem because of enzymes that would prevent yeast action. For this reason, most old recipes that call for milk specify that the milk be scalded first. This isn't necessary if you are using water and powdered milk, but remember that the mechanics of the recipe probably depend on at least warm milk (so use warm or even hot water)."&lt;/p&gt;
If you're wondering why I am writing about bread recipes in this blog that focuses on software craftsmanship, consider how much that paragraph resembles a really high-value comment in source code.

It has to do with principles and &lt;em&gt;intentions&lt;/em&gt;.

&lt;span style="color:#000080;"&gt;&lt;strong&gt;Software is all about recipes, right?&lt;/strong&gt;&lt;/span&gt;

Recipes are a lot like software algorithms (especially in &lt;a class="zem_slink" title="Imperative programming" href="http://en.wikipedia.org/wiki/Imperative_programming" target="_blank" rel="wikipedia"&gt;imperative programming&lt;/a&gt; styles): First, do this; next, do that; wait 25 minutes; &lt;code&gt;return new Loaf()&lt;/code&gt;... We even talk about "recipes" and "cookbooks" when we make catalogs of software techniques.

How is this metaphor instructive... or worrisome?

&lt;!--more--&gt;It is not an accident that my mother, a master bread maker, feels the need to describe intentions and their ramifications before laying out the "procedural code" of her individual bread-making subroutines. She has hard-won expertise, and she knows what governing principles need to be understood by anyone wanting to follow in her footsteps.

Think about that for a minute: &lt;em&gt;governing principles need to be understood&lt;/em&gt;. Notice the implicit value that's placed upon the intelligence of those who come behind.

Do you really need to understand &lt;em&gt;principles&lt;/em&gt; to follow a recipe &lt;em style="color:#555;"&gt;[compile or execute a subroutine]&lt;/em&gt;? Or can you just be a mindless automaton, given sufficiently detailed instructions?

How you answer that question says a lot about how deeply you understand the craft of breadmaking... or software.

&lt;span style="color:#000080;"&gt;&lt;strong&gt;A detour with a map&lt;/strong&gt;&lt;/span&gt;

Let me triangulate on the value of intentions with a little thought experiment. Hang with me and I promise we'll end up somewhere interesting...

Suppose a long-lost friend finds you on Facebook, renews happy memories, and proposes a meeting. You gladly agree--but the rendezvous point is a place you've never visited, so you ask for directions. Your friend looks up the destination on Google Maps and emails step-by-step navigation instructions to you.

But there's a problem.

Your friend is a bit careless with a mouse, and what they copy happens to miss the top few lines (the part that says "Directions from Point A to Point B"). In the interest of brevity they also omit the last line that says "You've now arrived at Point B." (After all, your message stream on Facebook already identified where you're meeting...) And to make matters worse, your friend assumes you still live in your old neighborhood, even though you moved across town years ago. So the starting point is wrong.

You barely glance at the directions when they arrive in your email. What could go wrong, when you've got 15-step instructions from Google, accurate to a tenth of a mile? When the day of the meeting arrives, you rush out the door with a printout of the instructions. Four blocks from the house, as you wait at the light by the main road, you glance at the paper, and your brow furrows...

&lt;span style="color:#000080;"&gt;&lt;strong&gt;Intentions to the rescue&lt;/strong&gt;&lt;/span&gt;

In the age of smart phones, this example is a bit contrived. Most of us would immediately pull over and call our friend to get clarification, and we'd have a happy ending. (Notice how I promised you a happy ending to our thought experiment detour, before I began that section of this post? People need to know where you're headed...) I'll go further: nowadays, we'd usually get a hyperlink to the navigation instructions in the first place, instead of step-by-step text divorced from context. If the hour of departure arrived, and we found ourselves leaving from a kid's soccer game instead of from our own driveway, we'd let the GPS adjust the first few steps of the instructions automatically.

Like smart humans navigating in traffic, master breadmakers know dozens of ways to adapt to variations and still end up with a superb loaf--and they know that knowledge will come in handy, sooner or later. This is why my mom spent time explaining general principles.

Strategies for smart adaptation depend on... you guessed it: &lt;em&gt;understanding intentions&lt;/em&gt;. If you know where you intend to go, adapting wisely is practical and straightforward. If you don't, you're in trouble.

A lot of the best practices I've advocated on this blog--and a lot of the antipatterns I've lamented--are evidence of this principle at work:
&lt;ul&gt;
	&lt;li&gt;&lt;a title="Good Code Is Named Right" href="http://codecraft.co/2012/08/28/good-code-is-named-right/"&gt;Good code is named right&lt;/a&gt;, because it tells another coder what you intend for it to do. (Notice how much confusion in our thought experiment is attributable to the missing title on the navigation instructions. Notice how breadmaking recipes start, not with ingredients, but with a title.)&lt;/li&gt;
	&lt;li&gt;&lt;a title="// Comments on Comments" href="http://codecraft.co/2012/10/31/comments-on-comments/"&gt;Comments are good&lt;/a&gt; when they clarify intentions, and a &lt;a title="How to turn coding standards into epic fails — or not" href="http://codecraft.co/2012/09/27/coding-standards/"&gt;waste of time&lt;/a&gt; when they just state the obvious or provide no insight.&lt;/li&gt;
	&lt;li&gt;Building &lt;a title="Why Mental Models Matter" href="http://codecraft.co/2012/11/05/why-mental-models-matter/"&gt;accurate mental models&lt;/a&gt; is a function of understanding the intentions of users and system designers.&lt;/li&gt;
	&lt;li&gt;&lt;a title="Smart Geeks Think Like Cheerleaders" href="http://codecraft.co/2013/02/05/smart-geeks-think-like-cheerleaders/"&gt;System thinking&lt;/a&gt; is enabled by a grasp of the principles underlying various components, coupled with pondering about the ramifications of those principles as the system encounters dynamic conditions.&lt;/li&gt;
	&lt;li&gt;&lt;a title="Good Code Plans for Problems" href="http://codecraft.co/2012/09/03/good-code-plans-for-problems/"&gt;Designing for errors&lt;/a&gt; is essentially the discipline of not assuming that directions are enough to get you from Point A to Point B--and &lt;a title="Don’t forget the circuit breakers" href="http://codecraft.co/2013/01/11/dont-forget-the-circuit-breakers/"&gt;making contingency plans&lt;/a&gt; and &lt;a title="Why Your Software Should Cry" href="http://codecraft.co/2013/05/06/why-your-software-should-cry/"&gt;communicating&lt;/a&gt; when intentions aren't satisfied.&lt;/li&gt;
	&lt;li&gt;A major reason why I keep harping on Martin Fowler's observation ("Any fool can write code that a computer can understand. Good programmers write code that humans can understand.”) is that it recognizes the primacy of human understanding of &lt;em&gt;intention&lt;/em&gt;--not just Turing completeness or Von Neumann executability--in writing software.&lt;/li&gt;
&lt;/ul&gt;
I could go on and on, but I'll leave other examples as an exercise for the reader...

&lt;span style="color:#000080;"&gt;&lt;strong&gt;A critique of most programming languages&lt;/strong&gt;&lt;/span&gt;

As I've written before, I decided to explore the idea of &lt;a title="Headers, babies, and bathwater" href="http://codecraft.co/2013/08/12/headers-babies-and-bathwater/"&gt;writing a new programming language&lt;/a&gt; because I wanted to deepen my understanding of theoretical CS and also of the craft in general.

It's been instructive. Pretty quickly I concluded that simple syntactic sugar was a waste of time--and that I'd dipped my toe in a mighty deep ocean. But another insight has gradually come into focus as well:
&lt;p style="margin-left:2em;margin-right:2em;border:solid 1px #606060;padding:1em;background-color:#f0f0f0;font-weight:bold;font-size:105%;"&gt;Most programming languages pursue the goal of communicating unambiguous instructions to a computer with maximum power or elegance, and relegate human needs to optional, secondary status. They exhibit surprisingly similar weaknesses as a result.&lt;/p&gt;
It's ironic. We expend vast time and effort trying to improve the UX of our products, but we're using programming languages that themselves have a UX prejudiced toward the compiler and the CPU, not the coders.

Some quick examples will show you what I mean:

1. How many programming languages require you to describe the users of the system, write stories about their use cases, or map those use cases to specific paths through the code? How many allow you to attach whiteboard diagrams to lines of code, and have IDEs that automatically display those whiteboard diagrams when the context is right?

2. Why is Bertrand Meyer's design-by-contract methodology an optional library in so many languages, but not a first-class feature? Why do compilers do so little with preconditions and postconditions? (Think about how these concepts clarify intention...)

3. How often have you seen a block of code, in any programming language, that looks or feels like this:
&lt;pre style="font-size:105%;"&gt;    &lt;span style="color:green;"&gt;// Validate that policy constraints apply.&lt;/span&gt;
    &lt;span style="color:blue;"&gt;if&lt;/span&gt; (*maxMigrations == 0) || 
        (*policies-&amp;gt;migrationsDoneForNode)(loads,vMLoads,nodeItem,vMItem) == &lt;span style="color:blue;"&gt;true&lt;/span&gt; ||
        (!vMIsEligible(vMItem,FALSE) &amp;amp;&amp;amp; (migrationType != vmmpFeatureCheck)))
    {
        &lt;span style="color:green;"&gt;// do something awesome&lt;/span&gt;
    }&lt;/pre&gt;
&amp;nbsp;

Suppress your gag reflex and think about where intent and humanity is manifest in this snippet. The language syntax requires you, for a conditional statement, to tell the compiler how to make a decision--but it doesn't require you to provide any clarification about why that decision matters, how a human might describe the choice, or what you're hoping to accomplish. The only evidence of intent is the anemic comment. No wonder we burn the bread so often!

&lt;span style="color:#000080;"&gt;&lt;strong&gt;Hope on the horizon&lt;/strong&gt;&lt;/span&gt;

Notice that I wasn't universal in my critique just now. I see bright spots of innovative, intentional thinking in many places. &lt;a title="Dan North: Introducing BDD" href="http://dannorth.net/introducing-bdd/" target="_blank"&gt;Behavior-driven development&lt;/a&gt; is about validating code behavior against use cases, which is promising. The DSLs and testing specs in &lt;a title="cucumber testing" href="http://cukes.info/" target="_blank"&gt;cucumber&lt;/a&gt; and &lt;a title="spock unit test framework" href="https://code.google.com/p/spock/" target="_blank"&gt;spock&lt;/a&gt; are elegant and actionable expressions of intent. &lt;a title="Eiffel DBC" href="http://www.eiffel.com/developers/design_by_contract.html" target="_blank"&gt;Eiffel bakes design-by-contract&lt;/a&gt; into the language. Charles Simonyi's work on &lt;a title="intentional programming" href="http://en.wikipedia.org/wiki/Intentional_programming" target="_blank"&gt;intentional programming&lt;/a&gt; is really cool, even if Microsoft Research dropped the idea a few years back. Heck, the whole phenomenon of TDD and disciplined unit testing is about making sure we understand our intentions...

I've also imagined some ways that a new programming language/ecosystem/methodology could raise the bar for our craft even further--ways that recognize the human dimension, that are simple to learn and use, that can be implemented without science fiction, and that are likely to pay off big. I'll be blogging about these ideas in future posts, and I'm using the name "intent" for the effort. Hopefully this will culminate in an "intent" compiler, an "intentional" IDE, and so forth. (Thanks to my friend &lt;a title="Julie Jones: Learn voraciously." href="http://codecraft.co/2012/09/24/julie-jones-learn-voraciously/"&gt;Julie&lt;/a&gt; for suggesting this name and collaborating with me on the effort. Anybody else want in?)

In the meantime, I'd be very interested in your thoughts. Where do you see lack of clarity about intentions as a problem in code? What techniques address the need?</ns2:encoded>
  <ns0:post_id>1339</ns0:post_id>
  <ns0:post_date>2013-10-24 08:26:02</ns0:post_date>
  <ns0:post_name>on-bread-recipes-maps-and-intentions</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="bdd">BDD</category>
  <category domain="post_tag" nicename="behavior-driven-development">behavior-driven development</category>
  <category domain="category" nicename="better-programming-language">better programming language</category>
  <category domain="post_tag" nicename="bread">bread</category>
  <category domain="post_tag" nicename="comments">comments</category>
  <category domain="post_tag" nicename="conditionals">conditionals</category>
  <category domain="post_tag" nicename="cookbooks">cookbooks</category>
  <category domain="post_tag" nicename="cucumber">cucumber</category>
  <category domain="post_tag" nicename="dbc">DBC</category>
  <category domain="post_tag" nicename="design-by-contract">design by contract</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="eiffel">eiffel</category>
  <category domain="post_tag" nicename="error-handling">error handling</category>
  <category domain="post_tag" nicename="fowler">Fowler</category>
  <category domain="post_tag" nicename="intentional-programming">intentional programming</category>
  <category domain="post_tag" nicename="intentions">intentions</category>
  <category domain="post_tag" nicename="names">names</category>
  <category domain="post_tag" nicename="recipes">recipes</category>
  <category domain="post_tag" nicename="spock">spock</category>
  <category domain="post_tag" nicename="syntax">syntax</category>
  <category domain="post_tag" nicename="system-thinking">system thinking</category>
  <category domain="post_tag" nicename="turing">Turing</category>
  <category domain="post_tag" nicename="von-neumann">Von Neumann</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/502940911_10151916490940912</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>http://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5799148651926274048&amp;type=U&amp;a=jq-6</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>4885</ns0:comment_id>
    <ns0:comment_author>Why you should use an IDE instead of vim or emacs | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/05/13/why-you-should-use-an-ide-instead-of-vim-or-emacs/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-13 10:16:47</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] I&amp;#8217;ve worked on developing my new programming language, I&amp;#8217;ve given a lot of thought to how I can add value to the user experience of a software [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2989</ns0:comment_id>
    <ns0:comment_author>Add some more extra redundancy again | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/01/15/add-some-more-extra-redundancy-again/</ns0:comment_author_url>
    <ns0:comment_date>2014-01-15 08:39:23</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] stamp checks and sizeof and alignment tests in the right places? Are we using design-by-contract to prove that consumers and creators of a chunk of code share the same mental models? Do we catch exceptions [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4087</ns0:comment_id>
    <ns0:comment_author>How to make a const-correct codebase in 4300 easy steps | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/03/25/how-to-make-a-const-correct-codebase-in-4300-easy-steps/</ns0:comment_author_url>
    <ns0:comment_date>2014-03-25 11:44:39</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] It is a crying shame (and a glaring irony) that it&amp;#8217;s so hard to code my way to a productive manipulation of &amp;#8230; code. Programmers spend their whole careers validating the proposition that it&amp;#8217;s worthwhile to enable computers to do grunt work, so humans can focus on more interesting tasks. Yet the artifact that programmers produce is so plagued by inconsistencies, so susceptible to bugs, and so complex to process that it takes a major investment to automate working with it. I am going to fix this in the programming ecosystem that I create. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>11914</ns0:comment_id>
    <ns0:comment_author>Variadic macros tricks | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/11/25/variadic-macros-tricks/</ns0:comment_author_url>
    <ns0:comment_date>2014-11-25 11:49:04</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] be in eliminating encapuslation problems with enums, but I recently found another need for it. In my project to create a new programming language, I have to create some foundation packages and classes &amp;#8212; the analog to java.lang in java, or [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>13819</ns0:comment_id>
    <ns0:comment_author>Know Your Limits | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/02/05/know-your-limits/</ns0:comment_author_url>
    <ns0:comment_date>2015-02-05 08:47:51</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] now. :-) I need to add marks such as +reasonable upper bound and +reasonable lower bound to the intent programming language I&amp;#8217;m creating, so that this type of issue is easy to formally communicate. But even without fancy new languages, [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14328</ns0:comment_id>
    <ns0:comment_author>&amp;#8220;Rockstar Developers&amp;#8221; are a dangerous myth | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/03/04/rockstars/</ns0:comment_author_url>
    <ns0:comment_date>2015-03-05 20:15:41</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] the groundbreaking ideas in 1.0? A big part of creating lasting value is communicating so others can appreciate and build upon your [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16586</ns0:comment_id>
    <ns0:comment_author>On Forests and Trees | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/09/02/on-forests-and-trees/</ns0:comment_author_url>
    <ns0:comment_date>2015-09-02 08:49:05</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] features have mitigated this problem somewhat). The &amp;#8220;step routines&amp;#8221; feature of the intent programming language I&amp;#8217;m writing is an attempt to address this problem; perhaps I&amp;#8217;ll blog about that [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Steve Jackson: Lead with Passion</title>
  <link>http://codecraft.co/2013/09/30/steve-jackson-lead-with-passion/</link>
  <pubDate>Mon, 30 Sep 2013 17:48:20 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1349</guid>
  <ns2:encoded>&lt;p style="margin-left:2em;"&gt;&lt;a href="http://codecraft.co/wp-content/uploads/2012/09/guest-post.png"&gt;&lt;img class="alignright size-full wp-image-553" alt="guest post" src="http://codecraft.co/wp-content/uploads/2012/09/guest-post.png" width="183" height="40" /&gt;&lt;/a&gt;&lt;span style="color:#808080;"&gt;&lt;em&gt;[Note from Daniel: This guest post, from my friend &lt;a title="Steve Tolman: It depends." href="http://codecraft.co/2012/09/17/steve-tolman-it-depends/"&gt;Steve Tolman&lt;/a&gt;, is part of an occasional &lt;a title="role models series" href="http://codecraft.co/category/role-models/" target="_blank"&gt;series about important career role models&lt;/a&gt;. I also worked with Steve Jackson, and I agree with Tolman that his energy and dedication instilled many great skills in those who worked on his teams.]&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
While I worked at PowerQuest, and Symantec after its acquisition of PowerQuest, I worked with a man named Steve Jackson.  He started somewhere around 1999 or 2000.  In our organization we had about seven or 8 Steves so we all went by our last names.  I was simply, “Tolman” and he was “Jackson.”

Jackson was the director and VP of all software engineering.  He was my manager and quickly became my friend.  He took his job very seriously and I learned a great deal from him.

By the time I left the team in 2008, I had learned how to run a team, how to build and release software, and how to work well with people.  One of my peers, Lane Johnson (one of the best managers I have ever known, who left the team at the same time) asked me what it was that made Jackson so dang good.  We thought about it for a while and concluded that there was not that proverbial one-thing-you-need-to-know that made him great, but more along the lines of about a bazillion qualities.  A little time brainstorming gave us a list of 45 different skills, techniques, or approaches.  Here are just a few of the highlights.

&lt;b&gt;Believe in the individual&lt;/b&gt;

Jackson’s default mode was to trust people.  Trust them to fit into the team and trust them to do their job, but expect them to do a stand-up job for you.  Get the right people on the bus (read the book &lt;i&gt;&lt;a class="zem_slink" title="Good to Great: Why Some Companies Make the Leap... and Others Don't" href="http://www.amazon.com/Good-Great-Companies-Leap-Others/dp/0066620996%3FSubscriptionId%3D0G81C5DAZ03ZR9WH9X82%26tag%3Dzemanta-20%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0066620996" target="_blank" rel="amazon"&gt;Good to Great&lt;/a&gt;&lt;/i&gt; for more info), give them an assignment, then get the heck out of their way and let them shine.  &lt;!--more--&gt;To find these people, interview for the right skills including the soft skills (like &lt;a title="Humility" href="http://codecraft.co/2012/10/01/humility/"&gt;humility&lt;/a&gt;) that help people fit into a team environment.  After all, a job is way more than just using technical skills to accomplish a task.  Once they have done the job (task, assignment, favor, etc.) always (always!) pay credit where credit is due.  If you steal credit even one time, you destroy trust which may be irreparable.  While these great people are doing a stand-up job for you, be sure to be as generous as possible in rewarding them – bonuses, comp time, promotions, etc.  Oh, and also bring a life balance to the team.  Understand that people work to live and do not live to work.  That is, allow team members to pay attention to life outside of work and let them go to whatever family or personal activities they need to.  Of course, they still have to get their job done, but this flexibility allows people to still have a good home life and fit in well at work.

Sometimes a team member does not fit well on the team.  When you discover this, put in place a plan to help that employee improve.  Sometimes the team member will improve in which case they are praised and given more tasks to complete.  Sometimes they will choose not to improve and will leave.  While this is always unpleasant, it maintains a very high level of accountability and performance on the team.  Frankly, teams like this.  They like it a lot.

&lt;b&gt;Strengthen the team&lt;/b&gt;

Don’t be afraid to manage by walking around; the better you know people personally, the better manager you are.  Use online resources to measure team morale: send out an annual (and anonymous) survey to the team polling how the department is doing, hold luncheons with team members at random.  Always be on the watch for morale concerns and make sure people know they can vent, ask questions, etc. without any fear of backlash or retaliation.  (I often took Jackson up on this and he heard many ears-full of my gripes.)  Once you have &lt;a title="Lynn Bendixsen: Listen." href="http://codecraft.co/2012/10/02/lynn-bendixsen-listen/"&gt;heard the issues and concerns&lt;/a&gt;, be sure to address them.  Quite possibly, half of your time will be addressing team morale and effectiveness issues but doing so properly will always pay off with big dividends.  Be a part of the team.  Jackson considered himself just another team member.  That’s not to say he wouldn’t make the hard decisions – he certainly did that, but he never lorded over anyone and he always brought a well grounded approach with him to work each day.

&lt;b&gt;Expect intense accountability&lt;/b&gt;

&lt;b&gt;&lt;/b&gt;If there was one thing that made Jackson boil it was a lack of accountability.  His teams were always expected to deliver on time, on scope, and on budget.  Everyone knew this too.  Advocate pushing down responsibility where appropriate, empower people to do their job, and hold them accountable.  With Jackson, we worked long and hard (massive understatement just now).

In 2003 I was assigned to build and release a product that had some serious legal requirements for the company.  Missing the date was absolutely not an option.  This project quickly turned into a death march for the team.  As we progressed through the work, we discovered that much more code was required to get the product to work than we originally scoped – many times more.  There is probably a whole book that could be written about this project, the obstacles we overcame, and the lessons we learned from it.  Suffice it to say that this project became known as the black hole project because it sucked in &lt;em&gt;all&lt;/em&gt; available resources.  It seemed that no one could escape its ever-increasing gravitational pull.  This led to about a year of 8 a.m. to midnight or 2 a.m. days.  I was wiped out by the end of the project (which we released 9 days early, by the way, but we won’t talk about being on budget for this project!)

Jackson kept us accountable for the work even though it grew and grew (and grew!)  He and I spent many long hours dealing with crisis after crisis, discussing how we could complete the work on time.  He was very instrumental in suggesting solutions and approaches that kept the project on track.  The lesson I learned was that even though he held me directly accountable for the work, he was very willing to be involved in keeping the project going by helping me with some of the absolutely overwhelming obstacles that seemed to love jumping in our path.  Bottom line: we all worked our back sides off but we did it together as a team and we grew because of it.  Some of the most powerful lessons I have learned in my career came in the year of the black hole project.

In spite of the often brutal hours, Jackson was always our champion.  He bought team munchies when the going was tough.  He bought untold thousands of dollars of dinners for our late nights.  We had celebration lunches and parties whenever we shipped a product.  While he held us accountable for the work, he always celebrated our successes and rewarded the team accordingly.

It is fair to call out that while you can expect the very best from your team, you should also expect them to have fun.  It turns out that teams who work hard together tend to play hard together too.  This does marvelous things to a team’s morale.

&lt;b&gt;Train and mentor&lt;/b&gt;

Working for Jackson meant that we were &lt;a title="Julie Jones: Learn voraciously." href="http://codecraft.co/2012/09/24/julie-jones-learn-voraciously/"&gt;always reading a training book&lt;/a&gt;, attending a class, or otherwise learning how to be better.  Train your teams on your process, your culture, your toolset, your technology, and anything else you think is appropriate.  Once you complete a training topic, talk about how to implement it into your team and then actually make changes that implement those ideas and approaches.  Then, the management team should hold their teams and each other accountable to actually perform the new behavior until it becomes a part of your team’s DNA.

Not everything will work, but you will never find ways to improve until you just start trying stuff.  Be sure that you plan in some fun.  We would often attend “training” films.  These were usually newly released movies that everyone wanted to see.  True to his generosity, Jackson would often buy out the movie showing and, for a very nominal charge, invite our family members to attend with us.  How cool is that?

[caption id="attachment_1350" align="aligncenter" width="500"]&lt;img class="size-full wp-image-1350" alt="Whether it was go karts or pop-bottle rockets, Jackson always found a way to combine mentoring with fun." src="http://codecraft.co/wp-content/uploads/2013/09/gokart.png" width="500" height="145" /&gt; Whether it was go karts or pop-bottle rockets, Jackson always found a way to combine mentoring with fun. Photo credit: &lt;a href="http://www.flickr.com/photos/92497926@N00/100422567"&gt;Thedovardhana Kote (Flickr)&lt;/a&gt;[/caption]

Spend a lot of time mentoring your managers.  I was one of Jackson’s managers that needed a lot of mentoring.  Fortunately, Jackson is a very patient person and could show me a better way to solving many of the issues we faced.  He taught me to deal with issues as they came up.  Usually the issue worked out favorably but sometimes the resolution was painful.  I learned how to handle both.

My time working with Jackson lasted about eight years and was the single greatest experience of my career up to that point.  Since then, I have used the skills I learned while working with him to make my subsequent teams into high (or higher) performing teams.  While I am not as good at it as he is, I have enjoyed good success and continue to refine those skills as I work with my current team.  Jackson is still my friend – with Lane, we often get together for breakfast or lunch and catch up on life.

Hey Jackson, thanks for the lessons!

&lt;hr /&gt;

&lt;img style="margin-right:20px;" title="Steve Tolman" alt="" /&gt;

&lt;em&gt;&lt;a href="http://codecraft.co/wp-content/uploads/2013/09/steve-tolman.png"&gt;&lt;img class="alignleft size-full wp-image-1352" style="margin-right:1em;" alt="steve-tolman" src="http://codecraft.co/wp-content/uploads/2013/09/steve-tolman.png" width="70" height="77" /&gt;&lt;/a&gt;Steve has been a software pro for over 29 years.  In that time he’s worked as a tester, technical editor, programmer, and manager.  He’s done all of this with both onshore and offshore teams.  Currently Steve works at &lt;a title="Perfect Search" href="http://www.perfectsearchcorp.com" target="_blank"&gt;Perfect Search&lt;/a&gt; as the Director of Engineering.
&lt;/em&gt;</ns2:encoded>
  <ns0:post_id>1349</ns0:post_id>
  <ns0:post_date>2013-09-30 11:48:20</ns0:post_date>
  <ns0:post_name>steve-jackson-lead-with-passion</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="accountability">accountability</category>
  <category domain="post_tag" nicename="budget">budget</category>
  <category domain="post_tag" nicename="commitment">commitment</category>
  <category domain="post_tag" nicename="communication">communication</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="fun">fun</category>
  <category domain="category" nicename="guest-posts">Guest Posts</category>
  <category domain="post_tag" nicename="hard-work">hard work</category>
  <category domain="post_tag" nicename="leadership">leadership</category>
  <category domain="post_tag" nicename="listening">listening</category>
  <category domain="post_tag" nicename="mentoring">mentoring</category>
  <category domain="post_tag" nicename="morale">morale</category>
  <category domain="category" nicename="role-models">Role Models</category>
  <category domain="post_tag" nicename="scope">scope</category>
  <category domain="post_tag" nicename="teambuilding">teambuilding</category>
  <category domain="post_tag" nicename="teamwork">teamwork</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/502940911_10151866012435912</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>http://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5790502461949087744&amp;type=U&amp;a=oYKy</ns0:meta_value>
  </ns0:postmeta>
  </item>
<item>
  <title>Why we need try...finally, not just RAII</title>
  <link>http://codecraft.co/2013/10/31/why-we-need-try-finally-not-just-raii/</link>
  <pubDate>Fri, 01 Nov 2013 02:07:44 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1389</guid>
  <ns2:encoded>The claim has been made that because C++ supports &lt;a class="zem_slink" title="Resource Acquisition Is Initialization" href="http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization" target="_blank" rel="wikipedia"&gt;RAII&lt;/a&gt; (resource acquisition is initialization), it doesn't need &lt;span style="font-family:courier, fixedwidth;"&gt;try...finally&lt;/span&gt;. I think this is wrong. There is at least one use case for &lt;span style="font-family:courier, fixedwidth;"&gt;try...finally&lt;/span&gt; that's very awkward to model with RAII, and one that's so ugly it ought to be outlawed.

&lt;strong style="color:#000080;"&gt;The awkward use case&lt;/strong&gt;

What if what you want to do during a &lt;span style="font-family:courier, fixedwidth;"&gt;...finally&lt;/span&gt; block has nothing to do with freeing resources? For example, suppose you're writing the next version of Guitar Hero, and you want to guarantee that when your avatar leaves the stage, the last thing she does is take a bow--even if the player interrupts the performance or an error occurs.

[caption id="" align="aligncenter" width="336"]&lt;img src="http://farm3.staticflickr.com/2765/4162745269_6989a977bd.jpg" alt="" width="336" height="500" /&gt; ...finally, take a bow. Photo credit: &lt;a href="http://www.flickr.com/photos/gavinzac/4162745269" target="_blank"&gt;gavinzac (Flickr)&lt;/a&gt;[/caption]

Of course you can ensure this behavior with an RAII pattern, but it's silly and artificial. Which of the following two snippets is cleaner and better expresses intent?&lt;!--more--&gt;
&lt;p style="font-weight:bold;font-family:arial, helvetica, sans serif;margin-left:2em;"&gt;RAII solution&lt;/p&gt;

&lt;pre style="font-size:9pt;margin-left:2em;padding:1em;border:solid 1px #606060;background-color:#e8e8e8;margin-bottom:2em;"&gt;&lt;span style="color:blue;"&gt;void&lt;/span&gt; perform(Avatar &lt;span style="color:blue;"&gt;const&lt;/span&gt; &amp;amp; avatar) {
    &lt;span style="color:blue;"&gt;class&lt;/span&gt; BowGuarantee {
        Avatar &lt;span style="color:blue;"&gt;const&lt;/span&gt; &amp;amp; avatar;
    &lt;span style="color:blue;"&gt;public&lt;/span&gt;:
        Bow(Avatar &lt;span style="color:blue;"&gt;const&lt;/span&gt; &amp;amp; avatar) : avatar(avatar) {}
        ~Bow() {
            avatar.take_a_bow();
        }
    } my_bow_guarantee(avatar);

        &lt;span style="color:green;"&gt;// Do all the heavy lifting in the function.

    // The bow silently but reliably takes place when 
    // my_bow_guarantee is destroyed.&lt;/span&gt;
}&lt;/pre&gt;
Or this:
&lt;p style="font-weight:bold;font-family:arial, helvetica, sans serif;margin-left:2em;"&gt;Solution with try...finally&lt;/p&gt;

&lt;pre style="font-size:9pt;margin-left:2em;padding:1em;border:solid 1px #606060;background-color:#e8e8e8;margin-bottom:2em;"&gt;&lt;span style="color:blue;"&gt;void&lt;/span&gt; perform(Avatar const &amp;amp; avatar) {
    &lt;span style="color:blue;"&gt;try&lt;/span&gt; {
        &lt;span style="color:green;"&gt;// Do all the heavy lifting in the function.&lt;/span&gt;
    } &lt;span style="color:blue;"&gt;finally&lt;/span&gt; {
        avatar.take_a_bow();
    }
}&lt;/pre&gt;
Don't get me wrong. I like RAII, and I use it as a best practice. But you gotta admit, &lt;span style="font-family:courier, fixedwidth;"&gt;try...finally&lt;/span&gt; is a far slicker way to address this use case. It takes one less variable, one less class, and many less lines.

My own experience tells me that this use case crops up regularly; it's not so exotic that language designers can marginalize it.

&lt;strong style="color:#000080;"&gt;The so-ugly-it-ought-to-be-outlawed use case&lt;/strong&gt;

Here's a problem that's a bit trickier. I won't go so far as to claim that you can't solve it with RAII--I just claim that no software developer who cares about high-quality code ought to be happy with the solution that RAII offers. &lt;span style="color:#800000;"&gt;(Update: Thanks to Tianyu Zhu [see comment stream] for challenging me to clean up this ugliness with C++ 11 closures. I'll write a follow-up post about as soon as I fiddle a bit, and we'll see how much better it looks... In the meantime, read the following with a pre-C++ 11 mindset.)&lt;/span&gt;

Today I was trying to implement &lt;a title="Postcondition" href="http://en.wikipedia.org/wiki/Postcondition" target="_blank" rel="wikipedia"&gt;postconditions&lt;/a&gt; in one of my C++ codebases. This is a "&lt;a href="http://www.eiffel.com/developers/design_by_contract.html" target="_blank"&gt;design-by-contract&lt;/a&gt;" technique that enforces a guarantee about the state that a function provides on exit. My first attempt used a macro (so I could string-ize expr with the # prefix; this is one of the few use cases where I love macros...) to define a postcondition more or less like this:
&lt;pre style="font-size:9pt;margin-left:2em;padding:1em;border:solid 1px #606060;background-color:#e8e8e8;margin-bottom:2em;"&gt;&lt;span style="color:blue;"&gt;#define&lt;/span&gt; POSTCONDITION(expr) \
&lt;span style="color:blue;"&gt;    if&lt;/span&gt; (!expr) \
&lt;span style="color:blue;"&gt;        throw&lt;/span&gt; ContractViolation(#expr, __FILE__, __LINE__)&lt;/pre&gt;
Looks pretty straightforward, right? I flipped over to a function where I wanted to test postconditions, and invoked the macro a few times at the bottom:
&lt;pre style="font-size:9pt;margin-left:2em;padding:1em;border:solid 1px #606060;background-color:#e8e8e8;margin-bottom:2em;"&gt;RecordID insert_new_record(Tuple const &amp;amp; fields,
        Transaction &amp;amp; trans, File &amp;amp; main_table, 
        vector&amp;lt;File &amp;amp;&amp;gt; const &amp;amp; indexes) {

    &lt;span style="color:green;"&gt;// Declare some local variables.&lt;/span&gt;
    &lt;span style="color:blue;"&gt;size_t&lt;/span&gt; bytes_written = 0;
    RecordID new_record_id;
    &lt;span style="color:blue;"&gt;size_t&lt;/span&gt; indexes_updated = 0;

        &lt;span style="color:green;"&gt;// Do all the heavy lifting. (50 lines omitted)&lt;/span&gt;

    &lt;span style="color:green;"&gt;// Guarantee that we've fulfilled our contract.&lt;/span&gt;
    POSTCONDITION(trans.committed() == (new_record_id != 0));
    POSTCONDITION(trans.committed() == (bytes_written &amp;gt; 0));
    POSTCONDITION(trans.committed() ? 
        indexes_updated == indexes.size() : 
        indexes_updated == 0);
}&lt;/pre&gt;
For about thirty seconds after I wrote this, I was feeling cheerful. And then I groaned.

I'd fallen victim to the classic problem that RAII is supposed to solve--in the 50 omitted lines, if I threw exceptions or rejected input, my postconditions wouldn't ever be tested. Since the postconditions were supposed to guarantee compliance to a contract under all cases, without RAII, I'd sort of defeated the whole purpose.

So I went back and rewrote the macro:
&lt;pre style="font-size:9pt;margin-left:2em;padding:1em;border:solid 1px #606060;background-color:#e8e8e8;margin-bottom:2em;"&gt;&lt;span style="color:blue;"&gt;#define&lt;/span&gt; POSTCONDITION(expr) \
    &lt;span style="color:blue;"&gt;class&lt;/span&gt; _postcond_##__LINE__ { \
        &lt;span style="color:blue;"&gt;char const&lt;/span&gt; * expr_text;
        &lt;span style="color:blue;"&gt;bool&lt;/span&gt; value;
        _postcond_##__LINE__(&lt;span style="color:blue;"&gt;bool&lt;/span&gt; e, &lt;span style="color:blue;"&gt;char const&lt;/span&gt; * etxt) : \
            expr_text(etxt), value(e) {} \
        ~_postcond##__LINE__() { \
            &lt;span style="color:blue;"&gt;if&lt;/span&gt; (!value) \
                &lt;span style="color:blue;"&gt;throw&lt;/span&gt; ContractViolation(#expr, __FILE__, __LINE__); \
    } my_postcond_##__LINE__&lt;/pre&gt;
Setting aside the increasingly yucky macro, can you see why I was groaning again after another 30 seconds?

Yes, this macro uses RAII to test the postcondition when the code goes out of scope. But when does it &lt;em&gt;store&lt;/em&gt; the value of the expression it's going to test?

Yep. When it's &lt;em&gt;created&lt;/em&gt;. And that, in a nutshell, is my beef with RAII. It requires you to snapshot state at the top of a lexical scope, even when that's just the opposite of what you need.

You can hit a square peg into a round hole. C++ is nothing if not flexible. But it's so ugly it makes me shudder. In C++ 98, what you have to do is create state reference variables in your postcondition class for every entity that will participate in the eventually evaluated expression. In C++ 11 you can use a closure that captures reference variables, which is a bit better. But I'm not sure how much; I'll do a follow-up post about that. Here, sans macro for the sake of clarity, is what a correct C++ 98 implementation of the idea would look like in my function that updates a database record:
&lt;pre style="font-size:9pt;margin-left:2em;padding:1em;border:solid 1px #606060;background-color:#e8e8e8;margin-bottom:2em;"&gt;RecordID insert_new_record(Tuple const &amp;amp; fields, 
        Transaction &amp;amp; trans, File &amp;amp; main_table, 
        vector&amp;lt;File &amp;amp;&amp;gt; const &amp;amp; indexes) {

    &lt;span style="color:green;"&gt;// Declare some local variables.&lt;/span&gt;
    &lt;span style="color:blue;"&gt;size_t&lt;/span&gt; bytes_written = 0;
    RecordID new_record_id;
    &lt;span style="color:blue;"&gt;size_t&lt;/span&gt; indexes_updated = 0;

    &lt;span style="color:green;"&gt;// Declare a postcondition class that stores references
    // to all the variables it will test when it goes out of
    // scope. In this example, it requires us to duplicate
    // each local variable, plus 2 of the function parameters.
    // Not only does it take a ridiculous amount of code--it's
    // fragile during maintenance, and it totally obscures
    // our relatively straightforward intent.&lt;/span&gt;
    &lt;span style="color:blue;"&gt;class&lt;/span&gt; postcondition {
        &lt;span style="color:blue;"&gt;size_t&lt;/span&gt; &amp;amp; _bytes_written;
        RecordID &amp;amp; _new_record_id;
        &lt;span style="color:blue;"&gt;size_t&lt;/span&gt; &amp;amp; _indexes_updated;
        Transaction &amp;amp; _trans;
        vector&amp;lt;File &amp;amp;&amp;gt; &amp;amp; _indexes; 
    &lt;span style="color:blue;"&gt;public&lt;/span&gt;:
        postcondition(&lt;span style="color:blue;"&gt;size_t&lt;/span&gt; &amp;amp; bw, RecordID &amp;amp; recid, 
            &lt;span style="color:blue;"&gt;size_t&lt;/span&gt; &amp;amp; iup, Transaction &amp;amp; trans):
            _bytes_written(bw), _new_record_id(recid),
            _indexes_updated(iup), _trans(trans) {}
        ~postcondition() {
            &lt;span style="color:blue;"&gt;char const&lt;/span&gt; * expr_text = NULL;
            &lt;span style="color:blue;"&gt;if&lt;/span&gt; (trans.committed()) {
                &lt;span style="color:blue;"&gt;if&lt;/span&gt; (_new_record_id == 0) 
                    expr_text = "expected new record id != 0";
                &lt;span style="color:blue;"&gt;else if&lt;/span&gt; (_bytes_written &amp;lt; 1) 
                    expr_text = "expected bytes written &amp;gt; 0";
                &lt;span style="color:blue;"&gt;else if&lt;/span&gt; (_indexes_updated &amp;lt; indexes.size()) 
                    expr_text = "expected all indexes to be updated";
            } else {
                &lt;span style="color:blue;"&gt;if&lt;/span&gt; (_new_record_id != 0) 
                    expr_text = "expected no new record id"
                &lt;span style="color:blue;"&gt;else if&lt;/span&gt; (_bytes_written &amp;gt; 0)
                    expr_text = "expected 0 bytes written";
                &lt;span style="color:blue;"&gt;else if&lt;/span&gt; (_indexes_updated &amp;gt; 0)
                    expr_text = "expected 0 indexes updated";
            }
            &lt;span style="color:blue;"&gt;if&lt;/span&gt; (expr_text) {
                throw ContractViolation(expr_text, __FILE__, __LINE__);
            }
        }
    } mypostcondition;

        &lt;span style="color:green;"&gt;// Do all the heavy lifting. (50 lines omitted)&lt;/span&gt;

    &lt;span style="color:green;"&gt;// Postcondition is enforced no matter how or when we exit.&lt;/span&gt;
}&lt;/pre&gt;
If you can read that code without wincing, you have a stronger constitution than I do. It's awful. And good luck macro-izing it; even with __VA_ARGS__ to give you variadic macros, you end up with something messy enough to curl the hair on your toes. Given the choice between hand-rolled, bespoke postcondition classes in every function, a macro nightmare, or nothing, most of us would (sensibly) choose nothing. Forget postconditions. Off the top of my head, I can't think of another coding goal besides postconditions that needs to interact with final state on exit, and that is thus a nightmare to work with using RAII. But I wouldn't be surprised if there are others.

What would it look like if C++ supported &lt;span style="font-family:courier, fixedwidth;"&gt;try...finally&lt;/span&gt;? My first macro definition would work just fine, and the function body would be simple and clean:
&lt;pre style="font-size:9pt;margin-left:2em;padding:1em;border:solid 1px #606060;background-color:#e8e8e8;margin-bottom:2em;"&gt;RecordID insert_new_record(Tuple fields, Transaction &amp;amp; trans, 
        File &amp;amp; main_table, vector&amp;lt;File &amp;amp;&amp;gt; indexes) {
&lt;span style="color:green;"&gt;    // Declare some local variables.&lt;/span&gt;
    &lt;span style="color:blue;"&gt;size_t&lt;/span&gt; bytes_written = 0;
    RecordID new_record_id;
    &lt;span style="color:blue;"&gt;size_t&lt;/span&gt; indexes_updated = 0;    &lt;span style="color:blue;"&gt;try&lt;/span&gt; {
        &lt;span style="color:green;"&gt;// Do all the heavy lifting. (50 lines omitted)&lt;/span&gt;
    } &lt;span style="color:blue;"&gt;finally&lt;/span&gt; {
        &lt;span style="color:green;"&gt;// Guarantee that we've fulfilled our contract.&lt;/span&gt;
        POSTCONDITION(trans.committed() == (new_record_id != 0));
        POSTCONDITION(trans.committed() == (bytes_written &amp;gt; 0));
        POSTCONDITION(trans.committed() ? 
            indexes_updated == indexes.size() : 
            indexes_updated == 0);
    }
}&lt;/pre&gt;
RAII and &lt;span style="font-family:courier, fixedwidth;"&gt;try...finally&lt;/span&gt; may be able to achieve the same things, but they are definitely not equally good alternatives in all use cases.

I understand some of the complex choices that C++'s standardization committee has to wrestle with; I can imagine how they might have concluded that the extra benefit of &lt;span style="font-family:courier, fixedwidth;"&gt;try...finally&lt;/span&gt; was not worth the compiler burden they'd be imposing. I also admit that if C++ had &lt;span style="font-family:courier, fixedwidth;"&gt;try...finally&lt;/span&gt;, it might diminish RAII's status as the recommended C++ solution to resource management, which could be a bad thing. But those pragmatic arguments are biased toward compiler creators, not toward us humble programmers who make a living writing code. So much for user-centered design...

The lack of &lt;span style="font-family:courier, fixedwidth;"&gt;try...finally&lt;/span&gt; is a shortcoming of C++ that some of the smartest programmers on the planet have worked around. Alexandrescu's ScopeGuard for C++ 98 is pretty amazing, and would clean up a lot of the code that I've shown above; the C++ 11 version is a huge improvement. But it feels to me like we shouldn't have to work this hard to do something that's conceptually so straightforward. I want a more satisfying answer in &lt;a href="/2013/10/24/on-bread-recipes-maps-and-intentions/"&gt;my "better programming language" project called "intent."&lt;/a&gt; Stay tuned for more discussion as intent matures.</ns2:encoded>
  <ns0:post_id>1389</ns0:post_id>
  <ns0:post_date>2013-10-31 20:07:44</ns0:post_date>
  <ns0:post_name>why-we-need-try-finally-not-just-raii</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="best-practices">best practices</category>
  <category domain="category" nicename="better-programming-language">better programming language</category>
  <category domain="post_tag" nicename="c">c++</category>
  <category domain="post_tag" nicename="compilers">compilers</category>
  <category domain="post_tag" nicename="dbc">DBC</category>
  <category domain="post_tag" nicename="design-by-contract">design by contract</category>
  <category domain="post_tag" nicename="early-exit">early exit</category>
  <category domain="post_tag" nicename="exceptions">exceptions</category>
  <category domain="post_tag" nicename="finally">finally</category>
  <category domain="post_tag" nicename="postconditions">postconditions</category>
  <category domain="post_tag" nicename="raii">RAII</category>
  <category domain="post_tag" nicename="standardization">standardization</category>
  <category domain="post_tag" nicename="try">try</category>
  <ns0:postmeta>
    <ns0:meta_key>twitter_cards_summary_img_size</ns0:meta_key>
    <ns0:meta_value>a:7:{i:0;i:336;i:1;i:500;i:2;i:2;i:3;s:24:"width="336" height="500"";s:4:"bits";i:8;s:8:"channels";i:3;s:4:"mime";s:10:"image/jpeg";}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_zemanta_has_recommendations</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/10151934541875912</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>http://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5801861893916196864&amp;type=U&amp;a=vY3O</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_job_id</ns0:meta_key>
    <ns0:meta_value>16023208801</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>2840</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-11-04 08:45:54</ns0:comment_date>
    <ns0:comment_content>Thanks for pointing this out. I write software that runs on supercomputers, and the compilers there are way behind the times. (I'm just barely convincing people to move from C to C++ 98. Sigh...) Anyway, I had run across ScopeGuard and its variants in the past, but understood it only as a nice way to do cleanup on exit. I thought it evaluated code when the ScopeGuard class was created, which wouldn't work for postconditions. After a little study this past weekend, I realize that the technique solved my postcondition problem as well. It's nice to see that in C++11, the technique has become fully mainstreamed. (And I agree with Castaño, who you referred to, that the idiom in D is super slick.)</ns0:comment_content>
    <ns0:comment_parent>2829</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2832</ns0:comment_id>
    <ns0:comment_author>earwicker</ns0:comment_author>
    <ns0:comment_author_email>spam@earwicker.com</ns0:comment_author_email>
    <ns0:comment_date>2013-11-03 17:06:38</ns0:comment_date>
    <ns0:comment_content>Here's another way of implementing try-finally in C++11, no need to declare a wrapper object explicitly:

http://stackoverflow.com/a/385081/27423</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>8532639</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2841</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-11-04 08:48:25</ns0:comment_date>
    <ns0:comment_content>Daniel: You were quick to pick up on the implications of lambdas, if you realized you could have try...finally back in 2008! Wow. Thanks for the link, and for the smart answer on StackOverflow. I've up-voted that answer.</ns0:comment_content>
    <ns0:comment_parent>2832</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2859</ns0:comment_id>
    <ns0:comment_author>earwicker</ns0:comment_author>
    <ns0:comment_author_email>spam@earwicker.com</ns0:comment_author_email>
    <ns0:comment_date>2013-11-08 03:37:52</ns0:comment_date>
    <ns0:comment_content>Thank you, but certainly not my insight/foresight :) Dates back to Lisp and Smalltalk (40 years?) http://www.ai.mit.edu/projects/iiip/doc/CommonLISP/HyperSpec/Body/mac_with-open-file.html Same idea in Java: http://www.octopull.co.uk/java/ACCU-Spring-2001/img15.htm </ns0:comment_content>
    <ns0:comment_parent>2841</ns0:comment_parent>
    <ns0:comment_user_id>8532639</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2829</ns0:comment_id>
    <ns0:comment_author>sstereomatchingkiss</ns0:comment_author>
    <ns0:comment_author_email>stereomatchingkiss@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>https://plus.google.com/101849245918876552662</ns0:comment_author_url>
    <ns0:comment_date>2013-11-02 18:55:17</ns0:comment_date>
    <ns0:comment_content>this blog(http://the-witness.net/news/2012/11/scopeexit-in-c11/) introduce a very interesting solution

in short

template 
struct ScopeExit {
    ScopeExit(F f) : f(f) {}
    ~ScopeExit() { f(); }
    F f;
};

template 
ScopeExit MakeScopeExit(F f) {
    return ScopeExit(f);
};

#define SCOPE_EXIT(code) \
    auto STRING_JOIN2(scope_exit_, __LINE__) = MakeScopeExit([=](){code;});


example :
something A;
SCOPE_EXIT(A.clean());
//..........


I still like the way of RAII better than try...finally</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>hc_post_as</ns0:meta_key>
      <ns0:meta_value>googleplus</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>hc_avatar</ns0:meta_key>
      <ns0:meta_value>https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=50</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>hc_foreign_user_id</ns0:meta_key>
      <ns0:meta_value>101849245918876552662</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2839</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-11-04 08:38:12</ns0:comment_date>
    <ns0:comment_content>Very nice! Thanks for teaching me something I hadn't fully understood. I have been away from C++ for a few years, and somehow ScopeGuard didn't make it on my radar. The big thing I learned when I went back and read &lt;a href="http://www.drdobbs.com/cpp/generic-change-the-way-you-write-excepti/184403758" title="scopeguard" target="_blank" rel="nofollow"&gt;Alexandrescu's original ScopeGuard article&lt;/a&gt; is that C++ 98 allows reference variables to extend the lifetime of temporaries. That little gem had not been one I'd understood; it is the major reason why his technique can get around my complaint that if you declare your postcondition early, you're stuck snapshotting an early version of state against which postconditions are evaluated.

I also tracked down Alexandrescu's talk about the C++ version of ScopeGuard, and did a little studying about how lambdas make this so much better. Hooray!

I still think it's symptomatic of unfortunate language design that someone with that much brainpower had to get involved, just to solve a straightforward problem that every user of the language ought to care about.</ns0:comment_content>
    <ns0:comment_parent>2826</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2823</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-10-31 21:57:01</ns0:comment_date>
    <ns0:comment_content>Hmm. I'm going to go study scope_guard and lambdas in C++ 11/14 again and see. You're right that that a closure lambda would make the postcondition macro better (good catch! thanks). I'll have to ponder whether it makes the first use case cleaner.</ns0:comment_content>
    <ns0:comment_parent>2822</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2826</ns0:comment_id>
    <ns0:comment_author>tianyuzhu</ns0:comment_author>
    <ns0:comment_author_email>tian.tian098@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2013-11-01 21:26:44</ns0:comment_date>
    <ns0:comment_content>The bad thing about using RAII for post conditions is that you'd have to instantiate the RAII object as soon as possible. If your code throws before the object is instantiated, then it won't run.

So you're forced to think about when a post condition might become applicable. The good thing, though, is that you'd have to think about that anyways, and RAII actually allows you to not have a whole bunch of nested try...finally blocks.

Here's an example. Using RAII:

// First act
Performer singer;
scope_guard { singer.bow(); }
singer.perform();

// Second act
Performer dancer;
scope_guard { dancer.bow(); }
perform_together(singer, dancer);

Using try..finally:

Performer singer;
try {
    //  First act
    singer.perform();

    // Second act
    Performer dancer;
    try {
        perform_together(singer, dancer);
    } finally {
        dancer.bow();
    }
} finally {
    singer.bow();
}</ns0:comment_content>
    <ns0:comment_parent>2823</ns0:comment_parent>
    <ns0:comment_user_id>11176301</ns0:comment_user_id>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2822</ns0:comment_id>
    <ns0:comment_author>Tianyu Zhu</ns0:comment_author>
    <ns0:comment_author_email>tian.tian098@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://gravatar.com/tianyuzhu</ns0:comment_author_url>
    <ns0:comment_date>2013-10-31 21:21:06</ns0:comment_date>
    <ns0:comment_content>Just a thought: what if your RAII object stored a lambda to the expression you wanted to evaluate?

Actually, that's exactly what scope_guard does, which I believe solves both of your problems nicely.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>11424</ns0:comment_id>
    <ns0:comment_author>J</ns0:comment_author>
    <ns0:comment_author_email>j@razemail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://razemail.com</ns0:comment_author_url>
    <ns0:comment_date>2014-11-11 06:04:55</ns0:comment_date>
    <ns0:comment_content>D has had scoped exit from the beginning. Unfortunately there are no big companies supporting it, but that may well be the language you should be using instead of c++11</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>3142554279</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1415711095</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>17409</ns0:comment_id>
    <ns0:comment_author>quicknir</ns0:comment_author>
    <ns0:comment_author_email>quicknir@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://turingtester.wordpress.com</ns0:comment_author_url>
    <ns0:comment_date>2015-12-28 14:30:30</ns0:comment_date>
    <ns0:comment_content>As soon as I read this I thought of scopeguard, which I see that other people have mentioned. I'm curious, does this cause you to recant the position in the title of your article? I actually think that scopeguard is nicer than try/finally in every way, it avoids the complicated nasty nesting. And practically, the majority of the time, the finally block is just cleaning up non-memory resources anyhow, which RAII does much more nicely.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>84850462</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>18195322799</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1451338233</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16957</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2015-10-20 11:54:40</ns0:comment_date>
    <ns0:comment_content>That gave me a good chuckle. Yuck! But it definitely works...</ns0:comment_content>
    <ns0:comment_parent>16956</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>16023057438</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1445363680</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16956</ns0:comment_id>
    <ns0:comment_author>Bastian</ns0:comment_author>
    <ns0:comment_author_email>bastian.erdnuess@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2015-10-20 11:48:34</ns0:comment_date>
    <ns0:comment_content>Yet another try/finally:

try { try { // alias "TRY"
//     try this
throw Finally(); } catch (...) { // alias "FINALLY" 
//     always to that
throw; } catch (Finally const &amp;amp;) { } // alias "END"</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>16022891420</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1445363315</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>11432</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2014-11-11 08:34:42</ns0:comment_date>
    <ns0:comment_content>Yes, that is a nifty feature of D. I have debated switching to D on some of my projects...</ns0:comment_content>
    <ns0:comment_parent>11424</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>3147327221</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1415720083</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>17410</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2015-12-28 18:00:37</ns0:comment_date>
    <ns0:comment_content>I'd say it takes a lot of the teeth out of my argument. Scopeguard does have many great features that mostly make my concern go away. However, you mentioned one virtue of scopeguard that I don't actually like so much: the lack of nesting. I am not a fan of massively nested stuff, of course, but sometimes I kind of *like* the curly braces of try...finally to make the guarded scope totally explicit. I guess if I really want curlies, I can add them just for form... :-)</ns0:comment_content>
    <ns0:comment_parent>17409</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1451350839</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>18199924777</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>17689</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2016-03-15 07:31:31</ns0:comment_date>
    <ns0:comment_content>I agree that RAII has some nice benefits. Those benefits are more apparent if the cleanup you want to do is very standardized (e.g., close a file handle, release memory). But if the cleanup you want to do is unique to the particular block of code you are in--such as my example about having an avatar take a bow--then creating a custom class for just that one block of code seems less desirable. In other words, repeatability is only useful if you need to repeat something. :-)</ns0:comment_content>
    <ns0:comment_parent>17676</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>20779100419</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1458048693</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>17676</ns0:comment_id>
    <ns0:comment_author>whatsbottle</ns0:comment_author>
    <ns0:comment_author_email>whatsbottle@outlook.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://whatsbottle.wordpress.com</ns0:comment_author_url>
    <ns0:comment_date>2016-03-11 09:04:41</ns0:comment_date>
    <ns0:comment_content>I totally disagree your point. As a daily Java developer, I hate try-finally with passion. RAII initially looks more efforts, in fact it save time and make code cleaner and correct. C++'s RAII is "repeatable", you write the class once and forget it forever. With try-finally, people tend to copy-paste it here and there, or just ignore it. There is nothing to ensure they won't forget to write the "finally" block.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>70922082</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>20658286633</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1457712285</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
</item>
<item>
  <title>My first software-defined supercompute cluster</title>
  <link>http://codecraft.co/2013/11/25/my-first-software-defined-supercompute-cluster/</link>
  <pubDate>Mon, 25 Nov 2013 20:35:31 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=1501</guid>
  <ns2:encoded>This week on the Adaptive Computing blog, I write about what it was like to start up a modest supercomputer on the Amazon cloud. &lt;a title="supercompute on Amazon" href="http://www.adaptivecomputing.com/blog-cloud/my-first-software-defined-supercompute-cluster/" target="_blank"&gt;Check it out&lt;/a&gt;...

[caption id="" align="alignnone" width="640"]&lt;img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/5/50/Wide-angle_view_of_the_ALMA_correlator.jpg/640px-Wide-angle_view_of_the_ALMA_correlator.jpg" width="640" height="424" /&gt; Supercomputing hardware is cool, as this photo of the ALMA correlator in Chile demonstrates. But it’s hard to beat the amazing flexibility of software-based clusters in the cloud. Photo credit: ESO (Wikimedia Commons)[/caption]</ns2:encoded>
  <ns0:post_id>1501</ns0:post_id>
  <ns0:post_date>2013-11-25 13:35:31</ns0:post_date>
  <ns0:post_name>my-first-software-defined-supercompute-cluster</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="amazon">Amazon</category>
  <category domain="post_tag" nicename="aws">AWS</category>
  <category domain="post_tag" nicename="ec2">EC2</category>
  <category domain="post_tag" nicename="hpc">hpc</category>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <category domain="post_tag" nicename="supercomputers">supercomputers</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/10152000877065912</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>http://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5810838011344080896&amp;type=U&amp;a=2WKy</ns0:meta_value>
  </ns0:postmeta>
  </item>
<item>
  <title>A Comedy of Carelessness</title>
  <link>http://codecraft.co/2013/12/09/a-comedy-of-carelessness/</link>
  <pubDate>Mon, 09 Dec 2013 15:34:14 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=2091</guid>
  <ns2:encoded>&lt;h2&gt;Act I&lt;/h2&gt;
The day after Thanksgiving I went on a long road trip to eastern Wyoming. Total driving time: about 7 hours, each way.

At a gas station about 2 hours from home, on the way back, my credit card was declined. Apparently, fraud prevention algorithms at my credit card company had decided that it was suspicious for me to use my credit card out of state. This was rather irritating, since I'd just driven 12 hours on this same highway, using this same credit card to fill up the car, out of state, 2 other times in the previous 24 hours.

[caption id="" align="aligncenter" width="500"]&lt;img alt="" src="http://farm3.staticflickr.com/2002/2069439389_37db50cb39.jpg" width="500" height="375" /&gt; Photo credit: herzogbr (Flickr)[/caption]

I used an alternate card and finished my trip. When I got home, I called American Express to get the card unblocked. (The block didn't just apply to gas stations in Wyoming--once suspicious, the company wouldn't let me buy gas a block from my house, either.) I spent 5-10 minutes working my way through an automated phone queue. It asked for several pieces of info to prove I was, indeed, the card holder--all 16 digits of the card, the 3-digit code on the back, last 4 digits of my social security number, phenotype of my dog... I had to call back twice--once because a family member asked me a question while I was fishing my card out of the wallet, and the system lost patience waiting for a response, and once because I pushed the wrong key and had no way to backspace.

Finally, on my third attempt, I got to the concluding challenge in this interview with mindless software: "Enter the first four letters of your place of birth."

I was flummoxed. Of course I know where I was born, but which place did they want? I didn't know whether this question was soliciting a city name, a state name, a hospital name... I hesitated. I guessed that city name was most likely to be the answer I'd provided to this security question in the past, but I can think of one or two accounts where hospital or state is what's wanted.

While I was biting my lip, the system rejected my answer, and I was back to square one. I called in again and remained silent until I got routed to a live operator. She unblocked the card and offered to give me a link to an app that I could download, to make it convenient for me to unblock my card whenever this happens in the future.

Well, sorry, American Express--despite your cheerful customer service representative, you did not make a happy customer with this experience. If you're going to challenge me when I go out of state, &lt;!--more--&gt;don't do it at the end of a journey, when I'm up a creek without a paddle and all the potential fraud has already happened. Don't make me wade through an automated phone queue that's inflexible and hard to use, with no option to talk to a human. Don't write a stupid security question that's ambiguous. And don't make me download an app to correct your mistakes after the fact. Just give me an email address or text-capable phone number where I can tell you I'm headed on a trip. Or ask me a challenge question at the pump; you asked me my zip code when I swiped the card, so entering the digits of my street address wouldn't be much of a stretch...
&lt;h2&gt;Act II&lt;/h2&gt;
I needed to register an LLC, so I went to the state's web site, found the tax commission portal, and began the workflow. It requires a login. I'd done this before, so I was pretty sure I'd created a login already, but I had no idea what it was. I went through password recovery, entered the email address that I thought I'd registered, and was promised by the system that it had emailed instructions to choose a new password.

Then I waited.

No email came. Spam folder empty.

&lt;a href="http://codecraft.co/wp-content/uploads/2013/12/screen-shot-2013-12-07-at-4-31-19-pm.png"&gt;&lt;img class="size-full wp-image-2096 alignright" alt="Best of the Web award for utah.gov" src="http://codecraft.co/wp-content/uploads/2013/12/screen-shot-2013-12-07-at-4-31-19-pm.png" width="317" height="157" /&gt;&lt;/a&gt; Sigh. Gritted teeth. I guess the system lied about sending an email, and I had never registered that email address. (Security nazis: don't tell me the system needed to lie to prevent account discovery by nefarious hackers. The system could have said, "If you've given us an email address that we recognize, we've sent a message." That wouldn't be lying, and it also wouldn't disclose info about whether a particular user exists.)

I started over, creating a new login. On the "Create Account" screen, I noticed that the site was proud of awards it had won. Hmm.

&lt;span style="line-height:1.5em;"&gt;I entered my name, address, phone number, and desired password. The system pre-screened my password (gotta force dumb users to pick something robust!) and made sure I typed it the same way twice, then allowed me to press Submit.&lt;/span&gt;

Whoop! Sorry, Charlie. Your phone number wasn't formatted correctly. You entered 123 456 7890, but we needed (123) 456-7890. Please try again. And oh by the way, we've erased both password fields and the phone number you provided, since you didn't format your input correctly.

&lt;span style="line-height:1.5em;"&gt;I eventually got everything just right, and "Submit" displayed an icon to show me the gears were turning. Then it took me to a screen that said this:&lt;/span&gt;
&lt;p style="text-align:center;"&gt;&lt;a href="http://codecraft.co/wp-content/uploads/2013/12/screen-shot-2013-12-07-at-4-31-40-pm.png"&gt;&lt;img class="size-large wp-image-2097 aligncenter" alt="Screen Shot 2013-12-07 at 4.31.40 PM" src="http://codecraft.co/wp-content/uploads/2013/12/screen-shot-2013-12-07-at-4-31-40-pm.png?w=500" width="500" height="77" /&gt;&lt;/a&gt;&lt;/p&gt;
You're sorry for the inconvenience? Hmm. I betcha you're not as sorry as I am. If the site is down for scheduled maintenance, then why not tell me before I started that I was about to be interrupted? And why not tell me when the scheduled maintenance window ends, so I know when to check back?

I came back half an hour later. The site appeared to be up. I tried to enter my new login. I accidentally entered my email address instead of my username in the login field; I got two errors before I figured that one out. Once I logged in, I got to step 1 of the "Register an LLC" process before I saw the "Temporarily Unavailable" message again.
&lt;h2&gt;Act III&lt;/h2&gt;
My phone's battery was completely dead, so I hooked it up to the charger. I really needed to make a phone call, so I tried to turn it on once charging had begun. I had to hold down the power for 15 seconds or so before it reacted (why?). I saw the Android logo, waited till the phone completed its boot sequence, and lifted the phone to my ear.

Unfortunately, the act of moving the phone jiggled the plug enough to interrupt power for a split second, which triggered the phone's uninterruptible 30-second shutdown sequence.

Why does it make sense to do a 30-second shutdown sequence if the battery's totally dead? Certainly it's not to preserve the battery. To save state, maybe? My user session had lasted all of 1 or 2 seconds; there was no state to preserve. Wouldn't it be smarter to try to wait out a brief power loss, if you have nothing to lose?
&lt;h2&gt;&lt;span style="line-height:1.5em;"&gt;Critical Analysis&lt;/span&gt;&lt;/h2&gt;
You can probably tell that I'm frustrated. Of course life isn't going to be smooth sailing all the time, and of course each of these lousy experiences arises from complex situations where engineers and business people had to make tradeoffs. Perhaps developing a smarter fraud detection algorithm at AmEx is too expensive. Perhaps a government website's first priority is protecting privacy and not losing data, and creating user accounts is a less frequent process that they haven't had time to polish yet. Perhaps Android phones would rather force orderly shutdown than risk OS corruption.

My beef is not that we make tradeoffs--it's that we don't regret them enough, communicate them enough, acknowledge enough the bad that comes with the good. And we pass the buck, way too often. The lowly "user" at the bottom of the food chain has a pretty lousy experience.
&lt;h2&gt;A Higher Vision&lt;/h2&gt;
While I was writing this post, my internet connection kept dropping due to a snow storm. Look what I saw at the top of Wordpress's edit window:
&lt;p style="text-align:center;"&gt;&lt;a href="http://codecraft.co/wp-content/uploads/2013/12/screen-shot-2013-12-07-at-4-16-32-pm.png"&gt;&lt;img class="size-large wp-image-2095 aligncenter" alt="Screen Shot 2013-12-07 at 4.16.32 PM" src="http://codecraft.co/wp-content/uploads/2013/12/screen-shot-2013-12-07-at-4-16-32-pm.png?w=500" width="500" height="34" /&gt;&lt;/a&gt;&lt;/p&gt;
Now that's more like it! &lt;a title="Good Code Plans for Problems" href="http://codecraft.co/2012/09/03/good-code-plans-for-problems/"&gt;Plan for trouble&lt;/a&gt;. (&lt;a title="Architects: manage risk like a Vegas bookie" href="http://codecraft.co/2013/02/21/architects-manage-risk-like-a-vegas-bookie/"&gt;It always happens&lt;/a&gt;, after all.) &lt;a title="Why Your Software Should Cry" href="http://codecraft.co/2013/05/06/why-your-software-should-cry/"&gt;Notice the problem&lt;/a&gt;. &lt;a title="Why Exceptions Aren’t Enough" href="http://codecraft.co/2012/10/09/why-exceptions-arent-enough/"&gt;Communicate it&lt;/a&gt;. &lt;a title="Don’t forget the circuit breakers" href="http://codecraft.co/2013/01/11/dont-forget-the-circuit-breakers/"&gt;Take steps to cope&lt;/a&gt;, without panicking or inconveniencing the user. I'm not super happy that my internet connection's been flaky, but Wordpress has a reasonably cheerful "net promoter" right now.

We MUST have a vision that encompasses this mindset in the software we build, because I believe software is getting ever more complex. Layer depends upon layer depends upon layer... If we write each layer using only the most convenient assumptions, the multiplicative effect of all those shortcuts will eventually make our users miserable.

I don't want to use software like that, and I don't want to write software like that, either.</ns2:encoded>
  <ns0:post_id>2091</ns0:post_id>
  <ns0:post_date>2013-12-09 08:34:14</ns0:post_date>
  <ns0:post_name>a-comedy-of-carelessness</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="affordances">affordances</category>
  <category domain="post_tag" nicename="best-practices">best practices</category>
  <category domain="post_tag" nicename="excellence">excellence</category>
  <category domain="post_tag" nicename="net-promoter">net promoter</category>
  <category domain="post_tag" nicename="ucd">ucd</category>
  <category domain="post_tag" nicename="user-experience">user experience</category>
  <category domain="post_tag" nicename="user-centered-design">user-centered design</category>
  <category domain="post_tag" nicename="ux">ux</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_post_restored_from</ns0:meta_key>
    <ns0:meta_value>a:3:{s:20:"restored_revision_id";i:2111;s:16:"restored_by_user";i:4597088;s:13:"restored_time";i:1386465012;}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/10152038632990912</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>http://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5815835764482658304&amp;type=U&amp;a=A5x5</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>2938</ns0:comment_id>
    <ns0:comment_author>Jared</ns0:comment_author>
    <ns0:comment_author_email>n_botm@hotmail.com</ns0:comment_author_email>
    <ns0:comment_date>2013-12-14 21:48:38</ns0:comment_date>
    <ns0:comment_content>Ambiguous challenge questions is a pet peeve of mine.  "What is the name of your elementary school?"  Forget that I don't know if I would have put "Lincoln Elementary" or "lincoln", I can't be the only one who attended multiple elementary schools.  The school where my children attend has something like a 10% turnover PER YEAR.  First pet?  My older siblings talk about dogs I barely remember, would I have put one of those names, or the one I remember clearest?  

I laughed the other day when I was prompted at a new site with a question I had never seen before: What is the name of the girl you first kissed?  Now that I remember!

I am currently doing a lot of work with a very poorly-designed component of my company's software.  I can understand that a complex function call takes longer in the real world than in the dev lab, but why do I stare at a status bar that reads "Ready" while the function runs for hours without feedback except what is see in debugview? Is it still running?  Did I type something wrong?  Was my mouse click lost over the RDP connection?  I don'e expect perfection, but feedback is necessary.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>17963855722</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1387082918</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>3733</ns0:comment_id>
    <ns0:comment_author>Embedded Link Roundup | UpEndian</ns0:comment_author>
    <ns0:comment_author_url>http://upendian.com/embedded-link-roundup-10/</ns0:comment_author_url>
    <ns0:comment_date>2014-03-08 08:01:46</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] A Comedy of Carelessness (Codecraft) [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2921</ns0:comment_id>
    <ns0:comment_author>trevharmon</ns0:comment_author>
    <ns0:comment_author_email>trevharmon@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2013-12-09 09:58:06</ns0:comment_date>
    <ns0:comment_content>I think one of the most egregious examples I've recently run into was the hoops necessary to jump through to buy rail tickets online for India. Now the IRCTC (Indian Railway Catering and Tourism Corporation Limited irctc.co.in) is arguably one of the largest ticketing/booking systems in the entire world, and is by far the easiest method for booking train tickets (unless you happen to live in a country that has an IndRail pass agency, of which the U.S. is not).

Here's the issue.

In order to create an account you're required to provide a never-before-used +91 Indian cell phone number. This is clearly problematic for foreigners. The workaround (http://www.seat61.com/India.htm#book%20-%20from%20outside) is to provide a fake (i.e., valid, but not yours) cell number and then contact support to get the all important SMS security code that you didn't get (but someone else might have gotten) sent to the provided cell number.

This is obviously problematic on so many different levels.

On a slightly different note, the other night I helped my father set up his new iPad, which necessitated the creation of a new Apple ID. That process wasn't perfect, but when we got to the security question/answer creation part, the questions provided by Apple were completely unambiguous at to what was being asked for. For example, "What was the last name of your favorite teacher in elementary school?" Every possible ambiguous section was preceded by a needed descriptor.

So, I think we are slowly getting better.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>44057411</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1386608289</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2923</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-12-09 13:25:25</ns0:comment_date>
    <ns0:comment_content>Yes, when we ask crisper questions (your Apple example), we definitely improve the user experience.

Your story about railway tickets in India reminds me of a great short story by Stanislaw Lem, called "Trurl's Prescription." It's about a society that has an intrusive beast settle on their planet. They can't get rid of it. They try everything up to and including nuclear bombs, and it seems impervious to influence. So they hire Trurl (a great inventor). He immediately serves a writ of dense legalese on the creature, requiring a notarized signature in triplicate. Things get progressively sillier from there, until eventually the creature vanishes. Trurl's parting observation is that when all else fails, you can always use bureaucracy--no way has ever been found out of its insidious clutches. :-)</ns0:comment_content>
    <ns0:comment_parent>2921</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>17703410220</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1386620725</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2924</ns0:comment_id>
    <ns0:comment_author>lkafle</ns0:comment_author>
    <ns0:comment_author_email>lkafle@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://lkafle.wordpress.com</ns0:comment_author_url>
    <ns0:comment_date>2013-12-10 02:19:36</ns0:comment_date>
    <ns0:comment_content>Reblogged this on &lt;a href="http://lkafle.wordpress.com/2013/12/10/a-comedy-of-carelessness/" rel="nofollow"&gt;healthcare software solutions lava kafle kathmandu nepal lava prasad kafle lava kafle on google+ &amp;lt;a href=&amp;quot;https://plus.google.com/102726194262702292606&amp;quot; rel=&amp;quot;publisher&amp;quot;&amp;gt;Google+&amp;lt;/a&amp;gt;&lt;/a&gt;.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>4448924</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>17728888906</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1386667177</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>reblog_ping</ns0:meta_key>
      <ns0:meta_value>1</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2927</ns0:comment_id>
    <ns0:comment_author>doug thompson</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2013-12-10 13:23:06</ns0:comment_date>
    <ns0:comment_content>SOOOOOOO BTDT!!!!!!!!!!!!!!!!
(been there done that)

Was in Las Vegas at a CNG refueling station. System was so old, I had to swipe 3 times, each taking about 1 cent of fuel.

THEN I get the phone call about suspicous activity and was it I. I had used the card all the way down I-15 in Utah, but once outside the state I got flagged.

Same issues on the other acts, BTDT.
Very frustrating.
Yet the charges that came from Paris France, still went through and I noticed them on my montly statement....Go figure


Later found a better station near the airport.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>17752939273</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1386706987</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2928</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2013-12-10 17:09:26</ns0:comment_date>
    <ns0:comment_content>I had to laugh (groan) a bit about your triple-swipe example. I've bought stuff at Wal-mart, realized I forgot something, and circled back through checkout 3 minutes later enough times--and triggered a fraud alert enough times--to recognize that scenario all too well. I now work around it without even thinking, by using an alternate card the second time through. Ugh. We shouldn't have to think this hard to do something simple...</ns0:comment_content>
    <ns0:comment_parent>2927</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>17760982155</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1386720568</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2930</ns0:comment_id>
    <ns0:comment_author>Error Handling &amp;#8211; No News is Really Bad News | Form Follows Function</ns0:comment_author>
    <ns0:comment_author_url>http://genehughson.wordpress.com/2013/12/11/error-handling-no-news-is-really-bad-news/</ns0:comment_author_url>
    <ns0:comment_date>2013-12-11 11:56:30</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] the other cases. This is not only a matter of technical professionalism, but also a business issue. End users are likely to be annoyed if our applications leave them stranded out of town or jumping through [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>2992</ns0:comment_id>
    <ns0:comment_author>Add some more extra redundancy again | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/01/15/add-some-more-extra-redundancy-again/</ns0:comment_author_url>
    <ns0:comment_date>2014-01-15 08:39:33</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] code aren&amp;#8217;t an afterthought. Even if they&amp;#8217;re less likely on average, the chances that their behavior will be important to our users sooner or later are virtually 100%. We need circuit breakers, helpful error messages, documentation about what to do when things [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14588</ns0:comment_id>
    <ns0:comment_author>Error Handling &amp;#8211; No News is Really Bad News | IasaGlobal</ns0:comment_author>
    <ns0:comment_author_url>http://iasaglobal.staging.kinsta.com/error-handling-no-news-is-really-bad-news/</ns0:comment_author_url>
    <ns0:comment_date>2015-03-18 14:09:13</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] the other cases. This is not only a matter of technical professionalism, but also a business issue. End users are likely to be annoyed if our applications leave them stranded out of town or jumping through [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14920</ns0:comment_id>
    <ns0:comment_author>A grumble about buckets | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/04/08/a-grumble-about-buckets/</ns0:comment_author_url>
    <ns0:comment_date>2015-04-08 13:39:39</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] bugs me is that software with poorly chosen buckets also tends to be software that&amp;#8211;either by carelessness or intent&amp;#8211;provides no way whatsoever for its creators to find out if they&amp;#8217;ve got the [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>7967</ns0:comment_id>
    <ns0:comment_author>Error Handling &amp;#8211; No News is Really Bad News | Iasa Global</ns0:comment_author>
    <ns0:comment_author_url>http://blog.iasaglobal.org/2014/08/20/error-handling-no-news-is-really-bad-news/</ns0:comment_author_url>
    <ns0:comment_date>2014-08-20 12:25:12</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] the other cases. This is not only a matter of technical professionalism, but also a business issue. End users are likely to be annoyed if our applications leave them stranded out of town or jumping through [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Add some more extra redundancy again</title>
  <link>http://codecraft.co/2014/01/15/add-some-more-extra-redundancy-again/</link>
  <pubDate>Wed, 15 Jan 2014 15:37:47 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=3137</guid>
  <ns2:encoded>It's the season for coughs and sniffles, and last week I took my turn. I went to bed one night with a stuffy nose, and it got me thinking about software.

What's the connection between sniffles and software, you ask?

Let's talk redundancy. It's a familiar technique in software design, but I believe we compartmentalize it too much under the special topic of "high availability"--as if only when that's an explicit requirement do we need to pay any attention.

[caption id="" align="aligncenter" width="500"]&lt;a href="http://www.flickr.com/photos/ydant/4542478114/sizes/l/"&gt;&lt;img alt="" src="http://farm5.staticflickr.com/4001/4542478114_1a3356d435.jpg" width="500" height="333" /&gt;&lt;/a&gt; Redundancy can be a big deal. Image credit: ydant (Flickr)[/caption]

&lt;span style="color:#333399;"&gt;&lt;strong&gt;Redundancy in nature&lt;/strong&gt;&lt;/span&gt;

Mother Nature's use of redundancy is so pervasive that we may not even realize it's at work. We could learn a thing or two from how she weaves it--seamlessly, consistently, tenaciously--into the tapestry of life.

Redundancy had everything to do with the fact that I didn't asphyxiate as I slept with a cold. People have more than one sinus, so sleeping with a few of them plugged up isn't life-threatening. If nose breathing isn't an option, we can always open our mouths. We have two lungs, not one--and each consists of huge numbers of alveoli that does part of the work of exchanging oxygen and carbon dioxide. &lt;!--more--&gt;Even when one lung is damaged and the other is clogged, we keep on oxygenating our blood. Amazing, when you think about it.

&lt;strong&gt;&lt;span style="color:#333399;"&gt;One example of redundancy in software&lt;/span&gt;&lt;/strong&gt;

It's not hard to find examples of redundancy in software. Consider streaming video on demand. You are probably well aware of the redundancy involved in TCP's reliable and ordered delivery guarantees. You can imagine the redundancy in Netflix's data centers, and maybe you know all about CDNs and adaptive routing on the internet. But giving you a good viewing experience goes well beyond that. The video source you select often includes multiple sources--high, medium, and low quality--and your browser selects among them based on auto-detected bandwidth constraints. There's a fallback mechanism to gracefully degrade. The browser downloads video in chunks, and it tries to stay ahead of the point of playback. That means it's got both a live and a cached source of data to manage. Codecs are designed to be able to interpolate missed frames if bandwidth gets scarce. Audio is separable from video so video frames can be dropped while preserving continuous sound. If you're watching on your iPad, you may have both a wireless and a cell phone network that the device can use to stream content. The CPU that renders video can offload chunks of work to a GPU when it's more efficient--but it can also decompress and rasterize and texturize and all the rest of it, all on its own. The list goes on and on.

&lt;span style="color:#333399;"&gt;&lt;strong&gt;Not always good&lt;/strong&gt;&lt;/span&gt;

Of course, not all redundancy is useful. You can get carried away with it :-)

[caption id="" align="aligncenter" width="500"]&lt;a href="http://www.flickr.com/photos/d-/2784568095/sizes/l/"&gt;&lt;img alt="" src="http://farm4.staticflickr.com/3083/2784568095_f01a2324a2.jpg" width="500" height="375" /&gt;&lt;/a&gt; image credit: da.bo (Flickr)[/caption]

In coding tasks, redundancy is often your enemy. Lots of antipatterns are undesirable precisely because they create redundancy that's difficult to understand and maintain. &lt;a title="How to turn coding standards into epic fails — or not" href="http://codecraft.co/2012/09/27/coding-standards/"&gt;Foolish coding standards&lt;/a&gt; and &lt;a title="// Comments on Comments" href="http://codecraft.co/2012/10/31/comments-on-comments/"&gt;dumb comments&lt;/a&gt; are notorious for creating busywork this way.

&lt;span style="color:#333399;"&gt;&lt;strong&gt;Food for thought&lt;/strong&gt;&lt;/span&gt;

With caveats acknowledged, here are a few ways that redundancy might be under-represented in our design and coding:
&lt;ol&gt;
	&lt;li&gt;&lt;strong&gt;Do we create user experiences that convey the same information in more than one way?&lt;/strong&gt;
&lt;div style="color:#777;padding:1em;"&gt;For example, do we highlight selected items by color, size, and a visual "wiggle," instead of only by drawing a rectangle? When we finish an operation, do we reset the focus AND play a sound AND display a message? This is best practice for busy users that pay imperfect attention. It's also a big help for folks who are color blind or visually impaired, which is why it's a requirement for &lt;a title="UX, usability, Section 508" href="http://en.wikipedia.org/wiki/Section_508_Amendment_to_the_Rehabilitation_Act_of_1973" target="_blank"&gt;Section 508 compliance&lt;/a&gt;.&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Do we have multiple ways to &lt;a title="Why Your Software Should Cry" href="http://codecraft.co/2013/05/06/why-your-software-should-cry/"&gt;get someone's attention&lt;/a&gt; when something goes wrong?&lt;/strong&gt;
&lt;div style="color:#777;padding:1em;"&gt;It's all well and good to log errors--but what if the error we're logging is that we just ran out of disk space on the volume where the log file lives? Whoops...&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Do our architectures distribute responsibilities, instead of assuming a single, centralized point of failure?&lt;/strong&gt;
&lt;div style="color:#777;padding:1em;"&gt;This is more than just recognizing the dangers in having one box on a diagram labeled "manager" or "database" or "authentication master", and compensating in "HA mode" by having a backup. It means thinking about network pipes and protocols and firewalls with a redundancy mindset. It means figuring out how clients can be temporarily autonomous to tolerate hiccups, how to use caching intelligently, and so forth.&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Do we sanity check in enough places?&lt;/strong&gt;
&lt;div style="color:#777;padding:1em;"&gt;Of course we need to sanitize user input to avoid SQL injection. We need transactions and CRCs. But do we build byte order detection and version stamp checks and sizeof and alignment tests in the right places? Are we using design-by-contract to &lt;a title="On bread recipes, maps, and intentions" href="http://codecraft.co/2013/10/24/on-bread-recipes-maps-and-intentions/"&gt;prove&lt;/a&gt; that consumers and creators of a chunk of code share the same &lt;a title="Why Mental Models Matter" href="http://codecraft.co/2012/11/05/why-mental-models-matter/"&gt;mental models&lt;/a&gt;? Do we catch exceptions or &lt;a title="Why Exceptions Aren’t Enough" href="http://codecraft.co/2012/10/09/why-exceptions-arent-enough/"&gt;test for errors&lt;/a&gt; in enough places?&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Do we avoid depending on a single person to make our system work or to troubleshoot?&lt;/strong&gt;
&lt;div style="color:#777;padding:1em;"&gt;If we say, "the admin will solve that problem if the user runs into it," we're probably letting ourselves off too easy. If we say, "the admin will call tech support," we're probably letting ourselves off too easy.&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Do we carefully plan, code, test, and document for graceful degradation?&lt;/strong&gt;
&lt;div style="color:#777;padding:1em;"&gt;Less than ideal paths through code aren't an afterthought. Even if they're less likely on average, the chances that &lt;a title="A Comedy of Carelessness" href="http://codecraft.co/2013/12/09/a-comedy-of-carelessness/"&gt;their behavior will be important to our users sooner or later are virtually 100%&lt;/a&gt;. We need &lt;a title="Don’t forget the circuit breakers" href="http://codecraft.co/2013/01/11/dont-forget-the-circuit-breakers/"&gt;circuit breakers&lt;/a&gt;, helpful error messages, documentation about what to do when things aren't perfect, APIs that protect themselves from unwise callers, retries, timeouts, and alternate solutions.&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
Redundancy has a cost. We need to use it judiciously; &lt;a title="Good Code Is Balanced" href="http://codecraft.co/2012/08/27/good-code-is-balanced/"&gt;good code balances many considerations&lt;/a&gt;. Nonetheless, I think pondering the issues above is likely to improve the robustness and aptness of our software in many cases. Our users will love us for it.

Now go out and add some extra redundancy again. And don't forget to not neglect to build in some secondary alternate failsafes, while you're at it. :-)</ns2:encoded>
  <ns0:post_id>3137</ns0:post_id>
  <ns0:post_date>2014-01-15 08:37:47</ns0:post_date>
  <ns0:post_name>add-some-more-extra-redundancy-again</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="alternatives">alternatives</category>
  <category domain="post_tag" nicename="apis">APIs</category>
  <category domain="post_tag" nicename="balance">balance</category>
  <category domain="post_tag" nicename="circuit-breakers">circuit breakers</category>
  <category domain="post_tag" nicename="communication">communication</category>
  <category domain="post_tag" nicename="distributed-architecture">distributed architecture</category>
  <category domain="post_tag" nicename="documentation">documentation</category>
  <category domain="post_tag" nicename="errors">errors</category>
  <category domain="post_tag" nicename="exceptions">exceptions</category>
  <category domain="post_tag" nicename="ha">HA</category>
  <category domain="post_tag" nicename="input">input</category>
  <category domain="post_tag" nicename="mental-models">mental models</category>
  <category domain="category" nicename="mistakes">Mistakes</category>
  <category domain="post_tag" nicename="redundancy">redundancy</category>
  <category domain="post_tag" nicename="section-508">section 508</category>
  <category domain="post_tag" nicename="single-point-of-failure">single point of failure</category>
  <category domain="category" nicename="software-architecture">Software Architecture</category>
  <category domain="post_tag" nicename="sql-injection">SQL injection</category>
  <category domain="post_tag" nicename="testing">testing</category>
  <category domain="post_tag" nicename="ucd">ucd</category>
  <category domain="post_tag" nicename="usability">usability</category>
  <category domain="post_tag" nicename="ux">ux</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/10152120018915912</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>http://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5829245157811179520&amp;type=U&amp;a=8Ohw</ns0:meta_value>
  </ns0:postmeta>
  </item>
<item>
  <title>How to make a const-correct codebase in 4300 easy steps</title>
  <link>http://codecraft.co/2014/03/25/how-to-make-a-const-correct-codebase-in-4300-easy-steps/</link>
  <pubDate>Tue, 25 Mar 2014 14:55:01 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5402</guid>
  <ns2:encoded>One of the codebases that I work on is theoretically C++, but if you peer under the hood, it looks more like 1990-vintage C. It's 500 KLOC of almost purely procedural code, with lots of structs and few true objects. More dusty and brittle than I'd like.

[caption id="" align="aligncenter" width="500"]&lt;img src="http://farm3.staticflickr.com/2357/2090235485_56a89491d4.jpg" alt="" width="500" height="375" /&gt; Image credit: &lt;a href="http://www.flickr.com/photos/tgillin/2090235485/" target="_blank"&gt;Tim Gillin&lt;/a&gt; (Flickr)[/caption]

I am not a C++ bigot; I first began to do serious, professional coding in C, not long after this codebase got its start. I understand the C-isms pretty well. And although I think Linus got carried away in &lt;a title="linus rant c++" href="http://article.gmane.org/gmane.comp.version-control.git/57918" target="_blank"&gt;his rant about the ugliness of C++&lt;/a&gt;, I can appreciate the ways that lean C sometimes makes its descendant look ugly and inefficient. (Though C++11 and 14 are making this less true...)

This means that I don't consider the C-like style of this particular codebase a fatal flaw, in and of itself.

However, since my early coding adventures I've been converted to the advantages of OOP for complex projects and large teams, and I've also accumulated a lot of battlescars around multithreading. Our codebase needs OOP to solve some encapsulation antipatterns, and it needs RAII and C++11-style mutexing in the worst way. Its old, single-threaded mindset makes far too many things far too slow and error-prone.

A few months ago, we decided to make an investment to solve these problems.

To do it right, I had the team add a story to our scrum backlog about making the codebase const-correct. And therein lies a tale worth recounting...

&lt;!--more--&gt;
&lt;h3&gt;The naive approach&lt;/h3&gt;
At first, the team assumed that I wanted a human being to manually inspect every parameter to all ~4300 functions in the whole codebase, adding "const" wherever it belonged.

They weren't thrilled. Although most were too polite to say so, they probably questioned the value of the exercise, privately wondering some of the same things that are articulated in &lt;a href="http://stackoverflow.com/questions/136880/sell-me-on-const-correctness" target="_blank"&gt;this StackOverflow post&lt;/a&gt;. They complained that as soon as they tried to fix const in one place, it had a domino effect that caused endless ripples elsewhere.

I convinced them to give it a shot with two arguments:
&lt;ul&gt;
	&lt;li&gt;The code could not be robustly multithreaded until we knew which functions modified which state--and thus, where mutexes were needed. The best way to codify that knowledge is to use const, because it's terse, standard, and enforced by the compiler.&lt;/li&gt;
	&lt;li&gt;Perhaps more importantly, I knew a way to upgrade the whole codebase, with near 100% accuracy, with very little effort. And I could solve the ripple effect.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The clever approach&lt;/h3&gt;
My idea for automated const-fixing was simple, I thought. I would write a python script that embodied the following algorithm:
&lt;ol&gt;
	&lt;li&gt;Use doxygen to generate call graphs for the whole codebase.&lt;/li&gt;
	&lt;li&gt;Given a whole-codebase call graph, identify all "leaf" functions (functions that are only called, but are not themselves callers, of anything else in the codebase).&lt;/li&gt;
	&lt;li&gt;For each leaf, find all function prototypes, including the one associated with the implementation.&lt;/li&gt;
	&lt;li&gt;For each prototype on a given leaf function, iterate over its parameters. On parameters where "const" might make sense but where it is not present, add "const" and see if the code still compiles and all unit tests still pass.&lt;/li&gt;
	&lt;li&gt;Prune all leaf functions from the call graph and repeat until no functions remain.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Turtles all the way down&lt;/h3&gt;
I was hoping that after I described this straightforward algorithm, an enthused team member would volunteer. Nobody spoke up.

"Okay, I'll do it," I said. "I ought to be able to get that done in a few days."

Famous last words...

At first, I made steady progress. The skeleton of the script was done after an hour or two of coding.

Adding reliable "roll back a change that turned out to be invalid" logic took me another hour or so to code and test. And adding parameter fuzzing (so that a parameter declared &lt;code&gt;Foo * foo&lt;/code&gt; in one place, &lt;code&gt;Foo *myfoo&lt;/code&gt; in another, and &lt;code&gt;::Foo *&lt;/code&gt; in another, would all be seen as semantic equivalents) took another hour.

Then I started cautious experiments to see how well my script was doing.

Ugh.

I already had regex-based python code that scanned code for function prototypes. Having done this sort of thing before, I knew that I was going to miss a few subtleties. I knew I'd have to handle inline &lt;code&gt;/* ... */&lt;/code&gt; and &lt;code&gt;// ...&lt;/code&gt; comments, and maybe an &lt;code&gt;#ifdef&lt;/code&gt; here or there. I knew there were a handful of macros in the codebase, but I was pretty sure there was nothing truly insidious. I figured I'd get at least 95-98% accuracy pretty quickly, because the formatting was very regular. Because I could rely on the compiler to tell me if something broke, and because I had a robust rollback mechanism, the worst that could happen if I mis-parsed something was that I'd fail to add a "const" that might have been theoretically possible.

Here are few of the gotchas that I didn't anticipate, but that in hindsight should have been obvious:

&lt;dl&gt;&lt;dt&gt;The imperative to minimize diffs&lt;/dt&gt;&lt;dd&gt;When I rewrote code, my first attempt reformatted the function prototype slightly. I dropped extra whitespace, and I didn't keep the original linewraps and indents. I figured this would not be a problem. However, on closer inspection, I realized that a lot of prototypes looked like this:

https://gist.github.com/dhh1128/9753554

The problem was that if I did a dumb rewrite of the function, I'd end up dropping the helpful comments. Also, my naive implementation drastically increased the noise in the diff, which was a big problem since we maintain half a dozen active branches of code for old maintenance releases, and depend on automatic merges to make bug fixes flow with minimal human intervention. It took me another hour or so to rewrite my "prototype rewrite" code so that it made the minimal possible change to alter constness.&lt;/dd&gt;&lt;dt&gt;Function pointers&lt;/dt&gt;&lt;dd&gt;Some function pointer declarations (as parameters, or as typedefs) gave my parser fits. I had to beef up my "function_decl" regex several times before I stopped getting false positives.&lt;/dd&gt;&lt;dt&gt;Typedefs&lt;/dt&gt;&lt;dd&gt;Sometimes a function was declared with one datatype, but defined using a typedef'ed alias. This caused my parameter correlation between the two instances of the prototype to fail. I ended up hard-coding my way around one particularly nasty instance of this. (Why not just fix the code, you ask? Excellent question. Remember my mandate to minimize diffs? Darn inconvenient...)&lt;/dd&gt;&lt;dt&gt;Function overrides&lt;/dt&gt;&lt;dd&gt;What if the same function name had more than one possible set of parameters? I couldn't just change the constness of the third parameter to &lt;code&gt;CalculateIdealWidgetSize()&lt;/code&gt; blindly; I had to recognize clumps of functions that had a common parameter profile.&lt;/dd&gt;&lt;dt&gt;Mocks and stubs&lt;/dt&gt;&lt;dd&gt;This codebase includes a bunch of google test and gmock stuff. Each procedural function has its own testrunner, which links in a library of stubs for all the other functions in the codebase. This means that any given function in the codebase typically has 2 implementations (one real, one mocked), and often several different declarations. The mock declarations are in a totally different style from normal declarations. Some examples of mock declarations will give you a flavor:

https://gist.github.com/dhh1128/9754282

I had to not just find and update ordinary function prototypes, but all their mocked equivalents as well, in whatever mocking variation they might appear. And I still needed to be able to correlate all the variants so I could make a coherent change across all instances of a particular function.&lt;/dd&gt;&lt;dt&gt;External APIs&lt;/dt&gt;&lt;dd&gt;At first, I was attempting to change every function prototype that I saw. However, I realized after a while that some &lt;code&gt;extern&lt;/code&gt;ed function declarations referred to functions exposed by dynamically linked libraries. The code would compile when I changed the &lt;code&gt;extern&lt;/code&gt;ed declaration, and tests might even pass--but at run-time in production, I might fail to link the function I wanted. I modified my script to only update prototypes where I could find at least one definition; if all I saw was declarations, I left the functions alone.&lt;/dd&gt;&lt;dt&gt;Doxygen bugs&lt;/dt&gt;&lt;dd&gt;A week or so into the project, I realized that doxygen's call graph was inaccurate. I found one doxygen setting that I could tweak, to increase the depth of call tree analysis--but even after bumping up that limit, some of the function relationships that I needed to understand were just missing. I chalk this up to subtleties like call-through-function-pointer, macros that obscured some function calls, and so forth.&lt;/dd&gt;&lt;dt&gt;Recursion and mutual dependencies&lt;/dt&gt;&lt;dd&gt;My tidy algorithm assumed that the overall call tree for the application was a directed acyclic graph. In fact, later analysis showed that I had 59 functions that were directly recursive, and probably a lot of other ones where recursion was indirect. I was able to detect this recursion, and artificially break it, in many cases. However, I found that about 20 iterations into my algorithm, I ran out of "leaf" functions with about 1000 functions still remaining to analyze. These functions all called some other function in the remaining graph, due to dense, unfortunate coupling. I brute-forced my way through these, perhaps sacrificing some const fixups that might have been possible if I'd been willing to analyze changes to a clump of functions at a time, instead to a single function only.&lt;/dd&gt;&lt;/dl&gt;
&lt;h3&gt;The detour&lt;/h3&gt;
Partway through the project, a colleague suggested that I abandon the idea of parsing C/C++ with regular expressions, and switch to use a true grammar. I told him I had considered it. I knew of ply, which is a python implementation of lex/yacc. I'd noticed, last time I checked, that it shipped with a C grammar. We also discussed the possibility of using a compiler plugin for &lt;a title="gcc plugin" href="http://gcc.gnu.org/onlinedocs/gccint/Plugins.html" target="_blank"&gt;GCC&lt;/a&gt; or &lt;a title="clang plugin" href="http://clang.llvm.org/docs/ClangPlugins.html" target="_blank"&gt;CLang&lt;/a&gt;. Both of these let you hook into the compiler after an abstract syntax tree has been generated, to inspect and react to what the compiler understands from the code.

I ended up discarding this approach. Working from an AST makes "reading" the code easy, but it doesn't help write modifications. And the seemingly simple "function declarations" in the mocking layer actually resolve to very complex classes by the time google test/gmock's macros are expanded; making heads or tails of them is not for the faint of heart. However, my colleague successfully built a GCC plugin for a slightly different code analysis task, and it seems promising for certain use cases. Not having to parse code yourself is definitely an attractive option, if it applies.
&lt;h3&gt;The results&lt;/h3&gt;
So fast-forward a couple calendar weeks. It didn't take me that much coding time to get this system working, but I was multitasking, trying to be a manager and a point of contact for the press, and interfacing with execs and product management... My coding time was pretty fragmented.

I finally got the code working pretty well, and I let it run...

... and run ...

... and run ...

Since I was validating my changes by doing a full compile and test cycle between each one (and an extra cycle at the end of each rollback, to guarantee that the code was copacetic), it took quite a while to crunch through this codebase. I let it run for probably a total of about 200 hours, during which time I analyzed all 4300 functions in the codebase, one by one.

I am proud of the outcome. Altogether, I think this script found about 2000 functions where one or more parameters should have been const but were not. About 4500 parameters were changed in those 2000 functions, generating about 7000 lines of changes. The day after I pushed my massive change set, the behavior of the codebase on our regression suite was unchanged.

It felt pretty awesome to check back periodically, and see the results of hours (and hours and hours) of analysis that no human being had to wade through. As Hannibal would say, "I love it when a plan comes together."

The script wasn't perfect, though. I estimate that maybe 50 functions were missed due to parsing subtleties. A few prototypes didn't match my regular expressions, and some false matches occurred as well. I also ended up ignoring the constness of member functions; there are only a handful in the whole codebase, and analyzing those would have required entirely different codepaths that I didn't have time to write. I suspect there are other fixes lurking, if I could untie the gordian knot of dependencies that makes some functions impossible to analyze independently.

The code for this "const_fix" python script is &lt;a title="const_fix script on github" href="https://github.com/dhh1128/const_fix" target="_blank"&gt;available on github&lt;/a&gt;, in case it's useful to anybody. It's not very well genericized; I make assumptions about the organization of the files and folders within the codebase, and it's hard-coded to email me if the script crashes. But you might be able to adapt it in an hour or two, if you have similar codebases that are scons/make/autotools-centric. I have since used the script on a second codebase, and the adaptation took me about an hour.
&lt;h3&gt;The moral(s) to the story&lt;/h3&gt;
Stepping back from the details of this experience, I draw a few general conclusions:

&lt;strong&gt;Never get involved in a land war in Asia&lt;/strong&gt;, as Vizzini would say. (Or in other words, don't invade unknown territory in your code, unless you're assuming some blood, sweat, and tears. :-)

&lt;strong&gt;On the other hand, &lt;a title="Courage Counts" href="http://codecraft.co/2013/05/31/courage-counts/"&gt;courage counts&lt;/a&gt;&lt;/strong&gt;. A festering problem finally got fixed, because I was crazy enough to try.

&lt;strong&gt;It is a crying shame (and a glaring irony) that it's so hard to code my way to a productive manipulation of ... code&lt;/strong&gt;. Programmers spend their whole careers validating the proposition that it's worthwhile to enable computers to do grunt work, so humans can focus on more interesting tasks. Yet the artifact that programmers produce is so plagued by inconsistencies, so susceptible to bugs, and so complex to process that it takes a major investment to automate working with it. I am going to fix this in the &lt;a title="On bread recipes, maps, and intentions" href="http://codecraft.co/2013/10/24/on-bread-recipes-maps-and-intentions/"&gt;programming ecosystem that I create&lt;/a&gt;.

&lt;strong&gt;An imperfect solution still made a huge difference&lt;/strong&gt;. Sometimes perfect is the enemy of good enough.

&lt;strong&gt;Coding something right is cheaper and a whole lot less hassle than &lt;a title="Paying Off Technical Debt" href="http://codecraft.co/2012/10/14/paying-off-technical-debt/"&gt;fixing an antipattern once it's firmly entrenched&lt;/a&gt;&lt;/strong&gt;. We'll never get away from refactoring (nor would we want to)--but it pays to establish good habits of code hygeine, early, instead of after you write 500,000 lines of gunk.

&lt;strong&gt;Compilers ought to offer a "this should be const" warning, so this work would have been unnecessary&lt;/strong&gt;. I googled; there isn't any such option that I could find. Yet my need is not that unusual. Why isn't this problem already solved?</ns2:encoded>
  <ns0:post_id>5402</ns0:post_id>
  <ns0:post_date>2014-03-25 08:55:01</ns0:post_date>
  <ns0:post_name>how-to-make-a-const-correct-codebase-in-4300-easy-steps</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="category" nicename="better-programming-language">better programming language</category>
  <category domain="post_tag" nicename="clang">clang</category>
  <category domain="post_tag" nicename="compiler">compiler</category>
  <category domain="post_tag" nicename="const">const</category>
  <category domain="post_tag" nicename="gcc">gcc</category>
  <category domain="post_tag" nicename="grammar">grammar</category>
  <category domain="category" nicename="mistakes">Mistakes</category>
  <category domain="post_tag" nicename="multithreading">multithreading</category>
  <category domain="post_tag" nicename="mutexes">mutexes</category>
  <category domain="post_tag" nicename="refactoring">refactoring</category>
  <category domain="post_tag" nicename="syntax">syntax</category>
  <category domain="post_tag" nicename="tech-debt">tech debt</category>
  <category domain="category" nicename="tips-and-tricks">Tips and Tricks</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/10152268535195912</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>http://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5854281485724454912&amp;type=U&amp;a=tZQO</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>4883</ns0:comment_id>
    <ns0:comment_author>Why you should use an IDE instead of vim or emacs | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/05/13/why-you-should-use-an-ide-instead-of-vim-or-emacs/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-13 10:16:41</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] while; I think they&amp;#8217;d find it easier to generate momentum on unit tests, to eliminate fear of ambitious refactors, and to see their way past nagging tech debt. However, bigger concerns have kept me from pushing [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4608</ns0:comment_id>
    <ns0:comment_author>λ</ns0:comment_author>
    <ns0:comment_author_email>you.neednt@my.mail</ns0:comment_author_email>
    <ns0:comment_date>2014-04-27 04:15:17</ns0:comment_date>
    <ns0:comment_content>After some research I found this thread: http://gcc.gnu.org/ml/gcc-patches/2010-04/msg01465.html
And it turns out that Wsuggest-attribute is already implemented in gcc (http://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html).
Sadly, it's only about functions but not their arguments.

Speaking of clang, there is a proposal http://lists.cs.uiuc.edu/pipermail/cfe-dev/2013-February/027816.html but I can't find any results of it.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>23576838420</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1398650978</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4135</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2014-03-27 21:46:16</ns0:comment_date>
    <ns0:comment_content>Hopefully they're not the kind of memories that wake you up at night, screaming... :-) We're making progress. Thanks for all the work you did to point us in a good direction.</ns0:comment_content>
    <ns0:comment_parent>4089</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>22845918959</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1395978377</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4134</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2014-03-27 21:45:10</ns0:comment_date>
    <ns0:comment_content>Yes, I smiled when I read your comment, because we both know other codebases where this would have been quite helpful. :-)</ns0:comment_content>
    <ns0:comment_parent>4133</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>22845898019</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1395978313</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4133</ns0:comment_id>
    <ns0:comment_author>Jason Ivey</ns0:comment_author>
    <ns0:comment_author_email>jasonivey@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://gravatar.com/jasonivey74</ns0:comment_author_url>
    <ns0:comment_date>2014-03-27 20:11:13</ns0:comment_date>
    <ns0:comment_content>That is awesome.  I believe I had the exact same idea at a previous company where we were both employed.  It sounds like you were much more relentless than myself though.  After discovering only a few of these parsing problems I decided it was a problem that I didn't want to solve with a regular expression.  At the time I also looked at clang and gcc but came to a similar conclusion that once you were into the AST it was very difficult to do a replace on the original text.

I'm excited to see what you had to do to solve the problem for so many functions.

Jason</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1395972675</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4615</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2014-04-27 20:10:21</ns0:comment_date>
    <ns0:comment_content>Hey, thanks for the tip about Wsuggest-attribute! That is awesome, and I didn't know about it at all. I'm glad compilers are getting better.</ns0:comment_content>
    <ns0:comment_parent>4608</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>23576847817</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1398651022</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4089</ns0:comment_id>
    <ns0:comment_author>dougbert</ns0:comment_author>
    <ns0:comment_author_email>norsk5@yahoo.com</ns0:comment_author_email>
    <ns0:comment_date>2014-03-25 13:10:26</ns0:comment_date>
    <ns0:comment_content>Oh the memories....the memories of code bases past.......

dougbert</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1395774627</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4597</ns0:comment_id>
    <ns0:comment_author>λ</ns0:comment_author>
    <ns0:comment_author_email>you.neednt@my.mail</ns0:comment_author_email>
    <ns0:comment_date>2014-04-26 13:48:13</ns0:comment_date>
    <ns0:comment_content>You're very right about compilers in the last statement. I think that's very good idea and I'd like to hear some compiler guys opinions.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>23553370712</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1398541693</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>7042</ns0:comment_id>
    <ns0:comment_author>Introducing Marks | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/24/introducing-marks/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-24 08:49:29</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] doesn&amp;#8217;t help at all, because I need this before run-time. As I mentioned in my post about making a codebase const-correct, the lack of this feature is really a serious design flaw. Why should code, of all things [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Why you should use an IDE instead of vim or emacs</title>
  <link>http://codecraft.co/2014/05/13/why-you-should-use-an-ide-instead-of-vim-or-emacs/</link>
  <pubDate>Tue, 13 May 2014 16:15:28 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5529</guid>
  <ns2:encoded>With a title like the one above, you may be expecting a rant from an IDE bigot. I know there are plenty of flame wars on this topic, on both sides, and if I raised your hackles (or whet your appetite), I'm sorry.

This is not that kind of post. For one thing, I don't take myself so seriously:

[caption id="" align="aligncenter" width="740"]&lt;a href="http://xkcd.com/378/"&gt;&lt;img src="http://imgs.xkcd.com/comics/real_programmers.png" alt="" width="740" height="406" /&gt;&lt;/a&gt; There's a keystroke for that! Image credit: xkcd.com[/caption]

What I'm hoping to do here is point out some subtleties to this debate that don't get a lot of airtime, and explain to my supercharged-text-editor friends why I work the way I do. However, I also plan to write a companion to this post, explaining why you need to learn a tool in the vim/emacs category, and I'll have plenty to say on that topic as well. Hopefully that buys me a few minutes of an open mind. :-)
&lt;h3&gt;From a distance&lt;/h3&gt;
If you step back from the debate over IDEs vs. supercharged text editors, and squint to suppress the details, you'll see that most exchanges on this topic look like this:&lt;!--more--&gt;

&lt;strong&gt;Variant 1&lt;/strong&gt;
&lt;div style="padding-left:2em;"&gt;&lt;em&gt;IDE fan&lt;/em&gt;: "You should use an IDE because it has cool feature X. Text editors are weak sauce!"&lt;/div&gt;
&lt;div style="padding-top:1em;padding-left:2em;margin-bottom:1.5em;"&gt;&lt;em&gt;VIM fan&lt;/em&gt;: "You don't know what you're talking about. If I install plugin Y and edit my cfg file, I can have all the goodness you're so fond of, and a whole lot more."&lt;/div&gt;
&lt;strong style="margin-top:1.5em;"&gt;Variant 2&lt;/strong&gt;
&lt;div style="padding-left:2em;"&gt;&lt;em&gt;EMACS fan&lt;/em&gt;: "IDEs are so dumb. They take all this time to load, use ridiculous amounts of memory, and force you to use a mouse. They are slow. They just get in my way. Real programmers can extract a block of code into its own separate function, generate a unit test stub, and grep the entire codebase for similar refactor candidates with a single keystroke."&lt;/div&gt;
&lt;div style="padding-top:1em;padding-left:2em;margin-bottom:1.5em;"&gt;&lt;em&gt;IDE fan&lt;/em&gt;: "That's the 'Extract' button on my toolbar."&lt;/div&gt;
I tend to roll my eyes at &lt;a href="http://www.quora.com/Computer-Programming/Why-are-tools-like-Vim-and-Emacs-still-used-for-coding" target="_blank"&gt;conversational threads like these&lt;/a&gt;, because:

&lt;dl&gt;&lt;dt&gt;Those who are really proficient in one of these environments, but not the other, usually overestimate the feature disparity.&lt;/dt&gt;&lt;dd&gt;This cuts both ways. All you vim experts, did you know that IDE black-belts slice and dice text as quickly as you, that they compile and debug with the keyboard, and that they have very powerful macro capabilities like the ones you love? All you IDE lovers, did you know vim and emacs can do tabs and outline collapsing and go-to-declaration and cross-project refactoring? If it's a question of power, and if we're talking about what's possible rather than what's standard, then I think it's six of one, half dozen of the other.&lt;/dd&gt;&lt;dt&gt;The shared assumption--that feature richness is the right yardstick for comparison--is wrong.&lt;/dt&gt;&lt;dd&gt;Theoretical power isn't very interesting. Most of us use only 10% of what either toolset offers.&lt;/dd&gt;&lt;/dl&gt;But more importantly...
&lt;h3&gt;Observation 1: It's not about you.&lt;/h3&gt;
As I plan to discuss at length in a different post, &lt;em style="color:#004080;"&gt;software engineering is a team sport&lt;/em&gt;. Yet if you look at the argument templates above, you won't see much focus on teamwork.

We probably don't notice this misalignment because we assume that what's best for individual team members is best for the team as a whole. Often, this is true--but there are important counterexamples. John Stockton scored less points than he might have, because he was superb at dishing out assists to Karl Malone. Would a higher-scoring John Stockton have been better for the Utah Jazz? I think not. It was team points, not individual points, that Stockton optimized.

In programming, optimizing your own work while disregarding the habits, expectations, skills, and needs of others on your team might be a bad tradeoff. If you pick a coding standard that's vim-friendly, but half the team is using an editor that can't emulate it well, have you been smart? If your IntelliJ wizardry leaves your buddy in the dust during pair programming, have you transferred knowledge as effectively as you should? If you despise doc comments because you have no use for hover text in emacs, but half your team uses eclipse, are you playing nice? If you use a refactor wizard all the time, but it drastically bloats the diffs on a maintenance branch, are you really boosting team productivity as much as you think?

I think that this observation weakens arguments on both sides of the debate, but on balance, it undermines the supercharged text editor crowd more. No two emacs gurus configure their environment the same way, and souping up the out-of-the-box editor is usually a labor of love for the fan. Go read all the web pages that discuss how to customize vim or emacs, and then tell me I'm wrong. Unless your whole team is cut from identical cloth, you're more likely to have more in common, and to have a higher level of out-of-the-box functionality, with an IDE.

Don't forget the impact of the broader community in your calculations about team value. You can absolutely write java code efficiently in emacs or vim--but the vast majority of java developers use Eclipse or NetBeans or IntelliJ. Why? What does this buy them? Well, their IDEs are constantly educating them about the latest and greatest thinking in the community. When Java 7 or 8 comes out, their IDE nags them to update. Help topics get refreshed. New samples, new project templates, new static code analysis features just show up. And the programmers learn, just by the nature of their toolset. Plus, their skillsets are more likely to transfer, to generate useful help for others on StackOverflow, and to be &lt;a title="Humility" href="http://codecraft.co/2012/10/01/humility/"&gt;honed by others&lt;/a&gt;, if they're in the mainstream.

A programmer who's &lt;a title="Julie Jones: Learn voraciously." href="http://codecraft.co/2012/09/24/julie-jones-learn-voraciously/"&gt;continually learning&lt;/a&gt;, and who's &lt;a title="Six Learning Tips For Tech Folks" href="http://codecraft.co/2012/09/25/six-learning-tips-for-tech-folks/"&gt;plugged in to community best practice&lt;/a&gt;, is likely to contribute more value to his or her team, over time, than one who's learned an efficient way to work and isn't interested in newfangled ideas. All other things being equal, of course.

A final thought about teamwork: consider the rising generation. In my experience, most young programmers leave school with more comfort in IDEs than in text editors. Since young programmers are continuously arriving, the value of working within their world view is worth pondering.
&lt;h3&gt;Observation 2: Software engineering ain't just coding&lt;/h3&gt;
Besides reading, writing, and debugging code, what do you have to do to release software? If your world is like mine, you have to:
&lt;ul&gt;
	&lt;li&gt;make install scripts&lt;/li&gt;
	&lt;li&gt;configure continuous integration, build promotion, and deployment mechanisms&lt;/li&gt;
	&lt;li&gt;model &lt;a title="Example RPCD Interaction" href="http://codecraft.co/2012/06/21/example-rpcd-interaction/"&gt;people and their behaviors&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;create and update database and XSD schemas&lt;/li&gt;
	&lt;li&gt;design multimedia collateral like icons, sound, color palettes, and video&lt;/li&gt;
	&lt;li&gt;encrypt and decrypt license files&lt;/li&gt;
	&lt;li&gt;write, run, and re-run unit and integration tests&lt;/li&gt;
	&lt;li&gt;generate and consume XML, JSON, and YAML&lt;/li&gt;
	&lt;li&gt;tweak CSS and XSLT transforms&lt;/li&gt;
	&lt;li&gt;fire up virtual machines in private or public clouds&lt;/li&gt;
	&lt;li&gt;feed content to tech writers&lt;/li&gt;
	&lt;li&gt;create animations and other visual behaviors&lt;/li&gt;
	&lt;li&gt;interface with translation memories and localizers&lt;/li&gt;
	&lt;li&gt;react to bug reports from static code analysis tools&lt;/li&gt;
	&lt;li&gt;push bugs and enhancement requests through their lifecycle in a ticketing system&lt;/li&gt;
	&lt;li&gt;update a wiki&lt;/li&gt;
&lt;/ul&gt;
... and on and on.

You can certainly live and thrive in that complex world if you're a fan of a powerful text editor. However, I've come to believe that a text-editor-centric worldview is a little too comfortable thinking of every problem as a &lt;a title="Features are not chunks of code" href="http://codecraft.co/2013/07/25/features-are-not-chunks-of-code/"&gt;series of discrete editing tasks&lt;/a&gt;. Integration details fall through the cracks; &lt;a title="Why Mental Models Matter" href="http://codecraft.co/2012/11/05/why-mental-models-matter/"&gt;mental models&lt;/a&gt; remain simplistic. After all, the tool you're using bills itself as an editor, not an "integrated development environment." Isn't that suggestive?

The greatest advocates of unit testing, continuous integration, refactoring, and best practice that I have known in my career have all been IDE proponents. Most (but not all) of the best system thinkers I know are IDE-centric, as well.

I don't think this is an accident.

IDEs show you a gestalt; they encourage you to &lt;a title="Metrics, Plumb Lines, and System Thinking" href="http://codecraft.co/2012/11/12/measurements-plumb-lines-and-system-thinking/"&gt;think holistically&lt;/a&gt; about what you're doing. If you write a method, and you don't like the hover text that pops up to coach you when you call it later, then you are incented to change the doc comment for it, then and there--because the IDE &lt;em&gt;integrates&lt;/em&gt; the whole experience. If you rename a method, and 7 red regions suddenly appear along the scrollbar for your file, you learn immediately how much you've broken. If you tweak the model in an MVC architecture, and the IDE is displaying the ER diagram and the table layout from the backing DB in a callout below your edit window, you are more likely to remember to make a complementary edit in that other layer at the same time. You are more likely to care about test coverage if your tool of choice tells you how you're doing, constantly.
&lt;h3&gt;Where I'm at&lt;/h3&gt;
If you peruse my archives, you'll see that &lt;a title="Earned Pragmatism" href="http://codecraft.co/2013/01/18/earned-pragmatism/"&gt;I'm a pragmatist&lt;/a&gt;. I use IDEs as often as I can, but I'm willing to drop into vim when it makes sense. I speak passable vim, but it's not my first language.

I have no doubt that some of the folks who read this post will be awesome team players, great gestalters, and hard-core text editor gurus, all at the same time. That's a cool combination of skill/personality, and I know it's possible to achieve. And if you're there, and you're well into your career, maybe staying there makes sense.

However, what I'm suggesting is that on balance, for most engineers, the usual tool of choice ought to be an IDE instead--specifically, an IDE that other team members and the larger community use and like. This choice will pay off in enhanced teamwork benefits, and it will &lt;a title="Learned Helplessness, Rats, and People Power" href="http://codecraft.co/2012/11/26/learned-helplessness-rats-and-people-power/"&gt;encourage&lt;/a&gt; the sort of &lt;a title="Smart Geeks Think Like Cheerleaders" href="http://codecraft.co/2013/02/05/smart-geeks-think-like-cheerleaders/"&gt;broad, integrated thinking&lt;/a&gt; that characterizes the best software efforts.

Right now, I actively participate in half a dozen codebases. Some consist of venerable, unix-style C; one is cutting-edge C++11; others are in java or python. The teams that maintain the older code cut their teeth on vim and gdb, and they still mostly live there. I wish I could convince them to try out IDE-land for a while; I think they'd find it easier to generate momentum on unit tests, to &lt;a title="Courage Counts" href="http://codecraft.co/2013/05/31/courage-counts/"&gt;eliminate fear&lt;/a&gt; of &lt;a title="How to make a const-correct codebase in 4300 easy steps" href="http://codecraft.co/2014/03/25/how-to-make-a-const-correct-codebase-in-4300-easy-steps/"&gt;ambitious refactors&lt;/a&gt;, and to &lt;a title="Paying Off Technical Debt" href="http://codecraft.co/2012/10/14/paying-off-technical-debt/"&gt;see their way past nagging tech debt&lt;/a&gt;. However, bigger concerns have kept me from pushing them hard in that direction.

Maybe this blog post will move the needle. :-)

As I've worked on developing my &lt;a title="On bread recipes, maps, and intentions" href="http://codecraft.co/2013/10/24/on-bread-recipes-maps-and-intentions/"&gt;new programming language&lt;/a&gt;, I've given a lot of thought to how I can add value to the user experience of a software engineer. I've got some exciting ideas that I'm eager to share. Much of what's possible is &lt;a title="What should code look like when we squint at it?" href="http://codecraft.co/2013/09/19/what-should-code-look-like-when-we-squint-at-it/"&gt;more likely to be realized in an IDE&lt;/a&gt;; where I'm headed, text editors won't be enough.

My next blog post will be for the folks who live in the other codebases, and who may think that an IDE is all they'll ever need. They have something to learn from the other worldview, as well...</ns2:encoded>
  <ns0:post_id>5529</ns0:post_id>
  <ns0:post_date>2014-05-13 10:15:28</ns0:post_date>
  <ns0:post_name>why-you-should-use-an-ide-instead-of-vim-or-emacs</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="best-practices">best practices</category>
  <category domain="category" nicename="better-programming-language">better programming language</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="eclipse">eclipse</category>
  <category domain="post_tag" nicename="emacs">emacs</category>
  <category domain="post_tag" nicename="fear">fear</category>
  <category domain="post_tag" nicename="ide">IDE</category>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <category domain="post_tag" nicename="intellij">IntelliJ</category>
  <category domain="post_tag" nicename="netbeans">NetBeans</category>
  <category domain="post_tag" nicename="refactoring">refactoring</category>
  <category domain="post_tag" nicename="teamwork">teamwork</category>
  <category domain="post_tag" nicename="vim">vim</category>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/10152375844770912</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>http://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5872016232818958337&amp;type=U&amp;a=EyQi</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_oembed_time_80cd72f0c110cce19c1165e993371336</ns0:meta_key>
    <ns0:meta_value>1725000024</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_oembed_80cd72f0c110cce19c1165e993371336</ns0:meta_key>
    <ns0:meta_value>&lt;div class="embed-youtube"&gt;&lt;iframe title="Sublime Text Perfect Workflow - 001 - Hello" width="646" height="485" src="https://www.youtube.com/embed/E2t2614cNAs?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>4945</ns0:comment_id>
    <ns0:comment_author>Why you should be proficient in a tool like vim or emacs | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/05/15/why-you-should-be-proficient-in-a-tool-like-vim-or-emacs/</ns0:comment_author_url>
    <ns0:comment_date>2014-05-15 08:46:01</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] In my last post, I pointed out two little-discussed reasons why I think most engineers should spend most of their time in an IDE. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4943</ns0:comment_id>
    <ns0:comment_author>Nitsan</ns0:comment_author>
    <ns0:comment_author_email>balelinits@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2014-05-15 05:47:14</ns0:comment_date>
    <ns0:comment_content>I believe a short video like this:
https://www.youtube.com/watch?v=E2t2614cNAs
can show the true power of sublime's workflow, which is easy to master, and vastly improve productivity.

sublime is my tool of craft</ns0:comment_content>
    <ns0:comment_parent>4922</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>23962076556</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1400154434</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4922</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2014-05-14 13:28:00</ns0:comment_date>
    <ns0:comment_content>That is an excellent question, Nitsan--and I have no doubt that you already know the correct answer. You use vim/nano. Usually, this is not the classic "software engineering" scenario where you have git, a ticketing system, scrum, and all sorts of process and complexity. But it *is* an important scenario to most of us, at one time or another.

I have one other compelling reason why all of us should also learn a good text editor--not use it by preference for everything we do, but have it in our repertoire, as a useful skill. I'll discuss that in a follow-up post.</ns0:comment_content>
    <ns0:comment_parent>4910</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>23947227947</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1400095680</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4895</ns0:comment_id>
    <ns0:comment_author>kc5tja</ns0:comment_author>
    <ns0:comment_author_email>kc5tja@arrl.net</ns0:comment_author_email>
    <ns0:comment_date>2014-05-13 17:40:35</ns0:comment_date>
    <ns0:comment_content>It's not uncommon for me to have up to three different editors open at once on a single project (Vim, ACME, and Sublime Text 2).  Sometimes, they'll even be editing the same file.  Depending on the project, I might replace ST2 with NetBeans.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>40043208</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1400024436</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4910</ns0:comment_id>
    <ns0:comment_author>Nitsan</ns0:comment_author>
    <ns0:comment_author_email>balelinits@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2014-05-14 05:51:43</ns0:comment_date>
    <ns0:comment_content>Very nice read, thank you.
But what can you do when most of your work deals with editing files on a production server, where Vim/nano are the only options you have, and you are forced to leave your beloved text-editor?</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1400068305</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>4896</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2014-05-13 17:43:53</ns0:comment_date>
    <ns0:comment_content>I'm chuckling because that sounds so much like me. I often have vim running in 3 or 4 different windows, and half the time I open the same file more than once. I'll get in the middle of making mods with one tool, and then switch to another when I have some other change that's easier to do in the other window. Thank goodness all good tools warn you about changes to the file you're editing. :-)</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1400024633</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>15299</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2015-05-11 10:55:56</ns0:comment_date>
    <ns0:comment_content>Yep, that also works, and I've done the same thing from time to time. Thanks for chiming in!</ns0:comment_content>
    <ns0:comment_parent>15278</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>10499869693</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1431363356</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>15278</ns0:comment_id>
    <ns0:comment_author>lol internet</ns0:comment_author>
    <ns0:comment_author_email>lol@internet.co.uk</ns0:comment_author_email>
    <ns0:comment_date>2015-05-10 06:06:30</ns0:comment_date>
    <ns0:comment_content>I use sshfs to mount remote filesystems in userspace.</ns0:comment_content>
    <ns0:comment_parent>4910</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>10459504092</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1431259592</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>9263</ns0:comment_id>
    <ns0:comment_author>Exploring the Power of Deixis | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/09/23/exploring-the-power-of-deixis/</ns0:comment_author_url>
    <ns0:comment_date>2014-09-23 08:34:50</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] stuff we need, right? Our linkers usually find the externals they need to bind together, and our IDEs usually find the decl for variables when we ask. The rest must not matter all that [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Why you should be proficient in a tool like vim or emacs</title>
  <link>http://codecraft.co/2014/05/15/why-you-should-be-proficient-in-a-tool-like-vim-or-emacs/</link>
  <pubDate>Thu, 15 May 2014 14:45:16 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5531</guid>
  <ns2:encoded>In my last post, I pointed out &lt;a title="Why you should use an IDE instead of vim or emacs" href="http://codecraft.co/2014/05/13/why-you-should-use-an-ide-instead-of-vim-or-emacs/"&gt;two little-discussed reasons why I think most engineers should spend most of their time in an IDE&lt;/a&gt;.

I knew I was venturing into the realm of religious wars to make such a claim. When I shared the post, the first comment I got was, "Do you have a death wish?" :-) I had to laugh.

[caption id="attachment_5591" align="aligncenter" width="646"]&lt;a href="http://uploads0.wikipaintings.org/images/gustave-dore/the-army-of-the-second-crusade-find-the-remains-of-the-soldiers-of-the-first-crusade-1877.jpg"&gt;&lt;img class="size-large wp-image-5591" src="http://codecraft.co/wp-content/uploads/2014/05/screen-shot-2014-05-15-at-1-47-38-am.png?w=646" alt="Religious wars aren't pretty. &amp;quot;The Second Crusaders Encounter the Remains of the First Crusaders&amp;quot;, by Gustav Dore (wikipaintings.org)" width="646" height="789" /&gt;&lt;/a&gt; Religious wars: not so pretty. "The Second Crusaders Encounter the Remains of the First Crusaders", by Gustav Dore (wikipaintings.org)[/caption]

It turns out that my experience with the ensuing comments has been quite positive. Plenty of people disagreed with me, which is fine. I've heard good arguments from many different perspectives, which is part of the reason why I blog and post on social media in the first place; &lt;a title="Humility" href="http://codecraft.co/2012/10/01/humility/"&gt;I need to be pushed&lt;/a&gt;. I hope my assertions about teamwork and gestalt were at least interesting.

Now, I promised that I'd write a follow-up post about the flip side of my advice. This isn't because I can't make up my mind; it's because I see these two toolings as complements with some overlap rather than symmetrical alternatives.

So today, I'm going to try to convince all the IDE zealots in the world that they're doing themselves and their teammates a disservice if they don't &lt;a title="Julie Jones: Learn voraciously." href="http://codecraft.co/2012/09/24/julie-jones-learn-voraciously/"&gt;take the time to become proficient&lt;/a&gt; in a powerful text editor.

Death wish part 2. :-)&lt;!--more--&gt;
&lt;h3&gt;The obvious reason&lt;/h3&gt;
In response to my first post, plenty of people pointed out the one use case where text editors totally crush IDEs: when a console is all you have to work with.
&lt;p style="padding-left:30px;"&gt;&lt;span style="color:#003366;"&gt;&lt;em&gt;"I really love to &lt;code&gt;ssh -X&lt;/code&gt; to a server, get permission from the sysadmin to monkey with packages and consume scarce resources, install KDE or gnome, install an IDE, run &lt;code&gt;startx&lt;/code&gt;, browse to the folder where the IDE's binary is installed, launch it, and then wait 5 minutes while it loads in the local X-server on whatever workstation I happen to be using"&lt;/em&gt; &lt;/span&gt;&lt;strong&gt;... said no one ever.&lt;/strong&gt;&lt;/p&gt;
The need to edit files on remote machines with minimal cruft installed is never going to die. For some developers, this is a constant workflow; for others, it's occasional. But almost none of us can ignore it entirely. In fact, given the surging tide of mobile computing and "Internet of Things" innovation, every passing day is probably increasing the probability that software pros will need to tweak files and debug in very resource-constrained, streamlined environments.

This reason by itself justifies the claim that every developer should at least be &lt;em&gt;functional&lt;/em&gt; in a high-powered text editor--and I think it's incontrovertible.

But is that the same as proving that every engineer should be &lt;em&gt;proficient&lt;/em&gt;?

To justify the stronger form of my assertion, I need to tell you a story.
&lt;h3&gt;Learning the web&lt;/h3&gt;
I first encountered http and web browsers when a friend showed me Mosaic 1.0 in about 1993. That is ancient history in Internet time. "I grow old, I grow old; I shall wear the bottoms of my trousers rolled."

An hour after my first exposure, I had scanned an html tutorial and was attempting my first experiments with &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt;. Wow! I could make pretty stuff appear on the screen!

Since then, I have debugged over-the-wire web interactions in ethereal (now wireshark); discovered Netscape's newfangled "cookie" mechanism; suffered through javascript 1.0 implementations in (gag!) IE 3.0; designed my own server-side directive language before finding ColdFusion; explored ASP and modcgi, then JSP, then raw PHP, then MVC; played with modwsgi and modrewrite; played with SOAP; become a veteran of RESTful web services; stumbled upon CSS 1.0 and user-agent sniffing, then waited impatiently for enhancements; written C++ and python and java implementations of http 1.0, then http 1.1; and on and on.

All of these battlescars change the way I understand the web.

Some of my younger coworkers got their first technical introductions to the web after the dot com boom, when Google was a billion-dollar company, Facebook had already been invented, and CSS 2.0 was supported by every browser on the planet.

Sheesh.

They may understand some things better than I do. I'm not fully up-to-speed on html5, for example, and I never got around to mastering actionscript. My jquery kung fu is weak.

However, I really, truly get what is happening under the layers that we've added in the past two decades, and there are lots of times when that knowledge pays off. I don't need WYSIWYG or wordpress themes to make html pretty (in fact, I detest their interference). I have an intuitive sense for when an ajax call is going to be inefficient. I know how caching proxies and http etags interact.

Other engineers could tell similar stories from their own careers--about how they learned assembly first, and then migrated through C to C++--and how that foundation helps them write &lt;a title="What Is “Good Code”?" href="http://codecraft.co/2012/08/26/what-is-good-code/"&gt;better code&lt;/a&gt; than a young upstart who learned first in C++.

What does this have to do with vim and emacs?

&lt;strong&gt;Back-to-basics programming&lt;/strong&gt;

Well, I claim that if you only ever see the &lt;a title="The Power of Simplicity" href="http://codecraft.co/2013/02/15/the-power-of-simplicity/"&gt;complexity of software engineering&lt;/a&gt; through the lens of an IDE, you have missed an important--even revelatory--learning experience.

When you code and debug in a text editor, living and dying by your proficiency there, you are essentially repeating the learning curve that the entire world computer science community lived through in the first several decades of its existence. You know the difference between a compiler and a linker and an assembler. Makefiles start making sense. The vagaries of preprocessor troubleshooting and the paths that a debugger uses to resolve symbols &lt;a title="Why Mental Models Matter" href="http://codecraft.co/2012/11/05/why-mental-models-matter/"&gt;lose their mystery&lt;/a&gt;. You master regular expressions. Arcane command-line options in git may even feel self-explanatory. (Maybe. :-)

Euclid said there was no royal road to geometry. You have to pay the price to learn the foundations before you can soar with the fancy stuff.

To me, that's the most compelling reason to go beyond "functional" and actually get productive with vim or emacs--if you specialize in an IDE without a text editor in your repertoire, you have &lt;a title="On SEPs, Squirrels, and Meta Questions" href="http://codecraft.co/2012/10/23/on-seps-squirrels-and-meta-questions/"&gt;gaps in your experience&lt;/a&gt;. An IDE makes parts of your ecosystem invisible; a text editor teaches you just how robust and amazing and satisfying that underlying ecosystem is. You learn some humility toward the pioneers in the field, who did so much with such a lean toolkit. And you learn not to drink all the IDE kool-aid without at least rolling your eyes occasionally.

&lt;strong&gt;Where I'm at&lt;/strong&gt;

I said in my last post that most developers should prefer to use an IDE, and I stand by that recommendation, for the reasons that I gave. I cheerfully admit that there are exceptions to my rule; don't flame me if you can duel in elisp with one hand tied behind your back.

But in addition, I also recommend that all developers take the time, at least during one stage in their career, to become proficient in the more spare, more low-level experience that text editors offer.

And I stand by that recommendation, too.</ns2:encoded>
  <ns0:post_id>5531</ns0:post_id>
  <ns0:post_date>2014-05-15 08:45:16</ns0:post_date>
  <ns0:post_name>why-you-should-be-proficient-in-a-tool-like-vim-or-emacs</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="ajax">ajax</category>
  <category domain="post_tag" nicename="assembler">assembler</category>
  <category domain="post_tag" nicename="battlescars">battlescars</category>
  <category domain="post_tag" nicename="compiler">compiler</category>
  <category domain="post_tag" nicename="console">console</category>
  <category domain="post_tag" nicename="debugger">debugger</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="emacs">emacs</category>
  <category domain="post_tag" nicename="geometry">geometry</category>
  <category domain="post_tag" nicename="html">html</category>
  <category domain="post_tag" nicename="http">http</category>
  <category domain="post_tag" nicename="ide">IDE</category>
  <category domain="post_tag" nicename="linker">linker</category>
  <category domain="post_tag" nicename="mosaic">mosaic</category>
  <category domain="post_tag" nicename="vim">vim</category>
  <category domain="post_tag" nicename="web">web</category>
  <category domain="post_tag" nicename="wysiwig">wysiwig</category>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/10152379898595912</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>http://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5872718343416332288&amp;type=U&amp;a=N-xZ</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>16747</ns0:comment_id>
    <ns0:comment_author>Scott</ns0:comment_author>
    <ns0:comment_author_email>codecraft.co.ns4u@jeterworld.net</ns0:comment_author_email>
    <ns0:comment_date>2015-09-25 15:49:42</ns0:comment_date>
    <ns0:comment_content>&amp;gt; get permission from the sysadmin to monkey with packages 

Umm, no.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1443217784</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>18055</ns0:comment_id>
    <ns0:comment_author>digitallyfreeblog</ns0:comment_author>
    <ns0:comment_author_email>krmane@openmailbox.org</ns0:comment_author_email>
    <ns0:comment_author_url>http://digitallyfreeblog.wordpress.com</ns0:comment_author_url>
    <ns0:comment_date>2017-03-19 03:07:11</ns0:comment_date>
    <ns0:comment_content>I just saw your blog post.  I have moved from Eclipse (well almost ) to Emacs for Python programming.  I stress the word Python, because for Java I think Eclipse still rocks.  But for all other reasons you rightly mentioned, plus the fact that now Emacs is also kind of IDE, auto completion, intelisence, code highlighting, Project system through plugins, integration with things like git and on and on.  I always knew that this potential existed at least in Emacs.  So I always kept my touch on Emacs.  And now it pays off.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>107747073</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1489914432</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
</item>
<item>
  <title>Taming Side Agreements</title>
  <link>http://codecraft.co/2014/10/28/taming-side-agreements/</link>
  <pubDate>Tue, 28 Oct 2014 14:35:00 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5539</guid>
  <ns2:encoded>When I was a technical director at Symantec, I had to formally certify at the end of each quarter that I had not entered into any "side agreements" with customers.

A side agreement is any arrangement that takes place out-of-band, off-the-books, or using private channels not normally examined by accountants. In business, they are usually a bad thing; they can be used to build Enron- or Madoff-style house-of-cards revenue pipelines that are gleaming and glittery at first glance, but that are ripe for collapse because they're full of hidden caveats and preconditions.

[caption id="" align="aligncenter" width="640"]&lt;a href="https://www.flickr.com/photos/dawilson/3389046866/sizes/z/"&gt;&lt;img src="https://farm4.staticflickr.com/3593/3389046866_c642884f48_z_d.jpg" width="640" height="283" /&gt;&lt;/a&gt; The former Enron towner, now owned by Chevron. Image credit: DaveWilsonPhotography (Flickr)[/caption]

The problem of side agreements might not impinge on the consciousness of software engineers much, except when they grumble that sales or execs or product management is "selling the roadmap" instead of shipping features. But would you believe me if I said that engineers perpetrate their own Enron-esque side agreements all the time?

&lt;!--more--&gt;

&lt;h3&gt;How agreements are formalized in software&lt;/h3&gt;

Think about what embodies the formal contract between the producer and the consumer of a chunk of code. Whether you describe an API with IDL, WSDL, an XSD, a grammar, a function decl in a header, an abstract base class, or loose Go-style implicit interfaces, the scope of issues you can describe is largely confined to those expressible with data type and function signature primitives. You basically get to say, "I support a [verb/function/method/action] named X, which takes the formal parameters A [of type x] and B [of type y] and returns C." You may be able to specify some overloading and versioning, if you're lucky, and you may be able to group a set of these statements together into a larger unit.

Some crucial topics are entirely missing from your contract:

&lt;dl&gt;
&lt;dt&gt;What ordering constraints govern which APIs can be called, when?&lt;/dt&gt;
&lt;dd&gt;We know that you can't call fclose() until you've called fopen(), but can you tell by reading the interface to a class that some methods are only valid when an object is "fully" inited? Do we always have to follow method A with method B? Although these constraint may sometimes be (somewhat accurately) documented, they're not in a function signature anywhere, and docs could change without a hiccup from the compiler.&lt;/dd&gt;
&lt;dt&gt;What security constraints govern API success and failure?&lt;/dt&gt;
&lt;dd&gt;Same story as ordering--we document this stuff, but compilers punt all enforcement to run-time.&lt;/dd&gt;
&lt;dt&gt;What expectations does an API have about available resources--and what guarantees does it make about how those resources will be used?&lt;/dt&gt;
&lt;dd&gt;Obviously (to a human), an API that downloads from the internet is going to fail if the network is down... unless it uses a locally cached version of the file... Some APIs fail in low-memory situations--though the exact boundaries that trigger the failure may change depending on unpredictable factors. Will an API peg all available CPUs, or only one? How much disk space will the API need? Does it need write access to /tmp, or to ~/?&lt;/dd&gt;
&lt;dt&gt;What performance guarantees does an API require or provide?&lt;/dt&gt;
&lt;dd&gt;This includes classic "Big O" notation, but it goes well beyond that. How long will it take for the API to time out? How many times will it retry, and how expensive will the retries be?&lt;/dd&gt;
&lt;dt&gt;How often can an API be called?&lt;/dt&gt;
&lt;dd&gt;Does it cache values for efficiency? If so, what policies govern caching? Is the expense of the call such that calling it a hundred times a second is a ridiculous violation of its coder's assumptions?&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3&gt;Reality bites&lt;/h3&gt;

Eliminating such issues is one of the benefits often touted by fans of functional programming. Pure functions &lt;em&gt;do&lt;/em&gt; have less side effects, and therefore, less potential for misuse. But when the intent of a function call is to &lt;em&gt;cause&lt;/em&gt; certain effects, pure functions don't help us; all these messy issues crowd in. Just because they aren't expressible in an interface contract in code, doesn't mean we don't code against them. If we're lucky, documentation is thorough and accurate, and behavior across versions is mostly stable, and we figure out how to get what we want by coding just so. Basically, we create side agreements: &lt;em&gt;I will do this or that extra thing that's not part of the contract, and you'll do this or that extra thing that's not part of the contract, either.&lt;/em&gt;

Does that make you squirm?

It should. Like a shell game that hides risky debt, this sort of invisible &lt;em&gt;quid pro quo&lt;/em&gt; can permeate a code base, riddling it with invisible tech debt and setting it up for future maintenance headaches. We end up with subtle temporal coupling, runaway transitive dependencies, impossible compatibility constraints, and worse.

What makes this problem particularly insidious is that we often stumble into these side agreements after a lot of painful trial and error. And we have to repeat that trial and error at the most inopportune times. I can't count the number of hours I've wasted, discovering by monotonous debugging that such-and-such a function can't be called until some other function has properly initialized a context that nobody told me I needed. Or the times I've debugged a mysterious slowdown, only to discover that an OS API doesn't perform the same way after a service pack.

&lt;h3&gt;What can we do?&lt;/h3&gt;

I don't know that there's a silver bullet to eliminate all side agreements in code, but I think we can learn some lessons from the world of finance.

First, &lt;em&gt;sunshine helps&lt;/em&gt;. The more light you can shine on the dark corners of an interaction, the less likely it is that side agreements will surprise you. World-class API documentation (Microsoft's Win32 KB, Oracle's java docs, the full posix standard) makes a concerted effort to expose many of the subtleties I listed above, although I think &lt;a href="http://codecraft.co/2013/08/22/when-good-comments-mean-bad-language/" title="When good comments mean bad language"&gt;docs and comments are often a band-aid&lt;/a&gt;. The &lt;a href="http://codecraft.co/2014/09/25/how-to-point-in-code/#proxies"&gt;proxy technique&lt;/a&gt; that I recommended, to &lt;a href="http://codecraft.co/2014/07/16/lacunas-everywhere/" title="Lacunas Everywhere"&gt;codify human concerns&lt;/a&gt; in a codebase, is another way of adding sunshine. The &lt;a href="http://codecraft.co/2014/07/28/mountains-molehills-and-markedness/" title="Mountains, Molehills, and Markedness"&gt;"marks" feature&lt;/a&gt; that I'm building for the &lt;code&gt;intent&lt;/code&gt; programming language lights up all kinds of nether regions that lurk in perpetual gloom.

Second, &lt;em&gt;auditors [automated tests] are vital&lt;/em&gt;. It's popular in some circles to say that you only need to test the public interface to a class/module--and in theory, I agree. But remember that the true breadth of the interface you're coding against goes well beyond function signatures. A human auditor is pretty useless if she or he only checks the obvious stuff. Make your tests thorough.

Third, &lt;em&gt;we need whistleblowers&lt;/em&gt;. I have previously written about &lt;a href="http://codecraft.co/2013/05/06/why-your-software-should-cry/" title="Why Your Software Should Cry"&gt;embedding pain sensors&lt;/a&gt; and &lt;a href="http://codecraft.co/2013/01/11/dont-forget-the-circuit-breakers/" title="Don’t forget the circuit breakers"&gt;circuit breakers&lt;/a&gt; in code. We need ways to find out that everything isn't working right--ways that are smarter than log files that get ignored until we have a full-blown crisis.

Fourth, &lt;em&gt;the size of your accounting staff depends on the scale of your operation&lt;/em&gt;. In other words, be &lt;a href="http://codecraft.co/2013/01/18/earned-pragmatism/" title="Earned Pragmatism"&gt;pragmatic&lt;/a&gt;, because the proper amount of investment &lt;a href="http://codecraft.co/2012/09/17/steve-tolman-it-depends/" title="Steve Tolman: It depends."&gt;depends&lt;/a&gt;. If you're writing a few quick scripts, this issue may not matter much--but don't imagine you can retrofit discipline into an Enron-like software monstrosity. Understand your risk, and &lt;a href="http://codecraft.co/2013/02/21/architects-manage-risk-like-a-vegas-bookie/" title="Architects: manage risk like a Vegas bookie"&gt;manage it wisely&lt;/a&gt; as part of your architecture.

&lt;h3&gt;Your battlescars&lt;/h3&gt;

How about you? When have you been bit by "side agreements" in code? What techniques have you used to drive them out? Please share.
</ns2:encoded>
  <ns0:post_id>5539</ns0:post_id>
  <ns0:post_date>2014-10-28 08:35:00</ns0:post_date>
  <ns0:post_name>taming-side-agreements</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="auditor">auditor</category>
  <category domain="category" nicename="better-programming-language">better programming language</category>
  <category domain="post_tag" nicename="circuit-breakers">circuit breakers</category>
  <category domain="post_tag" nicename="comments">comments</category>
  <category domain="post_tag" nicename="contract">contract</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="documentation">documentation</category>
  <category domain="post_tag" nicename="enron">enron</category>
  <category domain="post_tag" nicename="interface">interface</category>
  <category domain="post_tag" nicename="madoff">madoff</category>
  <category domain="post_tag" nicename="pain">pain</category>
  <category domain="post_tag" nicename="side-agreement">side agreement</category>
  <category domain="post_tag" nicename="signatures">signatures</category>
  <category domain="category" nicename="software-architecture">Software Architecture</category>
  <category domain="post_tag" nicename="test">test</category>
  <category domain="post_tag" nicename="whistleblowers">whistleblowers</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/10152765864845912</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>https://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5932872167829032960&amp;type=U&amp;a=Jnvr</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_rest_api_client_id</ns0:meta_key>
    <ns0:meta_value>-1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_rest_api_published</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>10895</ns0:comment_id>
    <ns0:comment_author>David H</ns0:comment_author>
    <ns0:comment_author_email>david@handysoftware.com</ns0:comment_author_email>
    <ns0:comment_date>2014-10-29 07:12:42</ns0:comment_date>
    <ns0:comment_content>"But when the intent of a function call is to cause certain effects, pure functions don’t help us; all these messy issues crowd in."

For those of us who write code for a living, an important side effect of a function is that the customer gives us money. I'm glad you said that there is no silver bullet, because that whole making-the-customer-happy thing is very difficult to automatically verify at compile time. :)

For purposes of expressing and enforcing the "real" contract, I have found test-driven-development to be helpful. A docstring on a recent test: "The save() method creates a file that is only readable and writable by the owner." How's that for a contract?

The problem with my test suite is that no one seems to want to read over my unit tests to see what the code does. :) Tests in one place are enforcing what docs in another place are saying, and hopefully the two match. Python doctests [1] can help with this, for certain types of tests and certain types of code.

[1] https://docs.python.org/2/library/doctest.html</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1414588362</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>10897</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2014-10-29 07:21:42</ns0:comment_date>
    <ns0:comment_content>David: thank you for pointing out the "side effect" of getting paid. Very à propos! :-)

I agree about the value of TDD. I haven't used doctests very often, but I am at a loss to explain why--they're quite nifty. One thing that I particularly like about them is that they are embedded in the code, *not* stored in a separate file. This makes it more likely that a programmer will actually read/be aware of the semantics they enforce.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1414588904</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>13815</ns0:comment_id>
    <ns0:comment_author>Know Your Limits | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/02/05/know-your-limits/</ns0:comment_author_url>
    <ns0:comment_date>2015-02-05 08:47:41</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] but only by using many channels. It took an email exchange with the author to discover this informal side agreement in the [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Mountains, Molehills, and Markedness</title>
  <link>http://codecraft.co/2014/07/28/mountains-molehills-and-markedness/</link>
  <pubDate>Mon, 28 Jul 2014 14:44:19 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5612</guid>
  <ns2:encoded>In my previous three posts, I explained why the semantics of programming languages are &lt;a title="Lacunas Everywhere" href="http://codecraft.co/2014/07/16/lacunas-everywhere/"&gt;not as rich as they could be&lt;/a&gt;. I pointed out some symptoms of that deficit, and then made &lt;a title="Thoughts On Bridging the “Lacuna Humana”" href="http://codecraft.co/2014/07/21/bridging-the-lacuna-humana/"&gt;recommendations about bridging the gap&lt;/a&gt;. Finally I &lt;a title="Introducing Marks" href="http://codecraft.co/2014/07/24/introducing-marks/"&gt;introduced "marks"&lt;/a&gt;--a feature of the &lt;code&gt;intent&lt;/code&gt; programming language I'm creating--and gave you a taste for how they work.

In this post, I'm going to offer more examples, so you see the breadth of their application.
&lt;h3&gt;Aside&lt;/h3&gt;
Before I do, however, I can't resist commenting a bit on the rationale for the name "marks".

In linguistics, &lt;em&gt;markedness&lt;/em&gt; is the idea that some values in a language's conceptual or structural systems should be assumed, while others must be denoted explicitly through morphology, prosodics, structural adjustments, and so forth. Choices about markedness are inseparable from worldview and from imputed meaning. Two quick examples:
&lt;!--more--&gt;
&lt;ol&gt;
	&lt;li&gt;Chinese generally doesn't inflect tense/aspect, but when necessary, it &lt;em&gt;marks&lt;/em&gt; utterances in the past or future using extra particles. Contrast "我吃" ("I eat" or "I am eating" or "I habitually eat"--or even "I will eat" or "I ate", if the speaker considers tense/aspect irrelevant or knowable from context)&lt;code&gt; &lt;span style="color:blue;"&gt;::&lt;/span&gt; &lt;/code&gt;"我吃&lt;span style="color:red;"&gt;了&lt;/span&gt;" ("I ate" [explicitly in the past]).&lt;/li&gt;
	&lt;li&gt;In languages that have a &lt;em&gt;grammatical gender&lt;/em&gt;, nouns are often &lt;em&gt;marked&lt;/em&gt; to indicate a category that the linguistic community deems more semantically rich/interesting than unknown/neuter. Contrast English "I saw some lions"&lt;code&gt; &lt;span style="color:blue;"&gt;::&lt;/span&gt; &lt;/code&gt;"I saw some lion&lt;span style="color:red;"&gt;esses&lt;/span&gt;"; Spanish "Vi algunos leones"&lt;code&gt; &lt;span style="color:blue;"&gt;::&lt;/span&gt; &lt;/code&gt;"Vi algun&lt;span style="color:red;"&gt;as&lt;/span&gt; leon&lt;span style="color:red;"&gt;as&lt;/span&gt;"; and German "Ich sah einige Löwen"&lt;code&gt; &lt;span style="color:blue;"&gt;::&lt;/span&gt; &lt;/code&gt;"Ich sah einige Löwin&lt;span style="color:red;"&gt;nen&lt;/span&gt;". In each case, the first form doesn't make any particular claim about gender, whereas the marked form does.&lt;/li&gt;
&lt;/ol&gt;
&lt;em&gt;In all human language, meaning is powerfully influenced by patterns of markedness.&lt;/em&gt; We pay attention to marks. Whether we're raising our eyebrows, selecting words with care during an debate, or straining to understand a friend on an iffy cell phone connection, we key off of their presence or absence. We do it intuitively and constantly.

Yet for all their power, marks are unobtrusive and cheap to use.

That's a happy combination.
&lt;h3&gt;Markedness in programming languages&lt;/h3&gt;
Of course, markedness already manifests in programming languages, even if you're not using my "marks". Depending on whether you're in java, C++, or python, the default visibility of class members is package, private, or public--all other visibilities must be marked. Constness is marked in C++. Alignment of data structures, casting, partial template specialization, scope of closure variables, and many other features all embody markedness rules in one way or another.

Unfortunately, the literalness of programming languages, and the fundamental assumption that the purpose of a language is exactly and only to embody instructions that get translated to machine code, has caused markedness to be mismanaged. I've already written at length about the semantic gap between code and human software development activities--the &lt;em&gt;lacuna humana&lt;/em&gt;. That arises partly because of markedness problems; go back and read my blueprint for marks and see how markedness can't propagate or evaluate without the infrastructure I describe.

Another consequence of markedness mismanagement is clumsiness and verbosity. Human languages are parsimonious; default cases tend not to be the marked ones. Even when marks do appear, they propagate meaning without ad nauseum repetition. But programming languages have historical baggage that flips markedness on its head--the threadsafe, bounds-checking, non-blocking, const-correct versions of features that we should use by default all require extra marks. Think &lt;code&gt;sprintf&lt;span style="color:red;"&gt;_s&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;rand&lt;span style="color:red;"&gt;_r&lt;/span&gt;&lt;/code&gt;, the &lt;code style="color:red;"&gt;std::&lt;/code&gt; namespace... Think smart pointers versus raw pointers. Think &lt;a href="http://qconlondon.com/london-2009/presentation/Null+References:+The+Billion+Dollar+Mistake" target="_blank"&gt;Hoare's billion-dollar mistake&lt;/a&gt;. How many explicit assertions and preconditions have you written over the years, to sanity-check stuff that should always be true (&lt;code&gt;if (myArg == null) throw Exception("Can't be null.")&lt;/code&gt;...), instead of writing code to allow a few corner cases?
&lt;h3&gt;More Examples&lt;/h3&gt;
Hopefully I've convinced you that markedness matters. I think it's a mountain, rather than a molehill.

[caption id="" align="aligncenter" width="500"]&lt;img src="https://farm5.staticflickr.com/4032/4241886426_2e9dd510a6.jpg" alt="" width="500" height="375" /&gt; A mole hill with a glorious horizon behind it. Are those mountains, or just trees? :-) Image credit: &lt;a href="https://www.flickr.com/photos/strep72/4241886426/sizes/l" target="_blank"&gt;Strep72&lt;/a&gt; (Flickr).[/caption]

But just in case I haven't, here are more scenarios to think about. As you read these, keep in mind what you already know about marks: they have full access to the code DOM at compile time; they propagate in sophisticated ways; they can generate code; and they can attach to constructs that traditional code ignores, such as requirements, human teams, and so forth.
&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;Release readiness and dev milestones&lt;/strong&gt; can be codified with marks.
&lt;div style="margin:1em;"&gt;Imagine that your team has a policy that once you hit the "UI freeze" milestone, .properties files can't change, because strings have been sent out for translation. You place a single mark on a codebase, saying that you're now at the "UI freeze" milestone. You write logic for your mark that says it can't attach if any .properties files are checked out from git. When you compile, the compiler throws a semantic error if the mark is present but .properties files are checked out.&lt;/div&gt;
&lt;div style="margin:1em;"&gt;Or imagine that you have a "release gauntlet" checklist. Before you release, you must certify dozens of items (gold master binaries have been scanned for viruses, release notes are finished, branching operations in Perforce are done, "beta" has been removed from the product's version stamp...). You create a "ready to release" mark that tests completion of each item in the gauntlet, place it on the product, check in files that record your progress, and let your compiler tell you when you've achieved your intentions.&lt;/div&gt;
&lt;div style="margin:1em;"&gt;On a less grandiose scope, I've often wanted a way to advertise that code is "API complete" even though some parts of it are only backed by stubs--or I've wanted to tell a tester when I'm ready to hand something off. Marks are perfect for this.&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Stubs, experiments, and incomplete implementations&lt;/strong&gt; are best marked, instead of using the familiar &lt;code&gt;&lt;span style="color:green;"&gt;// TODO&lt;/span&gt;&lt;/code&gt; comment convention.
&lt;div style="margin:1em;"&gt;If you have a queryable DOM and TODO marks that can propagate powerfully, you can quickly get a picture about how much unimplemented functionality lurks in a codebase. (Notice how the presence of a "not finished" mark could interact with the "ready to release" mark I mentioned above...)&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;Marks can provide &lt;strong&gt;intuitive shortcuts&lt;/strong&gt; for semantic bundles.
&lt;div style="margin:1em;"&gt;How many functions in your codebase take a filesystem path as a parameter? How many of these parameters must identify a file that exists with appropriate permissions--or a folder that will be created? Using a mark to generate all these preconditions is a lot cheaper than expressing all of them yourself, over and over again. In &lt;code&gt;intent&lt;/code&gt;, marks are exposed as parts of interfaces, which means you don't even have to document these preconditions once you add the mark; it all just flows.&lt;/div&gt;
&lt;div style="margin:1em;"&gt;The familiar pattern of passing args to constructors, and using those args to initialize member variables, can also be short-circuited with a "copy args" mark. The method of this mark that generates code can inspect parameter names and the names of member variables, and generate assignment statements for any that don't already have overriding assignment logic in the body of the constructor. And because marks propagate, you can attach a "copy args" mark to a whole class and get this behavior on all of its constructors--or even on a whole package or codebase, if you like. Since you can attach marks with implicitly affirmed semantics rather than just binary on/off, you can use a broad scope but safely override (explicitly deny the "copy args" mark) where you need to.&lt;/div&gt;
&lt;div style="margin:1em;"&gt;A mark could assert that a class is threadsafe. The compile-time code for this mark that tests bind-ability could inspect the class to see if it has any mutable state, or if it calls any functions marked "non-pure".&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;Marks can make &lt;strong&gt;unit conversion&lt;/strong&gt; seamless.
&lt;div style="margin:1em;"&gt;One of my pet peeves is parameters named &lt;code&gt;timeout&lt;/code&gt; or &lt;code&gt;bandwidth&lt;/code&gt; instead of &lt;code&gt;timeout_millisecs&lt;/code&gt; or &lt;code&gt;bandwidth_mbps&lt;/code&gt;. How many times do we have to accidentally hang a program by passing "10000" as the &lt;code&gt;delay&lt;/code&gt; arg (discovering to our chagrin that we provided seconds instead of milliseconds) before we get religion about making units explicit?&lt;/div&gt;
&lt;div style="margin:1em;"&gt;Well, marks can easily make units explicit, painting whole codebases as millisecond-oriented or UTC-oriented at a single stroke. And in &lt;code&gt;intent&lt;/code&gt;, these marks show up in generated docs, without the programmer writing redundant javadoc-style comments. But they can do better than that--their code can provide compatibility checks (weight can't be converted to kilograms without a key assumption) and even conversions at compile time. Think &lt;code&gt;std::this_thread::sleep_for(std::chrono::millseconds(25));&lt;/code&gt; on major steroids.&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;Marks can &lt;strong&gt;identify aspects and inject AOP-style behaviors&lt;/strong&gt;.
&lt;div style="margin:1em;"&gt;Imagine that instead of writing thousands of &lt;code&gt;Log(severity, func, lineNum, msg, ...)&lt;/code&gt; statements, you simply painted your code with a smart mark that knew to generate logging. Imagine that the logging strategy used at runtime could be plugged into that mark using IoC techniques. Imagine that the mark could look for functions that you mark as "untrusted" or "error prone" (another use for marks--arbitrary tagging) and dial up logging on those. Imagine that it could interact with another mark, "performance-sensitive", and dial back its aggressiveness.&lt;/div&gt;
&lt;div style="margin:1em;"&gt;What if, instead of choosing between specialized builds and manually instrumented code to study performance, you could mark codepaths that are interesting to profile--and then inject profiling to those marks, IoC-style? Better yet, imagine you could derive the set of interesting codepaths by examining the propagation and intersection of other marks. Imagine you marked quantities at key places in your code ("I expect this container to hold hundreds of items, and that one to hold tens of millions"). Combine this with the idea that all functions in a standard library could be marked for whether they used the file system, the network, the heap, mutexes, and other key resources--and you could probably predict many bottlenecks at compile time. (Of course, there are limits to what you can predict. :-)&lt;/div&gt;

[caption id="" align="aligncenter" width="461"]&lt;img class="" src="http://imgs.xkcd.com/comics/extrapolating.png" alt="" width="461" height="295" /&gt; image credit: xkcd[/caption]&lt;/li&gt;
	&lt;li&gt;Marks can &lt;strong&gt;generate, describe, and enforce error handling&lt;/strong&gt;.
&lt;div style="margin:1em;"&gt;Want to make sure your callers check the error you might return? There's a mark for that. :-) (Actually, there are compiler extensions for that today, in some situations. But you can nuance the behavior, and propagate their semantics, so much better with marks.)&lt;/div&gt;
&lt;div style="margin:1em;"&gt;Want to give callers the option of short-circuiting expensive checks in a function that will be called billions of times in certain codepaths--but preserve those checks for casual callers? Instead of writing two versions of the function, you could mark conditionals in your code as applying to untrusted callers, and let the compiler figure out who's trusted based on propagation of other marks in the codebase.&lt;/div&gt;
&lt;div style="margin:1em;"&gt;Marks might be used to generate code for &lt;a title="Don’t forget the circuit breakers" href="http://codecraft.co/2013/01/11/dont-forget-the-circuit-breakers/"&gt;circuit-breaker patterns&lt;/a&gt;. Marks might also be used to identify symptoms for &lt;a title="Why Your Software Should Cry" href="http://codecraft.co/2013/05/06/why-your-software-should-cry/"&gt;pain detecting algorithms&lt;/a&gt;.&lt;/div&gt;
&lt;div style="margin:1em;"&gt;Imagine you could declare remediation strategies for common problems (Internet down? Retry in 5 seconds. Out of disk space? Flush temp folder.), and simply mark functions as using these strategies across all code you write. Imagine if you could formally describe/recommend remediation strategies to your callers, for errors you returned.&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;Marks can &lt;strong&gt;delimit temporal boundaries&lt;/strong&gt;.
&lt;div style="margin:1em;"&gt;After you've finished reading your config file, perhaps your app is now fully initialized, and should never need to read from disk again. You could place a mark at that point in the code, using temporal propagation to say that all codepaths beyond it should be file I/O free. This could be enforced at compile time. It could also generate useful security information at run-time.&lt;/div&gt;
&lt;div style="margin:1em;"&gt;The problem I brought up in a previous post, about certain methods only being callable at certain points in the lifecycle of an object, can also be solved with temporal marks. State machines become self-documenting.&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;Marks can &lt;strong&gt;make coupling and cohesion obvious&lt;/strong&gt;.
&lt;div style="margin:1em;"&gt;I already gave the example of GPL/copyleft effects in a codebase, and how they could be detected with marks. Other types of coupling are manageable with marks as well. Writing a mark that says, "Don't allow any code in Component A to depend on Component B at compile-time" is trivial.&lt;/div&gt;
&lt;div style="margin:1em;"&gt;The complement is also possible. Suppose Component A, function &lt;code&gt;aaa()&lt;/code&gt; eventually calls Component B function &lt;code&gt;bbb()&lt;/code&gt;, and one of &lt;code&gt;aaa()&lt;/code&gt;'s parameters is a direct pass-through to &lt;code&gt;bbb()&lt;/code&gt;. You could document this interaction--or you could create a "passthrough" mark that hyperlinks the two and copies across all relevant semantics. This makes the dependency obvious and saves you the effort of writing and maintaining redundant code and docs.&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Final Thoughts&lt;/h3&gt;
This post would be incomplete if I didn't acknowledge the limitations of marks. My friend &lt;a href="http://dld.me" target="_blank"&gt;Trev Harmon&lt;/a&gt; (&lt;a href="https://twitter.com/trev_harmon" target="_blank"&gt;@trev_harmon&lt;/a&gt;) was asking me the other day how much I thought my ideas overlapped with the goals of the semantic web. Marks are not nearly that ambitious. Although they expand the scope of semantics in programming languages in important ways, they can't turn code into a fitting conveyance for all human communication. They work well within the domain-specific language of software development.

Another of my friends, &lt;a title="David on LinkedIn" href="http://www.linkedin.com/pub/david-handy/1/24/8b8" target="_blank"&gt;David Handy&lt;/a&gt;, pointed out that propagation of marks through a call graph gets problematic across closure boundaries and function pointers. That's quite true, and I'm not sure how surmountable it is.

So marks can't butter your toast, or write poetry. :-)

Still, I think they're a useful innovation. I'm hoping that smarter minds than mine can pick up on the kernel of the idea and take it to cool new places I haven't yet imagined. My friend David also pointed out some cool ways that marks could be used to gather statistics, which I had not considered. What else will you dream up? If you're interested in collaborating, let me know. Also, I would appreciate you sharing this series of posts with people who don't read my blog; I'm interested in broadening the conversation as much as possible.</ns2:encoded>
  <ns0:post_id>5612</ns0:post_id>
  <ns0:post_date>2014-07-28 08:44:19</ns0:post_date>
  <ns0:post_name>mountains-molehills-and-markedness</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="aop">AOP</category>
  <category domain="post_tag" nicename="api">API</category>
  <category domain="post_tag" nicename="aspect">aspect</category>
  <category domain="post_tag" nicename="assumptions">assumptions</category>
  <category domain="category" nicename="better-programming-language">better programming language</category>
  <category domain="post_tag" nicename="clumsiness">clumsiness</category>
  <category domain="post_tag" nicename="coupling">coupling</category>
  <category domain="post_tag" nicename="defaults">defaults</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="documentation">documentation</category>
  <category domain="post_tag" nicename="dom">DOM</category>
  <category domain="post_tag" nicename="error-handling">error handling</category>
  <category domain="post_tag" nicename="gender">gender</category>
  <category domain="post_tag" nicename="inflection">inflection</category>
  <category domain="post_tag" nicename="logging">logging</category>
  <category domain="post_tag" nicename="markedness">markedness</category>
  <category domain="post_tag" nicename="marks">marks</category>
  <category domain="post_tag" nicename="meaning">meaning</category>
  <category domain="post_tag" nicename="milestones">milestones</category>
  <category domain="post_tag" nicename="release-readiness">release readiness</category>
  <category domain="post_tag" nicename="requirements">requirements</category>
  <category domain="post_tag" nicename="temporal">temporal</category>
  <category domain="post_tag" nicename="tense">tense</category>
  <category domain="post_tag" nicename="thread-safety">thread safety</category>
  <category domain="post_tag" nicename="unit-conversion">unit conversion</category>
  <category domain="post_tag" nicename="units">units</category>
  <category domain="post_tag" nicename="verbosity">verbosity</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_thumbnail_id</ns0:meta_key>
    <ns0:meta_value>5750</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_job_id</ns0:meta_key>
    <ns0:meta_value>11697389856</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>http://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5899534648693768192&amp;type=U&amp;a=PNQ8</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/10152551530790912</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>10857</ns0:comment_id>
    <ns0:comment_author>Taming Side Agreements | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/10/28/taming-side-agreements/</ns0:comment_author_url>
    <ns0:comment_date>2014-10-28 08:36:00</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] that I recommended, to codify human concerns in a codebase, is another way of adding sunshine. The &amp;#8220;marks&amp;#8221; feature that I&amp;#8217;m building for the intent programming language lights up all kinds of nether regions [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>15716</ns0:comment_id>
    <ns0:comment_author>Introducing Marks | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/24/introducing-marks/</ns0:comment_author_url>
    <ns0:comment_date>2015-06-15 10:22:52</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] my next post, I&amp;#8217;ll explore a bunch of additional examples, and I&amp;#8217;ll cover more details about how [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>9441</ns0:comment_id>
    <ns0:comment_author>How to point in code | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/09/25/how-to-point-in-code/</ns0:comment_author_url>
    <ns0:comment_date>2014-09-25 08:39:05</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] how the semantic marks that I&amp;#8217;ve discussed in previous posts provide a powerful way to qualify and query this sort of DOM. To find all classes [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>7297</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2014-07-30 08:36:47</ns0:comment_date>
    <ns0:comment_content>Thank you so much for the catch, Dennis! I've updated the post.</ns0:comment_content>
    <ns0:comment_parent>7283</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1406731007</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>7283</ns0:comment_id>
    <ns0:comment_author>Dennis</ns0:comment_author>
    <ns0:comment_author_email>dennis.stritzke@googlemail.com</ns0:comment_author_email>
    <ns0:comment_date>2014-07-30 01:24:05</ns0:comment_date>
    <ns0:comment_content>Just one little correction to the German example in section "Aside". You use the word "Löwin" as genderless expression, but this is the female lion. Whereas "Löwinnen" is the plural of "Löwin". If you wan't to correct it, it would be "Ich sah einige Löwen" :: "Ich sag einige Löwinnen".

But nevertheless thank you for sharing your insights!</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1406705047</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>7539</ns0:comment_id>
    <ns0:comment_author>In Which Warnings Evolve Wings | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/08/06/in-which-warnings-evolve-wings/</ns0:comment_author_url>
    <ns0:comment_date>2014-08-06 08:46:16</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] marks that I&amp;#8217;ve recently described provide a nice, uniform solution to this hodgepodge of warning-answering mechanisms. Since [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>7574</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2014-08-07 11:17:25</ns0:comment_date>
    <ns0:comment_content>Excellent notes, David. The one about direct user input is a great use case, and a piece of cake to implement--and I think it would even be possible to take most of the burden off of the coder, because functions that receive direct user input can be painted with a mark that propagates to anything that calls them in an assignment. This makes it so the very act of calling something like sscanf() can automatically cause the variables that get set to acquire the "direct user input" mark, without the coder lifting a finger.

You are right that temporal propagation is harder to implement than some of the other ones. Maybe I'll have to defer that one if it proves too challenging--although I have some ideas about how it would work, and they seem feasible in my mind. I guess we'll see when I get there. At the moment I'm still in the early stages of lexing/parsing...

The whole security angle is huge, and I'm hoping someone who's got a deep background in vulnerability analysis can chime in with wisdom.</ns0:comment_content>
    <ns0:comment_parent>7564</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1407431845</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>7564</ns0:comment_id>
    <ns0:comment_author>David H</ns0:comment_author>
    <ns0:comment_author_email>david@handysoftware.com</ns0:comment_author_email>
    <ns0:comment_date>2014-08-07 06:35:21</ns0:comment_date>
    <ns0:comment_content>The additional use cases for marks that you have described here look much more challenging to implement than the ones you gave previously. The earlier use cases could have been implemented by examining a call graph and a DOM of the compiled code. But the use cases involving temporal boundaries, wouldn't those require more sophisticated flow analysis?

So, if difficulty of implementation is not to be considered at all, then I can add some more use cases to your list. :)

How about marking variables that contain direct user input? Or that contain data POSTed from the internet, etc? And then have the compiler make sure that you never use untrusted input e.g. to form SQL expressions, nor pass it to an exec() function call, etc.

How about marking functions that should only be performed by users with admin privileges?

How about marking functions that should only execute within a security sandbox? Or, conversely, marking those functions trusted to make changes outside of the sandbox, making everything else restricted?

There are probably a lot more security-related rules that, if your marks system was fully functional as you described, could finally be enforced.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1407414923</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
</item>
<item>
  <title>Lacunas Everywhere</title>
  <link>http://codecraft.co/2014/07/16/lacunas-everywhere/</link>
  <pubDate>Wed, 16 Jul 2014 19:58:30 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5633</guid>
  <ns2:encoded>I'm &lt;a href="http://matadornetwork.com/abroad/20-awesomely-untranslatable-words-from-around-the-world/" target="_blank"&gt;told&lt;/a&gt; that in Czech, the word "prozvonit" means "to call a mobile phone and let it ring once so that the other person will call back, saving the first caller money."

[caption id="" align="aligncenter" width="640"]&lt;a href="https://www.flickr.com/photos/astrid/5080987526/sizes/z/"&gt;&lt;img src="https://farm5.staticflickr.com/4113/5080987526_cdbf30487f_z_d.jpg" alt="" width="640" height="421" /&gt;&lt;/a&gt; Image credit: AstridWestvang (Flickr)[/caption]

How would you translate this word to someone in New Guinea who has never experienced electricity, let alone a telephone or a bill from Verizon? You wouldn't. This is an example of a "&lt;a href="http://en.wikipedia.org/wiki/Untranslatability" target="_blank"&gt;lacuna&lt;/a&gt;"--a translation problem caused by semantic gaps in a target language. Lacunas occur in programming languages. You might know a few; maybe you wish C++ had python-style generators--or that Java had Haskell's notion of pure functions--or that C supported PHP-style string interpolation. But what if I told you that semantic misalignment between any pair of programming languages is just minor details? What if I claimed that all programming languages I've used have numerous, pernicious, and expensive semantic gaps? That we don't see these gaps for the same reasons that a stone-age hunter-gatherer fails to notice his inability to discuss patterns of cell phone usage? Would you think I'm crazy? &lt;!--more--&gt;
&lt;h3&gt;Symptoms&lt;/h3&gt;
Well, how many of the following scenarios sound familiar? (If this list gets too long, just read a few--but I wanted to show you how pervasive the problem is...)
&lt;ul&gt;
	&lt;li&gt;You've just written the definitive implementation of CIDR parsing (or printer detection, or timezone handling, or whatever), and you worry about somebody else &lt;a title="Why Weakened Dev Teams Suffer From NIH Syndrome" href="http://codecraft.co/2008/07/30/weakened-dev-teams-nih/"&gt;re-inventing the wheel&lt;/a&gt;. (Imagine if you could assert that no functions having the same semantics and intent as yours get introduced in the future, without triggering a warning message and a judicious human override...)&lt;/li&gt;
	&lt;li&gt;You shipped prototype code (or a stub, or an ugly kludge) that was okay once upon a time, but should never have seen the light of day. (Imagine if you could tell a compiler that certain code is iffy, and run a test before release to guarantee that none of that existed in shipping code paths...)&lt;/li&gt;
	&lt;li&gt;You maintain design docs on a wiki, a network share, a CMS, or similar--and the relationship between these artifacts and the source code that embodies/implements them is stored nowhere except the heads of the dev team and maybe an occasional comment. As a result, coders refer to them only occasionally; they decay over time and may not have high ROI. (Imagine if your IDE could knit together all these sources, because your programming language could directly express the idea of attachments and hyperlinks... Imagine if you could implement a business rule such as "all dialogs in the UI must be linked to a usability eval plan" -- and have tests fail where such relationships don't exist...)&lt;/li&gt;
	&lt;li&gt;For security purposes, you need to know which public functions are callable by external entities, which contextual constraints would make them safe, and which parts of your code execute with which elevated privileges. You spend hours building a spreadsheet, but it's out-of-date almost immediately. (Imagine that security semantics were directly declarable in code in such a way that the compiler and other tools could inspect them, warn about them, and report them on demand...)&lt;/li&gt;
	&lt;li&gt;You have methods that are only callable at certain phases in the lifecycle of an object. Your only mechanism for enforcing conformity is documentation, plus throwing exceptions/SIGABRT if they're ignored. (Imagine if temporal semantics were declarable and enforceable...)&lt;/li&gt;
	&lt;li&gt;You write code that validates parameters at the top of a function, and then you regurgitate those same semantics in redundant javadoc-style comments, so human consumers of the function learn about the constraints without needing to see the impl. (Imagine if preconditions were treated as an essential characteristic of a function's interface, making them as visible as parameter names. No doc necessary...)&lt;/li&gt;
	&lt;li&gt;You waste time writing boilerplate code that does nothing more than assign args to member variables in constructors: &lt;code&gt;this.size = size; this.color = color&lt;/code&gt;. (Imagine if you could simply note a "copy args" intention and have the compiler generate the rest--automatically updating the assignments as code evolves...)&lt;/li&gt;
	&lt;li&gt;You write &lt;a title="// Comments on Comments" href="http://codecraft.co/2012/10/31/comments-on-comments/"&gt;comments&lt;/a&gt; that look like this:
&lt;pre style="margin:1em;padding:1em;color:green;"&gt;// IF YOU EVER MODIFY THIS ARRAY, MAKE SURE YOU ALSO
// MODIFY THE HANDLING ROUTINES IN xyz AND abc !!!&lt;/pre&gt;
(Imagine if semantic coupling were directly expressible to a compiler...)&lt;/li&gt;
	&lt;li&gt;You write code that forwards parameters (static factory method takes args A, B, and C, then calls constructor with args A, B, and C). The names and constraints on parameters are identical in both contexts, but you have to repeat precondition code and javadoc for them as many times as they occur. (Imagine if you could simply note a correspondence and have the compiler forward and document semantics for you automatically...)&lt;/li&gt;
	&lt;li&gt;You'd like to &lt;a title="How to turn coding standards into epic fails — or not" href="http://codecraft.co/2012/09/27/coding-standards/"&gt;enforce coding standards&lt;/a&gt;--formatting and naming conventions, maybe, but also trickier stuff, like "we strictly obey the &lt;a href="http://en.wikipedia.org/wiki/Liskov_substitution_principle" target="_blank"&gt;Liskov Substitution Principle&lt;/a&gt;." (Imagine if any given file or folder could hyperlink to formally defined conventions, and then the compiler would enforce them...)&lt;/li&gt;
	&lt;li&gt;You receive an edict from on high that, on all shipping projects, you can't use any code with a GPL license--or you are asked to evaluate the IP of an M&amp;amp;A candidate for all open source usage--or you want to know what attribution you should put in your product's about box. You need to know which components and libraries have which licenses. You grep the code and hope your report is comprehensive and accurate, but you aren't totally confident. (Imagine if the license for a piece of code could be directly expressed in the syntax of your programming language... Imagine if you could tell a compiler to refuse to use code with a license you don't like...)&lt;/li&gt;
	&lt;li&gt;You'd like to identify code paths that are invoked by admins, and diff those against code paths that are invoked by less privileged users. Or you'd like to find code paths used by customer X. Or you'd like to guarantee that the latest round of testing exercises every function that's been changed in the past 3 weeks. (Imagine if people, use cases, security profiles, and other "business concerns" could be associated with places in code... Imagine if, at compile time, you could generate unions and intersections of call trees based on arbitrary criteria that your team dreamed up...)&lt;/li&gt;
	&lt;li&gt;You endlessly fiddle with "signed/unsigned comparison" warnings, even though the two numbers you're comparing invariably have ranges that are small and positive. (Imagine if the range of the operands in a comparison, rather than just their types, were known to compilers...)&lt;/li&gt;
	&lt;li&gt;You want a particular class to be threadsafe, and you go to considerable trouble to make it so, but you worry that later maintainers won't understand key subtleties. (Imagine if you could assert thread safety, and the compiler would enforce it forever...)&lt;/li&gt;
	&lt;li&gt;For performance or scale reasons, you need to guarantee that a particular function, throughout its maintenance lifetime, never triggers file I/O, never uses the network, always runs faster than a reference impl, performs as &lt;em&gt;&lt;strong&gt;O(n)&lt;/strong&gt;&lt;/em&gt; with respect to a given parameter, etc. (Imagine that all standard library calls "knew" their resource usage characteristics. Imagine that a compiler could validate rich assertions about the call tree of any compilation target...)&lt;/li&gt;
	&lt;li&gt;You want to make a variable "read-only" or "final" -- but partway through a function, rather than at declaration time. (Imagine if semantics could be attached anywhere, not just in declarations...)&lt;/li&gt;
&lt;/ul&gt;
I could go on. All day long, every day, developers around the world wrestle to codify constructs that really don't map well onto the semantic space that their chosen language provides. Their language may be Turing-complete, but that doesn't mean it's semantically rich. The problem, I think, is caused by our industry &lt;a title="Why People Are Part of A Software Architecture" href="http://codecraft.co/2008/06/25/why-people-are-part-of-a-software-architecture/"&gt;undervaluing the human dimension&lt;/a&gt; of software development. We are taught to analyze and create context-free grammars. That's a hard task, and perhaps we can be forgiven for thinking that once we get there, with a fast and robust compiler, a nice runtime, documentation, and other tools, we've mostly achieved the mandate of a programming language. &lt;a title="When good comments mean bad language" href="http://codecraft.co/2013/08/22/when-good-comments-mean-bad-language/"&gt;Everything else goes in the comments&lt;/a&gt;. But programming languages have a dual audience (humans as well as compilers)--and the thinking, messy half of it gets neglected. We have a &lt;em&gt;lacuna humana&lt;/em&gt;.
&lt;h3&gt;Workarounds Don't Cut It&lt;/h3&gt;
Perhaps you're saying to yourself: "Language X has a way to solve problem Y." At the micro level, I don't necessarily disagree. I have written unit tests that (sort of) proved thread-safety in a codebase. I've created scripts that proved copyright/license compliance. I have found clever ways to enforce one or two high-value coding standards. I know about Ada's numeric range types. I've decorated python code in such a way that prototype code was discoverable, so we wouldn't ship it. I've used &lt;code&gt;@Override&lt;/code&gt; in java. The &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;constexpr&lt;/code&gt; keywords in C++ tell you &lt;a title="How Sutter’s Wrong About const in C++ 11" href="http://codecraft.co/2013/01/02/how-sutters-wrong-about-const-in-cpp-11/"&gt;something about thread safety&lt;/a&gt;. But collectively, I claim that today's programming languages do a poor job addressing any needs that are not tied pretty directly to deciding what machine code gets put in a binary--even though the discipline of software development &lt;a title="Good Code Is Balanced" href="http://codecraft.co/2012/08/27/good-code-is-balanced/"&gt;subsumes many other concerns&lt;/a&gt;. If you're hoping to &lt;a title="Users Aren’t The Only People In Your Software" href="http://codecraft.co/2012/09/04/users-arent-the-only-people-in-your-software/"&gt;solve human problems&lt;/a&gt;, your coding tools are crippled by the narrow scope of the language they support. How much wasted time is attributable to issues like what I've listed?
&lt;h3&gt;Passing the Buck Doesn't Cut It&lt;/h3&gt;
Perhaps you're saying to yourself: "Use the right tool for the right job. A programming language shouldn't have the fuzzy jobs in the examples above." Really? Almost every piece of code on the planet ends up having some kind of copyright/license associated with it. The license can be described in text, and it directly impacts how the software is produced and consumed--but the language of the software should only concern itself with classes and functions, and ignore this issue? A language shouldn't be indicted for creating useless redundancy that undermines &lt;a title="Good fences make good neighbors" href="http://codecraft.co/2013/05/15/good-fences-make-good-neighbors/"&gt;encapsulation&lt;/a&gt; and the accuracy of docs? A language is well designed, even if it generates tons of useless warnings, displayed redundantly, for all time, to all coders who work on a codebase? I'm not claiming that tech writers should create content in the same programming language as developers, or that graphic artists should start coding instead of photoshopping their icons. We don't need to compile gantt charts. I'm just saying that even within the domain of problems that software engineers usually own, our languages are too semantically barren to solve lots of real-world problems. This costs us real time and money.
&lt;h3&gt;Plugging the Gaps&lt;/h3&gt;
It doesn't have to be this way. If you're following my blog, you know that I've been designing a new programming language. One of its most important innovations offers a quantum leap in semantic density, without lots of noise or bother. I'll be explaining this feature, "marks," in a series of &lt;a href="http://codecraft.co/2014/07/21/bridging-the-lacuna-humana/"&gt;follow-on posts&lt;/a&gt;. I hope you'll subscribe or check back to see where I'm headed.</ns2:encoded>
  <ns0:post_id>5633</ns0:post_id>
  <ns0:post_date>2014-07-16 13:58:30</ns0:post_date>
  <ns0:post_name>lacunas-everywhere</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="category" nicename="better-programming-language">better programming language</category>
  <category domain="post_tag" nicename="code-reuse">code reuse</category>
  <category domain="post_tag" nicename="coding-standards">coding standards</category>
  <category domain="post_tag" nicename="comments">comments</category>
  <category domain="post_tag" nicename="compiler">compiler</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="documentation">documentation</category>
  <category domain="post_tag" nicename="encapsulation">encapsulation</category>
  <category domain="post_tag" nicename="gpl">GPL</category>
  <category domain="post_tag" nicename="intent">intent</category>
  <category domain="post_tag" nicename="javadoc">javadoc</category>
  <category domain="post_tag" nicename="licenses">licenses</category>
  <category domain="post_tag" nicename="redundancy">redundancy</category>
  <category domain="post_tag" nicename="security">security</category>
  <category domain="post_tag" nicename="semantics">semantics</category>
  <category domain="post_tag" nicename="thread-safety">thread safety</category>
  <category domain="post_tag" nicename="usability">usability</category>
  <category domain="post_tag" nicename="ux">ux</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/10152526484040912</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>http://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5895265052440678400&amp;type=U&amp;a=TJvG</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_job_id</ns0:meta_key>
    <ns0:meta_value>11696973495</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>7223</ns0:comment_id>
    <ns0:comment_author>Mountains, Molehills, and Markedness | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/28/mountains-molehills-and-markedness/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-28 08:44:36</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] my previous three posts, I explained why the semantics of programming languages are not as rich as they could be. I pointed out some symptoms of that deficit, and then made recommendations about bridging the gap. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>10856</ns0:comment_id>
    <ns0:comment_author>Taming Side Agreements | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/10/28/taming-side-agreements/</ns0:comment_author_url>
    <ns0:comment_date>2014-10-28 08:35:58</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] although I think docs and comments are often a band-aid. The proxy technique that I recommended, to codify human concerns in a codebase, is another way of adding sunshine. The &amp;#8220;marks&amp;#8221; feature that I&amp;#8217;m [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>9442</ns0:comment_id>
    <ns0:comment_author>How to point in code | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/09/25/how-to-point-in-code/</ns0:comment_author_url>
    <ns0:comment_date>2014-09-25 08:39:07</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] and triangulation still aren&amp;#8217;t enough. I&amp;#8217;ve alluded on previous posts to the idea that code should be able to describe constructs that are not coded today: use cases, personas, business requirements, [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14327</ns0:comment_id>
    <ns0:comment_author>&amp;#8220;Rockstar Developers&amp;#8221; are a dangerous myth | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/03/04/rockstars/</ns0:comment_author_url>
    <ns0:comment_date>2015-03-05 20:15:39</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] can there be a version 2.0 if there&amp;#8217;s nobody who understands the groundbreaking ideas in 1.0? A big part of creating lasting value is communicating so others can appreciate and build [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>9261</ns0:comment_id>
    <ns0:comment_author>Exploring the Power of Deixis | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/09/23/exploring-the-power-of-deixis/</ns0:comment_author_url>
    <ns0:comment_date>2014-09-23 08:34:43</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] happy&amp;#8211;if a persona isn&amp;#8217;t even a valid topic for your source code? (This is the whole lacuna humana topic that I recently [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>6662</ns0:comment_id>
    <ns0:comment_author>David H</ns0:comment_author>
    <ns0:comment_author_email>david@handysoftware.com</ns0:comment_author_email>
    <ns0:comment_date>2014-07-17 07:29:40</ns0:comment_date>
    <ns0:comment_content>Hi Daniel -
You've definitely got me curious!
Can you give us your reasoning why a whole new language vs. extending an existing language to solve your use cases? Becaues the problems you cite sound more like a wish list for additional features to a language, not complaints about features you want removed from any given language.
Also, what you've written so far reminds me of Donald Knuth and his "literate programming", which was intended to address your concerns about the human aspect of programming. If I understand correctly, in Knuth's system you write a document whose primary language is English (or Spanish or whatever your human language is) and the compiler extracts embedded code out of it and creates the program. That way the code and documentation are never far apart. Comments on that?
David H</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1405603782</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>6663</ns0:comment_id>
    <ns0:comment_author>AFK &amp;amp; Reading Material | UpEndian</ns0:comment_author>
    <ns0:comment_author_url>http://upendian.com/afk-reading-material/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-17 07:58:31</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] In the mean time, Daniel Hardman over at Codecraft has given the software devs among us some interesting thoughts to chew on: Lacunas Everywhere [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>6664</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2014-07-17 08:41:10</ns0:comment_date>
    <ns0:comment_content>David: the problem I'm highlighting doesn't require a new programming language; it could easily be solved by extending existing ones. In fact, I even toyed with the idea of writing up a proposal for C++17... However, "extending" doesn't just mean adding a library or package into the core runtime; it would require a change in assumptions about what we believe is valid content for code. For that reason, I suspect that existing languages won't glom onto it.

In my next couple posts, I'll describe the solution. I've been slow to post, lately, but I'll try to write them quickly so you're not left hanging for too long. :-) I'm not trying to be mysterious; I'm just having a dickens of a time pulling half a dozen mental threads into a coherent tapestry.

Your connection with Knuth is an interesting one. I've heard of literate programming, and I've read some stuff by him before, but I am not very familiar with the specific idea you describe, so now I've got a new homework assignment.</ns0:comment_content>
    <ns0:comment_parent>6662</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>25418968590</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1405608070</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>7536</ns0:comment_id>
    <ns0:comment_author>In Which Warnings Evolve Wings | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/08/06/in-which-warnings-evolve-wings/</ns0:comment_author_url>
    <ns0:comment_date>2014-08-06 08:46:10</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] evidence that the compiler needs to know more about your intent. (Does this sound like the &amp;#8220;lacuna humana&amp;#8221; that I have been harping on [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>6834</ns0:comment_id>
    <ns0:comment_author>Thoughts On Bridging the &amp;#8220;Lacuna Humana&amp;#8221; | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/21/bridging-the-lacuna-humana/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-21 08:49:07</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] my previous post, I discussed the semantic gaps that afflict current programming languages. These gaps are caused by [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>7040</ns0:comment_id>
    <ns0:comment_author>Introducing Marks | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/24/introducing-marks/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-24 08:49:20</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] my previous two posts (here and here), I described how and why programming languages can&amp;#8217;t talk about many issues that [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Thoughts On Bridging the "Lacuna Humana"</title>
  <link>http://codecraft.co/2014/07/21/bridging-the-lacuna-humana/</link>
  <pubDate>Mon, 21 Jul 2014 14:49:00 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5655</guid>
  <ns2:encoded>In my &lt;a title="Lacunas Everywhere" href="http://codecraft.co/2014/07/16/lacunas-everywhere/"&gt;previous post&lt;/a&gt;, I discussed the semantic gaps that afflict current programming languages. These gaps are caused by tools focusing on syntax and parsing, and mostly neglecting human factors.&lt;sup&gt;[&lt;a href="#1"&gt;1&lt;/a&gt;]&lt;/sup&gt; I'm not just talking about the fact that languages are clumsy for us to use (more about this later); I'm saying that they ignore our need to talk about important realities of software development: security, coding habits, testability, maintenance plans, dependency management, requirements, intellectual property, and much more.

All this stuff falls within our scope of concern, but none of it is describable in our languages. That's weird. Imagine we hired a general contractor to build our house, and he was great at swinging hammers and leveling studs. But as soon as we asked him questions about building permits or hiring subs or choosing the right kind of concrete for the foundation, he acted like he didn't have a clue what we were talking about. We'd be likely to end up with lots of false starts, poorly met requirements, endless kludges, tons of frustration, a heavy QA burden. Hmm... That sounds familiar.

I call this lack of semantic continuity the &lt;em&gt;lacuna humana&lt;/em&gt; -- the human gap.

The good news is, gaps can often be bridged.

[caption id="" align="aligncenter" width="640"]&lt;img src="https://farm4.staticflickr.com/3462/3892862441_b574a8f9e7_z.jpg" alt="" width="640" height="428" /&gt; image credit: &lt;a href="https://www.flickr.com/photos/vestman/3892862441/sizes/z/" target="_blank"&gt;vestman&lt;/a&gt; (Flickr)[/caption]

I promised I would describe a bridge that has a lot of virtues, and I'm going to begin that work here. It might take us a couple posts to get all the way across, though. Thanks for hanging with me...

&lt;!--more--&gt;
&lt;h3&gt;How We Transmit Meaning With Normal Language&lt;/h3&gt;
Before I lay out my solution, let's think about possibilities.

Human languages have a rich toolkit to draw from. Meaning is conveyed through words and sentences, of course--but also, through intonation, register, gesture, pronunciation, cultural allusion, and a host of other techniques. Importantly, all of these mechanisms depend in one way or another on shared context. If I say "What is your favorite color?" with just the right intonation and just the right British accent, and you're a Monty Python fan, I suspect I can get a laugh out of you, due to many of these extra channels of meaning. If you point out misbehavior, and I say, "I'm shocked! Shocked!"--and you've seen &lt;em&gt;Casablanca&lt;/em&gt;--you'll grin cynically, for similar reasons.

http://www.youtube.com/watch?v=HMIyDf3gBoY

In this post, I'm making heavy use of metaphor (lacuna, bridge, toolkit). If you speak a latin-based language, you might have picked up on the common origin of "lacuna" and English "lagoon", and appreciated the way these metaphors relate to the picture above. You might even have snorted at the whiff of double entendre in my Monty Python allusion, since the scene is all about a "bridge of death."

Meaning is a layered, complex, fascinating phenomenon...
&lt;h3&gt;How We Transmit Meaning Through Code&lt;/h3&gt;
The core content-carrying mechanisms in programming languages are obvious: sequences of declarations, assignments, and conditionals; functions; classes; and so forth. Those help us build words and sentences out of &lt;a title="nouns and verbs in programming languages" href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html" target="_blank"&gt;nouns and verbs&lt;/a&gt;. But what are the analogs to the rest of the toolkit? And could any of them help us build a bridge?

&lt;strong&gt;Keywords&lt;/strong&gt; are one possibility. The &lt;code&gt;const&lt;/code&gt; keyword in C++ carries important semantics, and in doing so it extends the semantic inventory that C originally provided. D's &lt;code&gt;immutable&lt;/code&gt; and java's &lt;code&gt;final&lt;/code&gt; and &lt;code&gt;abstract&lt;/code&gt; play similar semantic-expanding roles. Several languages support &lt;code&gt;static&lt;/code&gt;. Could we just add lots of new keywords? Walter Bright (creator of D) &lt;a href="http://www.drdobbs.com/architecture-and-design/so-you-want-to-write-your-own-language/240165488?pgno=1" target="_blank"&gt;pointed out&lt;/a&gt; that we have no shortage of words we could formalize...

I appreciate the power of keywords, but unfortunately, I think this approach has limited value. The problem is that the set of possible semantics we want to talk about is very large, and impossible to predict &lt;em&gt;in toto&lt;/em&gt; at the time a standard is written. Partly, this is due to semantic innovation in the community. If you move in usability circles, you've certainly encountered the notion of Human-Centered Design (HCD)--but maybe not the new-fangled idea of &lt;a title="Role-Play Centered Design" href="http://codecraft.co/2012/06/20/role-play-centered-design/" target="_blank"&gt;Role-Play Centered Design&lt;/a&gt; (RPCD). First we had Test-Driven Development (TDD); then we got &lt;a title="BDD" href="http://dannorth.net/introducing-bdd/" target="_blank"&gt;Behavior-Driven Development&lt;/a&gt; (BDD). The other day I ran across &lt;a href="https://code.google.com/p/robotframework/wiki/ATDDWithRobotFrameworkArticle" target="_blank"&gt;ATDD&lt;/a&gt;, and who knows what *DD we'll come up with next year.

More importantly, some of the meanings we need to talk about are unique to a particular team. My current employer categorizes the entire Internet into roughly 100 different content buckets--sites might be identified as Sports, Gambling, Porn, Malware Sources, etc. These categories are somewhat fluid; Pay To Surf used to be a meaningful category, but has long since faded from the radar. When a committee meets and determines that adjustments to the category inventory are warranted, software needs to react. Tests need to be recoded, and their input data files adjusted; weighting algorithms in Bayesian filters require tweaking. And these changes need to be delicately calibrated against milestones in our release cycle.

Our team needs to talk about these organizational realities in the code that embodies our major work product. We can't depend on standards committees to anticipate all our conversation topics and pre-load programming languages with keywords to help us.

&lt;strong&gt;Compiler Extensions&lt;/strong&gt; are another useful way to imbue code with extra meaning. The industry has a long history of using this technique as a pressure-release valve for standards that have lagged behind the needs of the community. MSVC has lots of compiler-specific extensions. Or maybe you're familiar with GCC's &lt;a href="http://unixwiz.net/techtips/gnu-c-attributes.html" target="_blank"&gt;&lt;code&gt;__attribute__((format(printf,m,n)))&lt;/code&gt;&lt;/a&gt; or &lt;a href="http://pimiddy.wordpress.com/2012/04/20/pure-functions-in-cc/" target="_blank"&gt;&lt;code&gt;__attribute__((pure))&lt;/code&gt;&lt;/a&gt;. Have a look at &lt;a href="http://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html" target="_blank"&gt;this page from gcc docs&lt;/a&gt; to get a flavor for all the other cool things you can do.

Extensions have their place, but I see them as filling a few targeted gaps, rather than the whole gulf of the &lt;em&gt;lacuna humana&lt;/em&gt;. Like keywords, you just can't get enough of them to enable all (or even a significant subset) of the possible conversations coders need to have with their teammates. And since these extensions are inherently non-standard, you have a portability headache. What happens when you upgrade your compiler, or when you're handcuffed to an old version by some frustrating platform dependency?

Besides, compiler extensions have very narrow, pre-defined applicability. You can decorate a structure with packing and alignment notations using a compiler extension, but can you decorate a conditional block with notations about which is the expected branch? Each new site for extension attachment requires additional compiler work.

&lt;strong&gt;Compiler Plugins&lt;/strong&gt; are a variant on the extension idea. &lt;a title="clang plugins" href="http://clang.llvm.org/docs/ClangPlugins.html" target="_blank"&gt;Clang&lt;/a&gt; and &lt;a title="gcc plugins" href="https://gcc.gnu.org/onlinedocs/gccint/Plugins.html" target="_blank"&gt;GCC&lt;/a&gt; both support rich plugin models; the option to write your own frees you from many constraints that extensions impose. You see the entire abstract syntax tree (AST) at several different points in the compilation process, and you can modify it or validate it to your heart's content.

It seems to me that this mechanism is much closer to what we want, but it still has important problems. For one, the bar for writing such plugins is very high. You have a steep learning curve, and you may need to repeat it each time the compiler evolves. The ASTs that you examine are not the same from one compiler to another, because the language spec says nothing about what AST must be used to represent higher-level constructs--or about the interface that ASTs must provide.

Another problem with plugins is that you have to write them in the language your compiler was written in, not the language the compiler is processing. If you're a C/C++ coder, this may not sound like a big deal--but it may be tougher if you just want to live in python or ruby or C#.

Perhaps you're looking at my list of tools and wondering why I haven't mentioned&lt;strong&gt; enhanced runtimes and additional libraries&lt;/strong&gt;. They might seem like an obvious answer. Java doesn't natively support Erlang-style actors, but if you use &lt;a href="http://akka.io/" target="_blank"&gt;Akka&lt;/a&gt;, you get a rich, full-featured implementation of them. If your language is even halfway worth its salt, can't you just extend its capabilities this way in unbounded fashion? Don't people do that every day, with great success?

It's important to understand that the semantic gap I'm complaining about is not particularly focused on what happens at runtime; nor is it a problem with what languages can make computers do. This is a gap in what languages can help &lt;em&gt;human beings&lt;/em&gt; do. &lt;em&gt;&lt;a title="Why Mental Models Matter" href="http://codecraft.co/2012/11/05/why-mental-models-matter/"&gt;Human knowledge&lt;/a&gt; and behaviors are &lt;a title="Users Aren’t The Only People In Your Software" href="http://codecraft.co/2012/09/04/users-arent-the-only-people-in-your-software/"&gt;crucial outputs of dev teams&lt;/a&gt;.&lt;/em&gt; And cool add-on libraries, or even the most powerful runtimes in the world, do not change that dynamic all that much. Just because you start using Akka for distributed, coordinated behaviors in your code doesn't mean that your dev team gets better coordinated. You might still struggle to track requirements or get correct test coverage.

Another possibility is &lt;strong&gt;comments&lt;/strong&gt;. This has been the &lt;a title="When good comments mean bad language" href="http://codecraft.co/2013/08/22/when-good-comments-mean-bad-language/"&gt;answer of choice&lt;/a&gt;, for years. You can say anything you want in comments. (Hmm. Notice the semantic power in that, and how it's tied to &lt;em&gt;human&lt;/em&gt; language...) If a coder is never supposed to tweak strings in a .properties file, after the "UI Freeze" milestone, without consulting the localization team, you can spell that out in capital letters at the top of the file.

But comments are pretty darn weak. They may be inaccurate even when they're first written, and they tend to become more so over time, to the point where they actually &lt;a title="// Comments on Comments" href="http://codecraft.co/2012/10/31/comments-on-comments/"&gt;create unnecessary confusion&lt;/a&gt;. They are not mandatory (except by &lt;a title="How to turn coding standards into epic fails — or not" href="http://codecraft.co/2012/09/27/coding-standards/" target="_blank"&gt;human fiat, which is usually ignored&lt;/a&gt;), and everybody's judgment about where they're valuable seems to vary. Some coders are excellent comment-writers; others are lousy. Only coders are influenced by comments; testers and tech writers and product managers and others in the orbit of a dev team never see them. In fact, comments often become a &lt;a title="When good comments mean bad language" href="http://codecraft.co/2013/08/22/when-good-comments-mean-bad-language/"&gt;crutch&lt;/a&gt; to compensate for bad behaviors.

You might also be a fan of &lt;strong&gt;javadoc- or doxygen-style documentation&lt;/strong&gt;. Or you may think that &lt;strong&gt;RDF and the semantic web&lt;/strong&gt; are the ultimate answer for decorating a corpus with rich knowledge, using unbounded human language.

I claim that these approaches have most of the same advantages and disadvantages of commenting in general. They have their place. However, they are no panacea. You are expressing semantics in a parallel channel, and this often means you must pay the price for considerable time-wasting redundancy. Coders don't want to write docs, or they would have become tech writers. I have never seen these sources of information be popular with the teams that produce functionality, or the teams that consume them. They're simply too incomplete, too stale, and too reliant on unenforced and non-existent cooperation between humans that don't understand one another's jobs very well. Visual Studio and java IDEs have done a nice job of integrating them into the editing experience, but most other environments don't even use or validate the doc comments that you painstakingly create.

Of all the possibilities, the one I like the best is &lt;strong&gt;decorators&lt;/strong&gt; (python's term), &lt;strong&gt;annotations&lt;/strong&gt; (java), or &lt;strong&gt;attributes&lt;/strong&gt; (.NET). If you look at my beefs with other techniques, you can see where these little guys show promise. You write them in the same language you're using. You can invent new ones any time you like, and the learning curve is low. The set of topics you can address with decorators is unbounded, and demands no reaction from the language or its compiler.

I predict that languages will make more use of decorators as they evolve, because of these virtues. Trace their growing importance in python, and you'll see what I mean.

However, decorators aren't perfect. For one thing, compilers are not on the hook, in any language I know, to react to the presence of decorators in any special way. There are a few hard-coded exceptions--&lt;code&gt;@Override&lt;/code&gt; in java, &lt;code&gt;@staticmethod&lt;/code&gt; and &lt;code&gt;@property&lt;/code&gt; in python, for example. Pyunit makes great use of them with nose. But generally, you can't write a new decorator and change the behavior of the compiler at compile-time, the way you can with an extension. Decorators don't have access to the AST. You mainly access them at run-time, through reflection. They are nouns that you mainly attach to other nouns, and as the name implies, today they're mostly tinsel and brick-brack; they don't &lt;em&gt;mean&lt;/em&gt; anything that has serious consequences.
&lt;h3&gt;A Better Way&lt;/h3&gt;
The word count is getting away from me; I don't have time in this post to lay out my full solution. Shoot! Still, I think the tool inventory has been helpful, and some of what I will say in the next post will now make a lot more sense.

I &lt;em&gt;have&lt;/em&gt; dropped a couple hints in this post about where I'm headed, though. Did you notice where I referred to nouns and verbs? Nouns are variables and objects and data types and decorators; verbs are functions and methods and (sometimes) keywords.

Have you ever wondered where the adjectives and adverbs are?

In my &lt;a href="http://codecraft.co/2014/07/24/introducing-marks/"&gt;next post&lt;/a&gt;, I'll describe my bridge more concretely. Even before I do, though, the discussion above should help you predict some of the shortcomings it must address. Do I have your creative juices flowing?

My solution is terse, natural, and easy to learn and use. It helps coders get more done by thinking naturally, instead of demanding an awkward new set of expensive habits. And it's eminently implement-able. However, it requires us to stop thinking of compilation as the process of translating syntax to machine code, and start thinking of it as the translation of all &lt;em&gt;intentions&lt;/em&gt;--computational and human. I'm not sure any existing language is willing to buy into that assumption, which is why I'm still creating my own. Hopefully the language name I've chosen, &lt;em&gt;intent&lt;/em&gt;, now resonates a bit...

&lt;hr style="margin-top:4em;width:60%;" /&gt;
&lt;p style="font-size:90%;margin-left:2em;"&gt;&lt;a name="1"&gt;&lt;/a&gt;&lt;sup&gt;[1]&lt;/sup&gt; Interestingly enough, this same over-emphasis on parseable structure has afflicted the discipline of linguistics for decades. Back in the 60s, at the same time that compilers were getting traction in computer science, linguists zeroed in on universal grammar and its cousins as a sort of "grand unified theory" of language. Our brains were wired for certain linguistic structures, they said--and each human language just activated or turned off certain nodes in the shared uber-inventory, the same way programming languages could vary as long as they were Turing-complete. Machine translation was just around the corner, as soon as we codified the overall conceptual ontology and invented a formal algebra to express transformations of structure. It was a nice theory, but (IMO) fatally flawed... by the same "lacuna humana" fallacy. Humans are agents, possessing free will and the capacity to create meaning in novel ways. We bend language to whatever uses suit us. Yes, there are deep harmonies in the structures that we select to express our ideas, across all known languages--but semantics is more than structure. If this sort of thing interests you, consider reading &lt;em&gt;Women, Fire, and Dangerous Things&lt;/em&gt; (Lakoff), &lt;em&gt;The Possibility of Language&lt;/em&gt; (Melby), or &lt;em&gt;LANGUAGE in Capital Letters&lt;/em&gt; (Lytle).&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>5655</ns0:post_id>
  <ns0:post_date>2014-07-21 08:49:00</ns0:post_date>
  <ns0:post_name>bridging-the-lacuna-humana</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="allusion">allusion</category>
  <category domain="post_tag" nicename="bdd">BDD</category>
  <category domain="category" nicename="better-programming-language">better programming language</category>
  <category domain="post_tag" nicename="bridge">bridge</category>
  <category domain="post_tag" nicename="casablanca">Casablanca</category>
  <category domain="post_tag" nicename="compiler-extensions">compiler extensions</category>
  <category domain="post_tag" nicename="decorators">decorators</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="hcd">HCD</category>
  <category domain="post_tag" nicename="keywords">keywords</category>
  <category domain="post_tag" nicename="meaning">meaning</category>
  <category domain="post_tag" nicename="metaphor">metaphor</category>
  <category domain="post_tag" nicename="monty-python">Monty Python</category>
  <category domain="post_tag" nicename="noun">noun</category>
  <category domain="post_tag" nicename="plugins">plugins</category>
  <category domain="post_tag" nicename="rpcd">rpcd</category>
  <category domain="post_tag" nicename="tdd">tdd</category>
  <category domain="post_tag" nicename="ux">ux</category>
  <category domain="post_tag" nicename="verb">verb</category>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_job_id</ns0:meta_key>
    <ns0:meta_value>11696747843</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/10152536305955912</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>http://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5896999102687752192&amp;type=U&amp;a=s0OG</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_oembed_47869644b89b5613d71927495a6be9a0</ns0:meta_key>
    <ns0:meta_value>&lt;div class="embed-youtube"&gt;&lt;iframe title="Casablanca Shocked" width="646" height="363" src="https://www.youtube.com/embed/HMIyDf3gBoY?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_oembed_time_47869644b89b5613d71927495a6be9a0</ns0:meta_key>
    <ns0:meta_value>1725035915</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>7224</ns0:comment_id>
    <ns0:comment_author>Mountains, Molehills, and Markedness | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/28/mountains-molehills-and-markedness/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-28 08:44:39</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] are not as rich as they could be. I pointed out some symptoms of that deficit, and then made recommendations about bridging the gap. Finally I introduced &amp;#8220;marks&amp;#8221;&amp;#8211;a feature of the intent programming language [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>15715</ns0:comment_id>
    <ns0:comment_author>Lacunas Everywhere | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/16/lacunas-everywhere/</ns0:comment_author_url>
    <ns0:comment_date>2015-06-15 10:15:17</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] lots of noise or bother. I&amp;#8217;ll be explaining this feature, &amp;#8220;marks,&amp;#8221; in a series of follow-on posts. I hope you&amp;#8217;ll subscribe or check back to see where I&amp;#8217;m [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14925</ns0:comment_id>
    <ns0:comment_author>A grumble about buckets | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/04/08/a-grumble-about-buckets/</ns0:comment_author_url>
    <ns0:comment_date>2015-04-08 13:39:55</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] thought to the buckets we offer&amp;#8211;and let&amp;#8217;s make sure we have a way of discovering and tracking whether our buckets are [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>7537</ns0:comment_id>
    <ns0:comment_author>In Which Warnings Evolve Wings | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/08/06/in-which-warnings-evolve-wings/</ns0:comment_author_url>
    <ns0:comment_date>2014-08-06 08:46:12</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] know more about your intent. (Does this sound like the &amp;#8220;lacuna humana&amp;#8221; that I have been harping on [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>7041</ns0:comment_id>
    <ns0:comment_author>Introducing Marks | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/24/introducing-marks/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-24 08:49:24</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] my previous two posts (here and here), I described how and why programming languages can&amp;#8217;t talk about many issues that affect [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Introducing Marks</title>
  <link>http://codecraft.co/2014/07/24/introducing-marks/</link>
  <pubDate>Thu, 24 Jul 2014 14:48:22 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5701</guid>
  <ns2:encoded>In my previous two posts (&lt;a title="Lacunas Everywhere" href="http://codecraft.co/2014/07/16/lacunas-everywhere/" target="_blank"&gt;here&lt;/a&gt; and &lt;a title="Thoughts On Bridging the “Lacuna Humana”" href="http://codecraft.co/2014/07/21/bridging-the-lacuna-humana/" target="_blank"&gt;here&lt;/a&gt;), I described how and why programming languages can't talk about many issues that affect programmers--important issues like product requirements, design constraints, intellectual property, and more. I also inventoried the mechanisms that extend the semantics of languages today, and explored why those mechanisms have limited value. If you haven't read those posts, please do; what I say next won't make a lot of sense without that foundation.

In the &lt;code&gt;intent&lt;/code&gt; programming language that I'm creating, the solution to this problem is called "marks" (a name which alludes to &lt;a href="http://en.wikipedia.org/wiki/Markedness" target="_blank"&gt;linguistic markedness&lt;/a&gt;). Marks play a role somewhat analogous to adjectives and adverbs in human language; they are crucial enrichers. They resemble decorators or annotations in other languages, though their power is much, much greater.

Without further ado, let me provide a blueprint for this bridge across the semantic gap that I've been lamenting--the design guidelines for "marks." Then I'm going to show you an example of how easy it could be to use marks, and how much power they give you.

[caption id="" align="aligncenter" width="640"]&lt;img class="" src="https://farm3.staticflickr.com/2095/2402300942_2636483bdc_z.jpg" alt="" width="640" height="433" /&gt; image credit: &lt;a href="https://www.flickr.com/photos/curiousexpeditions/2402300942/sizes/z/" target="_blank"&gt;Curious Expeditions&lt;/a&gt; (Flickr)[/caption]
&lt;h3&gt;Blueprint&lt;/h3&gt;
&lt;ol&gt;
	&lt;li&gt;Code and its compiler(s) must have a &lt;strong&gt;compile-time API&lt;/strong&gt; specified by the language.
&lt;div style="margin:.7em;"&gt;It's not okay if Clang generates one type of AST, GCC a second, and MSVC a third; all compilers that support the language must expose a spec-compatible, programmable API for all language constructs. For example, I need to be able to find out what parameters and local variables are declared in a function, and what their data types and other characteristics are. This is similar to what reflection offers, but reflection doesn't help at all, because I need this before run-time. (Kudos to D, which provides compile-time reflection very similar to what I'm describing...) As I mentioned in my post about &lt;a title="How to make a const-correct codebase in 4300 easy steps" href="http://codecraft.co/2014/03/25/how-to-make-a-const-correct-codebase-in-4300-easy-steps/"&gt;making a codebase const-correct&lt;/a&gt;, the lack of this feature is really a serious design flaw. Why should code, of &lt;em&gt;all&lt;/em&gt; things programmers deal with, be impossible to code against?&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!--more--&gt;
&lt;ol start="2"&gt;
	&lt;li&gt;Any object in code must support &lt;strong&gt;decoration&lt;/strong&gt; (semantic marks).
&lt;div style="margin:.7em;"&gt;Existing decorator/annotation/attribute mechanisms are fairly broad already. However, I haven't seen any solutions that let me decorate arbitrary blocks of code, individual assignments, conditionals... Plus:&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;The &lt;strong&gt;scope of code&lt;/strong&gt; must be expanded to include constructs above the level of a compilation unit.
&lt;div style="margin:.7em;"&gt;Today, programmers usually write code for classes, packages, and modules, but all structures "above" that level (applications, libraries, assemblies, product suites) are described in some alternative mechanism (e.g. pom.xml, SConstruct, CMakeLists.txt, Visual Studio solution, Eclipse workspace). Typically these constructs are viewed as optional veneer offered by an IDE--often, they're not even formally defined in the language's spec. This means you can't decorate them (see #2), and they don't have a programmatic API that's unifiable with that of code at compile-time (see #1).&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;Code must have a &lt;strong&gt;DOM&lt;/strong&gt;.
&lt;div style="margin:.7em;"&gt;This is really a corollary to items 1 through 3; any element of code must be reachable through the code's interface, which implies something DOM-like. It may be unnecessary to hold the entirety of a DOM in memory, though; perhaps a SAX-style interface would suffice. Interestingly, this requirement also makes code into true hypertext, which has other ramifications that I'm planning to blog about later.&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Call graphs&lt;/strong&gt; and other producer/consumer relationships must be part of the code interface.
&lt;div style="margin:.7em;"&gt;The utility of this will become clear in examples.&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;Decorator attachment must be &lt;strong&gt;richer than binary on/off&lt;/strong&gt;.
&lt;div style="margin:.7em;"&gt;This is a flaw in existing decorator mechanisms. If I put &lt;code&gt;@foo&lt;/code&gt; on top of a class in Java, the annotation is present. If I don't put it there, it's not. Binary.&lt;/div&gt;
&lt;div style="margin:.7em;"&gt;Human brains and human languages don't work that way; they're more fuzzy. If I tell you that "Fred was an executive at Enron," you immediately generate theories about Fred. The fact that I imparted that information at all means that I consider it significant in some way--so you imagine reasons why, and associate them weakly/tentatively to Fred in your mind: he may have been fired, he may have been guilty of shady behavior, he may be a whistleblower, etc.&lt;/div&gt;
&lt;div style="margin:.7em;"&gt;At least the following modes of attachment need to be supported: explicitly affirmed (binary "on"), explicitly denied (binary "off"), implicitly affirmed (true unless I get explicit evidence to the contrary), implicitly denied.&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;Semantic marks must support &lt;strong&gt;sophisticated combination and propagation&lt;/strong&gt;.
&lt;div style="margin:.7em;"&gt;For one, marks need to be able to subsume or imply other marks. In the real world, I can tell you that my car is a Lamborghini (in my dreams :-), and in doing so, I've already told that my car is a sports car, that it's expensive, that it's hard to find parts, that it's a favorite target for speed traps... Likewise, if I am writing a class, and I put a "prototype" mark on it, I may want you to also know that the class is "insufficiently tested", or "not shippable". Such logic must be under programmer control.&lt;/div&gt;
&lt;div style="margin:.7em;"&gt;Another aspect of propagation is that marks must cascade across various scopes. If I have a function that is marked as "not thread-safe", then any caller of that function must acquire the same mark. If I have an application that is marked as "free", then all modules used by that application must also be "free" by implication. If I mark a package as "internal use only", then no functions in that package should be used in projects that exports symbols from the package.&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;Marks must be &lt;strong&gt;evaluated&lt;/strong&gt; at compile-time.
&lt;div style="margin:.7em;"&gt;Evaluation means running code that marks "carry". Think of this like static asserts on steroids.&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
Let's take one of the use cases that I've mentioned in previous posts: a programming team has a mandate not to use any GPL'ed code. Here's how simply that rule could be enforced in code, given the "marks" mechanism:
&lt;ul&gt;
	&lt;li&gt;Each component, package, module, or individual function is marked with its license. (Remember, since marks propagate, this is not an onerous task. It requires no more effort than today's informal convention of checking in a file named LICENSE or COPYING at the top of a folder. License marks would propagate through folder hierarchies unless/until overridden in a sub-folder.)&lt;/li&gt;
	&lt;li&gt;All team projects receive a "no GPL in the call tree" mark. For now, imagine that this works more or less as follows:
&lt;pre&gt;@no_gpl
class my_project: project
    // body of project definition
&lt;/pre&gt;
&lt;/li&gt;
	&lt;li&gt;During compilation, the compiler evaluates the validity of marks. If the project includes any GPL'ed code, a "semantic error" (not a "syntax error") is generated, because the project-level mark and the lower-level mark(s) are incompatible.&lt;/li&gt;
&lt;/ul&gt;
Does this sound too good to be true? With a reasonable API to access the AST, writing marks that implement this logic is a piece of cake. Here's python-ish pseudocode for the implementation. (I'm using pseudocode instead of &lt;code&gt;intent&lt;/code&gt; code, because I don't want to bog down this discussion in tons of extraneous details.)

https://gist.github.com/dhh1128/2ca442f3e7f28705ef28

As code is compiled, the compiler executes the &lt;code&gt;can_bind()&lt;/code&gt; method of each mark that's been placed. This causes calculations about semantic compatibility, &lt;em&gt;without the compiler having to understand the semantics itself&lt;/em&gt;.

I'm glossing over lots of details here. (At what point in the compilation process is the AST for a function known, making the API used by the marks useful? Which mark placement is tested first? How are errors reported? How does the compiler know that mark code is callable at compile time instead of just at runtime?) I have preliminary answers, but this post is not the place. For now, just take it on faith that the compile model is workable.

One more example, just for fun. Suppose you want to guarantee that across a large object model, all object instances have IDs which are strings. These strings must consist of a single line of between 20 and 40 printable characters; they cannot be null. Anywhere that member variables are named "id", or parameters are used to set a member variable named "id", you want these semantics enforced by precondition:

https://gist.github.com/dhh1128/1fc2a20ffb370ba39327

In my &lt;a href="http://codecraft.co/2014/07/28/mountains-molehills-and-markedness/"&gt;next post&lt;/a&gt;, I'll explore a bunch of additional examples, and I'll cover more details about how these marks work their magic.</ns2:encoded>
  <ns0:post_id>5701</ns0:post_id>
  <ns0:post_date>2014-07-24 08:48:22</ns0:post_date>
  <ns0:post_name>introducing-marks</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="api">API</category>
  <category domain="post_tag" nicename="ast">AST</category>
  <category domain="category" nicename="better-programming-language">better programming language</category>
  <category domain="post_tag" nicename="call-graphs">call graphs</category>
  <category domain="post_tag" nicename="clang">clang</category>
  <category domain="post_tag" nicename="dom">DOM</category>
  <category domain="post_tag" nicename="gcc">gcc</category>
  <category domain="post_tag" nicename="gpl">GPL</category>
  <category domain="post_tag" nicename="hypertext">hypertext</category>
  <category domain="post_tag" nicename="marks">marks</category>
  <category domain="post_tag" nicename="module">module</category>
  <category domain="post_tag" nicename="msvc">msvc</category>
  <category domain="post_tag" nicename="package">package</category>
  <category domain="post_tag" nicename="propagation">propagation</category>
  <category domain="post_tag" nicename="prototype">prototype</category>
  <category domain="post_tag" nicename="reflection">reflection</category>
  <category domain="post_tag" nicename="sax">SAX</category>
  <category domain="post_tag" nicename="semantics">semantics</category>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_job_id</ns0:meta_key>
    <ns0:meta_value>11697059324</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/10152543042820912</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>http://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5898086248651698176&amp;type=U&amp;a=Kxn9</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>7098</ns0:comment_id>
    <ns0:comment_author>David H</ns0:comment_author>
    <ns0:comment_author_email>david@handysoftware.com</ns0:comment_author_email>
    <ns0:comment_date>2014-07-25 06:42:02</ns0:comment_date>
    <ns0:comment_content>I woke up this morning and thought "wow, writing an external tool that creates an accurate call graph for Javascript would be really hard. How do you figure out where a closure gets used?" Valuable as it is, it would be difficult to retrofit your marks system to other programming languages...</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>25621633100</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1406292122</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>7100</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2014-07-25 06:57:29</ns0:comment_date>
    <ns0:comment_content>I had not seriously considered making marks work across a multilingual tool chain, but it's an intriguing enhancement. This is why I blogged--I needed smart people to point out ways this needed polish. Thank you!

I love the idea of statistics gathering, BTW. It fits very well with another natural use of marks, which is simple tagging. You can imagine stats for individual tags, but also for intersections and unions of tags that are interesting...</ns0:comment_content>
    <ns0:comment_parent>7045</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>25621904151</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1406293049</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>7225</ns0:comment_id>
    <ns0:comment_author>Mountains, Molehills, and Markedness | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/28/mountains-molehills-and-markedness/</ns0:comment_author_url>
    <ns0:comment_date>2014-07-28 08:44:42</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] out some symptoms of that deficit, and then made recommendations about bridging the gap. Finally I introduced &amp;#8220;marks&amp;#8221;&amp;#8211;a feature of the intent programming language I&amp;#8217;m creating&amp;#8211;and gave you a taste [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>7099</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2014-07-25 06:55:11</ns0:comment_date>
    <ns0:comment_content>Actually, tracking down the usage of closures is going to be hard no matter where/how it's done. Even tougher is accounting for the use of function pointers. That's been worrying me for a while.

Because of this, I think some kinds of propagation calculations will need to have caveats attached, if the compiler also detects the existence of phenomena that make calculation imperfect. :-(</ns0:comment_content>
    <ns0:comment_parent>7098</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>25621863846</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1406292912</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>15714</ns0:comment_id>
    <ns0:comment_author>Thoughts On Bridging the &amp;#8220;Lacuna Humana&amp;#8221; | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/07/21/bridging-the-lacuna-humana/</ns0:comment_author_url>
    <ns0:comment_date>2015-06-15 10:07:40</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] my next post, I&amp;#8217;ll describe my bridge more concretely. Even before I do, though, the discussion above [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>13818</ns0:comment_id>
    <ns0:comment_author>Know Your Limits | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/02/05/know-your-limits/</ns0:comment_author_url>
    <ns0:comment_date>2015-02-05 08:47:48</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] I&amp;#8217;m a sadder but wiser programmer now. :-) I need to add marks such as +reasonable upper bound and +reasonable lower bound to the intent programming language [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>9440</ns0:comment_id>
    <ns0:comment_author>How to point in code | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/09/25/how-to-point-in-code/</ns0:comment_author_url>
    <ns0:comment_date>2014-09-25 08:39:02</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] how the semantic marks that I&amp;#8217;ve discussed in previous posts provide a powerful way to qualify and query this sort [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>7538</ns0:comment_id>
    <ns0:comment_author>In Which Warnings Evolve Wings | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/08/06/in-which-warnings-evolve-wings/</ns0:comment_author_url>
    <ns0:comment_date>2014-08-06 08:46:14</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] marks that I&amp;#8217;ve recently described provide a nice, uniform solution to this hodgepodge of [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>8694</ns0:comment_id>
    <ns0:comment_author>trevharmon</ns0:comment_author>
    <ns0:comment_author_email>trevharmon@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2014-09-08 23:33:04</ns0:comment_date>
    <ns0:comment_content>In addition to the other comments already made, I feel like this is also addressing some of the bad behavior we do when we try to embed many of these ideas into the names of our functions or methods. Often, these because unnecessary habits that we carry from language to language. Why are all of my object initialization methods named _init()? At one point, because particular languages wouldn't enforce encapsulation, we were doing things like starting function names with underscores. We all "understood" this to mean, "don't call this function from outside this file". Even if encapsulation was enforced, we still tended to do it just so we could quickly look at the function name and gain some understanding of how it was to be used, not just what it did. I can think of probably another half-dozen such behaviors off the top of my head. However, personalized markup certainly had its problems. For example:

- Did I understand it? Yes... well... probably for the first few years.
- Did my group understand it? Probably.
- Did anyone new understand it? Maybe... but not guaranteed.
- Did the compiler understand it? Nope.

Yeah, that last one's the problem. :-)

I'm looking forward to seeing how this idea further develops.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>44057411</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>944901190</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1410240785</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>7045</ns0:comment_id>
    <ns0:comment_author>David H</ns0:comment_author>
    <ns0:comment_author_email>david@handysoftware.com</ns0:comment_author_email>
    <ns0:comment_date>2014-07-24 11:24:47</ns0:comment_date>
    <ns0:comment_content>Daniel, this is looking very interesting.

Very few projects nowadays are all written in one programming language. In my professional work a single project involves a server written in C++, another one written in Java/Groovy, and a bunch of related code written in Python, all communicating with each other. Yet the example you give of "no GPL code" could apply across such a multi-language project.

Although I can see the value in a language designed around the marks concept, it would sure be useful to have an external toolchain implementing your marks system across multiple programming languages. The tools would know how to parse the langauges, generate graphs, and parse your style of marks.  An appropriate marking syntax would be devised for each programming language. Maybe decorators in Python, maybe specially formatted comments in other languages if necessary. The tool would run as part of building and/or testing. Such a toolchain could report code coverage statics. For example, "85% of the this code (written in C++, Python, and Javascript) is covered by an explicit license." And of course such a tool would work very well on code written in your intent programming language, which I am looking forward to reading more about.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1406222687</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
</item>
<item>
  <title>In Which Warnings Evolve Wings</title>
  <link>http://codecraft.co/2014/08/06/in-which-warnings-evolve-wings/</link>
  <pubDate>Wed, 06 Aug 2014 14:45:56 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5752</guid>
  <ns2:encoded>Ignoring warnings is a bad idea. At some level, we all know this. If we see a sign that says "Warning: Dangerous Undertow" at the beach, we pause (I hope!) and think twice before we get in the water.

[caption id="" align="aligncenter" width="538"]&lt;a href="http://xkcd.com/1247/"&gt;&lt;img class="" src="http://imgs.xkcd.com/comics/the_mother_of_all_suspicious_files.png" alt="" width="538" height="234" /&gt;&lt;/a&gt; Ignore warnings at your peril. :-) Image credit: xkcd.com[/caption]

Yet we sometimes get cavalier about warnings in software. Specifially, I have heard programmers describe compiler warnings as being &lt;em&gt;less severe&lt;/em&gt; than errors--as if worrying about them is optional.

This is simply not true.
&lt;!--more--&gt;

You have probably seen plenty of warnings that highlight serious problems; I know I have. And you've probably wrestled with annoying "errors" that tools should have fixed without bothering you--or suppressed in the first place.

&lt;strong&gt;What's your intent?&lt;/strong&gt;

In general, compiler warnings aren't less severe than errors--they are simply &lt;em&gt;more ambiguous&lt;/em&gt;. The compiler isn't sure whether a signed/unsigned comparison is evidence of logic mistakes, or is perfectly harmless. So it warns you, and lets you decide.

Warnings are evidence that the compiler needs to know more about your &lt;em&gt;intent&lt;/em&gt;. (Does this sound like the "&lt;a title="Lacunas Everywhere" href="http://codecraft.co/2014/07/16/lacunas-everywhere/"&gt;lacuna humana&lt;/a&gt;" that I have been &lt;a title="Thoughts On Bridging the “Lacuna Humana”" href="http://codecraft.co/2014/07/21/bridging-the-lacuna-humana/"&gt;harping&lt;/a&gt; on lately?)

&lt;strong&gt;Messy ways to answer&lt;/strong&gt;

One evidence that ambiguous intent is in play is that our usual method for eliminating warnings is to tweak code until the ambiguity is gone. If you're assigning a 64-bit number to a 32-bit number, and you explicitly cast the right-hand side to a 32-bit value, then there's no longer any question about whether you intend the truncation. The compiler notices your tweak, and the warning disappears.

Some warnings aren't susceptible to this approach. If the compiler warns you that you have unreachable code, you can delete it or &lt;code&gt;#ifdef&lt;/code&gt; it, but there's no way to tell the compiler you intend it that way.&lt;sup&gt;[&lt;a href="#1"&gt;1&lt;/a&gt;]&lt;/sup&gt; If you get a warning about a function being deprecated, you either have to stop calling the function, or live with the nag. If you want to avoid warnings about alignment and packing, you probably have to use &lt;code&gt;#pragma&lt;/code&gt;.

&lt;strong&gt;Marks make it better&lt;/strong&gt;

The &lt;a title="Introducing Marks" href="http://codecraft.co/2014/07/24/introducing-marks/"&gt;marks&lt;/a&gt; that I've &lt;a title="Mountains, Molehills, and Markedness" href="http://codecraft.co/2014/07/28/mountains-molehills-and-markedness/"&gt;recently described&lt;/a&gt; provide a nice, uniform solution to this hodgepodge of warning-answering mechanisms. Since they're evaluated at compile-time, they can play the same role that &lt;code&gt;#pragma&lt;/code&gt; does in some languages. Sophisticated attachment and propagation get you away from all the silly push/pop gyrations. They can attach to any portion of the code DOM--functions, variables, statements, code blocks, classes, packages, applications--and they can express arbitrary semantics, including answers to any question the compiler dreams up. One simple, clean technique across the board.

&lt;strong&gt;But there's more...&lt;/strong&gt;

However, I want to push our vision even further.

Imagine that you could address the compiler's questions (aka warnings) in powerful new ways:
&lt;ul&gt;
	&lt;li&gt;Yes, it's okay that I'm calling deprecated functions--but only on the old OS where I'm currently working, and only until we reach beta.&lt;/li&gt;
	&lt;li&gt;I'm not worried about this exception as long as I have a unit test that proves we handle it in every caller in the call graph.&lt;/li&gt;
	&lt;li&gt;Assume I know what I'm doing and build the binary anyway, because right now my goal is just to figure out what libraries I need on this new platform to make the port work. But don't let me accidentally check in anything that hides warnings from others.&lt;/li&gt;
	&lt;li&gt;Ignore all the reassuring answers (about warnings) that I gave you in the past; if you went back to your paranoid state, what would you ask me about?&lt;/li&gt;
	&lt;li&gt;Automatically expire all my answers about warnings next week, after we deliver a prototype that exhibits stubs for key features.&lt;/li&gt;
	&lt;li&gt;Warn about problem X, and get an answer from every developer who edits this module, individually.&lt;/li&gt;
	&lt;li&gt;I want to warn about constructs that are not traditionally represented in code, such as impractical use cases, insecure features, ill-defined personas, and so forth.&lt;/li&gt;
&lt;/ul&gt;
In order to provide this sort of experience to developers, you don't just need marks. You also need the ability to record answers about warnings &lt;em&gt;outside the code itself&lt;/em&gt;, because different developers might have different answers for different circumstances, and because answers must expire or vary without the code changing.

But as soon as you answer warnings outside the code, you have a stability problem. Code changes; what was line 72 in your module yesterday might be line 93 today. It does no good to remember Fred's answer to warning W-2046 on line 72 of moduleX, if line 72 might have a different meaning each time we compile.

I want to support this powerful approach to warnings in the &lt;code&gt;intent&lt;/code&gt; programming language, so I've been pondering the problem of stable references to code. I think I have some satisfying answers that make this vision for warnings achievable. I'll blog about code as hypertext soon. In the meantime, just assume it's possible--and not onerous for the developer.

Imagine, then, that in addition to baking answers to warnings directly into the code with marks, developers can layer additional answers like masks or filters. The team that's porting to Windows might have one shared mask; Fred and Sally might have their own personal filters on top of the team one. These filters can be checked in with code, and the compiler smartly decides what applies in the active context.

You can achieve something a bit like this today, if you create custom projects for each unique perspective on the same codebase, or if you make projects depend on environment variables to adjust their behavior. However, this is a maintenance nightmare, and you're working with a very blunt instrument, against the grain of the compiler. I've never seen it work well.

What I'm proposing is different because flexible, context-sensitive warning filters would be a first-class feature of the compiler. The expressiveness and propagation of marks, the code DOM and stable hyperlinks, and the ability to express sophisticated answers all combine synergistically to help warnings evolve wings.

I think those wings could lift the quality and artistry of our software.

[caption id="" align="aligncenter" width="640"]&lt;img class="" src="https://farm6.staticflickr.com/5317/5876849912_6e0a74ee6d_z.jpg" alt="" width="640" height="427" /&gt; Image credit: &lt;a href="https://www.flickr.com/photos/pixx0ne/5876849912/sizes/z/"&gt;[ changó ]&lt;/a&gt; (Flickr)[/caption]&amp;nbsp;

&lt;hr style="width:60%;" /&gt;

&lt;sup&gt;&lt;a name="1"&gt;&lt;/a&gt;[1]&lt;/sup&gt; I can think of several reasons why you might want to do this. One is that you're making a temporary change, and you don't want to be bothered to delete something, only to have to reinsert it later. Another is that you may want to use dead code to force linkage. Or maybe you just want to be able to explore an alternate path by resetting EIP while you debug. A final reason is that you want to prove the code compiles (e.g., because it's quoted in documentation), even though you will never run it. This is the reason why you &lt;a title="disabling gtest methods" href="https://code.google.com/p/googletest/wiki/AdvancedGuide#Temporarily_Disabling_Tests" target="_blank"&gt;disable gtest methods&lt;/a&gt; but do not #ifdef them; continuing to compile them prevents staleness.</ns2:encoded>
  <ns0:post_id>5752</ns0:post_id>
  <ns0:post_date>2014-08-06 08:45:56</ns0:post_date>
  <ns0:post_name>in-which-warnings-evolve-wings</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="ambiguity">ambiguity</category>
  <category domain="category" nicename="better-programming-language">better programming language</category>
  <category domain="post_tag" nicename="compiler">compiler</category>
  <category domain="post_tag" nicename="deprecation">deprecation</category>
  <category domain="post_tag" nicename="dom">DOM</category>
  <category domain="post_tag" nicename="errors">errors</category>
  <category domain="post_tag" nicename="hypertext">hypertext</category>
  <category domain="post_tag" nicename="intent">intent</category>
  <category domain="post_tag" nicename="marks">marks</category>
  <category domain="post_tag" nicename="porting">porting</category>
  <category domain="post_tag" nicename="severity">severity</category>
  <category domain="post_tag" nicename="warnings">warnings</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_thumbnail_id</ns0:meta_key>
    <ns0:meta_value>5774</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/10152572362785912</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>http://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5902796569404518400&amp;type=U&amp;a=55lH</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>9262</ns0:comment_id>
    <ns0:comment_author>Exploring the Power of Deixis | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/09/23/exploring-the-power-of-deixis/</ns0:comment_author_url>
    <ns0:comment_date>2014-09-23 08:34:47</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] developers never notice, because we only worry about warnings until our current build succeeds. But what if you use a static code analyzer like Coverity? [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>7575</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2014-08-07 11:35:49</ns0:comment_date>
    <ns0:comment_content>Thank you so much for thinking about this in depth, and asking smart questions, David!

I relate to your comment about getting warm fuzzies from a clean build. I also agree that deterministic build results is a big deal. A HUGE deal, actually. Having a build which is noisy on some platforms, or which becomes noisy in surprising ways, is not good. Perhaps the idea of expiring warnings on a date or after a milestone is therefore iffy.

However, I don't think this invalidates the whole idea. Git has a requirement that before you push, you must declare your identity. Take that one step further and imagine that the compiler wants to know who it's dealing with--a code owner, a casual downloader/reuser, a build slave... It might be the case that code owners invoke a much more demanding posture with respect to warnings than a casual downloader/reuser, and that build slaves refuse to ignore any warnings that could change their status non-deterministically. Just last night I was working with CMake and got a warning that said, "This warning is for internal project developers; if you're just using somebody else's cmake project, you can ignore it." So I know I'm not imagining this use case. That doesn't mean this is a good idea, though. Certainly, if you can drive ambiguity out of the codebase for everyone, permanently, that's better than leaving questions unaddressed.

Maybe the right solution is to allow warning filters to be changed, but only manually. I guess that's not much different from hand-editing a Makefile to add or remove -W switches; what I'm proposing is just a bit easier to use.

Regarding "TODO" lists, I'm not sure. Gonna have to noodle on that. Warnings as described here are basically questions intended to resolve ambiguity. Extending them to items that must be completed might or might not be a good idea.</ns0:comment_content>
    <ns0:comment_parent>7567</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1407432949</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>7567</ns0:comment_id>
    <ns0:comment_author>David H</ns0:comment_author>
    <ns0:comment_author_email>david@handysoftware.com</ns0:comment_author_email>
    <ns0:comment_date>2014-08-07 06:58:11</ns0:comment_date>
    <ns0:comment_content>I often download and compile open-source software. As I watch the compile messages scroll by, I get a warm, fuzzy feeling when it just quietly compiles without warnings. On the other hand, when I get lots of noise about incompatible integer sizes and such, I don't feel so good about the software. Maybe some projects use gcc flags that suppress all warnings, but usually it seems like they either care about warnings and address them all, or else they don't care about whatever noise spews out at compile time.

I like the idea of more intelligent suppressing of warnings, where you have to more explicitly say why the warning does not apply in your situation.

I'm not as sure about warning suppression outside of the code itself: "different developers might have different answers for different circumstances, and because answers must expire or vary without the code changing." Typically the goal is to have deterministic build results. Having a whole boatload of warnings show up today that weren't there yesterday, or having one developer see warnings the other developer doesn't see, makes the build results less repeatable.

In the case of using warning suppressions that expire after the demo shipped -- The day after the demo ships, now all your pragmatic stubbed code generates warnings. Will you just ignore the warnings your build system produces while you transition from stubs to full production code? That could take weeks or months. Then are we back to habitually ignoring warnings? Or are you saying that the warning system has become the development TODO list? In that case, are you going to place the other development TODO items in the code as artificially generated warnings, to keep all of your TODO items in once place?

Sorry Daniel, just thinking this through out loud, I hope it helps.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1407416292</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>7581</ns0:comment_id>
    <ns0:comment_author>David H</ns0:comment_author>
    <ns0:comment_author_email>david@handysoftware.com</ns0:comment_author_email>
    <ns0:comment_date>2014-08-07 16:26:27</ns0:comment_date>
    <ns0:comment_content>Having different sets of warning levels for different roles (maintainer, automated build system, end user) seems like it could be useful. I assume there would be a command-line switch that let's you easily switch roles. This of course resembles the warning level switches that compilers already support. But you are describing something more complicated that just an integer level for filtering warnings.

I wasn't really advocating using warnings as TODO lists, it just seemed like the particular use case was headed that direction. I believe warnings should be dealt with immediately. As you said, they represent ambiguity, and I don't want ambiguity to persist.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1407450389</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>8695</ns0:comment_id>
    <ns0:comment_author>trevharmon</ns0:comment_author>
    <ns0:comment_author_email>trevharmon@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2014-09-08 23:49:52</ns0:comment_date>
    <ns0:comment_content>This article caused me to reflect on some of my coding experience with Perl where one has the ability in code through pragmas to not only disable different types of warnings (assuming they were turned on in the first place), but also disable strict code checking (e.g., variable declaration) (also assuming they were turned on) inline in the code. Annoying warning? Disable warnings in that particular block.

I've done this many times, almost always for one of the reasons you've listed above (i.e., the warning doesn't apply in this one particular case, "No, I really know what I'm doing", "sudo make me a sandwich", etc.). I din't always do it for the "right" reasons either.

Here's my concern, though. If it's in a bit of truly isolated code that no one else is ever going to call, fine. I no longer believe any code falls into that category. I have to assume anything I code will be called by someone else, for likely a completely different reason than its original design. I once saw an entire project of mine hijacked in that way. Oddly, they had issues later.

Any time I find a 3rd-party module that I'm calling deciding to suppress warnings in this way, I always get nervous. It isn't good to believe the compiler is omnipotent, but those warning rules have been put in there for a reason... usually because someone screwed something up... badly.

I know it's a royal pain to have to clean up warnings--especially the "silly" ones. I just wonder, do we want to encourage any of the behaviors that push us to not clean up warnings? I don't know. Clearly, we want a balance to be struck. Maybe marks can provide enough context to solve this problem without encouraging bad behavior.

I'm going to have to think on this a bit.

Thanks for always providing good food for thought!</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>44057411</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1410241793</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>8714</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2014-09-09 09:04:58</ns0:comment_date>
    <ns0:comment_content>Trev: you have a dry sense of humor. "Oddly, they had issues later." First I chuckled. Then I cried. I can so, so relate. :-)

I totally agree that we don't want to encourage behaviors that make "cleaning up warnings" less important or less of a best practice. I wasn't thinking of marks having such an effect; instead, I was imagining that by making it possible to drive ambiguity out of code, they'd make warnings that remain much more likely to get the attention of coders. But now you've got me wondering whether marks might unintentionally become a big, clumsy hammer that encourages bad behavior. If so, that's awful.

Wheels are turning in my head...

Thanks for the thoughtful response.</ns0:comment_content>
    <ns0:comment_parent>8695</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1410275099</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
</item>
<item>
  <title>Exploring the Power of Deixis</title>
  <link>http://codecraft.co/2014/09/23/exploring-the-power-of-deixis/</link>
  <pubDate>Tue, 23 Sep 2014 14:34:27 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5780</guid>
  <ns2:encoded>The other day my daughter was in the backseat as I pulled out of the driveway, and she instructed me to "turn that mirror over here."

"Which mirror?" I asked.

"That one," she said, without any clarification.

[caption id="" align="aligncenter" width="640"]&lt;a href="https://www.flickr.com/photos/fofie57/2271777379/sizes/z/"&gt;&lt;img class="" src="https://farm3.staticflickr.com/2207/2271777379_330a7108f4_z.jpg" alt="" width="640" height="426" /&gt;&lt;/a&gt; Image credit: fofie57 (Flickr)[/caption]

"&lt;em&gt;Which&lt;/em&gt; one?" I said again. "I don't know what you mean when you say 'that'..."

Eventually I cracked the teenage code and tilted the center rearview mirror toward her so she could check her makeup. :-) But it was harder than it should have been.

A lot of frustration could have been avoided if I could have turned around to face her to see which direction her eyes were pointing--or if she'd just stretched out her finger.
&lt;h3&gt;Deixis&lt;/h3&gt;
In linguistics, deixis is a sort of pointing—the juxtaposition of something against a reference context to provide meaning. Although we can define words like "here" and "there" in the abstract, their specific meaning always depends on the physical or metaphorical location of the speaker when they're used. Likewise, "now" and "then" are deictic with respect to the time of an utterance; pronouns like "we" and "you" use deixis that relies on interpersonal context; honorifics are deictic with respect to cultural relationships.

Since the web now permeates our collective experience, think of deixis as a kind of hyperlink. Imagine if I had written my daughter's sentence like this: "Turn &lt;span style="text-decoration:underline;"&gt;&lt;strong&gt;&lt;span style="color:#333399;text-decoration:underline;"&gt;that&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt; mirror over &lt;span style="text-decoration:underline;"&gt;&lt;strong&gt;&lt;span style="color:#333399;text-decoration:underline;"&gt;here&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;." It sorta fits, doesn't it?

&lt;!--more--&gt;

That's no accident. Deixis and hyperlinks both involve pointing. Both enrich communication. Both allow semantic relationships to be built or discussed with minimal redundancy.
&lt;h3&gt;Deixis in code&lt;/h3&gt;
Source code was doing hypertext long before anyone had heard of html. Function declarations, definitions, and invocations; variable declarations and uses; pointers; typedefs; objects and classes--all have reference/referent relationships. We even have a &lt;code&gt;this&lt;/code&gt; pointer in many languages.

However, today deixis in code has some frustrating limitations:

&lt;dl&gt;&lt;dt&gt;Many constructs in code are only valid referents in narrow constructs.&lt;/dt&gt;&lt;dd&gt;Preconditions and postconditions? No way to reference those except in doc. Dependencies? Can't declare them except at the module level with &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;#include&lt;/code&gt; statements, and they're only a crude hint about true dependency relationships.&lt;/dd&gt;&lt;dd&gt;The return value and parameters of a function are easy to reference inside a function, but hard to reference outside it. There are workarounds--javadoc conventions let you write &lt;code&gt;@param&lt;/code&gt; and &lt;code&gt;@returns&lt;/code&gt;, and some languages let you name parameters as you invoke a function: &lt;code&gt;do_something(param3=x, param4=y)&lt;/code&gt; But this is weak. Show me how I can use the return type of &lt;code&gt;functionA&lt;/code&gt; as the data type of &lt;code&gt;paramX&lt;/code&gt; of &lt;code&gt;functionB&lt;/code&gt; without simply repeating myself, or without a code monstrosity that's uglier than simple repetition. (Yes, I know you can play slick tricks with templates to extract some of this info. But the code is mysterious, verbose, and not as broadly applicable as it ought to be.)&lt;/dd&gt;&lt;dt&gt;Many constructs in code are not valid referents at all.&lt;/dt&gt;&lt;dd&gt;How many times have you written code that looks like this:
&lt;pre&gt;&lt;span style="color:green;"&gt;} // end namespace foo&lt;/span&gt;&lt;/pre&gt;
...or this:
&lt;pre&gt;&lt;span style="color:green;"&gt;#endif // win32&lt;/span&gt;&lt;/pre&gt;
...or this:
&lt;pre&gt;&lt;span style="color:green;"&gt;// Always make sure this value is checked again, after
// the main loop but before final cleanup section. See
// the "CHECK AGAIN HERE" comment about 60 lines below.&lt;/span&gt;&lt;/pre&gt;
Each of these comments is a workaround for something we can't easily point to.

And then there are all those human concerns that ought to be expressible in code, but are not--and because they are not, they can't be referenced, either. How can you hyperlink to a persona from the code that implements special behavior to make that persona happy--if a persona isn't even a valid topic for your source code? (This is the whole &lt;a title="Lacunas Everywhere" href="http://codecraft.co/2014/07/16/lacunas-everywhere/"&gt;lacuna humana&lt;/a&gt; topic that I recently explored.)

&lt;/dd&gt;&lt;dt&gt;The predominant, generic way to point at something in code (line numbers) is incredibly fragile.&lt;/dt&gt;&lt;dd&gt;What is the half-life of a line number in code?&lt;/dd&gt;&lt;dd&gt;One code checkin, maybe.&lt;/dd&gt;&lt;dd&gt;It is possible to remap line numbers across diffs, but it is an inexact science, and it's hard.&lt;/dd&gt;&lt;dd&gt;Most developers never notice, because we only &lt;a title="In Which Warnings Evolve Wings" href="http://codecraft.co/2014/08/06/in-which-warnings-evolve-wings/"&gt;worry about warnings&lt;/a&gt; until our current build succeeds. But what if you use a static code analyzer like Coverity? Coverity builds up a DB of issues that developers are supposed to resolve over time, and the issues need to retain their identity even when line numbers change. Notice the permanent issue ID (CID 13674) versus the line number (line 421) in this screen shot:
&lt;img class="aligncenter" src="https://cloud.githubusercontent.com/assets/2208904/2715771/cf7078f0-c515-11e3-80f6-4452c181f4b5.png" alt="" width="828" height="281" /&gt;
It turns out that Coverity has partly solved this problem (and I take my hat off to their dev team for doing so)—but whatever secret sauce they use, it is not something that's available for easy use by the programming community. Referring to a chunk of code at a specific "location" over its maintenance lifetime is almost guaranteed to be problematic due to changing line numbers at the very least—plus maybe changing filenames, directories, class names, namespaces, visibility, and so forth.&lt;/dd&gt;&lt;/dl&gt;
&lt;h3&gt;What's the big deal?&lt;/h3&gt;
You might say that this is an imaginary problem. After all, we've been coding for decades, and the whole system seems to work okay. We can point at the stuff we need, right? Our linkers usually find the externals they need to bind together, and our &lt;a title="Why you should use an IDE instead of vim or emacs" href="http://codecraft.co/2014/05/13/why-you-should-use-an-ide-instead-of-vim-or-emacs/"&gt;IDEs usually find the decl&lt;/a&gt; for variables when we ask. The rest must not matter all that much.

I think that assertion is akin to a librarian in 1990, arguing that since books have tables of contents and indexes, and since there's a nice card catalog available for patron use, hypertext is not going to be particularly useful. Any benefits of the newfangled "web" will turn out to be illusory.

With the benefit of hindsight, would we buy that librarian's logic?

I think not.

Likewise, I suspect we really have only a vague appreciation for what we're missing by limiting ourselves to the clumsy pointing mechanisms that code provides today. Hyperlinks made ecommerce possible. Hash tags and @ mentions (more digital deixis) power social media. Search engines evaluate the relevance and value of content based on relationships that were undiscoverable before we had hypertext. VR worlds, Foursquare, Google Glass... all possible because of deixis.

&lt;a name="examples"&gt;&lt;/a&gt;&lt;h3&gt;Innovation examples&lt;/h3&gt;
Imagine what unfettered code deixis might do. What if instead of clumsy attempts to "turn that mirror over here" we had a finger that could easily and unambiguously identify targets for our ideas? Suppose we could point to code constructs across space and time instead of being limited to "&lt;a href="http://en.wikipedia.org/wiki/Flatland" target="_blank"&gt;flatland&lt;/a&gt;" dimensions. What might be the analog to image maps or tag clouds in a &lt;a title="What should code look like when we squint at it?" href="http://codecraft.co/2013/09/19/what-should-code-look-like-when-we-squint-at-it/"&gt;visual view of code&lt;/a&gt;? Could we shop in dependency stores and fill our carts with "code reuse packages"? Would we be able to build something akin to vendor reputation for contributors of blocks of code? Could we trace code genealogies? Would we create more robust mappings between tests and requirements and coders and personas and use cases...? Could we point to design patterns or performance bottlenecks?

One of the goals of the &lt;code&gt;intent&lt;/code&gt; programming ecosystem I've &lt;a title="My First Tangle With the Tower of Babel" href="http://codecraft.co/2013/04/26/my-first-tangle-with-the-tower-of-babel/"&gt;begun to create&lt;/a&gt; is to empower this sort of deixis without creating any new overhead for engineering teams. As I've studied the problem, I've become convinced that there are mechanisms that deliver more deictic utility while respecting this goal—simultaneously saving time and increasing power. It's the sort of happy combination that made the web catch fire.
&lt;h3&gt;The way forward&lt;/h3&gt;
So how do we bring code fully into the hypertext age?

I'm trying to turn over a new leaf and stop writing such long posts, so I'll lay out the solution I've begun to imagine in a follow-on installment soon. I'm not being coy; I'm just trying to take this one step at a time, and I'm running out of time to write before bedtime. :-)

I'll say this much tonight. Hypertext requires anchors, and anchors require names. Part of the problem with code today is that many constructs have no name. Humans have all sorts of strategies for dealing with unnamed items ("I like those blue flowers"; "Go 2 blocks straight ahead, then take your first left"). A smart compiler could emulate some of them. Humans also tend to triangulate with names (use more than one name for the same item), because they &lt;a title="Why Mental Models Matter" href="http://codecraft.co/2012/11/05/why-mental-models-matter/"&gt;understand&lt;/a&gt; that names may be temporary, and that &lt;a title="Good Code Is Named Right" href="http://codecraft.co/2012/08/28/good-code-is-named-right/"&gt;some names are more intrinsic than others&lt;/a&gt;. Again, a programming ecosystem could facilitate this.

Did I whet your appetite?

Tune in for a follow-up shortly.</ns2:encoded>
  <ns0:post_id>5780</ns0:post_id>
  <ns0:post_date>2014-09-23 08:34:27</ns0:post_date>
  <ns0:post_name>exploring-the-power-of-deixis</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="communication">communication</category>
  <category domain="post_tag" nicename="deixis">deixis</category>
  <category domain="post_tag" nicename="html">html</category>
  <category domain="post_tag" nicename="hypertext">hypertext</category>
  <category domain="post_tag" nicename="librarian">librarian</category>
  <category domain="post_tag" nicename="pointing">pointing</category>
  <category domain="post_tag" nicename="referent">referent</category>
  <category domain="post_tag" nicename="reputation">reputation</category>
  <category domain="post_tag" nicename="shopping-carts">shopping carts</category>
  <category domain="post_tag" nicename="social-media">social media</category>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/10152681616480912</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>https://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5920188300890488832&amp;type=U&amp;a=1NrG</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>9439</ns0:comment_id>
    <ns0:comment_author>How to point in code | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/09/25/how-to-point-in-code/</ns0:comment_author_url>
    <ns0:comment_date>2014-09-25 08:38:59</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] my previous post, I explored why deixis is helpful, how it shows up in our language, and how its use in source code [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>Grumpy Old Men, Opacity, and Optimizers</title>
  <link>http://codecraft.co/2014/09/09/grumpy-old-men-opacity-and-optimizers/</link>
  <pubDate>Tue, 09 Sep 2014 14:48:07 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5784</guid>
  <ns2:encoded>&lt;p&gt;Today I'm channeling my inner grumpy old man. And these guys are helping. (I am not old enough to pull off such a face by myself, although life is rapidly helping me get there. ;-)&lt;/p&gt;&lt;p&gt;[embed]https://www.flickr.com/photos/neilmoralee/6244499091/sizes/z/[/embed]&lt;/p&gt;&lt;p&gt;The reason I'm feeling grumpy is that I've had another in a long, long line of conversations about how to write faster code.&lt;/p&gt;&lt;p&gt;It's not that optimization experts are dumb. Far from it. They are invariably smart, and in general, they are better informed than I am about how pipeline burst cache and GPUs and RAM prefetch algorithms work. I generally learn a lot when I talk to guys like this.&lt;/p&gt;&lt;p&gt;I applaud their passion, even if I think &lt;a title="3 Commandments of Performance Optimization" href="http://codecraft.co/2013/01/08/3-commandments-of-performance-optimization/"&gt;they sometimes get carried away&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;No. What's making me grumpy is that after decades of hard work, we still have compilers that encourage a culture of black magic and superstition around this topic. I thought I signed up for computer science, not voodoo.&lt;/p&gt;&lt;p&gt;To show you what I mean, let's talk about the humble &lt;code&gt;inline&lt;/code&gt; keyword in C and C++. The amount of FUD and nonsense around it is really unfortunate. How many of the following have you heard?&lt;br /&gt; &lt;!--more--&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Inlines are always faster than normal function calls.&lt;/li&gt;&lt;li&gt;Inlines are sometimes slower than normal function calls, if they bloat the binary to the point where the data segment causes page faults.&lt;/li&gt;&lt;li&gt;Compilers treat &lt;code&gt;inline&lt;/code&gt; as a hint only, and ignore it whenever they feel like it.&lt;/li&gt;&lt;li&gt;Ordinary programmers might not be smarter than the compiler, but I am. That's why I use the compiler extension that always inlines, instead of just the ordinary &lt;code&gt;inline&lt;/code&gt; keyword that's useless.&lt;/li&gt;&lt;li&gt;If you declare a &lt;code&gt;static&lt;/code&gt; in a function, it can't be inlined.&lt;/li&gt;&lt;li&gt;If you throw an exception in a function, it can't be inlined.&lt;/li&gt;&lt;li&gt;If you call a virtual in a function, it can't be inlined.&lt;/li&gt;&lt;li&gt;If you call &lt;code&gt;goto&lt;/code&gt; in a function, it can't be inlined.&lt;/li&gt;&lt;li&gt;If you use thread-local storage in a function, it can't be inlined.&lt;/li&gt;&lt;li&gt;Only code in a header can be inlined. Using &lt;code&gt;inline&lt;/code&gt; in a .cpp is either an error or is totally ignored by the compiler.&lt;/li&gt;&lt;li&gt;Since templates are implemented in headers, they are automatically inline candidates.&lt;/li&gt;&lt;li&gt;&lt;code&gt;static&lt;/code&gt; and &lt;code&gt;inline&lt;/code&gt; are mutually contradictory.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I'm not going to argue the stuff in the above list, one way or another. There's enough falsehood in that list to steer people wrong, and enough truth in it to be dangerous. Importantly, all of the items in the list are stated as timeless, universal truths, which is a &lt;em&gt;prime facie&lt;/em&gt; reason to treat the list a &lt;span style="color:#808000;"&gt;Bad Idea™&lt;/span&gt; regardless. Remember: &lt;a title="Steve Tolman: It depends." href="http://codecraft.co/2012/09/17/steve-tolman-it-depends/"&gt;it depends&lt;/a&gt;. :-)&lt;/p&gt;&lt;p&gt;My point today is not about inlines, though. It's not even about performance dogma. Rather, it's about opacity.&lt;/p&gt;&lt;p&gt;The optimization choices that a compiler makes about inlining and sundry other issues are &lt;em&gt;opaque&lt;/em&gt; to most coders. And I claim that it is this fact--not irrational zealots--at the heart of a lot of holy wars, debates, and FUD about optimization. The classic paper by &lt;a href="http://www.drdobbs.com/cpp/c-and-the-perils-of-double-checked-locki/184405726" target="_blank"&gt;Meyers and Alexandrescu about how compiler optimization defeats the intent of the double-checked locking pattern&lt;/a&gt; provides eloquent examples of this opacity. If you haven't read it, I encourage you to do so.&lt;/p&gt;&lt;p&gt;We should fix this.&lt;/p&gt;&lt;p&gt;Compiler makers, I hereby request a feature. Please add the ability to generate an "optimization plan" for a function, analogous to the "explain query plan" feature that DB admins have used to tune their work for decades.&lt;/p&gt;&lt;p&gt;I can imagine this working as a compiler switch, similar to &lt;code&gt;-E&lt;/code&gt; which dumps preprocessor output to stdout. If I add &lt;code&gt;--explain-optimizations&lt;/code&gt; to the cmdline, I would like a report that tells me:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;What sorts of loop unwinding, reordering, and other shortcuts will be used. Please tie them back to the specific switches that are active.&lt;/li&gt;&lt;li&gt;How optimizations were constrained by block, function, and translation unit scope--and how optimizations might change naive assumptions about scope that a programmer would form by looking at the high-level representation of the code.&lt;/li&gt;&lt;li&gt;What additional optimizations might be possible if additional switches were added or removed.&lt;/li&gt;&lt;li&gt;What guesses were made about likely versus unlikely branches in conditionals.&lt;/li&gt;&lt;li&gt;What additional optimizations might be possible if not for a certain characteristic of the code. Please be specific: "I could not optimize out the extra assignment to foo, because codepath X requires it."&lt;/li&gt;&lt;li&gt;How micro optimization decisions conflict with macro ones, and what assumptions and priorities were used to resolve these conflicts.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I realize I am not asking for something easy. But I believe explaining optimization choices cannot be harder than making those choices in the first place--and the problem must be somewhat tractable, since the SQL crowd has an analogous tool.&lt;/p&gt;&lt;p&gt;Let's shine some light on this black magic, and turn performance tradeoffs into a science based on common, abundant knowledge. I think it could improve the whole industry.&lt;/p&gt;&lt;hr /&gt;&lt;p style="text-align:right;color:gray;font-size:85%;"&gt;Image credit: &lt;a href="https://www.flickr.com/photos/neilmoralee/6244499091/sizes/l"&gt;Neil. Moralee (Flickr)&lt;/a&gt;&lt;/p&gt;</ns2:encoded>
  <ns0:post_id>5784</ns0:post_id>
  <ns0:post_date>2014-09-09 08:48:07</ns0:post_date>
  <ns0:post_name>grumpy-old-men-opacity-and-optimizers</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="category" nicename="better-programming-language">better programming language</category>
  <category domain="post_tag" nicename="branch-prediction">branch prediction</category>
  <category domain="post_tag" nicename="compiler">compiler</category>
  <category domain="post_tag" nicename="conditionals">conditionals</category>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <category domain="post_tag" nicename="inline">inline</category>
  <category domain="post_tag" nicename="loop-unwinding">loop unwinding</category>
  <category domain="post_tag" nicename="optimization">optimization</category>
  <category domain="post_tag" nicename="shortcuts">shortcuts</category>
  <category domain="post_tag" nicename="tradeoffs">tradeoffs</category>
  <category domain="post_tag" nicename="tuning">tuning</category>
  <category domain="post_tag" nicename="voodoo">voodoo</category>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>http://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5915118332054360064&amp;type=U&amp;a=j9LA</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/10152652044405912</ns0:meta_value>
  </ns0:postmeta>
  </item>
<item>
  <title>How to point in code</title>
  <link>http://codecraft.co/2014/09/25/how-to-point-in-code/</link>
  <pubDate>Thu, 25 Sep 2014 14:38:46 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5803</guid>
  <ns2:encoded>In my &lt;a title="Exploring the Power of Deixis" href="http://codecraft.co/2014/09/23/exploring-the-power-of-deixis/"&gt;previous post&lt;/a&gt;, I explored why deixis is helpful, how it shows up in our language, and how its use in source code is hampered by limitations in our current programming ecosystems.

I promised I'd explain how we could remedy this problem to increase the expressiveness of our code... That's what this post is all about.
&lt;h3&gt;It starts with names&lt;/h3&gt;
The magic that makes the web "hyper" is not really in tags. Sure, we use &lt;code&gt;&lt;a href="x"&gt;...&lt;/a&gt;&lt;/code&gt; to point at something--but there are other ways to point. As I said in my previous post, line numbers point. Method names in source code point at their decl or their impl. Statements like &lt;code&gt;using namespace std&lt;/code&gt; point. Names of build-time dependencies in maven pom.xml files point.

The &lt;em&gt;real&lt;/em&gt; magic is that the web has so many things to point &lt;em&gt;to&lt;/em&gt;. It has &lt;em&gt;names&lt;/em&gt; (notice where "name" appears in the previous paragraph). Every resource--even ones that are dynamically generated--has a URL. Individual paragraphs or tables or images &lt;em&gt;inside&lt;/em&gt; a resource can have names, which lets us point to them, too.

We value names.

[caption id="" align="aligncenter" width="740"]&lt;a href="http://xkcd.com/910/"&gt;&lt;img class="" src="http://imgs.xkcd.com/comics/permanence.png" alt="" width="740" height="650" /&gt;&lt;/a&gt; image credit: xkcd.com[/caption]

So, if names are so valuable, part of how we make code more "hyper" is to increase the availability of names. Here are some ways to do that.

&lt;!--more--&gt;

&lt;dl&gt;&lt;dt&gt;&lt;strong&gt;1&lt;/strong&gt;. Every piece of structure in source code should have automatic names that derive from its position in a DOM, as specified by &lt;a href="http://en.wikipedia.org/wiki/XPath" target="_blank"&gt;XPath&lt;/a&gt; or something similar. Positional names are akin to the way humans describe things that they haven't bothered to name, as in “I like those blue flowers”; “Go 2 blocks straight ahead, then take your first left”. Examples of automatic positional names might include:&lt;/dt&gt;&lt;dd&gt;
&lt;ul&gt;
	&lt;li&gt;The first parameter to the &lt;code&gt;take_evasive_action()&lt;/code&gt; method of the &lt;code&gt;spaceship&lt;/code&gt; class might be accessible as &lt;code&gt;spaceship / take_evasive_action / params[1]&lt;/code&gt; (XPath arrays are 1-based). If that parameter is named &lt;code&gt;threats_by_proximity&lt;/code&gt;, then it should also be available as &lt;code&gt;spaceship / take_evasive_action / params / threats_by_proximity&lt;/code&gt;.&lt;/li&gt;
	&lt;li&gt;The second assignment statement made to variable &lt;code&gt;ticker_symbol&lt;/code&gt; in function &lt;code&gt;divest_least_performing_stock&lt;/code&gt; could be referenced as &lt;code&gt; divest_least_performing_stock / variables / ticker_symbol / assignments[2]&lt;/code&gt;.&lt;/li&gt;
	&lt;li&gt;The call graph for any element in code could be referenced as &lt;code&gt;&lt;em style="color:red;"&gt;URL_of_the_element&lt;/em&gt; / call_graph&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;The comment directly above a &lt;code&gt;for&lt;/code&gt; loop could be referenced as &lt;code&gt;&lt;em style="color:red;"&gt;URL_of_the_for_loop&lt;/em&gt; / comments_before[last()]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
Note how the &lt;a title="Introducing Marks" href="http://codecraft.co/2014/07/24/introducing-marks/"&gt;semantic marks&lt;/a&gt; that I've &lt;a title="Mountains, Molehills, and Markedness" href="http://codecraft.co/2014/07/28/mountains-molehills-and-markedness/"&gt;discussed&lt;/a&gt; in previous posts provide a powerful way to qualify and query this sort of DOM. To find all classes that have GPL'ed code, you could use &lt;code&gt;my_project / classes[@marked(gpl)]&lt;/code&gt;. To isolate all code that's sensitive to an AOP-style aspect such as the current logging strategy for the app, I can query for marks as well.


When you combine this with compile-time reflection, you have extraordinary power to make the compiler analyze, generate, and connect code.

&lt;/dd&gt;&lt;dt&gt;&lt;strong&gt;2&lt;/strong&gt;. Constructs in code that are currently anonymous (e.g., &lt;code&gt;&lt;em style="color:red;"&gt;URL_of_the_for_loop&lt;/em&gt;&lt;/code&gt; in the example above) need to be explicitly nameable.&lt;/dt&gt;&lt;dd&gt;In the &lt;code&gt;intent&lt;/code&gt; programming language that I'm designing, all block-level elements that would take a parenthesized expression in C++ are nameable with a phrase after their keyword:

&lt;strong&gt;C++&lt;/strong&gt;
&lt;pre style="font-size:90%;padding:.4em;border:solid 1px #dddddd;"&gt;&lt;span style="color:green;"&gt;// If we can do more processing&lt;/span&gt;
&lt;span style="color:blue;"&gt;if&lt;/span&gt; (remaining_item_count &amp;lt; total &amp;amp;&amp;amp; available_time &amp;gt; 0) {
    &lt;span style="color:green;"&gt;// body of the anonymous "if" block&lt;/span&gt;
}&lt;/pre&gt;
&lt;code&gt;&lt;strong&gt;intent&lt;/strong&gt;&lt;/code&gt;
&lt;pre style="font-size:90%;padding:.4em;border:solid 1px #dddddd;"&gt;&lt;span style="color:blue;"&gt;if&lt;/span&gt; &lt;span style="color:red;"&gt;we can do more processing&lt;/span&gt; (remaining_item_count
... &amp;lt; total &amp;amp;&amp;amp; available_time &amp;gt; 0):
    &lt;span style="color:green;"&gt;// body of the named "if" block&lt;/span&gt;
&lt;/pre&gt;
In &lt;code&gt;intent&lt;/code&gt;, the name of the &lt;code&gt;if&lt;/code&gt; block above is &lt;code&gt;&lt;span style="color:blue;"&gt;if&lt;/span&gt; &lt;span style="color:red;"&gt;we can do more processing&lt;/span&gt;&lt;/code&gt;. You can imagine similar names, like &lt;code&gt;&lt;span style="color:blue;"&gt;switch&lt;/span&gt; &lt;span style="color:red;"&gt;on the type of the most recent file&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span style="color:blue;"&gt;while&lt;/span&gt; &lt;span style="color:red;"&gt;user can't log in&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span style="color:blue;"&gt;try&lt;/span&gt; &lt;span style="color:red;"&gt;to connect to db&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span style="color:blue;"&gt;else if&lt;/span&gt; &lt;span style="color:red;"&gt;backup storage is available&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span style="color:blue;"&gt;closure&lt;/span&gt; &lt;span style="color:red;"&gt;that sorts IPAddr&lt;/span&gt;&lt;/code&gt;, and so forth. Adding these names to the code is easy and intuitive, and it often allows us to subtract a comment that conveyed the same semantics in a clumsier way, making the code at least as terse. As a plus, when you move the block, you automatically move its name--you can't accidentally forget to move the explanatory comment.

Comments and string literals in intent are nameable by their first few words. And all nameable items can be targeted with shorter forms of the name in hyperlinks, as long as the words that remain in the name are unambiguous. So &lt;code&gt;&lt;span style="color:blue;"&gt;else if&lt;/span&gt; &lt;span style="color:red;"&gt;backup storage is available&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span style="color:blue;"&gt;else if&lt;/span&gt; &lt;span style="color:red;"&gt;backup available&lt;/span&gt;&lt;/code&gt; refer to the same place.

&lt;/dd&gt;&lt;dt&gt;&lt;strong&gt;3&lt;/strong&gt;. Code needs to be able to hyperlink to any nameable constructs in code, or to any other globally meaningful URL.&lt;/dt&gt;&lt;dd&gt;This allows arbitrary, rich content to be associated with code. (We can already do this, sort of, inside of comments, but the power of links in comments is limited. I want to hyperlink to a UML diagram or a use case, for example, and have the code fail to compile if my link is invalid. I want my hyperlink to cause a license file, a font, an SSL cert, or an icon to become a binary resource inside my executable. I want to be able to use something akin to the &lt;a href="http://www.w3schools.com/tags/att_a_rel.asp" target="_blank"&gt;"rel" attribute on an html &lt;code&gt;&lt;/code&gt; tag&lt;/a&gt; to specify the semantics of the link.)&lt;/dd&gt;&lt;dt&gt;&lt;strong&gt;4&lt;/strong&gt;. It needs to be possible to embed an explicit anchor in code.&lt;/dt&gt;&lt;dd&gt;While most linking should be possible with the previous 3 changes, it is conceivable that embedding an explicit anchor will occasionally be desirable. One use case is to allow external entities (not part of the programming ecosystem) to hyperlink inside code without needing to understand the DOM.


Another use case is to name paths or flows through code. Suppose you have a complex function that can flow in a couple dozen different ways due to permutations from conditionals and switch statements. How do you hyperlink to one of the paths that's dangerous, or that has performance problems? You can name branch points in the logic, and then hyperlink to the composite: &lt;code&gt;&lt;span style="color:green;"&gt;// Be careful when you edit code path &lt;span style="text-decoration:underline;color:blue;"&gt;#A-&amp;gt;C-&amp;gt;C.1-&amp;gt;G-&amp;gt;X&lt;/span&gt;; it is very sensitive to timing.&lt;/span&gt;&lt;/code&gt;.&lt;/dd&gt;&lt;/dl&gt;
&lt;h3&gt;Triangulation&lt;/h3&gt;
Having more and better names is good, but it's not enough by itself. You may remember that in my previous post, I complained about the fragility of line numbers--we can't use them as permanent hyperlinks, because they change too often.

The positional names I mentioned above are subject to this same limitation--and to a lesser extent, some of the other names might "break" over time as well.

The way we fix this is to diff and triangulate. A given construct has multiple names--positional, natural, perhaps explictly assigned anchors... During compilation, as hyperlinks are evaluated, the compiler could store the main name that was used to construct a hyperlink, but also alternate names that resolve the same place. During refactors or subsequent compilation passes, alternate names could be used to repair broken links. Much as a diffing algorithm finds sequences of identical lines and then narrows in on what's changed to establish correspondence in a before-and-after view, a name diffing algorithm could repair links by isolating just those sequences of names that have changed, and then automatically updating broken variants when a majority of remaining names still agrees.

This allows warnings to hyperlink to their associated location in code, and to preserve that mapping across maintenance and evolution of the codebase. It makes other hyperlinks far more robust as well.

&lt;a name="proxies"&gt;&lt;/a&gt;
&lt;h3&gt;And we need proxies&lt;/h3&gt;
Names and triangulation still aren't enough. I've alluded on previous posts to the idea that &lt;a title="Lacunas Everywhere" href="http://codecraft.co/2014/07/16/lacunas-everywhere/"&gt;code should be able to describe constructs that are not coded today&lt;/a&gt;: use cases, personas, business requirements, etc.

The presence of these constructs in code does not have to be heavy. In fact, they can be proxied with light, declarative files that simply enumerate some key properties--and that hyperlink to external systems for greater details in a "native" non-code environment. Imagine a .yaml or .json file that describes key attributes of a persona, for example -- name, goals, typical permissions, use cases. Perhaps such a file contains a link to a usability database or a Product Management release plan with much richer detail; in such cases, the file is a sort of proxy for a larger concept that other professionals own.

Having that proxy can be enormously valuable. I can now assert that I have a test case that exercises each use case for each persona--and have the compiler walk hyperlinks to see if the assertion is true. I can assert that every feature used by a given persona is firewalled away from escalated privileges--and again, have the compiler walk hyperlinks to code paths and security marks and menu items and user input functions to see whether I'm right.

Proxies allow us to point to otherwise unpointable things like performance bottlenecks, design priorities, temporal boundaries, lifecycle phases in an app, and so forth. They complement and enhance the rest of the hyperlinking strategy.
&lt;h3&gt;The Value of Pointing&lt;/h3&gt;
I said in my previous post that I got frustrated when my daughter used words like "that" and "here" without pointing. I couldn't understand her intent. Talking around this semantic deficit was time-consuming and error-prone.

By making it easy to point at any idea in the daily experience of a coder, I think the quality and terseness of our communication will grow dramatically. I gave a few &lt;a href="http://codecraft.co/2014/09/23/exploring-the-power-of-deixis/#examples"&gt;examples&lt;/a&gt; of how that power might generate innovation. (And btw, notice how my hyperlink to "examples" in that last sentence is a lot more useful because I can point to a specific paragraph).

Like all innovations, though, I don't think the exciting stuff is in the obvious examples. I believe we'll discover cool new ideas that we haven't even imagined yet, once the power of an improved paradigm permeates our coding lives.</ns2:encoded>
  <ns0:post_id>5803</ns0:post_id>
  <ns0:post_date>2014-09-25 08:38:46</ns0:post_date>
  <ns0:post_name>how-to-point-in-code</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="anchor">anchor</category>
  <category domain="category" nicename="better-programming-language">better programming language</category>
  <category domain="post_tag" nicename="call-graphs">call graphs</category>
  <category domain="post_tag" nicename="code-paths">code paths</category>
  <category domain="post_tag" nicename="deixis">deixis</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="diff">diff</category>
  <category domain="post_tag" nicename="dom">DOM</category>
  <category domain="post_tag" nicename="hyperlinks">hyperlinks</category>
  <category domain="post_tag" nicename="names">names</category>
  <category domain="post_tag" nicename="proxies">proxies</category>
  <category domain="post_tag" nicename="triangulation">triangulation</category>
  <category domain="post_tag" nicename="url">URL</category>
  <category domain="post_tag" nicename="xpath">XPath</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/10152685422105912</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>https://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5920914162724134912&amp;type=U&amp;a=EHSk</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_job_id</ns0:meta_key>
    <ns0:meta_value>11697886311</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>9694</ns0:comment_id>
    <ns0:comment_author>trevharmon</ns0:comment_author>
    <ns0:comment_author_email>trevharmon@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2014-09-29 22:51:25</ns0:comment_date>
    <ns0:comment_content>I have a question and then a comment.

Question: I find what essentially amounts to inline comments described in #2 as an interesting idea. I am curious, though. Is Intent going to require those inline "comments" in order for it to compile? If not, that seems to allow programmers to just skip them, leaving us with code that's essentially the same as what we have today in terms of conveying additional meaning.

Comment: Going back to one of my favorite languages, Perl (I know I'm an oddity), I find this idea of anchors to be interesting. Perl has a concept of Labels, which effectively behave very similar to HTML anchors. They can be applied to not only arbitrary code blocks (used for GOTO calls--yeah, if you really want to do that), but also for fine-grain nested loop control. Essentially, they allow the programmer to put down "anchors" at specific parts of the code, independent of line numbers, and then use them to control execution flow. Granted, this isn't exactly what you are getting at here in the article, but I've found it very useful (if used correctly) to make the code more readable. I believe this adds additional credence to what you are trying to accomplish overall.

If you are interested, a discussion on Perl Labels can be found here: http://www.perlmonks.org/?node_id=616302</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>44057411</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1412052686</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>9707</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2014-09-30 07:24:52</ns0:comment_date>
    <ns0:comment_content>Trev: thanks for the thoughtful comment.

Perl labels are interesting. I had run across them once before, and the use case that I saw for them was the same one described in the post you linked--transferring control with precision in nested loops. I have never seen an answer to that problem that's as elegant as the one Perl offers. The alternatives in other languages--pure gotos, or nested loop state variables with conditionals--are uglier and far less clear.

Are there other scenarios where you like to use them?

Maybe they need to go into intent...

Regarding your question: my current plan is to make the inline comments optional. As you point out, this means people are free to omit them, making code no more expressive than it is today. However, I can't see a good justification for requiring them, for three reasons: 1) if code has good variable names, and a parenthesized expression is simple, the comment would often be redundant; 2) I have no algorithmic way to evaluate the appropriateness of the comment, so requiring something might just cause people to grumble and put in placeholder text; 3) although I want every place it code to be name-able, I don't want to require names everywhere. Some blocks may not be name-worthy.</ns0:comment_content>
    <ns0:comment_parent>9694</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1412083493</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>10855</ns0:comment_id>
    <ns0:comment_author>Taming Side Agreements | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2014/10/28/taming-side-agreements/</ns0:comment_author_url>
    <ns0:comment_date>2014-10-28 08:35:56</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] many of the subtleties I listed above, although I think docs and comments are often a band-aid. The proxy technique that I recommended, to codify human concerns in a codebase, is another way of adding sunshine. The [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>29045</ns0:comment_id>
    <ns0:comment_author>In Link 3&amp;#8217;s Example &amp;#8211; Foame</ns0:comment_author>
    <ns0:comment_author_url>https://foameonline.com/in-link-3s-example/</ns0:comment_author_url>
    <ns0:comment_date>2024-08-29 15:30:55</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] is just a tenet, and nothing can change checking the domains manually. Make sure that to solely construct hyperlinks that can contribute positively to your total online presence. Still acquired almost 9,000. Let’s [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>firehose_sent</ns0:meta_key>
      <ns0:meta_value>1724967055</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
</item>
<item>
  <title>A better way to put data in code</title>
  <link>http://codecraft.co/2014/10/08/a-better-way-to-put-data-in-code/</link>
  <pubDate>Wed, 08 Oct 2014 19:55:00 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5891</guid>
  <ns2:encoded>I've been focusing on esoteric features of language design for a while. I thought it might be nice to take a detour and explore something eminently practical and easy to explain, for a change.

Let's talk data and tables.

I don't mean databases--relational or otherwise; I'm talking about tables of data in source code itself. Sooner or later, every coder uses them. We build jump tables, tables of unicode character attributes, tables of time zone properties, tables of html entities, tables of multipliers to use in hash functions, tables that map zip codes to states, tables of dispatch targets, tables that tell us the internet domain-name suffix for a particular country name...

Depending on the language you're using and the nature of your data, you might code such tables using arrays, structs, enums, dictionaries, hash maps, and so forth.

I think this is a mediocre solution, at best. Shouldn't programmers work on funner stuff, like "traveling salesman" problems? :-)

[caption id="" align="aligncenter" width="640"]&lt;a href="http://xkcd.com/399/"&gt;&lt;img class="" src="http://imgs.xkcd.com/comics/travelling_salesman_problem.png" alt="" width="640" height="283" /&gt;&lt;/a&gt; image credit: xkcd.com[/caption]

&lt;!--more--&gt;
&lt;h3&gt;What's wrong with how we code tables?&lt;/h3&gt;
What's wrong? In a word, the fact that we have to code them at all--that's what.

If all the tables in our code had half a dozen items, the awkwardness of codifying them might not matter so much. But tabular data in code is often large, awkward, and difficult to format correctly. We rarely receive it expressed in a syntax that makes lexers happy.

I recently spent time writing a python script to reformat a 100 KLOC .cpp file that contained generated unicode ngram definitions represented as strings. The strings included bytes &amp;gt; 0x80 and &amp;lt; 0x20, and the compiler was refusing to process the file because it could tell the "source code" wasn't ASCII.

I'm not sure how many hours I've spent doing regex search/replace to put quotes around strings that I copied/pasted from a table on a web page somewhere--but the tally is large. I've fiddled with smart quotes, tweaked project defs to declare code pages for my source, line-wrapped by hand across hundreds of lines of data, debugged missing escape sequences due to embedded backslashes, added and subtracted commas and curly braces and line continuations, and all kinds of similar fiddle work.

Coders have better things to do.

Notice that in most cases, data tables like these represent knowledge whose primary home isn't really code, and whose true owner isn't an engineer. Coding such data is therefore a setup for communication problems and busy work.

On another recent project, I needed a table to correlate ISO 639 country codes, country names as stored in a whois DB, and telephone dialing prefixes. The providers of whois data helpfully offered a pipe-delimited text file on their web site that showed how their country names mapped to ISO 639, and a little googling gave me an HTML table that mapped those codes to dialing prefixes.

I knitted these two data sources together and build a .h that declared an array of structs to do my mapping. Easy. But I don't own the data. Because it is "foreign" in the new code home I've built for it, I have some lingering problems. For one, what do I do about changes? If Syria fragments or Crimea is no longer a part of Ukraine, I will have bugs in my table, and I will have to hand-edit to fix them once I diagnose the problem. That might never happen, since the owner of the whois data is unlikely to email me about it. Likewise, if phone companies decide that Antigua and Barbuda needs a new dialing prefix, how will I find out? Nobody is guaranteeing that the country-code-to-dialing-prefix table I found on the internet is up-to-date (or complete, or even accurate)--except me.
&lt;h3&gt;What would be better?&lt;/h3&gt;
The world already has very mature ways to deal with tabular data. They're called spreadsheets and databases. Imagine the master version of some of the types of data I've mentioned, and I suspect you'll be imagining one or the other of these tools as part of the context. Don't you think the definitive master lists of mappings between cities and postal codes live in postal service databases somewhere? Or that the guaranteed-accurate-and-up-to-date enumeration of stock ticker symbols lives in a spreadsheet at the NYSE or the FTSE?

What programming languages ought to do is allow coders to import data from their definitive sources--or at least from a small handful of exchange formats like CSV and XML--with no intermediate hand coding. In other words, I want what I'll call &lt;em&gt;direct compilation of data from native formats&lt;/em&gt;. If I create a currency-exchange app that needs a currency conversion table, what I want is to write code like this:
&lt;pre&gt;table currency_info:
    columns: id(enum), symbol(str), name(str), exchange_rate(float)
    rows: Attach("latest_currency_info.csv")
&lt;/pre&gt;
If a compiler supported such code, it might read the attached .csv file, parse it using CSV rules, and create an array of structs where each struct instance is a tuple or row of data. The array would be indexed by ID, a value that the compiler would generate in the same way enum values are assigned. The end result would be an a static constant array, exactly as if I had hand-coded a manual translation of the data. Essentially, this is the technique I recommended when I wrote about &lt;a title="How Enums Spread Disease — And How To Cure It" href="http://codecraft.co/2012/10/29/how-enums-spread-disease-and-how-to-cure-it/"&gt;how to avoid breaking encapsulation with enums&lt;/a&gt;.

[caption id="attachment_5895" align="aligncenter" width="646"]&lt;a href="http://www.xe.com/symbols.php"&gt;&lt;img class="size-large wp-image-5895" src="https://codecraft.co/wp-content/uploads/2014/10/screen-shot-2014-10-08-at-1-12-43-pm.png?w=646" alt="Currency Table at XE.com" width="646" height="390" /&gt;&lt;/a&gt; Currency Table at XE.com[/caption]

Think about the advantages for a minute. Christine Lagarde isn't going to call me up or help me write code if the IMF decides to make loans in Bitcoin (to pick a ridiculous example)--but I can write a cron job that downloads data about accepted currencies worldwide, as published on &lt;a href="http://www.xe.com/symbols.php" target="_blank"&gt;xe.com&lt;/a&gt;. Suddenly my code is up-to-date. I never have to do reformatting work, and I don't have to worry about code getting out-of-sync with reality.

This isn't rocket science, but it's remarkably powerful. You no longer need to use programming language syntax to describe data--you can use a familiar, standard data representation language. That means non-coders can give it to you directly. Data sources turn into code with minimal effort.

At work, I maintain code that helps categorize content on the web. The &lt;a href="http://sitereview.bluecoat.com/categories.jsp" target="_blank"&gt;set of possible categories&lt;/a&gt; is in a coded table in both C++ and java, but it is not chosen by engineers--product managers and executives debate about what's most useful to customers, and they periodically change their minds. If I had compilers that supported the behavior I'm advocating, I could tell my product management to email me a .xlsx whenever they make a change, and my reaction time would be minutes. And I could be certain that the C++ and java versions of the table were identical, since they used the same input data.
&lt;h3&gt;Getting fancy&lt;/h3&gt;
I can think of enhancements that would make such a mechanism even more powerful:
&lt;ul&gt;
	&lt;li&gt;Let tables be re-sorted during import.&lt;/li&gt;
	&lt;li&gt;Let tables be indexed by multiple fields.&lt;/li&gt;
	&lt;li&gt;Support joins, either during import or by making tables connectable at run-time. (Remember my problem where I had to connect whois country names and telephone dialing prefixes, with an ISO 639 country code as a common column?)&lt;/li&gt;
	&lt;li&gt;Allow columns that are populated by formula (evaluated at compile-time) instead of by an actual data value. Besides generating new or composite data, this would give us a way to normalize reliably.&lt;/li&gt;
	&lt;li&gt;Support assertions about imported data, to guarantee integrity.&lt;/li&gt;
	&lt;li&gt;In addition to supporting a rich set of input formats, allow a coder to write custom importers.&lt;/li&gt;
        &lt;li&gt;Let coders reorder or suppress columns during import.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Making it real&lt;/h3&gt;
As you might have guessed, &lt;em&gt;direct compilation of data from native formats&lt;/em&gt; is a feature of the &lt;code&gt;intent&lt;/code&gt; programming language I'm working on. But I think this technique might be implementable in some other programming languages, even without changes to a spec.

In java, you might be able to implement a custom class loader that generates bytecode for a table when given a .csv as the URL it should load from.

In python and perl, you could probably implement a class that generates dictionaries from a statement that looks quite similar to an &lt;code&gt;import&lt;/code&gt;.

In C++, you could use a custom build step and an external app to generate a table from a csv. A bit klunky, but usable.

You might even be able to write a SWIG module that would do this in a whole bunch of different languages, all in one go.

If any of you have great ideas (or implementations), please share them.</ns2:encoded>
  <ns0:post_id>5891</ns0:post_id>
  <ns0:post_date>2014-10-08 13:55:00</ns0:post_date>
  <ns0:post_name>a-better-way-to-put-data-in-code</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="better-programming-language">better programming language</category>
  <category domain="post_tag" nicename="columns">columns</category>
  <category domain="post_tag" nicename="csv">csv</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="fields">fields</category>
  <category domain="post_tag" nicename="formats">formats</category>
  <category domain="post_tag" nicename="import">import</category>
  <category domain="post_tag" nicename="process">process</category>
  <category domain="post_tag" nicename="product-management">product management</category>
  <category domain="post_tag" nicename="rows">rows</category>
  <category domain="post_tag" nicename="tables">tables</category>
  <category domain="post_tag" nicename="xml">xml</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/10152718633270912</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>https://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5925704743086206976&amp;type=U&amp;a=JXZx</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>10221</ns0:comment_id>
    <ns0:comment_author>Andy Lawrence</ns0:comment_author>
    <ns0:comment_author_email>andy3474@msn.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.didgetmaster.blogspot.com</ns0:comment_author_url>
    <ns0:comment_date>2014-10-13 10:03:56</ns0:comment_date>
    <ns0:comment_content>Obviously things would be much simpler if Didgets were ubiquitous like file systems and just about every program was written to use the Didget API for all persistent storage functions. (I can dream can't I?) But it really isn't that hard to import data into Didgets. Using our browser application, one can drop a simple CSV file on a definition and it will automatically generate a table and each column and import all the data. Using our API, a program can then interact with that table or with individual columns to extract out values according to search criteria (e.g. Fetch all country values that start with the letter 'Z' or Fetch all zipcodes between the numbers 85000 and 87500). All the code to handle the values is embedded in the library. A program could access lots of different kinds of Didgets with just a few lines of code. It wouldn't need to import the data into its own memory table and implement its own search functions in order to find a value or a set of values. I think the code in the browser which processes queries and displays all the results in a table format is only a couple hundred lines of code.

I am open to working with anyone who is interested in using the Didget technology. I have also thought about promoting my bitmap class used by the Didget Manager into its own Didget type. Bitmaps would thus become first class objects where any program can create and use its own set of bitmaps. Bitmaps could then be shared, protected, replicated, and synchronized across containers just like every other Didget.</ns0:comment_content>
    <ns0:comment_parent>10197</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>2043237756</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1413216236</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>10141</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2014-10-11 17:13:47</ns0:comment_date>
    <ns0:comment_content>Trev: I first gained an appreciation for the complexity behind tzdata when I had to implement timezone-aware date/time conversion for filesystems *without* any OS services or API at all (I was doing filesystem surgery in a rescue environment that barely had a kernel, let alone a "real" OS). So the example you cite is an interesting one to me.

What conclusion do you draw from the observation that a complex ecosystem to support data-sensitive code is often overkill? Should we live with flaky/incomplete/sometimes wrong captures of the data? Do you think being able to consume data in the simple way I describe will make things better, or will just encourage sloppiness?</ns0:comment_content>
    <ns0:comment_parent>10136</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>1983573274</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1413069228</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>10136</ns0:comment_id>
    <ns0:comment_author>trevharmon</ns0:comment_author>
    <ns0:comment_author_email>trevharmon@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2014-10-11 14:49:36</ns0:comment_date>
    <ns0:comment_content>The only example of this type of thing working really well that comes immediately to mind is tzdata, However, take a look at the Wikipedia article (http://en.wikipedia.org/wiki/Tz_database) to see what's taken to put that in place. And, this case, we don't interact with the data directly, but instead use the APIs. Building that type of structure does let us swap out data as necessary, but is overkill in many, many situations.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>44057411</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>1979555012</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1413060576</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>10197</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2014-10-12 22:37:26</ns0:comment_date>
    <ns0:comment_content>Andy: I think didgets shows a lot of promise. However, when you say in your final paragraph that didgets data would be in a usable format without importing it into some custom table, aren't you glossing over the effort that would be required to import it into didgets, and the code that would be required to call a didgets API? Or are you assuming a world where didgets has become pervasive and therefore transparent?

If I make any headway on the intent programming language, perhaps I could figure out a way to license didgets to ship with it... I am also interested in seeing if I can license some of your bitmap code (that's an area where few if any programming languages provide something out-of-the-box [vector is pretty weak], and it would be nice to ship a standard library that addressed such a need).</ns0:comment_content>
    <ns0:comment_parent>10188</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>2025746453</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1413175047</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>10188</ns0:comment_id>
    <ns0:comment_author>Andy Lawrence</ns0:comment_author>
    <ns0:comment_author_email>andy3474@msn.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://DidgetMaster.blogspot.com</ns0:comment_author_url>
    <ns0:comment_date>2014-10-12 20:18:28</ns0:comment_date>
    <ns0:comment_content>Daniel,

The problem you outlined is one of the main features I have been trying to solve with my Didget Management System. The "Database Table" Didgets and "Tag" Didgets do a lot of what you describe.

Files have traditionally been a great way to share unstructured data between programs. One program creates a file (.jpg, .xls, .csv, .doc, etc.) and another program can search for it within the directory hierarchy, read it in, and use it (or even add value to it if it has write permissions). The downside is that there are often multiple formats in which unstructured data can be stored, so all the programs sharing the data have to be on the same page with regard to data formats.

Structured data, on the other hand, has not been so easy to create and share. Ideally, you want to be able to download tables, columns, or entire databases from the internet and have a dozen or more programs access one or more elements without needing to: 1) Install and run a RDBMS. 2) Set it up with the proper schema. 3) Import all the data. and 4) require the programs to figure out how to access the database. Stuff like ODBC drivers can help, but it still takes a lot of work just to create and share a simple key/value store of things like the country codes and dialing prefixes you described.

Tag Didgets were designed to make this super easy. Using them, you can create or download a table with 3 or 4 (or 100) columns defined. The table is a just list of all the columns it contains. Each column is a separate key/value store pre-populated with values. Any program can read values from one or more columns as easy as it can open a file and read in the data.

A program can discover Tags in the system as easy as it is to find all the photos. Versioning will make it so you can quickly check for updates from a server. If your local table is 2 versions behind the current one at an update URL then simply download the new version and start using it. (Kind of like doing a "git pull" from a code repository). If the new version has added, changed, or deleted columns then you don't have to redo your schema or fix up a database. Your program can still interact with it.

The beauty is that the structured data is already in a usable format that multiple programs can use without "importing" it into some custom table. The program doesn't have to figure out how to parse some CSV, XML, or Json file or perform all kinds of integrity checks on the data to validate it.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>2022735547</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1413166710</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>10047</ns0:comment_id>
    <ns0:comment_author>davidrea</ns0:comment_author>
    <ns0:comment_author_email>dave@daverea.com</ns0:comment_author_email>
    <ns0:comment_date>2014-10-09 05:45:25</ns0:comment_date>
    <ns0:comment_content>This is a particularly-tricky problem in embedded systems, where there can often be multiple processors that must "agree" on the meaning and significance of keyed data. Enums are a favorite mechanism, but give rise to synchronization issues when processor firmware versions evolve asynchronously (or when embedded systems must interact with the outside world; i.e. through PCs, mobile devices, IoT interfaces, etc.) - still working on a solution here!</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>5330425</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>1895325162</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1412855126</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>10048</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2014-10-09 07:17:55</ns0:comment_date>
    <ns0:comment_content>Embedded systems isn't an area where I have deep expertise; thanks for adding that dimension to the discussion. I think the Internet of Things is going to make this sort of environment more and more a part of the experience of the average developer--and it's going to make this versioning/evolution problem even more pressing.</ns0:comment_content>
    <ns0:comment_parent>10047</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>1897746623</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1412860676</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>10020</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2014-10-08 15:14:07</ns0:comment_date>
    <ns0:comment_content>Laurent: Thanks for the insightful comment. I agree that versioning is a tricky question. Data does evolve. On another project that I recently did, I had to ingest large numbers of records. I barely finished the ingesting code when the data provider decided to add new columns to the data. It was frustrating.

I don't know of any silver bullet that makes the continuous delivery challenge go away, but I'm interested in learning about things that my smart friends have done. I guess with unicode, change happens seldom enough that it's not a problem--but how have you solved that issue in other scenarios?</ns0:comment_content>
    <ns0:comment_parent>10019</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>1873394670</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1412802847</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>10022</ns0:comment_id>
    <ns0:comment_author>laurentcaillette</ns0:comment_author>
    <ns0:comment_author_email>laurent.caillette@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2014-10-08 15:36:47</ns0:comment_date>
    <ns0:comment_content>I'm currently working on a financial application, which describes a few hundreds of built-in financial products. The buisness analyst is truly editing Java code to create new products. I can ship a fresh version in less than 15 minutes, and restarting the server at the end of the day causes the new products to go live. Of coures some buisness contexts don't allow that.

But this shows that the line between code, data, and configuration is somewhat blurry. There are so many applications with complex scripts that live outside a version control system. Users love configuration over standard programming, because the delivery system takes too much time for them. But configuration bugs are as nasty as others. (In fact they are worse because there are no real tools to track them.)

I've some ideas about an event-sourcing application that makes code, configuration and data flow through the same pipeline, with ability to backtest code and configuration changes. 

I described it here (Google translate is your friend. Among various horrors, it says "application heart" where I would write "application core", but it looks readable otherwise.)

https://groups.google.com/forum/#!msg/techos/h74Se445O3g/0z7bqNfVX5IJ
https://groups.google.com/forum/#!msg/techos/ZR40eFy0xaA/uFLX9YVuySAJ
https://groups.google.com/forum/#!msg/techos/4wjoo2a_0K0/VfNs1Fm4eAwJ</ns0:comment_content>
    <ns0:comment_parent>10020</ns0:comment_parent>
    <ns0:comment_user_id>33943901</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>1874260138</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1412804753</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>10023</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2014-10-08 16:08:45</ns0:comment_date>
    <ns0:comment_content>I went and read your posts on the techos forum. Very interesting. LMAX sounds like a fabulous design. I recently built a system that has a lot of conceptual overlap; it uses the Event Sourcing pattern that Martin Fowler described (and that you referenced) to capture the evolving state of a supercomputer cluster over time. See http://j.mp/1ndmah4. But I don't think I did it quite as well as the LMAX system does.

Your insight that configuration changes can be represented by messages, the same as any other event, is awesome.</ns0:comment_content>
    <ns0:comment_parent>10022</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>1874868438</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1412806126</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>10024</ns0:comment_id>
    <ns0:comment_author>laurentcaillette</ns0:comment_author>
    <ns0:comment_author_email>laurent.caillette@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2014-10-08 16:10:32</ns0:comment_date>
    <ns0:comment_content>Thank you!</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>33943901</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>1874915336</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1412806235</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>10019</ns0:comment_id>
    <ns0:comment_author>Laurent Caillette</ns0:comment_author>
    <ns0:comment_author_email>laurent.caillette@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2014-10-08 14:53:17</ns0:comment_date>
    <ns0:comment_content>Hi Daniel,

I think I understand what you mean. I wrote something to read an indexed table of Unicode characters:
https://github.com/caillette/novelang/tree/master/modules/unicode-generator-plugin/src/main/java/org/novelang/build/unicode
https://github.com/caillette/novelang/tree/master/modules/unicode-reader/src/main/java/org/novelang/parser/unicode

Reading tables makes the world feel more annoying than it should be. In the example above, first I scanned the bundled 1.2-MB file the first time I was looking for the official name of an Unicode character. But there was such a slowdown when using the debugger that it drove me crazy and I decided generate an indexed file.

This was boring, but not so hard. I should consider myself happy because the Unicode standard doesn't evolve a lot.

"Evolution" is the keyword. We already have all kind of useful parsers, CSV importers, XLS readers to do the job. The real problem is, what happens when the data we are generating code from does evolve? Compiler might tell us. We could have tests doing clever checks. But the underlying looks like a versioning problem. Or, more broadly, a continuous delivery problem.

You probably met those big projects with some business analyst carefully spoonfeeding databases with reference data, that we ship later as database dumps. Should they switch to git and Maven? I think so.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>1873304784</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1412802644</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1412801599</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
</item>
<item>
  <title>Variadic macros tricks</title>
  <link>http://codecraft.co/2014/11/25/variadic-macros-tricks/</link>
  <pubDate>Tue, 25 Nov 2014 18:48:53 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5919</guid>
  <ns2:encoded>Have you ever wanted to write a "for each" loop over all the args of a variadic macro? Or have you ever wanted to overload a macro on the number of arguments? (If you're saying to yourself, "good grief, why?" -- I'll describe a use case at the bottom of this post.)

I learned how to do this today, and I wanted to blog about it to cement the technique in my own mind. (And I hereby put all the code I show here into the public domain.)

[caption id="" align="aligncenter" width="404"]&lt;a href="http://xkcd.com/1319/"&gt;&lt;img class="" src="http://imgs.xkcd.com/comics/automation.png" width="404" height="408"&gt;&lt;/a&gt; What happened when I decided to learn this technique. I'm trying to spare you... :-) Image credit: xkcd.com[/caption]
&lt;h3&gt;Simple variadic macros&lt;/h3&gt;
The first piece of magic you need to do something like this is &lt;code&gt;__VA_ARGS__&lt;/code&gt;. This allows you to write macros that take an arbitrary number of arguments, using &lt;code&gt;...&lt;/code&gt; to represent the macro's parameters:

https://gist.github.com/dhh1128/4f2e50c5aa23589ad4ad

Nice. &lt;code&gt;__VA_ARGS__&lt;/code&gt; is a standard feature of C99, and I've known about it for a long time. I've also known about GCC (and Clang's) extension, which attaches special meaning to &lt;code&gt;##__VA_ARGS__&lt;/code&gt; if it's preceded by a comma--it removes the comma if &lt;code&gt;##__VA_ARGS__&lt;/code&gt; expands to nothing. If I change my macro definition to:

https://gist.github.com/dhh1128/a0972d8750c3d57f4c0a004dd04a5416

...I can now call &lt;code&gt;eprintf("hello, world");&lt;/code&gt; without a complaint from the compiler.
&lt;h3&gt;But it's not enough&lt;/h3&gt;
That doesn't let me do a "for each" loop, though. All the args that I pass are expanded, but I can't do anything with them, individually. I have no names for my macro's parameters--just the anonymous &lt;em&gt;...&lt;/em&gt;.

I went poking around, not expecting to find a solution, but I was pleasantly surprised.

&lt;!--more--&gt;
&lt;h3&gt;The "paired, sliding arg list" trick&lt;/h3&gt;
The next building block we need is a technique that uses two complementary macros plus &lt;code&gt;__VA_ARGS__&lt;/code&gt; to select something specific out of a macro arg list of unknown size. I found it in an &lt;a href="http://stackoverflow.com/a/11763277" target="_blank" rel="noopener"&gt;answer on stackoverflow.com&lt;/a&gt;, and you can parse it all out directly from there, but the magic's a little opaque. Here's an explanation that takes it one step at a time:

https://gist.github.com/dhh1128/62770dd17c6632cf0abe

See how it works? The first macro, &lt;code&gt;_GET_NTH_ARG()&lt;/code&gt;, takes any number of args &amp;gt;= &lt;em&gt;N&lt;/em&gt;, but always returns item &lt;em&gt;N&lt;/em&gt; (in this case, &lt;em&gt;N&lt;/em&gt;=5). The second macro, &lt;code&gt;COUNT_VARARGS(...)&lt;/code&gt;, takes an arbitrary number of args &amp;lt; &lt;em&gt;N&lt;/em&gt;, pads with candidate values it wants to extract, and uses its args to call &lt;code&gt;_GET_NTH_ARG()&lt;/code&gt; in a way that puts the right candidate value in the known &lt;em&gt;N&lt;/em&gt; position. In this case, the meaningful piece of info that we want in position &lt;em&gt;N&lt;/em&gt; is an arg count; we've provided the values &lt;code&gt;4, 3, 2, 1&lt;/code&gt; as candidate values, and one of those values will be in position &lt;em&gt;N&lt;/em&gt; on expansion.

Tweaking this macro pair to handle a different &lt;em&gt;N&lt;/em&gt; is a matter of adjusting what comes before &lt;em&gt;N&lt;/em&gt; in the first macro, and what comes after &lt;code&gt;__VA_ARGS__&lt;/code&gt; in the second macro. I'll leave that as an exercise for the reader. :-)

We don't have to select a numeric count with this technique; we could use it to select arg names with the &lt;code&gt;#&lt;/code&gt; operator, or even other macros. This will come in handy in a moment. But first, let's address one shortcoming: &lt;code&gt;COUNT_VARARGS(...)&lt;/code&gt; doesn't handle the case of zero args. Here's the fix:

https://gist.github.com/dhh1128/0cf088f4f681f619b051
&lt;h3&gt;Macro overrides&lt;/h3&gt;
Now, we can build on this to define a variadic macro that has an expansion overridden by how many args it receives. This is what the original stackoverflow answer did. Something like this:

https://gist.github.com/dhh1128/36bc220b10f6dafefa33

Now we're getting close to being able to code a "for each" loop over all the args to a variadic macro. If the macro that gets overridden has a "for each" flavor, it all comes together:

https://gist.github.com/dhh1128/d1dd24b492819c65f1e1
&lt;h3&gt;Okay, but why?&lt;/h3&gt;
I said I'd provide some explanation of why this technique could be useful. In general, I am not a fan of macros rewriting the syntax of a programming language; that can obscure what's really happening, and make for a steeper learning curve.

On the other hand, sometimes they are really helpful. They can make code much less verbose/repetitive by eliminating noise and boilerplate. Occasionally, I run into cases where that tradeoff seems worth it to me.

More importantly, macros have a property that you can't get any other way--the same fragment of code can have multiple meanings, and can maintain this semantic parallelism without being susceptible to human memory errors, laziness, or misunderstanding. I have previously blogged about how valuable this can be in &lt;a title="How Enums Spread Disease — And How To Cure It" href="http://codecraft.co/2012/10/29/how-enums-spread-disease-and-how-to-cure-it/"&gt;eliminating encapuslation problems with enums&lt;/a&gt;, but I recently found another need for it. In &lt;a title="On bread recipes, maps, and intentions" href="http://codecraft.co/2013/10/24/on-bread-recipes-maps-and-intentions/"&gt;my project to create a new programming language&lt;/a&gt;, I have to create some foundation packages and classes -- the analog to &lt;code&gt;java.lang&lt;/code&gt; in java, or &lt;code&gt;System&lt;/code&gt; and &lt;code&gt;My&lt;/code&gt; in .NET. This foundation needs to written in C/C++ to avoid a chicken-and-egg problem. That means I need some way to use namespaces, classes, and other C++ constructs in the source code, but also generate package and class constructs visible to my &lt;code&gt;intent&lt;/code&gt; compiler. Macros were an obvious answer.

The only problem was that some of my macros needed to be variadic--and I needed for-each-style semantics. Hence my research. :-)

How about you? Have you ever had a need for something like this?</ns2:encoded>
  <ns0:post_id>5919</ns0:post_id>
  <ns0:post_date>2014-11-25 11:48:53</ns0:post_date>
  <ns0:post_name>variadic-macros-tricks</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="better-programming-language">better programming language</category>
  <category domain="post_tag" nicename="macros">macros</category>
  <category domain="post_tag" nicename="namespaces">namespaces</category>
  <category domain="category" nicename="tips-and-tricks">Tips and Tricks</category>
  <category domain="post_tag" nicename="tricks">tricks</category>
  <category domain="post_tag" nicename="variadic">variadic</category>
  <category domain="post_tag" nicename="__va_args__">__VA_ARGS__</category>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_job_id</ns0:meta_key>
    <ns0:meta_value>14203400947</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/10152826140185912</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>https://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5943082722338562048&amp;type=U&amp;a=kn1D</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>18664</ns0:comment_id>
    <ns0:comment_author>cormacc</ns0:comment_author>
    <ns0:comment_author_email>cormacc@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>https://github.com/cormacc/va_args_iterators</ns0:comment_author_url>
    <ns0:comment_date>2018-03-26 05:40:19</ns0:comment_date>
    <ns0:comment_content>Hi Daniel,
I found this recursive implementation useful in some mocking/unit testing work -- thanks! Wrapped it and some extensions in a ruby generator script for an arbitrary number of arguments here  if it's of any use to anyone else:
https://github.com/cormacc/va_args_iterators</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1522064421</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>12987</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2015-01-05 18:57:03</ns0:comment_date>
    <ns0:comment_content>Jason: I've run into boost.preprocessor a few times, but I haven't used it much. Shame on me! Thanks for reminding me to learn about it.

When I run into a programming problem that I don't know how to solve, I often like to write my own solution--not so much because I want to *use* my own solution, as because I want to learn what it takes to solve the problem. Once I've solved it to my own satisfaction (and, sometimes, written about it so I understand how it works well), then I can appreciate a more elegant or general solution, and chuck my own. I'll have to look into boost.preprocessor to see if it solves the problem I was seeing in the intent codebase; if so, I'll gladly switch over, since I'm already using boost a fair amount.</ns0:comment_content>
    <ns0:comment_parent>12985</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1420509424</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>12985</ns0:comment_id>
    <ns0:comment_author>Jason Ivey</ns0:comment_author>
    <ns0:comment_author_email>jasonivey@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://nobodyishere0.wordpress.com</ns0:comment_author_url>
    <ns0:comment_date>2015-01-05 18:23:11</ns0:comment_date>
    <ns0:comment_content>I love the preprocessor for exactly this kind of work.  Although macros get a bad name these days, the preprocessor itself is still a powerful and wonderful tool when used for the problems you described.  

What I've discovered recently as I have been writing custom macros is that many, if not all, of the underlying code I invent is already written in the boost.preprocessor library.  I'm not sure if it has an identical solution to what you have created above but I know it has a macro to convert the var_args to a count and list. (BOOST_PP_VARIADIC_TO_LIST)

I was also pleased to discover that they have the mechanics to quickly implement my favorite preprocessor pattern you taught me years ago, the enum-declaration-via-include-file.  (BOOST_PP_ITERATION)

In my opinion, the boost.preprocessor library documentation leaves a little to be desired in terms of examples and descriptions.  But there is a lot there to work with.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>24240119</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1420507391</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>18515</ns0:comment_id>
    <ns0:comment_author>Mattias</ns0:comment_author>
    <ns0:comment_author_email>mattias.eppler@groz-beckert.com</ns0:comment_author_email>
    <ns0:comment_date>2017-12-14 05:44:02</ns0:comment_date>
    <ns0:comment_content>Hi. I try the example "macros_overridden_by_arg_count" but I get the warning "not enoug parameter for macro '_GET_OVERRIDE'</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1513255443</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>20691</ns0:comment_id>
    <ns0:comment_author>metablaster</ns0:comment_author>
    <ns0:comment_author_email>zebal@protonmail.ch</ns0:comment_author_email>
    <ns0:comment_date>2019-10-04 13:53:31</ns0:comment_date>
    <ns0:comment_content>Hi Daniel, thank you a lot for these macro hacks which are awesome, I knew all of them except the "for each" macro, it doesn't work in MSVC out of the box, here is a trick for those who want to make it work!

#define EXPAND(x) x

#define _GET_NTH_ARG(_1, _2, _3, _4, N, ...) N

#define _fe_0(_call, ...)
#define _fe_1(_call, x) _call(x)
#define _fe_2(_call, x, ...) _call(x) _fe_1(_call, __VA_ARGS__)
#define _fe_3(_call, x, ...) _call(x) EXPAND(_fe_2(_call, __VA_ARGS__))
#define _fe_4(_call, x, ...) _call(x) EXPAND(_fe_3(_call, __VA_ARGS__))

#define CALL_MACRO_X_FOR_EACH(x, ...) \
	EXPAND(_GET_NTH_ARG(__VA_ARGS__, _fe_4, _fe_3, _fe_2, _fe_1, _fe_0)(x, __VA_ARGS__))

#define FWD_DECLARE_CLASS(cls) class cls;

void test()
{
	CALL_MACRO_X_FOR_EACH(FWD_DECLARE_CLASS, Foo, Bar, Baz, Fubar);
}</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>172824332</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1570218812</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>20692</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2019-10-04 15:31:27</ns0:comment_date>
    <ns0:comment_content>Thanks for improving this content! I really appreciate the note about MSVC.</ns0:comment_content>
    <ns0:comment_parent>20691</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>35999520207</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1570224687</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>21231</ns0:comment_id>
    <ns0:comment_author>Dave MacLachlan</ns0:comment_author>
    <ns0:comment_author_email>dmaclach@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2020-07-29 09:41:39</ns0:comment_date>
    <ns0:comment_content>Thanks so much for the article. Just an FYI that you have a typo in your second `eprintf` block. I think you want `#__VA_ARGS__` as opposed to `#__VA_ARGS`</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>47124840815</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1596037301</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>20682</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2019-10-02 07:03:03</ns0:comment_date>
    <ns0:comment_content>Thank you! I think I ran my code through a version of MSVC at one point, but I've long since let any insight about it grow stale, so this is a great help. I appreciate the improvement.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1570021384</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>18424</ns0:comment_id>
    <ns0:comment_author>Franz G</ns0:comment_author>
    <ns0:comment_author_email>f.grossweiner@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2017-10-25 10:01:29</ns0:comment_date>
    <ns0:comment_content>"Use Boost" doesn't make for compelling blog posts ;)</ns0:comment_content>
    <ns0:comment_parent>12985</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1508947293</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>20681</ns0:comment_id>
    <ns0:comment_author>Rune Paamand</ns0:comment_author>
    <ns0:comment_author_email>rune@paamand.eu</ns0:comment_author_email>
    <ns0:comment_date>2019-10-01 01:35:40</ns0:comment_date>
    <ns0:comment_content>Mind that your examples will not work on MSVC where the variadic macro does not expand. You need an expansion step to achieve the `COUNT_VARARGS`:

// Count how many args are in a variadic macro. Only works for up to N-1 args.
#define RETURN_ARG_COUNT(_1, _2, _3, _4, N, ...) N
#define EXPAND_ARGS(args) args
// Notice double parenthesis for expansion single to var arguments
#define COUNT_VARARGS(...) RETURN_ARG_COUNT EXPAND_ARGS((__VA_ARGS__, 4, 3, 2, 1, 0))</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1569915343</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>21329</ns0:comment_id>
    <ns0:comment_author>为什么我的可变参数宏不能正确接受参数？ &amp;#8211; FIXBBS</ns0:comment_author>
    <ns0:comment_author_url>http://www.fixbbs.com/a/0940367.html</ns0:comment_author_url>
    <ns0:comment_date>2020-09-09 08:10:27</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] https://codecraft.co/2014/11/25/variadic-macros-tricks/ [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>21246</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2020-08-04 08:43:14</ns0:comment_date>
    <ns0:comment_content>Thanks, Dave, for the comment and for the catch on the typo. I've updated the gist.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>47339270137</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1596552194</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
</item>
<item>
  <title>A More Important Manifesto</title>
  <link>http://codecraft.co/2015/01/05/a-more-important-manifesto/</link>
  <pubDate>Mon, 05 Jan 2015 15:36:34 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5933</guid>
  <ns2:encoded>A couple years ago, I &lt;a title="Manifestos" href="http://codecraft.co/2012/09/13/manifestos/"&gt;wrote&lt;/a&gt; about signing the Agile Manifesto and the Manifesto for Software Craftsmanship.

Today I want to write about something a lot more important.

Let me use résumés to provide some context.

I used to think that the "Objective" section of a résumé was fluff--a place to dump vague platitudes, maybe. You know the stuff I'm talking about:
&lt;blockquote&gt;&lt;strong&gt;Objective&lt;/strong&gt;: Craft high-quality, enterprise software in an environment where I can make significant contributions to the bottom line of a growing company.&lt;/blockquote&gt;
Blah, blah, blah.

Theoretically, this stuff helps you get jobs, but as someone who writes a lot, my drivel-o-meter pegs at such verbiage. Usually, it means about as much as the &lt;a href="http://projects.wsj.com/buzzwords2014/" target="_blank"&gt;Business Buzzwords Generator recently posted by the Wall Street Journal&lt;/a&gt;.

[caption id="" align="aligncenter" width="500"]&lt;a href="https://www.flickr.com/photos/mobilestreetlife/6922749580/sizes/m/"&gt;&lt;img class="" src="https://farm8.staticflickr.com/7256/6922749580_c17ac1b67d.jpg" alt="" width="500" height="411" /&gt;&lt;/a&gt; image credit: David Blackwell (Flickr)[/caption]

But it doesn't have to be that way.

Your objectives ought to matter.

&lt;!--more--&gt;

Last year, I spent a lot of time pondering what makes me tick, as an engineer, an employee, and a company leader. A lot of it grew out of &lt;a title="Why" href="http://codecraft.co/2013/01/30/why/"&gt;my exposure&lt;/a&gt; to Simon Sinek's TED talk, &lt;a href="http://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action?language=en" target="_blank"&gt;"Start with Why"&lt;/a&gt;, and my readings in &lt;em&gt;Conscious Capitalism&lt;/em&gt;. (Shoutout to &lt;a href="http://dld.me" target="_blank"&gt;@trev_harmon&lt;/a&gt; for a fountain of interesting ideas, and generous discussions about them.)

One consequence of my ponderings was that I re-wrote the "Objective" section on my résumé. Here's what it said, hot off the presses, when I responded to a Google recruiter who came calling:
&lt;blockquote&gt;I long to transmute complex software and data into insight engines that make the world better. Sign me up for awesome--not easy, mediocre, or unimpactful.&lt;/blockquote&gt;
Looking at it now, "long" seems a bit melodramatic. But hey--it's accurate! I ended up deciding it wasn't the right time to move, and suspending the conversation with Google. But I used that revision of the résumé with other recruiters who reached out, for many months.

Amazon pinged me again during this stretch. I'd flown out to Seattle a couple years before, fallen in love with the area, loved the technical problems they wanted me to work on, and received a formal offer--but I felt some dissonance and said no.

This time, I was restless, and I had a pretty good idea of the package they might offer. This time, they wanted me to work on their streaming video service, which is cutting-edge stuff. My first impulse was to revive the conversation. But as I went to send them an updated résumé, I thought about that "Objective" line. Did this opportunity match?

Did I really believe what I'd written?

I politely declined. I get a lot of entertainment online, and I think it's fun--but most fare nowadays is pretty far removed from "make the world a better place." Coolness alone wasn't enough.

I turned down a gig working on the AI and rendering technology in a gaming engine for the same reason.

Another recruiter set up an interview at a local company. They needed an architect to help design and deliver a linux-based appliance that filters network traffic, keeping bad guys out and desktops pornography-free. I thought that maybe, just maybe, I could feel like I was doing something genuinely good for the world on that sort of project, so I got on the phone.

The manager asked me about my objective. Didn't I think it was a bit idealistic? He hinted that perhaps I presumed too much, expecting an employer to meet that lofty standard.

I didn't speak to him again.

Of course I was being idealistic. I get &lt;a title="Earned Pragmatism" href="http://codecraft.co/2013/01/18/earned-pragmatism/"&gt;the need for pragmatism&lt;/a&gt;. I don't think everybody needs to be an idealist about their career; just loving your job and doing it with passion and professionalism can make the world a better place, in the right circumstances. Yet I also knew I wouldn't be happy working for a boss who thinks idealism and business are incompatible.

Which brings me back to the manifesto.

My friend Trev Harmon recently put some wonderful ideas into words, and he called them the &lt;a title="Conscious Business Ethics Manifesto" href="http://trevharmon.com/standard-of-business/" target="_blank"&gt;"Conscious Business Ethics Manifesto"&lt;/a&gt;. It's a synthesis of the principles that I first heard him advocate over lunches and around conference tables as I rewrote my resume, and I commend it to you. Among other things, it espouses the idea that we need to add true value to the world when we sell a product or service, that we need to be honest in intent as well as in technicality, and that we need to find a way to keep money, profit, and egos in their proper place. Business is not separable from the rest of life, and hopefully we all value other people, and our relationships to them, more than we value a quick buck or technical dazzle.

It also highlights the freedom that each of us has to choose how we'll approach our careers. We don't have to wait for the right boss, or the right company. As Seth Godin would say, we can &lt;a href="http://sethgodin.typepad.com/seths_blog/2011/03/reject-the-tyranny-of-being-picked-pick-yourself.html" target="_blank"&gt;pick ourselves&lt;/a&gt; instead of waiting for someone to grace us with a perfect opportunity.

The manifesto articulates many of the feelings that drove me to change the objective on my resume, and I signed it as soon as Trev put it up. I've printed a copy and displayed it at my desk.

As I said before, the idealism I put into my résumé may not be for everyone--but I think the straightforward goodness in Trev's manifesto always applies.

I hope you'll read, &lt;a title="Sign the Conscious Business Ethics Manifesto" href="http://trevharmon.com/conscious-business-ethics/sign-the-manifesto/" target="_blank"&gt;sign&lt;/a&gt;, and talk up the manifesto as well.

Let's promote some awesomeness together.</ns2:encoded>
  <ns0:post_id>5933</ns0:post_id>
  <ns0:post_date>2015-01-05 08:36:34</ns0:post_date>
  <ns0:post_name>a-more-important-manifesto</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="boss">boss</category>
  <category domain="post_tag" nicename="business">business</category>
  <category domain="post_tag" nicename="choice">choice</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="ethics">ethics</category>
  <category domain="post_tag" nicename="freedom">freedom</category>
  <category domain="post_tag" nicename="goals">goals</category>
  <category domain="post_tag" nicename="idealism">idealism</category>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <category domain="post_tag" nicename="job-interviews">job interviews</category>
  <category domain="post_tag" nicename="manifesto">manifesto</category>
  <category domain="post_tag" nicename="objectives">objectives</category>
  <category domain="post_tag" nicename="pragmatism">pragmatism</category>
  <category domain="post_tag" nicename="resume">resume</category>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>https://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5957893021688160256&amp;type=U&amp;a=w5zo</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/10152944007105912</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>13047</ns0:comment_id>
    <ns0:comment_author>trevharmon</ns0:comment_author>
    <ns0:comment_author_email>trevharmon@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2015-01-07 22:09:39</ns0:comment_date>
    <ns0:comment_content>Daniel,
I really want to thank you for all of the support (and the shout-outs). I very much enjoyed those talks that we had. They helped me clarify and refine my thinking in so many ways. I'm very grateful to have you as a friend. To everyone else, please join us!
- Trev</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>44057411</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1420693780</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>13231</ns0:comment_id>
    <ns0:comment_author>craiglaurence</ns0:comment_author>
    <ns0:comment_author_email>craig@craiglaurence.com</ns0:comment_author_email>
    <ns0:comment_date>2015-01-14 12:08:14</ns0:comment_date>
    <ns0:comment_content>Brilliant.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1421262495</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
</item>
<item>
  <title>Know Your Limits</title>
  <link>http://codecraft.co/2015/02/05/know-your-limits/</link>
  <pubDate>Thu, 05 Feb 2015 15:45:23 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=5983</guid>
  <ns2:encoded>I just finished the nastiest debugging experience of my career--nearly 3 weeks on a single bug. After days and days of staring at code, swearing at core dumps, tailing logs, connecting to gdbserver via a multi-hop ssh tunnel from inside a secure environment, and general programmer misery, I felt like doing cartwheels when I finally figured it out, tweaked a few lines of code, and observed stability again.

Hindsight teaches me this lesson: &lt;em style="color:#706;"&gt;undocumented, unhandled constraints waste enormous amounts of time and energy&lt;/em&gt;. If you're interested in writing good code, you must know your limits, and you must communicate them. This especially matters when the constraints are obscure or surprising.

[caption id="" align="aligncenter" width="500"]&lt;a href="https://www.flickr.com/photos/ericdege/3137178654/sizes/l/"&gt;&lt;img class="" src="https://farm4.staticflickr.com/3084/3137178654_0796758be3.jpg" alt="" width="500" height="313" /&gt;&lt;/a&gt; image credit: ericdege (Flickr)[/caption]
&lt;h3&gt;Naive optimism&lt;/h3&gt;
My bug seemed simple enough at first blush:&lt;!--more--&gt; I was seeing crashes in a daemon that uses machine learning to classify internet traffic. I'd just rewritten the app's DNS subsystem to increase throughput, and the crashes often happened in my new event-processing loop. The loop fired off callbacks to service sockets as they became unblocked; I assumed I had some kind of off-by-one error in my sockets array, or maybe I wasn't cleaning up sockets consistently.

No such luck.

The more I dug, the deeper the mystery grew. Sometimes I got core dumps, sometimes I didn't. Sometimes I got a &lt;code&gt;SIGSEGV&lt;/code&gt;, sometimes not. Sometimes my core dumps were usable, sometimes they were corrupted. The values displayed in the debugger when I analyzed a core dump didn't make sense. The exact site of the crash seemed to vary. I began to suspect that a heap or stack corruption at an unrelated, innocent-looking, "stable" place in the code might be crashing DNS because it's so heavily threaded and high-performance.

I ran valgrind. I ran a specially instrumented &lt;a href="http://clang.llvm.org/docs/AddressSanitizer.html" target="_blank"&gt;Clang address sanitizer&lt;/a&gt; build. They yielded lots of noise, but no consistent smoking gun.
&lt;h3&gt;Who knew?&lt;/h3&gt;
After a few days of semi-informed guesswork, I finally got methodical. I started tracking my theories and disproving each of them with a series of experiments. This revealed layers of undocumented, lurking problems that cloaked the real issue. Each is a place where an engineer failed to communicate or plan around a constraint:
&lt;ol&gt;
	&lt;li&gt;I suspected that the bind server I was calling to do DNS resolution might be experiencing brown-outs, and that the resulting backlog of pending DNS requests might be a trigger for my crash. I had to dig around for a while to see what kind of timeouts DNS used, because &lt;em&gt;most DNS documentation doesn't consider this to be worth mentioning!&lt;/em&gt; Wanna guess? 5 seconds. And you have to multiply that by 2 or 3, since DNS is usually UDP-based and uses retries to compensate. Since my daemon needed to respond within a couple seconds, and since it gets tens to hundreds of queries per second, having a 15-second DNS timeout was a real problem... Fortunately, the DNS library I was using, &lt;a href="http://c-ares.haxx.se" target="cares"&gt;c-ares&lt;/a&gt;, lets you &lt;a href="http://c-ares.haxx.se/ares_init.html" target="cares"&gt;customize both the timeouts and the retries&lt;/a&gt;, so I worked past this.&lt;/li&gt;
	&lt;li&gt;Since I wasn't always getting a core dump, I wondered whether the signal causing the abend might be inconsistent. It turned out that the daemon installed handlers for a few signals, but not all, and it didn't report which signal triggered the crash. Getting disciplined about signal handling eliminated the confusion caused at this layer.&lt;/li&gt;
	&lt;li&gt;The app had configurable limits on max sockets and max threads, but it didn't seem to follow them reliably; it took me a while to realize that it was ignoring interactions with hard and soft resource limits imposed by the OS (see the &lt;a href="http://linux.die.net/man/2/getrlimit" target="_blank"&gt;&lt;code&gt;getrlimit()&lt;/code&gt;&lt;/a&gt; posix API).&lt;/li&gt;
	&lt;li&gt;The app used the &lt;code&gt;select()&lt;/code&gt; posix API to discover which sockets became ready or timed out. But it turns out that &lt;code&gt;select()&lt;/code&gt; blows up if you are monitoring more than &lt;code&gt;FD_SETSIZE&lt;/code&gt; (=1024) sockets, although none of the example usages showed that, and the &lt;a href="http://linux.die.net/man/2/select" target="_blank"&gt;man page for &lt;code&gt;select()&lt;/code&gt;&lt;/a&gt; only mentions it in a cryptic aside. I had to stumble upon this particular wisdom via google and &lt;a href="http://stackoverflow.com/questions/7976388/increasing-limit-of-fd-setsize-and-select" target="_blank"&gt;stackoverflow&lt;/a&gt;. (Even after I capped open sockets safely below this limit, I had a performance problem because &lt;code&gt;select()&lt;/code&gt; scans linearly across as many sockets as you have open; I need to switch to &lt;code&gt;epoll()&lt;/code&gt; asap...)&lt;/li&gt;
	&lt;li&gt;The c-ares library is all about asynchronous resolution with lots of overlapping, parallelized I/O on many sockets. It's great code, and I appreciate the generosity that made it open-source. It provides a &lt;code&gt;channel&lt;/code&gt; construct to manage many pending requests, and users such as the curl dev team cite examples of thousands of pending requests. However, I learned after much pain that 16 pending requests per channel is what c-ares was designed for, and one request per channel is more standard; you can scale super-high, but only by using many channels. It took &lt;a href="http://c-ares.haxx.se/mail/c-ares-archive-2015-01/0004.shtml" target="cares"&gt;an email exchange with the author&lt;/a&gt; to discover this &lt;a title="Taming Side Agreements" href="http://codecraft.co/2014/10/28/taming-side-agreements/"&gt;informal side agreement&lt;/a&gt; in the API.&lt;/li&gt;
	&lt;li&gt;During spikes in traffic to the app, if the open socket count exceeded the OS's soft limit but not the limit in the config file, it was possible to get in a state where we couldn't bind an incoming socket to return an http &lt;code&gt;503 Server Busy&lt;/code&gt; status to the client. This made it difficult to decide whether a traffic spike was a trigger for our problem, since we were identifying spikes by looking for 503 errors. I fixed this problem by reserving some sockets for returning errors.&lt;/li&gt;
	&lt;li&gt;To make matters worse, when a socket failed to bind for this reason, some very low-level code (possibly in the kernel's underlying TCP/IP stack) issued a retry... over and over again. I was seeing logs flood with over 200k retry attempts per second in this unusual state. I had to fix this by &lt;a title="Why Your Software Should Cry" href="http://codecraft.co/2013/05/06/why-your-software-should-cry/"&gt;sensing the pain of a retry storm&lt;/a&gt; and tripping a &lt;a title="Don’t forget the circuit breakers" href="http://codecraft.co/2013/01/11/dont-forget-the-circuit-breakers/"&gt;circuit breaker&lt;/a&gt; to keep the logs moderately quiet.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;The rest of the story&lt;/h3&gt;
Eventually I waded through all these layers of undocumented, improperly handled constraints on program behavior, and my app was still crashing, still unpredictable. In desperation, I downloaded the source for c-ares, built it with debug symbols, captured a stack trace, and analyzed the code path. I discovered to my surprise that nowhere was the channel parameter mutexed in the call graph of &lt;code&gt;ares_gethostbyname()&lt;/code&gt;. This triggered some more targeted googling than I had previously managed, and I found an &lt;a href="http://c-ares.haxx.se/mail/c-ares-archive-2008-05/0039.shtml" target="cares"&gt;email thread from 2008&lt;/a&gt; where the author of the library clarifies the undocumented mutexing rules. A light went on; 5 minutes later I had fixed the bug.

I feel a little silly; the library code is solid and reasonable, and the need for this particular mutex should have occurred to me long before. But in my defense, the library is all about parallelism, the channel object that needed mutexing is intended to support many simultaneous requests, and the docs are utterly silent about the topic. So are all the samples I found; not one shows a mutex. (That's because all the samples are asynchronous but single-threaded; I should have been more careful as I extrapolated to my slightly different use case...)

Anyway, I'm a sadder but wiser programmer now. :-) I need to add &lt;a title="Introducing Marks" href="http://codecraft.co/2014/07/24/introducing-marks/"&gt;marks&lt;/a&gt; such as &lt;code&gt;+reasonable upper bound&lt;/code&gt; and &lt;code&gt;+potential gotcha&lt;/code&gt; to the &lt;a title="On bread recipes, maps, and intentions" href="http://codecraft.co/2013/10/24/on-bread-recipes-maps-and-intentions/"&gt;&lt;code&gt;intent&lt;/code&gt; programming language I'm creating&lt;/a&gt;, so that this type of issue is easy to formally communicate. But even without fancy new languages, the programming ecosystems that we all work in today would benefit from more attention to understanding, handling, and communicating limits.</ns2:encoded>
  <ns0:post_id>5983</ns0:post_id>
  <ns0:post_date>2015-02-05 08:45:23</ns0:post_date>
  <ns0:post_name>know-your-limits</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="bind">bind</category>
  <category domain="post_tag" nicename="call-graph">call graph</category>
  <category domain="post_tag" nicename="circuit-breaker">Circuit breaker</category>
  <category domain="post_tag" nicename="core-dump">core dump</category>
  <category domain="post_tag" nicename="crash">crash</category>
  <category domain="post_tag" nicename="debugging">debugging</category>
  <category domain="post_tag" nicename="dns">dns</category>
  <category domain="post_tag" nicename="documentation">documentation</category>
  <category domain="post_tag" nicename="gdb">gdb</category>
  <category domain="post_tag" nicename="heap">heap</category>
  <category domain="category" nicename="mistakes">Mistakes</category>
  <category domain="post_tag" nicename="stack">stack</category>
  <category domain="post_tag" nicename="stack-trace">Stack trace</category>
  <category domain="post_tag" nicename="tcp-ip">tcp/ip</category>
  <category domain="post_tag" nicename="traffic">traffic</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/10153011527345912</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>https://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5969129008783183872&amp;type=U&amp;a=Wh-U</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>13834</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2015-02-05 23:19:02</ns0:comment_date>
    <ns0:comment_content>For me, this is proof that fixing something "right", instead of just kludging something good enough, is often (not always, but often) the most efficient approach. The quick-and-dirty solution might feel faster, but by the time we add in the cost of a learning curve, future maintenance, testing, and support, making haste more slowly is often better.

Of course there are exceptions to every rule...</ns0:comment_content>
    <ns0:comment_parent>13832</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1423203543</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>13832</ns0:comment_id>
    <ns0:comment_author>David H</ns0:comment_author>
    <ns0:comment_author_email>david@handysoftware.com</ns0:comment_author_email>
    <ns0:comment_date>2015-02-05 20:08:09</ns0:comment_date>
    <ns0:comment_content>Interesting how a really hard-to-find bug motivated you to really "clean house" and address a bunch of other issues. "If it aint broke don't fix it", but since it was broke you got to fix some things.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1423192090</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>13820</ns0:comment_id>
    <ns0:comment_author>mordachaiwolf</ns0:comment_author>
    <ns0:comment_author_email>steve@crocker.com</ns0:comment_author_email>
    <ns0:comment_date>2015-02-05 10:15:27</ns0:comment_date>
    <ns0:comment_content>Thanks for sharing this!  And congrats on tracking it down.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>10430875</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1423156528</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>13825</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2015-02-05 13:00:27</ns0:comment_date>
    <ns0:comment_content>Since I complain about not communicating limits, I would be remiss if I didn't record what I learned so it's at least findable in a web search. :-) I don't think I've ever been more relieved to put a stake through the heart of a bug.</ns0:comment_content>
    <ns0:comment_parent>13820</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1423166427</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>13936</ns0:comment_id>
    <ns0:comment_author>Moray King</ns0:comment_author>
    <ns0:comment_author_email>mbking42@aol.com</ns0:comment_author_email>
    <ns0:comment_date>2015-02-09 22:01:52</ns0:comment_date>
    <ns0:comment_content>Double kudos to you Daniel:
1. A well written piece that was fun to read.
2. You resolved the bug!

Your essay confirms a point I always believed: Care must be taken when designing and coding a multi-threaded system where concurrent sharing is involved. Concurrency bugs are notoriously difficult to resolve especially if they are intermittent and difficult to trigger. At least you had a trigger, and with it you skillfully converged onto the bug. Well done, Daniel!</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1423544514</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>13945</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2015-02-10 07:31:07</ns0:comment_date>
    <ns0:comment_content>So good to hear from you, Moray! I think that years ago I told you that I thought concurrency wasn't that hard. This makes me eat my words. :-) It may not be that hard in theory, or when a codebase is in its infancy--but by the time we get to hundreds of thousands of lines of code, with large numbers of threads interacting in complex and unpredictable ways, we better have it right, or we can find ourselves in deep trouble.

I thought of your clean and robust epoll-based http server while I was doing this work...</ns0:comment_content>
    <ns0:comment_parent>13936</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1423578668</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>comment_like_count</ns0:meta_key>
      <ns0:meta_value>1</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14190</ns0:comment_id>
    <ns0:comment_author>earwicker</ns0:comment_author>
    <ns0:comment_author_email>wordpress@earwicker.com</ns0:comment_author_email>
    <ns0:comment_date>2015-02-27 04:10:24</ns0:comment_date>
    <ns0:comment_content>Congrats on fixing it. I spent a couple of weeks in the late 90s connecting to customer machines and looking at stack traces of several threads that were either deadlocking or trashing each other's data. This was enough to make me back away from that school of currency whose motto is "Just keep adding mutexes until it seems to stay up!" Since then I've stuck to threads that communicate only via queues that contain very simplistic/immutable "work item" objects, or I go the whole hog and use process isolation, with a pool of single-threaded worker processes orchestrated by a single-threaded manager. I also avoid languages with undefined behaviour (like they are plague-carrying rats). This is why I'm not touching Go with a barge pole (undefined behaviour under race conditions).</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>8532639</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1425035424</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14195</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2015-02-27 07:33:55</ns0:comment_date>
    <ns0:comment_content>It's so interesting to me that people who have deep experience debugging a concurrency problem are usually changed by the experience. They begin to value features of their language or their tools differently when they've experienced the bleak prospect of not being able to figure something out except with a lot of blood, sweat, and tears. And maybe not even then.

I did not know anything about Go and race conditions; that's troubling.

I, too, have had good experiences with cross-thread communication only via queues. That's essentially the same solution that the designer of zmq advocated: http://zeromq.org/blog:multithreading-magic</ns0:comment_content>
    <ns0:comment_parent>14190</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1425047635</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
</item>
<item>
  <title>"Rockstar Developers" are a dangerous myth</title>
  <link>http://codecraft.co/2015/03/04/rockstars/</link>
  <pubDate>Wed, 04 Mar 2015 15:30:43 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=6009</guid>
  <ns2:encoded>Recently I've run across several uses of the phrase "rockstar developer" or "rockstar programmer" ("code ninja" is another hip variant). The term shows up on slashdot, for example. I've also seen it in job postings and in blogs.&lt;sup&gt;[&lt;a target="_blank" href="http://www.infoworld.com/article/2886735/it-careers/should-you-hire-a-software-developer-talent-agent.html"&gt;1&lt;/a&gt;],[&lt;a target="_blank" href="http://sethgodin.typepad.com/seths_blog/2014/12/a-one-day-design-sprint-and-an-app-directory.html"&gt;2&lt;/a&gt;],[&lt;a target="_blank" href="http://skeptics.stackexchange.com/questions/7559/are-there-studies-clearly-illustrating-the-great-discrepancies-in-programmer-pro3"&gt;3&lt;/a&gt;]&lt;/sup&gt; A rockstar hacker archetype is standard fare in TV shows, where his or her computing feats are practically a superpower (&lt;em&gt;Agents of Shield&lt;/em&gt;, &lt;em&gt;Person of Interest&lt;/em&gt;, &lt;em&gt;Leverage&lt;/em&gt;, &lt;em&gt;Scorpion&lt;/em&gt;, ...) Of course Hollywood loves the notion, too; I thought &lt;em&gt;The Imitation Game&lt;/em&gt; was fascinating, but besides taking liberties with history, it portrays Alan Turing in a distorted way that feeds such mystique. (Turing &lt;em&gt;was&lt;/em&gt; absolutely brilliant, and certainly one of the most important pioneers in computing. But he &lt;a href="http://www.slate.com/blogs/browbeat/2014/12/03/the_imitation_game_fact_vs_fiction_how_true_the_new_movie_is_to_alan_turing.html" target="_blank"&gt;didn't invent his codebreaking machine alone&lt;/a&gt;.)

[caption id="attachment_6021" align="aligncenter" width="646"]&lt;a href="http://youtu.be/j2jRs4EAvWM"&gt;&lt;img src="https://codecraft.co/wp-content/uploads/2015/03/screen-shot-2015-03-05-at-6-52-57-pm.png?w=646" alt="Alan Turing and team members at Bletchley Park, with a forerunner of the modern computer-- technology invented by brilliant people to break the Nazi Enigma encryption. Screenshot from official trailer, under fair use." width="646" height="271" class="size-large wp-image-6021" /&gt;&lt;/a&gt; from &lt;em&gt;The Imitation Game&lt;/em&gt;: Alan Turing and team members at Bletchley Park, with a forerunner of the modern computer &amp;mdash; technology invented by brilliant people to break the Nazi Enigma encryption. Screenshot from official trailer, under fair use.[/caption]

It's even in my inbox. After I began writing this post, I got an email from a recruiter on LinkedIn, looking for "superstars":

&lt;img src="https://codecraft.co/wp-content/uploads/2015/03/superstar.png?w=646" alt="superstar" width="646" height="152" class="aligncenter size-large wp-image-6027" /&gt;

The buzz about these mythical supercoders has begun to raise my hackles.

&lt;!--more--&gt;

Plenty of developers consider themselves gifted, and not infrequently, they are right; I've met amazingly smart people in this industry. It's also true that in software, the standouts are &lt;em&gt;way&lt;/em&gt; more productive than their average or under-average peers. If memory serves, &lt;em&gt;Facts and Fallacies of Software Engineering&lt;/em&gt; says the best programmers/coders/designers are up to 28x times better than the worst. The &lt;a href="http://skeptics.stackexchange.com/questions/7559/are-there-studies-clearly-illustrating-the-great-discrepancies-in-programmer-pro" target="_blank"&gt;actual numbers are debated&lt;/a&gt;, and I think it's possible to get carried away, but I could believe some big ratios.

Nonetheless, the worldview behind the "rockstar" label is naive and dangerous, and I urge you to help me correct it. Here's why:

&lt;h3&gt;My beefs&lt;/h3&gt;

&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;1. Making a &lt;a href="http://trevharmon.com/conscious-business-ethics/" title="true value in business" target="_blank"&gt;valuable&lt;/a&gt; software product is way &lt;a href="http://codecraft.co/2013/07/25/features-are-not-chunks-of-code/" title="Features are not chunks of code"&gt;more than writing clever code&lt;/a&gt;.&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Understanding&lt;a href="http://codecraft.co/2012/09/04/users-arent-the-only-people-in-your-software/" title="Users Aren’t The Only People In Your Software"&gt; all the people&lt;/a&gt; in the &lt;a href="http://codecraft.co/2008/06/25/why-people-are-part-of-a-software-architecture/" title="Why People Are Part of A Software Architecture"&gt;value chain of your software&lt;/a&gt;, and doing the hard, unrewarding detail work to guarantee that their needs are addressed throughout the &lt;a href="http://codecraft.co/2012/09/28/the-8th-characteristic/" title="The 8th Characteristic"&gt;full lifecycle of what you build&lt;/a&gt; is usually way more important than inventing a new and mind-bending algorithm. Addressing the &lt;a href="http://codecraft.co/2012/08/27/good-code-is-optimized/" title="Good Code Is Optimized"&gt;need of your business to make a profit&lt;/a&gt; is usually a good idea, too. Perhaps the vast residual work is what Thomas Edison had in mind when he said,
&lt;blockquote&gt;Genius is one percent inspiration, ninety nine percent perspiration.&lt;/blockquote&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;2. The best developers are superb &lt;a href="http://www.hanselman.com/blog/TheMythOfTheRockstarProgrammer.aspx" target="_blank"&gt;team members&lt;/a&gt;, not prima donnas.&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;I don't care if you're in a startup and you can only afford to hire one developer--if you think that developer can ignore teamwork, you're foolish. On day 1, even a one-person dev phenom has to work with those who test or document or support or deploy or sell. And if your startup has staying power, the day will come when Codezilla has to work with a contractor, or an understudy, or a team in Johannesburg or Timbuktu that will take over or integrate with what they've built.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;3. If nobody understands your code, &lt;a href="http://codecraft.co/2012/11/05/why-mental-models-matter/" title="Why Mental Models Matter"&gt;you've failed&lt;/a&gt;.&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;How can there be a version 2.0 if there's &lt;a href="http://codecraft.co/2014/07/16/lacunas-everywhere/" title="Lacunas Everywhere"&gt;nobody who understands the groundbreaking ideas&lt;/a&gt; in 1.0? A big part of creating lasting value is communicating so &lt;a href="http://codecraft.co/2013/10/24/on-bread-recipes-maps-and-intentions/"&gt;others can appreciate&lt;/a&gt; and &lt;a href="http://codecraft.co/2012/10/31/comments-on-comments/" title="// Comments on Comments"&gt;build upon your work&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;4. Nobody knows everything.&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;It might be possible to crank out dime-a-dozen websites without research or innovation, but most projects with genuine market value are broad enough that they demand more skills than exist in any one person. Wise developers (as opposed to simply clever ones) are &lt;a href="http://codecraft.co/2012/10/01/humility/" title="Humility"&gt;humble&lt;/a&gt; and &lt;a href="http://codecraft.co/2012/09/24/julie-jones-learn-voraciously/" title="Julie Jones: Learn voraciously."&gt;interested in learning&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;5. Relying on magicians stymies progress.&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;When we attribute remarkable results to a murky thing called "genius", we abdicate the responsibility of other smart people to deliver. This makes good old-fashioned elbow grease seem dull, and shifts all the glamour to pulling a rabbit out of a hat. We all love the dazzle of a great show, but we're better served by figuring out how to predict, replicate, and optimize success, &lt;a target="_blank" href="http://www.infoworld.com/article/2615814/it-training/6-home-truths-about-rockstar-developers.html"&gt;not treat it as a mystery&lt;/a&gt;.
&lt;dt&gt;&lt;strong&gt;6. The best metaphor for the pinnacle of our profession is a jaded, ego-centric, overpaid, dissolute show-off with a limited repertoire? Really?&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;(Can you tell I'm not big on rockstars? :-)&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3&gt;Standing ovations&lt;/h3&gt;
To temper my complaining just a wee bit, perhaps it's worth acknowledging one way that the "rockstar" metaphor &lt;em&gt;does&lt;/em&gt; work: I have seen many performances during my career that were worthy of admiration--even applause. Working with people who are humble and smart and generous, who push the limits and raise the bar in all the best ways--that's an experience as memorable as any rock concert. Definitely worth the price of admission.

Do you agree?</ns2:encoded>
  <ns0:post_id>6009</ns0:post_id>
  <ns0:post_date>2015-03-04 08:30:43</ns0:post_date>
  <ns0:post_name>rockstars</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="alan-turing">Alan Turing</category>
  <category domain="post_tag" nicename="code-ninjas">code ninjas</category>
  <category domain="post_tag" nicename="cooperation">cooperation</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="humility">humility</category>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <category domain="post_tag" nicename="learning">learning</category>
  <category domain="post_tag" nicename="magic">magic</category>
  <category domain="post_tag" nicename="productivity">productivity</category>
  <category domain="post_tag" nicename="progress">progress</category>
  <category domain="post_tag" nicename="recruiter">recruiter</category>
  <category domain="post_tag" nicename="rockstars">rockstars</category>
  <category domain="post_tag" nicename="teaching">teaching</category>
  <category domain="post_tag" nicename="teamwork">teamwork</category>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/10153078470560912</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>https://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5979448946953572352&amp;type=U&amp;a=aptX</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>14366</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2015-03-07 22:18:51</ns0:comment_date>
    <ns0:comment_content>Yes, it's really unfortunate that folks sometimes skip out just when the exacting work of maintaining a newly created codebase (finding and fixing all the subtle bugs, and trying to polish the rough edges) is beginning. What seemed like a good design early on can look pretty dismal when compromises begin to manifest their long-term consequences...

I admire you for being the sort of guy who is in it for the long haul...</ns0:comment_content>
    <ns0:comment_parent>14343</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1425791932</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>15712</ns0:comment_id>
    <ns0:comment_author>My Bibifi Adventure | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/06/15/my-bibifi-adventure/</ns0:comment_author_url>
    <ns0:comment_date>2015-06-15 08:52:12</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] Programming is a team sport. Some of the &amp;#8220;teams&amp;#8221; were actually individual students. I don&amp;#8217;t know how they fared, as a whole, but I know that our team benefitted from the complementary strengths of multiple people. I am not the world&amp;#8217;s greatest pen tester, and some of the encryption theory we studied made my head hurt&amp;#8211;but I know a thing or two about robust software development processes. We helped each other, and did better as a result. See my recent post about the myth of the &amp;#8220;rockstar developer&amp;#8221;. [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14418</ns0:comment_id>
    <ns0:comment_author>Andy Lawrence</ns0:comment_author>
    <ns0:comment_author_email>andy3474@msn.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://DidgetMaster.blogspot.com</ns0:comment_author_url>
    <ns0:comment_date>2015-03-10 22:54:48</ns0:comment_date>
    <ns0:comment_content>Does this mean I should quit referring to you as the best rockstar, guru, code ninja that I know when people ask me "Do you know Daniel Hardman?"?</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1426049688</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14419</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2015-03-10 22:58:28</ns0:comment_date>
    <ns0:comment_content>Hah! Of course you should. You know lots of awesome coders (and you are one yourself). :-) Whenever I do something boneheaded (like when I wrote, recently, about taking forever to diagnose a simple missing mutex), I am reminded of my amazing capacity to not be very smart...</ns0:comment_content>
    <ns0:comment_parent>14418</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1426049908</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14334</ns0:comment_id>
    <ns0:comment_author>Mick Oberlin</ns0:comment_author>
    <ns0:comment_author_email>moberlin05@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://michaelericoberlin.wordpress.com</ns0:comment_author_url>
    <ns0:comment_date>2015-03-06 01:41:00</ns0:comment_date>
    <ns0:comment_content>I can't agree with your last statement more. I have the same issue with "Guru". Rather than "Rockstar", couldn't we have something that at least incorporates the features of a winning programmer? You know, like "Savant", "Virtuoso", or even "Gladiator"? I don't even really listen to Rock &amp;amp; Roll.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>47726549</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1425631263</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14340</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2015-03-06 07:29:41</ns0:comment_date>
    <ns0:comment_content>Ooh, I really like "virtuoso." Gladiator is an interesting one, too. I don't usually think of what we do as a battle, but now that I think about it, I do talk about having "battlescars"...</ns0:comment_content>
    <ns0:comment_parent>14334</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1425652181</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>comment_like_count</ns0:meta_key>
      <ns0:meta_value>1</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14343</ns0:comment_id>
    <ns0:comment_author>David H</ns0:comment_author>
    <ns0:comment_author_email>david@handysoftware.com</ns0:comment_author_email>
    <ns0:comment_date>2015-03-06 11:37:00</ns0:comment_date>
    <ns0:comment_content>Daniel, I'm really glad you wrote this post. I wish more people, especially managers, understood that a prima donna developer really undermines their organization and can torpedo their results. In one group I was in (company name shall remain anonymous) we had three "rock stars" on the same team all ignoring the others and writing redundant code at rapid velocity. They impressed the boss with their short-term results and then quit or changed to another group before the consequences had time to catch up to them. I got to clean up the mess.

Oh, to add to your list: "unicorn developers." Heaven help us.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1425667022</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14922</ns0:comment_id>
    <ns0:comment_author>A grumble about buckets | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/04/08/a-grumble-about-buckets/</ns0:comment_author_url>
    <ns0:comment_date>2015-04-08 13:39:45</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] of security questions as a necessary evil that it can forget as soon as it&amp;#8217;s paid a &amp;#8220;rock star&amp;#8221; contractor to implement them. I guarantee they don&amp;#8217;t have any process to triage [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16815</ns0:comment_id>
    <ns0:comment_author>Are We Smart Enough to Use Kind Words? | Codecraft</ns0:comment_author>
    <ns0:comment_author_url>http://codecraft.co/2015/10/06/use-kind-words/</ns0:comment_author_url>
    <ns0:comment_date>2015-10-06 16:35:57</ns0:comment_date>
    <ns0:comment_content>[&amp;#8230;] and we are usually repaid in spades. Over time, the output of a healthy community will always exceed the contributions of a single &amp;#8220;rock star&amp;#8221;, if for no other reason than because the community has a longer lifespan. Humility and listening [&amp;#8230;]</ns0:comment_content>
    <ns0:comment_type>pingback</ns0:comment_type>
    <ns0:comment_parent>0</ns0:comment_parent>
    </ns0:comment>
</item>
<item>
  <title>A grumble about buckets</title>
  <link>http://codecraft.co/2015/04/08/a-grumble-about-buckets/</link>
  <pubDate>Wed, 08 Apr 2015 19:39:15 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=6049</guid>
  <ns2:encoded>Sometimes developers limit the choices that are offered to their users as a &lt;a title="6 Strategies to Simplify Software" href="http://codecraft.co/2013/03/12/6-strategies-to-simplify-software/"&gt;way to simplify&lt;/a&gt;. This can be a good thing; I'm a big fan of &lt;a title="The Power of Simplicity" href="http://codecraft.co/2013/02/15/the-power-of-simplicity/"&gt;simplicity&lt;/a&gt;.

However, this strategy comes with an important caveat:
&lt;div style="margin-left:2em;margin-right:2em;border:solid 1px black;font-size:105%;font-weight:bold;font-style:italic;text-align:center;background-color:#f0f0f0;padding:1em;margin-bottom:1.5em;"&gt;If you're going to force all choices into a few predefined buckets, you better provide buckets that &lt;a href="http://codecraft.co/2012/11/05/why-mental-models-matter/" title="Why Mental Models Matter"&gt;match the needs&lt;/a&gt; of your &lt;a href="http://codecraft.co/2008/06/25/why-people-are-part-of-a-software-architecture/" title="Why People Are Part of A Software Architecture"&gt;users&lt;/a&gt;.&lt;/div&gt;
Broken buckets will not earn you brownie points. Or revenue.

[caption id="" align="aligncenter" width="640"]&lt;a href="https://www.flickr.com/photos/evaekeblad/3993532812/sizes/z/"&gt;&lt;img class="" src="https://farm3.staticflickr.com/2509/3993532812_e63f29c43b_z.jpg" alt="" width="640" height="480" /&gt;&lt;/a&gt; image credit: Eva the Weaver (Flickr)[/caption]

Today I was adjusting my 401k contribution. Here's the broken buckets I saw when I logged in to the financial services website:

&lt;!--more--&gt;

&lt;a href="https://codecraft.co/wp-content/uploads/2015/04/screen-shot-2015-04-08-at-11-26-44-am.png"&gt;&lt;img class="aligncenter wp-image-6054 size-medium" src="https://codecraft.co/wp-content/uploads/2015/04/screen-shot-2015-04-08-at-11-26-44-am.png?w=300" alt="security questions" width="300" height="258" /&gt;&lt;/a&gt;

See, here's the problem. I have 3 favorite restaurants ("&lt;em&gt;what's your favorite ___?&lt;/em&gt;" security questions are &lt;em&gt;all&lt;/em&gt; useless to me), I'm not a pet person, I don't remember what kind of car I first drove, I lived in 20 different places by the time I was 18, I didn't have just one best friend in high school, and I don't have a security keyword that I reuse.

None of these buckets works. But I had to choose one, and I couldn't log in to the web site (even to send a note about my dissatisfaction to customer service) until I did.

I have a similar beef about parental controls on Netflix. Last time I checked, there was a slider that gave you 3 positions: no controls, "older teen", and "kid". So what if I've got a teen who's not interested in &lt;em&gt;Sesame Street&lt;/em&gt; and &lt;em&gt;My Little Pony&lt;/em&gt;, but who has childhood trauma as an orphan in a third-world country, and who thus needs to not be offered certain movies in the "older teen" category? What if I'm sick of the promo images for raunchy R-rated movies, but I want to watch an occasional PG-13 thriller? What if I want to watch a show which is unrated (and therefore available only the most wide-open adult setting), but I can't risk leaving Netflix in wide-open mode all the time (since a kid profile can switch to its parent profile without a password)? I could solve this bucket problem if Netflix gave me a whitelist and/or blacklist feature--but apparently the all-wise, childless 20-somethings who wrote the parental control features at Netflix thought three buckets was plenty. What could &lt;a href="http://codecraft.co/2012/10/02/lynn-bendixsen-listen/" title="Lynn Bendixsen: Listen." target="_blank"&gt;listening&lt;/a&gt; teach them?

&lt;h3&gt;The true sin&lt;/h3&gt;

I'm grumbling about my choice of buckets, but in the end, it's not the bucket menu, in and of itself, that bugs me. Like I said above, I get why developers might need to simplify. You &lt;a href="http://codecraft.co/2012/10/17/flexibility-is-no-virtue/" title="Flexibility is No Virtue" target="_blank"&gt;can't please everyone&lt;/a&gt;.

No. What &lt;em&gt;really&lt;/em&gt; bugs me is that software with poorly chosen buckets also tends to be software that--either by &lt;a href="http://codecraft.co/2013/12/09/a-comedy-of-carelessness/" title="A Comedy of Carelessness"&gt;carelessness&lt;/a&gt; or intent--provides no way whatsoever for its &lt;a href="http://codecraft.co/2013/05/06/why-your-software-should-cry/" title="Why Your Software Should Cry"&gt;creators to find out&lt;/a&gt; if they've got the buckets wrong. The financial services company with the dumb security questions doesn't consider itself a software company, and probably thinks of security questions as a necessary evil that it can forget as soon as it's paid a "&lt;a href="http://codecraft.co/2015/03/04/rockstars/" title="“Rockstar Developers” are a dangerous myth"&gt;rock star&lt;/a&gt;" contractor to implement them. I guarantee they don't have any process to triage helpful &lt;em&gt;software&lt;/em&gt; feedback from the &lt;a href="http://codecraft.co/2012/09/04/users-arent-the-only-people-in-your-software/" title="Users Aren’t The Only People In Your Software"&gt;humans they serve&lt;/a&gt;. And I dare you to find any way for a Netflix customer to contact the dev team or product manager that owns parental controls. I tried and failed.

Seth Godin recently blogged about how &lt;a href="http://sethgodin.typepad.com/seths_blog/2015/03/what-is-customer-service-for.html" target="_blank"&gt;different corporate cultures approach customer interactions differently&lt;/a&gt;--and why that makes a world of difference. He was nice and non-controversial; he didn't take a strong position on whether certain approaches are unethical.

I'm going to be less diplomatic. As the &lt;a href="http://trevharmon.com/standard-of-business/" target="_blank"&gt;Conscious Business Ethics Manifesto&lt;/a&gt; says, we have a duty to provide real value to those who pay us for our goods and services--not merely to provide a glitzy facade. If we're going to force users into buckets, let's give some &lt;a href="http://codecraft.co/2012/06/20/role-play-centered-design/" title="Role-Play Centered Design"&gt;careful thought to the buckets we offer&lt;/a&gt;--and let's make sure we have a way of discovering and &lt;a href="http://codecraft.co/2014/07/21/bridging-the-lacuna-humana/" title="Thoughts On Bridging the “Lacuna Humana”"&gt;tracking&lt;/a&gt; whether our buckets are useful.</ns2:encoded>
  <ns0:post_id>6049</ns0:post_id>
  <ns0:post_date>2015-04-08 13:39:15</ns0:post_date>
  <ns0:post_name>a-grumble-about-buckets</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="customer-service">customer service</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="ethics">ethics</category>
  <category domain="category" nicename="industry-and-market">Industry and Market</category>
  <category domain="post_tag" nicename="manifesto">manifesto</category>
  <category domain="post_tag" nicename="netflix">netflix</category>
  <category domain="post_tag" nicename="product-management">product management</category>
  <category domain="post_tag" nicename="rpcd">rpcd</category>
  <category domain="post_tag" nicename="security">security</category>
  <category domain="post_tag" nicename="usability">usability</category>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_facebook_url</ns0:meta_key>
    <ns0:meta_value>https://facebook.com/10153158412050912</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:502940911;b:1;}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>https://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=5991655368638349312&amp;type=U&amp;a=9Mac</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>14929</ns0:comment_id>
    <ns0:comment_author>Sean</ns0:comment_author>
    <ns0:comment_author_email>sean_moe@byu.edu</ns0:comment_author_email>
    <ns0:comment_date>2015-04-08 16:07:46</ns0:comment_date>
    <ns0:comment_content>I agree with all the principles you have mentioned: gather customer feedback, keep interactions simple, you can't please everyone, etc. I also recognize that your posts, Daniel, usually describe lofty, but worthy ideals. We should always strive to be better and do better, but perhaps it's my role as a project manager that has me scratching my head over how to handle the trade-offs that often exists between the ideal and what is good enough. I'm not talking about ethical trade-offs but rather those trade-offs between two good things when you are only staffed for one.

Whether you blame the financial institution or the third-party software integration package that your financial institution probably used, my question is this: aren't those security questions good enough? How many users honestly don't have a good answer for any of those "bucket" questions? In the case of Netflix, put yourself in the Product Manager's shoes: even if you had the feedback that the buckets are too general, would you feel a greater urgency to fix that or address streaming issues that are impacting most customers?

As a consumer, does imagining a better user experience diminish the value you are already getting from Netflix (you are still a customer, right)?

Forgive the devil's advocacy - I'm not at all opposed to encouraging developers and designers to keep these problems in mind, which I believe is the intent of this article. Design is probably one of the easiest stages of development to address and resolve such concerns.

Perhaps I'm barking up the wrong tree. Maybe I'm speaking to Louis CK's hilarious exchange with Conan O'Brien about "everything is amazing and nobody's happy" (https://www.youtube.com/watch?v=uEY58fiSK8E). Perhaps I get a little too defensive of software development teams who, in my experience, are usually making sincere efforts to identify and meet user needs (ofttimes before users even know they "need" it), whilst navigating a constantly changing landscape of business pressures and deadlines, software platforms and technologies, federal and state laws and regulations, industry standards and best practices, etc., etc., etc.

In summary, I totally agree that businesses should be doing everything they can to provide users with great value and great experiences - and I believe businesses that listen to customers and find ways to quickly turn customer requests into customer value do very well. All I'm asking is that we as consumers (especially those of us who understand a lot about software development) cut our service providers a little slack when they are clearly trying to provide you with a secure login experience while at the same time giving you a variety of financial services that let you manage your finances from the comfort of your own office chair (or mobile device).



P.S. - A tip for security questions: I've discovered that you don't have to have a pet to imagine one up. My "imaginary" first car and pet are actually quite more memorable than some of the other questions because I picked wild answers that are funny / memorable to me. I just make sure to use that same pet for every site that asks the question. Plus I have the added bonus that no one will ever be able to discover my answers because they never actually existed! I'll bet your first car was really a Ferrari, wasn't it? ;)</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1428530869</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>14930</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2015-04-08 16:31:45</ns0:comment_date>
    <ns0:comment_content>Sean! How wonderful to hear from you. Very thought-provoking comment.

Yes, it is true that dev teams usually do their darndest (or want to) to anticipate customer needs and make things easy. As I said, I'm more irked at companies that make it impossible to get feedback to such folks, and less irked with initial mistakes. You're so right--dev teams are usually overcommitted and doing the best they can. But sometimes, I just can't help crying "shame!" on companies for not letting them do better. And I don't think it's a bad thing for developers to exhibit a little "divine discontent" with their customer-aiding constraints.

I'm not a Netflix customer anymore. The parental control issue is one of the reasons why I left. It really is a poor fit for my needs, and I suspect many other parents would say something similar. There is noise about it on public forums--but unfortunately, deafening silence on the topic from Netflix. I grant you that if I were a PM at Netflix, I would probably vote to fix service interruptions before working the parental control problem. But I seriously doubt that a whitelist feature would be that hard to implement. I'm not letting 'em off *that* easy... :-)

I love your tip about first cars. You may have freed my alter ego in ways I'm only beginning to imagine. :-)</ns0:comment_content>
    <ns0:comment_parent>14929</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1428532305</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
</item>
<item>
  <title>My Bibifi Adventure</title>
  <link>http://codecraft.co/2015/06/15/my-bibifi-adventure/</link>
  <pubDate>Mon, 15 Jun 2015 14:48:00 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=6064</guid>
  <ns2:encoded>I've been involved in a learning experiment these past six weeks. Now that it's winding down, I thought I'd reflect a bit on some themes that emerged.

For the past 9 months or so, I've been taking classes online from &lt;a href="http://coursera.org"&gt;Coursera&lt;/a&gt; to complete a &lt;a href="https://www.coursera.org/specialization/cybersecurity/7"&gt;Cybersecurity specialization&lt;/a&gt; taught by the University of Maryland. I've learned about security and usability, various flavors of software vulnerability, secure integrated circuit design, digital watermarks, and encryption theory.

In early May I began the final class in the sequence--a &lt;a href="https://www.coursera.org/course/cybersecuritycapstone"&gt;capstone project&lt;/a&gt; where teams of students attempt to build secure software to match a spec, then try to break one another's submissions with a combination of pen testing, static code analysis, fuzzers, and theory taught in our other security courses. The project is framed as an international coding/testing competition hosted on &lt;a href="http://builditbreakit.org"&gt;builditbreakit.org&lt;/a&gt; (hence the "bibifi" in the title of this post), and this May's running of the contest includes several hundred very sharp participants from around the world.

[caption id="attachment_6072" align="aligncenter" width="660"]&lt;a href="https://codecraft.co/wp-content/uploads/2015/06/screen-shot-2015-06-13-at-4-17-03-pm.png"&gt;&lt;img class="size-large wp-image-6072" src="https://codecraft.co/wp-content/uploads/2015/06/screen-shot-2015-06-13-at-4-17-03-pm.png?w=660" alt="Bibifi Scoreboard" width="660" height="514" /&gt;&lt;/a&gt; Partial bibifi scoreboard, showing 5 of about 100 teams. I was on team "SEADA". Net of score in buildit round minus bugs logged against code in breakit round shows current overall standings.[/caption]

&lt;!--more--&gt;

We began by reading a spec for some cmdline programs with interesting security features. We were free to implement these programs using whatever programming languages and third-party libraries we liked. All submissions were automatically compiled by the contest infrastructure, and evaluated against an oracle on a reference VM that we downloaded. We had about two weeks to code. After passing a series of acceptance tests, submissions were scored for the presence of some optional features, and for performance (speed of execution and size of data, weighted equally). This gave each team an initial "buildit" score.

Then we were allowed to see one another's source code, and to submit bugs against other teams. Bugs could be about correctness (team X didn't implement the spec right), exploitable crashes, integrity violations (where an attacker could modify system state without knowing a password), or confidentiality problems (where an attacker could discover system state without knowing a password). Security-related bugs were worth more points than simple correctness bugs. Bugs were only accepted if an automated system determined that a given team's software behaved differently than the oracle implementation. Each time we submitted a bug against a team, and it was accepted, we added points to our "breakit" score and subtracted points from the team's "buildit" score.

&lt;a href="https://codecraft.co/wp-content/uploads/2015/06/screen-shot-2015-06-13-at-4-26-26-pm.png"&gt;&lt;img class="aligncenter size-large wp-image-6077" src="https://codecraft.co/wp-content/uploads/2015/06/screen-shot-2015-06-13-at-4-26-26-pm.png?w=660" alt="Screen Shot 2015-06-13 at 4.26.26 PM" width="660" height="394" /&gt;&lt;/a&gt;

Finally, we received the bug reports for our software, and had a chance to fix them. Each time we submitted a fix, the system re-evaluated all outstanding bugs; if a particular fix eliminated three bugs, then the bugs were deemed to be duplicates of one another. Teams that submitted such bugs had their breakit scores adjusted so the awarded points were divided by the amount of duplication, and buildit scores were credited back all but one bug's worth of points.

I don't yet know what the final scores will be, because some adjustments are still pending. However, our team was doing well in both the buildit and breakit rounds, and I'm confident that I've learned some good lessons already. Here are some points to ponder:
&lt;ul&gt;
	&lt;li&gt;During the breakit round, it quickly became clear that &lt;strong style="color:#633;"&gt;the gap between good code and bad code was substantial&lt;/strong&gt;. The entries with staying power (few bugs) tended to be software that was already near the top in the buildit round (good performance, full features). The bug counts for the top teams were maybe 1/10th of the bug count for the bottom teams (even though each team could only submit 10 bugs against any single competitor, so the weak teams were artificially insulated).&lt;/li&gt;
	&lt;li&gt;I saw &lt;strong style="color:#633;"&gt;little correlation between programming language and success&lt;/strong&gt;. Entries were written in all sorts of languages: Go, Java, C, F#, C#, Haskell, Erlang, PHP, Perl, OCaml. One of the best entries I saw was written in Python--and so was one of the worst.&lt;/li&gt;
	&lt;li&gt;However, I &lt;em&gt;did&lt;/em&gt; see a &lt;strong style="color:#633;"&gt;strong correlation between unit tests and success&lt;/strong&gt;. The best teams had clearly spent time anticipating problems, and proving they handled them. I didn't find security bugs in any submissions from teams that had meaningful unit tests.&lt;/li&gt;
	&lt;li&gt;I also saw a &lt;strong style="color:#633;"&gt;correlation between language mastery and quality&lt;/strong&gt;. The best entries were written by people who loved their programming language and knew its subtleties. Among top teams, I saw idiomatic Python and Java and Go that would have made van Rossum or Gosling or McCabe proud. On the other hand, lesser entries seemed utilitarian or slipshod--not invested in their work. This matches what I've observed over decades in the industry: finding the ideal tool might not matter so much, but finding people who are passionate about craftsmanship with tools they've mastered--&lt;em&gt;that&lt;/em&gt; matters a lot.&lt;/li&gt;
	&lt;li&gt;Not all automation is justified, especially on a very short project like ours. However, &lt;strong style="color:#633;"&gt;test automation rocks&lt;/strong&gt;. On day two of the breakit phase, one team's score started climbing; quickly it was 10x, then 50x higher than competitors. How were they finding dozens or even hundreds of bugs per hour? When we completed our team's test automation tools and turned them on, the answer became obvious. Many bugs manifest across scores of teams; once we could probe all competitors' code in bulk, our bug counts went through the roof as well. These test automation tools also paid off spectacularly during the fixit phase, because they allowed us to quickly identify which bugs we had eliminated with a single code change. Xkcd comics have a lot of truth in them, which is why they're so funny--but in this case, automation paid off...&lt;a href="http://xkcd.com/1319/"&gt;&lt;img class=" aligncenter" src="http://imgs.xkcd.com/comics/automation.png" alt="" /&gt;&lt;/a&gt; image credit: xkcd.com&lt;/li&gt;
	&lt;li&gt;&lt;strong style="color:#633;"&gt;Repeated cycles of &lt;code&gt;imperfect coding -&amp;gt; testing -&amp;gt; bugfixing&lt;/code&gt; produces better software than &lt;code&gt;exhaustively studied spec + careful coding&lt;/code&gt;&lt;/strong&gt;. This was obvious from the oracle, which (surprisingly) had many bugs--including obvious stuff like not validating a range of integers correctly. We learned that the staff had written the oracle just before the contest, and although they had lots of time to ponder the spec, they had not had time for a bugfix cycle. Folks, you don't get quality software on the first try. &lt;em&gt;Evah!&lt;/em&gt;&lt;/li&gt;
	&lt;li&gt;&lt;strong style="color:#633;"&gt;Programming is a team sport&lt;/strong&gt;. Some of the "teams" were actually individual students. I don't know how they fared, as a whole, but I know that our team benefitted from the complementary strengths of multiple people. I am not the world's greatest pen tester, and some of the encryption theory we studied made my head hurt--but I know a thing or two about robust software development processes. We helped each other, and did better as a result. See my recent post about the &lt;a href="http://codecraft.co/2015/03/04/rockstars/"&gt;myth of the "rockstar developer"&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
How about you? Have you ever had an experience like the contest I describe here? What did you learn from it?</ns2:encoded>
  <ns0:post_id>6064</ns0:post_id>
  <ns0:post_date>2015-06-15 08:48:00</ns0:post_date>
  <ns0:post_name>my-bibifi-adventure</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="automation">automation</category>
  <category domain="post_tag" nicename="bugs">bugs</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="programming-languages">programming languages</category>
  <category domain="post_tag" nicename="security">security</category>
  <category domain="post_tag" nicename="teamwork">teamwork</category>
  <category domain="post_tag" nicename="testing">testing</category>
  <ns0:postmeta>
    <ns0:meta_key>_rest_api_published</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_rest_api_client_id</ns0:meta_key>
    <ns0:meta_value>-1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>https://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=6016225465893736448&amp;type=U&amp;a=eOaf</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_2094206</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:1511184;s:38:"https://facebook.com/10153323706515912";}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_job_id</ns0:meta_key>
    <ns0:meta_value>11694568110</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_2094213</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>29042</ns0:comment_id>
    <ns0:comment_author>tyrionlannister26</ns0:comment_author>
    <ns0:comment_author_email>lannistertyrion231@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://tyrionlannister9.wordpress.com</ns0:comment_author_url>
    <ns0:comment_date>2024-02-16 03:49:59</ns0:comment_date>
    <ns0:comment_content>Nice information. Thanks for sharing</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>232909616</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>firehose_sent</ns0:meta_key>
      <ns0:meta_value>1708080600</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1708080602</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
</item>
<item>
  <title>On Forests and Trees</title>
  <link>http://codecraft.co/2015/09/02/on-forests-and-trees/</link>
  <pubDate>Wed, 02 Sep 2015 14:46:42 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=6112</guid>
  <ns2:encoded>When an English speaker is drowning in details that make the big picture hard to see, she might complain, "I can't see the forest for the trees."

[caption id="" align="aligncenter" width="640"]&lt;a href="https://www.flickr.com/photos/miguelvirkkunen/10889431856/sizes/z/"&gt;&lt;img class="" src="https://farm6.staticflickr.com/5498/10889431856_12ec009c28_z.jpg" alt="" width="640" height="431" /&gt;&lt;/a&gt; image credit: Miguel Virkkunen Carvalho (Flickr)[/caption]

It's an odd expression, partly ironic and partly humorous. When I hear it, I sometimes think of my sister, who, after moving from Indiana to Utah, complained that the mountains were getting in the way of her view. (Her tongue was firmly in her cheek... :-)

The expression also describes an important problem of software engineering--one that a lot of engineers don't understand well enough. It's a problem with generalization.
&lt;!--more--&gt;
&lt;h3&gt;Why generalization matters&lt;/h3&gt;
Generalization is the process of finding emergent patterns in our creations or our processes, and taking time to codify the patterns so as many specifics as possible become unremarkable. It's among the human mind's most powerful techniques for &lt;a href="http://codecraft.co/2013/03/12/6-strategies-to-simplify-software/"&gt;coping&lt;/a&gt; with &lt;a href="http://codecraft.co/2013/02/15/the-power-of-simplicity/"&gt;complexity&lt;/a&gt;, and it's a hallmark of vigorous thinkers in any technical discipline. I like what Hegel said:
&lt;blockquote&gt;An idea is always a generalization, and generalization is a property of thinking. To generalize means to think.&lt;/blockquote&gt;
Many techniques in software engineering are rooted in this mode of careful pattern-oriented thinking. Interfaces, inheritance, and class instances group features and data underlying many concrete variations. Subroutines generalize the flow of logic in an algorithm. Refactoring often collapses differences that are less useful than originally guessed. Templates and generics and design patterns provide cookie-cutter outlines into which details can be plugged. Modules and components and libraries let us mix by formula. Fuzz testing tries to generalize about acceptable inputs to functions.

Where code is wisely generalized, maintenance goes down, testability goes up, and it's easy to &lt;a href="http://codecraft.co/2012/09/24/julie-jones-learn-voraciously/"&gt;learn&lt;/a&gt; a correct &lt;a href="http://codecraft.co/2012/11/05/why-mental-models-matter/"&gt;mental model&lt;/a&gt;. The inverse is also true: bad choices about generalization usually hide the forest behind the trees, which causes &lt;a href="http://codecraft.co/2012/10/12/coping-with-organizational-alzheimers/"&gt;pernicious tech debt&lt;/a&gt;.
&lt;h3&gt;Drowning in details&lt;/h3&gt;
With obvious benefits and technology built to help, you'd think software engineers would be wizards of generalization in what they write, test, and manage.

Unfortunately, I find this skill surprisingly rare in techies. It exists, to be sure--but it's disheartening how often simple and high-value generalization gets neglected.

&lt;strong&gt;Example 1&lt;/strong&gt;: I spent a couple months this summer refactoring a large, old, mission-critical codebase that contained both an embedded web server and an embedded web client. The code had multiple routines to parse incoming requests and responses. These were big, complex routines, poorly tested and full of unhandled corner cases--and there was no relationship between request parsing and response parsing, even though http requests and responses have identical structure after the first line. Big generalization miss!

The code also had numerous functions to help build requests and responses by accumulating pieces of data in a buffer. Most of these functions were similar in the way they managed header values like &lt;code&gt;Content-Length&lt;/code&gt; and &lt;code&gt;Content-Type&lt;/code&gt;, but they used buffers of different sizes, wrote to them in different ways, and handled and reported errors inconsistently. Useless divergence... In one case, a function was nearly 1000 lines long, and had scores of repetitive statement clusters that inited a pointer to a string constant, then looped over the chars in the constant, appending the char. Why the author never thought to use &lt;code&gt;strncpy()&lt;/code&gt; is a mystery to me; I shrunk the function to 1/3 of its original size with that one change. (Aside: 3 of the repetitive statement clusters turned out to increment the pointer differently from the others. I had to write a test before I figured this out; that detail was totally obscured and would never have been caught by a casual maintainer. It hadn't been &lt;a href="http://codecraft.co/2012/10/31/comments-on-comments/"&gt;commented as a weirdness&lt;/a&gt;, either.)

&lt;strong&gt;Example 2&lt;/strong&gt;: A few months ago, I noticed that a volume on one of our production servers was nearly full. No &lt;a href="http://codecraft.co/2013/05/06/why-your-software-should-cry/"&gt;alarms had gone off about it&lt;/a&gt;--I just stumbled on the problem--and that concerned me. I did some research and determined that the cause was a misbehaving app that wrote 200k new files per day into log folders. Since I couldn't modify the app, I wrote a script to clean up the bogus files. Then I discovered that the script needed root privileges, which I lacked--so I sent an email to IT guys reporting the problem and offering the script. I also emailed the owners of the offending app, suggesting that we fix the root cause. And I asked that we set up a monitor to alert us if the problem recurred. Nothing happened except for a manual cleanup. A while later the volume was in crisis again--and once again, we reacted days later than we should have, with surprise at the cause and head-scratching about how to fix it. We hadn't &lt;a href="http://codecraft.co/2012/10/23/on-seps-squirrels-and-meta-questions/"&gt;generalized from one problem to a systemic weakness&lt;/a&gt; very well.
&lt;h3&gt;What generalization looks like&lt;/h3&gt;
The easiest way to tell that code's been wisely generalized is to ask yourself this question: &lt;em&gt;"&lt;a href="http://codecraft.co/2013/09/19/what-should-code-look-like-when-we-squint-at-it/"&gt;Can I see the forest for the trees?&lt;/a&gt;"&lt;/em&gt; If a quick glance at any level of detail (a class, a function, a module, a project definition) gives you a broad, useful picture of what's inside--with opportunities to drill deeper as needed, but without overwhelming noise--then a careful generalizer has done their job. Same deal if lateral and hierarchical and temporal relationships are obvious. It's not an accident that I'm describing "good code" here--the kind we all like to work in...

Generalization is partly why &lt;a href="http://codecraft.co/2013/03/21/small-files-are-your-friends/"&gt;small files and small functions are your friends&lt;/a&gt;. It also explains why &lt;a href="http://codecraft.co/2012/09/27/coding-standards/"&gt;boilerplate comments are worse than useless&lt;/a&gt;, and bears on why encapsulation and loose coupling are so crucial.
&lt;h3&gt;Why we don't generalize&lt;/h3&gt;
I'm not saying that generalization is easy, though.

One reason we don't generalize is because we are being &lt;a href="http://codecraft.co/2012/11/26/learned-helplessness-rats-and-people-power/"&gt;crushed&lt;/a&gt; by &lt;a href="http://codecraft.co/2012/10/30/tech-debt-leverage-and-grandmas-envelope/"&gt;tech debt&lt;/a&gt;. We feel like we can't afford it. This is a very real problem, but it is &lt;a href="http://codecraft.co/2012/10/14/paying-off-technical-debt/"&gt;solvable--or at least improvable&lt;/a&gt;.

Another reason we don't generalize is because we're addicted to details. I have heard &lt;a href="http://codecraft.co/2013/01/08/3-commandments-of-performance-optimization/"&gt;performance zealots&lt;/a&gt; say that they couldn't break up massive C/C++ functions because they couldn't trust the compiler to inline like it was supposed to. This is utter nonsense. Setting aside the (largely valid) argument that the compiler is usually smarter about performance optimizations than the programmer, you can always use a macro, for pete's sake. I've heard similar mindsets in laments about inheritance and vtables, the inefficiency of regexes, the inconvenience of private member variables, and lots of other features in every programming language I know. In each case, the technical points on which the rationalization rests may be narrowly valid--and maybe it matters in a very specific context--but there are almost always ways to generalize better or more cleanly than we like to claim. We should hang on to as few details as we have to.

A third reason we don't generalize is because we don't think hard enough, or we're not smart enough to notice a pattern. This happens to me a lot; I find that I can't generalize in code that I haven't invested in deeply. It's too easy to make mistakes.

A fourth reason we don't generalize is because our tools and languages discourage us. Java, for example, is ridiculously detail-heavy in its management of data types: to declare a variable, you usually have to declare its type and name, and then set it equal to a &lt;code&gt;new&lt;/code&gt; object of exactly that same type, named all over again. Do an egrep through a java codebase sometime, looking for &lt;code&gt;&lt;em style="color:blue;"&gt;typename identifier&lt;/em&gt; = new &lt;em style="color:blue;"&gt;typename&lt;/em&gt;&lt;/code&gt;. It's silly. You can have just as much type safety, without the mind-numbing repetition, as ML proved, and C++11 discovered with the introduction of the &lt;code&gt;auto&lt;/code&gt; keyword.

There are lots of other examples. Aspect-oriented programming attempts to formalize generalizations that permeate or cross-cut a whole codebase; to the extent that AOP is awkward, we are generalizing against the grain of our tools. &lt;a href="http://codecraft.co/2008/07/29/decoupling-interfaces-as-versions-evolve-part-1/"&gt;Poor flexibility in interface evolution&lt;/a&gt; is endemic in nearly every programming framework; for no good reason, it prevents us from generalizing about semantically compatible software. Programming languages declare functions, parameters, and local variables in a way that makes it laborious to extract a block of logic into a subroutine (though IDEs with refactoring features have mitigated this problem somewhat). The "step routines" feature of the &lt;a href="http://codecraft.co/2013/10/24/on-bread-recipes-maps-and-intentions/"&gt;&lt;code&gt;intent&lt;/code&gt; programming language I'm writing&lt;/a&gt; is an attempt to address this problem; perhaps I'll blog about that soon.
&lt;h3&gt;Call to action&lt;/h3&gt;
Pragmatism always matters, of course; it may not be worth our time to generalize in every case. :-)

[caption id="" align="aligncenter" width="550"]&lt;a href="https://xkcd.com/974/"&gt;&lt;img class="" src="http://imgs.xkcd.com/comics/the_general_problem.png" alt="" width="550" height="230" /&gt;&lt;/a&gt; image credit: xkcd.com[/caption]

Nonetheless, the best tech folks that I know are much better at this skill than the middle of the bell curve, and I don't think that's an accident. I'd like to see us, as an industry, do a better job of turning implicit patterns in our everyday engineering work into method, structure, and reusable building blocks.

Where do you have code, or processes, that are calling out for this sort of attention?</ns2:encoded>
  <ns0:post_id>6112</ns0:post_id>
  <ns0:post_date>2015-09-02 08:46:42</ns0:post_date>
  <ns0:post_name>on-forests-and-trees</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="category" nicename="good-code">"Good Code"</category>
  <category domain="post_tag" nicename="aop">AOP</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="generalization">generalization</category>
  <category domain="post_tag" nicename="maintenance">maintenance</category>
  <category domain="post_tag" nicename="mental-models">mental models</category>
  <category domain="post_tag" nicename="patterns">patterns</category>
  <category domain="post_tag" nicename="processes">processes</category>
  <category domain="post_tag" nicename="refactoring">refactoring</category>
  <category domain="post_tag" nicename="simplicity">simplicity</category>
  <category domain="post_tag" nicename="tech-debt">tech debt</category>
  <category domain="post_tag" nicename="testability">testability</category>
  <category domain="post_tag" nicename="testing">testing</category>
  <category domain="post_tag" nicename="thinking">thinking</category>
  <ns0:postmeta>
    <ns0:meta_key>_edit_last</ns0:meta_key>
    <ns0:meta_value>4597088</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>geo_public</ns0:meta_key>
    <ns0:meta_value>0</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:1511184;s:38:"https://facebook.com/10153518154120912";}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_job_id</ns0:meta_key>
    <ns0:meta_value>14356991187</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>https://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=6044853201562279936&amp;type=U&amp;a=7dHK</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_2094206</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_2094213</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>16633</ns0:comment_id>
    <ns0:comment_author>Andy Lawrence</ns0:comment_author>
    <ns0:comment_author_email>andy3474@msn.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://www.DidgetMaster.blogspot.com</ns0:comment_author_url>
    <ns0:comment_date>2015-09-07 19:12:51</ns0:comment_date>
    <ns0:comment_content>One form of generalization is finding ways to push functionality as far up the class inheritance tree as possible. If you are working with a modern code base, you probably have some fairly deep class hierarchies. Every time you need to add a new method or a private variable to a class, first think "are there other classes (parents or siblings) that could benefit from this as well". You might need to make it a little more general to make it apply to multiple classes, but it can really help you not have to reinvent the wheel next month or next year when another class needs the same thing.

The project I am working on has lots of objects that are similar. When I add a new feature, I try to generalize it as much as possible, I can often add it to a base class near the root of my tree. All the child classes can then benefit from the added functionality.

I know this is a basic class design and implementation practice, but how many times have we seen something like a SerializeAndSaveToDisk method that was written a dozen times because someone different added it to lots of leaf classes over time (and probably named it differently in every case so it is difficult to notice unless you are looking for it).</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>14545138537</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1441674773</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16598</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2015-09-03 09:39:05</ns0:comment_date>
    <ns0:comment_content>It's a good point, David: often our inability to generalize is caused by circumstances that we can't easily change. There can be complex, mutually reinforcing reasons why we don't spend time on long-term housekeeping. Tragedy of the commons, indeed...

Perhaps what makes the most difference is not different intelligence, so much as it is an "if it is to be, it's up to me" attitude that leads us to take the bull by the horns and not allow the status quo to get the better of us.</ns0:comment_content>
    <ns0:comment_parent>16594</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>14394576568</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1441294745</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16594</ns0:comment_id>
    <ns0:comment_author>David H</ns0:comment_author>
    <ns0:comment_author_email>david@handysoftware.com</ns0:comment_author_email>
    <ns0:comment_date>2015-09-03 07:24:09</ns0:comment_date>
    <ns0:comment_content>This post really resonates with me as it reminds me of a lot of the technical problems I'm dealing with now. So how did we get into these kinds of messes?

To me it doesn't seem to be a matter of not being in the top 15% of the bell curve and not being smart enough to see generalizations. Rather I see it as natural outcome of problems with any resource over which there is shared stewardship. It has been called "the tragedy of the commons." It occurs when there are problems that require more authority and more perceived responsibility than one person or one small group of people with common shared interests can solve.

In the case of the embedded web server you describe, it sounds like it was organically developed by multiple people over time, code accreted here a little, there a little, by people trying to solve a particular small problem or fix a specific bug. Most changes were made by people who did not feel empowered to do cleansing refactoring. If they had attempted such a thing (and they might have wanted to) their bosses would likely have stopped them and told them to focus on the task at hand.

In the case of the overflowing backup files, you could have fixed that problem yourself, if you had been given privileges. The people that had the privileges obviously didn't have the same feeling of urgency.

It's not that people aren't smart enough to see the generalizations. It's that there isn't the right confluence of people who both care enough about the problem and are empowered to solve the problem.

In my current job there are definitely a pile of problems of this nature to be solved. I am working out a strategy (with the knowledge and consent of my boss) to multiplex between working on current urgencies and doing the kind of cleansing and fixing that needs to be done. It sounds like you are doing something similar.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1441286651</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16639</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2015-09-08 20:09:33</ns0:comment_date>
    <ns0:comment_content>Nice example, Andy--both in general, and with the specifics of serialization. I agree that putting functionality higher in the hierarchy is often a big win. It's not mechanically difficult to push the code there, but seeing the need to do so is a challenge at times. Maybe we need to get all CS students to have a learning exercise that teaches this specific issue.

In a related vein, I'm coming to believe that the biggest predictor of code health isn't how smart we are to start with, or how good our tools or design decisions are--it's how often we refactor as we get smarter and more confident about the "right" shape of the code.</ns0:comment_content>
    <ns0:comment_parent>16633</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>14583383209</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1441764573</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16604</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2015-09-03 18:20:45</ns0:comment_date>
    <ns0:comment_content>It seems to me that you've made a very astute observation, Nathan; just using what's familiar or easy to express in our favorite worldview is often suboptimal, but we fall into that trap all too easily. Careful thinking is advised.

I know of no easy and objective way to prove that a particular mental model is the ideal choice. Tech holy wars make me think no such way exists. However, I've begun to wonder if semi-objective measures of "good" or "better" choices might be possible: the net promoter score of a codebase among the people that develop and test it, for example. I don't think mindless measurement of these metrics is a panacea, but some attention to such numbers might be helpful in raising awareness and triggering discussions.

In the meantime, I think we depend on the talents of the sort of programmer you identified, that helps to bridge communication gaps and keep imperfect people and technology as productive as possible.</ns0:comment_content>
    <ns0:comment_parent>16602</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>14408949981</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1441326045</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16602</ns0:comment_id>
    <ns0:comment_author>Nathan</ns0:comment_author>
    <ns0:comment_author_email>codecraft@utahlan.com</ns0:comment_author_email>
    <ns0:comment_date>2015-09-03 17:04:01</ns0:comment_date>
    <ns0:comment_content>The type of generalization used matters a great deal.  Our brains like familiar patterns and habits, and its very easy to use the most comfortable pattern without considering alternatives.  That is what makes jokes like "The Evolution of a Programmer" so funny (http://www.ariel.com.au/jokes/The_Evolution_of_a_Programmer.html).  I'm also reminded of the "Zen of Python" quote, "There should be one-- and preferably only one --obvious way to do it.  Although that way may not be obvious at first unless you're Dutch."  A generalization idea needs to resonate with more than your own mental model, or it may not be accomplishing what you set out to do.

Consider debates about type systems such as those found in Python and Haskell--they both accomplish very different kinds of generalization with very different outcomes.  Which form of generalization we chose depends on *both* technical requirements and how we best communicate those intentions to the other humans who will be working with the code over time.  For a generalization to be sustainable it must communicate your intent more clearly than the alternative.  This is why its a joy to work with programmers who are both life-long learners, and effective communicators.  They are more likely to understand your abstractions as you intended (even if you missed the mark when you coded it), and communicate effectively enough to teach about what is found in the code base so that the abstractions stick.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>14407193671</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1441321443</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>29043</ns0:comment_id>
    <ns0:comment_author>Sparks Of Melody</ns0:comment_author>
    <ns0:comment_author_email>sparksofmelody460@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>https://sparksofmelody.tumblr.com/</ns0:comment_author_url>
    <ns0:comment_date>2024-02-26 13:48:32</ns0:comment_date>
    <ns0:comment_content>Thank yoou for being you</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>firehose_sent</ns0:meta_key>
      <ns0:meta_value>1708980514</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_jobid</ns0:meta_key>
      <ns0:meta_value>92287803151</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_queued</ns0:meta_key>
      <ns0:meta_value>1708980515</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
</item>
<item>
  <title>Are We Smart Enough to Use Kind Words?</title>
  <link>http://codecraft.co/2015/10/06/use-kind-words/</link>
  <pubDate>Tue, 06 Oct 2015 22:35:39 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=6150</guid>
  <ns2:encoded>My title might seem oddly out of place on a tech blog, but a slashdot post today led me to an email thread for linux kernel developers, and the thread and its fallout leave me troubled.

Apparently, a veteran contributor is &lt;a href="http://sarah.thesharps.us/2015/10/05/closing-a-door/" target="_blank"&gt;leaving the kernel dev community&lt;/a&gt; because she feels like the communication style there is too harsh. This is unfortunate, but what seems even more lamentable to me is the lack of sympathy in &lt;a href="http://marc.info/?l=linux-kernel&amp;amp;m=137392506516022&amp;amp;w=2" target="_blank"&gt;Linus Torvalds' reaction&lt;/a&gt;. It seems to me that his attitude is: "That's just the way us kernel devs are, and we aren't going to change to accommodate anybody. If you can't take the heat, get out of the kitchen."

This feels sad to me. Kind words can be such a joy.

&lt;p style="text-align:right;font-size:85%;color:silver;"&gt;[embed]https://www.flickr.com/photos/glenj/2410649592/sizes/m/[/embed]
[Image credit: &lt;a href="https://www.flickr.com/photos/glenj/2410649592/sizes/o/" target="_blank"&gt;Glen J. Photography (Flickr)&lt;/a&gt;]&lt;/p&gt;
Linus is a brilliant guy, and I'm grateful to him. I use linux and git every day; the tools he's built do a lot of good in the world, and they replace earlier approaches that are clearly inferior. I also agree with his complaint that an explicit standard of "professionalism" in communication can, in some cases, lead to opacity, disingenuousness, and inefficiency. Sometimes we need to say things that are difficult for others to hear, and we need to say them quickly--and that may not jibe with the communication style of a slick politician.

However, I find it ironic that a profession so passionate about message passing and interfaces and producer/consumer contracts could lightly dismiss communication concerns when they involve humans. Do the messes created by DDoS, attackers probing vulnerabilities, and poorly behaved clients teach us nothing?

We certainly need clarity in our careers, and we may occasionally need bluntness as well, but we don't need ridicule, sarcasm, or disdain. I applaud the sentiments of Marvin J. Ashton:

&lt;!--more--&gt;
&lt;blockquote&gt;None of us need one more person bashing or pointing out where we have failed or fallen short. Most of us are already well aware of the areas in which we are weak. What each of us does need is family, friends, employers, and brothers and sisters who support us, who have the patience to teach us, who believe in us, and who believe we're trying to do the best we can, in spite of our weaknesses. What ever happened to giving each other the benefit of the doubt? What ever happened to hoping that another person would succeed or achieve?&lt;/blockquote&gt;
I may be sensitive to this issue because I have made lots of mistakes on this dimension over the years. I don't think I've been deliberately mean, but I've been impatient or cranky more than I ought.

I've also been the beneficiary of many kind words. I've had mentors who corrected me with more tolerance than I deserved, peers who put up with my soapboxes, and junior developers who followed my advice or requests when I was a less-than-perfect leader. I am certain that I have accomplished more in my career because of the good will and gentleness of others than I could have in a pure technical meritocracy with survival-of-the-fittest ethics.

Perhaps Linus would argue that, although my career has been more rewarding because of patience and kind words, the tech world in general would be further along if we were merciless about eradicating incompetence.

I think that's short-sighted.

Tech is hard. Things often fail to work; requirements change; incompatibilities in components and tools are endemic; we &lt;a href="http://codecraft.co/2012/09/25/six-learning-tips-for-tech-folks/"&gt;learn a lot by trial and error&lt;/a&gt;. Part of "tech progress" is raising the experience, confidence, and &lt;a href="http://codecraft.co/2013/05/31/courage-counts/"&gt;courage&lt;/a&gt; of those around us; in doing so, we &lt;a href="http://codecraft.co/2012/09/24/julie-jones-learn-voraciously/"&gt;learn more&lt;/a&gt; ourselves, and we are usually repaid in spades. Over time, the output of a healthy community will always &lt;a href="http://codecraft.co/2015/03/04/rockstars/"&gt;exceed the contributions of a single "rock star"&lt;/a&gt;, if for no other reason than because the community has a longer lifespan. &lt;a href="http://codecraft.co/2012/10/01/humility/"&gt;Humility&lt;/a&gt; and &lt;a href="http://codecraft.co/2012/10/02/lynn-bendixsen-listen/"&gt;listening&lt;/a&gt; are worth keeping on our personal radar.

I say "thank you" to Sarah and to all the other developers who move in linux kernel circles--Linus included. I don't want the exacting technical standards in that community to erode. But I suggest we ought to be smart enough to honor that imperative and still see that the developers who contribute there feel appreciated and respected.
&lt;blockquote&gt;“I have wept in the night
At my shortness of sight
That to others' needs made me blind,
But I never have yet
Had a twinge of regret
For being a little too kind.”
—C. R. Gibson&lt;/blockquote&gt;</ns2:encoded>
  <ns0:post_id>6150</ns0:post_id>
  <ns0:post_date>2015-10-06 16:35:39</ns0:post_date>
  <ns0:post_name>use-kind-words</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="communication">communication</category>
  <category domain="post_tag" nicename="humility">humility</category>
  <category domain="post_tag" nicename="kernel">kernel</category>
  <category domain="post_tag" nicename="kindness">kindness</category>
  <category domain="post_tag" nicename="learning">learning</category>
  <category domain="post_tag" nicename="linux">linux</category>
  <category domain="post_tag" nicename="listening">listening</category>
  <category domain="post_tag" nicename="patience">patience</category>
  <category domain="post_tag" nicename="standards">standards</category>
  <category domain="post_tag" nicename="teamwork">teamwork</category>
  <category domain="post_tag" nicename="torvalds">Torvalds</category>
  <ns0:postmeta>
    <ns0:meta_key>_oembed_33e2ac067e3f0c7e84ec3f0deef6e5a2</ns0:meta_key>
    <ns0:meta_value>&lt;a href="https://www.flickr.com/photos/glenj/2410649592/sizes/m/"&gt;&lt;img src="https://farm3.staticflickr.com/2023/2410649592_4047d11cc8_z.jpg?zz=1" alt="Secret 3" width="640" height="426" /&gt;&lt;/a&gt;</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_oembed_time_33e2ac067e3f0c7e84ec3f0deef6e5a2</ns0:meta_key>
    <ns0:meta_value>1529364075</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_oembed_6e0acbc8f771627ffdc37827325a1886</ns0:meta_key>
    <ns0:meta_value>&lt;a href="https://www.flickr.com/photos/glenj/2410649592/sizes/m/"&gt;&lt;img src="https://farm3.staticflickr.com/2023/2410649592_4047d11cc8_z.jpg?zz=1" alt="Secret 3" width="640" height="426" /&gt;&lt;/a&gt;</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_oembed_time_6e0acbc8f771627ffdc37827325a1886</ns0:meta_key>
    <ns0:meta_value>1452609347</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:1511184;s:38:"https://facebook.com/10153594348865912";}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_rest_api_published</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_rest_api_client_id</ns0:meta_key>
    <ns0:meta_value>-1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_job_id</ns0:meta_key>
    <ns0:meta_value>15550849485</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>https://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=6057291954985713664&amp;type=U&amp;a=_bQn</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_2094206</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_2094213</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_last_editor_used_jetpack</ns0:meta_key>
    <ns0:meta_value>block-editor</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_oembed_time_06b33ee13c9acd221a08832f21a50fc6</ns0:meta_key>
    <ns0:meta_value>1711221128</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_oembed_06b33ee13c9acd221a08832f21a50fc6</ns0:meta_key>
    <ns0:meta_value>&lt;a href="https://www.flickr.com/photos/glenj/2410649592/sizes/m/"&gt;&lt;img src="https://live.staticflickr.com/2023/2410649592_4047d11cc8_z.jpg" alt="Secret 3" width="640" height="426" /&gt;&lt;/a&gt;</ns0:meta_value>
  </ns0:postmeta>
  <ns0:comment>
    <ns0:comment_id>16832</ns0:comment_id>
    <ns0:comment_author>H.Trickler</ns0:comment_author>
    <ns0:comment_author_email>tricky1@sms.at</ns0:comment_author_email>
    <ns0:comment_date>2015-10-07 01:11:27</ns0:comment_date>
    <ns0:comment_content>I agree that a friendlier tone would be much better. 

But this young lady on her blog does not publish all those comments that she does not like, and some even get edited without saying so!

May she have a long happy life in her own world!</ns0:comment_content>
    <ns0:comment_parent>16819</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1444201887</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16819</ns0:comment_id>
    <ns0:comment_author>David H</ns0:comment_author>
    <ns0:comment_author_email>david@handysoftware.com</ns0:comment_author_email>
    <ns0:comment_date>2015-10-06 19:59:55</ns0:comment_date>
    <ns0:comment_content>I agree that a hostile and toxic environment is not necessary to technology development. People may communicate that way because they don't know a better way, but that doesn't make it effective nor right.

In fact I would argue that in a technical environment the harshness of reality is sufficient stern feedback. If we don't get our stuff right, planes don't take off, ships sink, bridges collapse, rockets explode in flight, and code crashes. That's harsh.

Censorship, political correctness, "reverse" discrimination, etc. are also unnecessary and unhelpful. Just be decent human beings who neither try to dominate nor shame each other.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1444183199</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16842</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2015-10-07 07:48:26</ns0:comment_date>
    <ns0:comment_content>Hmm. I think it's usually better to keep comments, even if they disagree with us--but I suppose it's a blogger's prerogative to eliminate comments they find offensive. She did say in her post that she reserved the right to change hateful comments to something innocuous... If she changed their meaning in another way, that seems unfortunate.

Thanks for the thoughtful feedback!</ns0:comment_content>
    <ns0:comment_parent>16832</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1444225707</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16824</ns0:comment_id>
    <ns0:comment_author>David H</ns0:comment_author>
    <ns0:comment_author_email>david@handysoftware.com</ns0:comment_author_email>
    <ns0:comment_date>2015-10-06 20:35:34</ns0:comment_date>
    <ns0:comment_content>One of my Electrical Engineering professors at BYU put it to me this way: You can't lie to the sea.</ns0:comment_content>
    <ns0:comment_parent>16821</ns0:comment_parent>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1444185335</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>16821</ns0:comment_id>
    <ns0:comment_author>Daniel Hardman</ns0:comment_author>
    <ns0:comment_author_email>daniel.hardman@gmail.com</ns0:comment_author_email>
    <ns0:comment_author_url>http://about.me/daniel.hardman</ns0:comment_author_url>
    <ns0:comment_date>2015-10-06 20:16:01</ns0:comment_date>
    <ns0:comment_content>Excellent point about reality being our harshest critic. I hadn't looked at it from that perspective--but now that you point it out, it's undeniable.</ns0:comment_content>
    <ns0:comment_parent>16819</ns0:comment_parent>
    <ns0:comment_user_id>4597088</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1444184161</ns0:meta_value>
    </ns0:commentmeta>
    </ns0:comment>
  <ns0:comment>
    <ns0:comment_id>29041</ns0:comment_id>
    <ns0:comment_author>Shoeb</ns0:comment_author>
    <ns0:comment_author_email>shoebtanjim@gmail.com</ns0:comment_author_email>
    <ns0:comment_date>2024-01-05 03:56:24</ns0:comment_date>
    <ns0:comment_content>I got stuck here
"However, I find it ironic that a profession so passionate about message passing and interfaces and producer/consumer contracts could lightly dismiss communication concerns when they involve humans. Do the messes created by DDoS, attackers probing vulnerabilities, and poorly behaved clients teach us nothing?"

We create technologies to make the world a better place, but we forget that we can start this process from our surroundings.</ns0:comment_content>
    <ns0:comment_parent>0</ns0:comment_parent>
    <ns0:comment_user_id>167473972</ns0:comment_user_id>
    <ns0:commentmeta>
      <ns0:meta_key>firehose_sent</ns0:meta_key>
      <ns0:meta_value>1704452185</ns0:meta_value>
    </ns0:commentmeta>
    <ns0:commentmeta>
      <ns0:meta_key>email_notification_notqueued</ns0:meta_key>
      <ns0:meta_value>1704452187</ns0:meta_value>
    </ns0:commentmeta>
  </ns0:comment>
</item>
<item>
  <title>On pains and brains</title>
  <link>http://codecraft.co/2016/01/01/on-pains-and-brains/</link>
  <pubDate>Fri, 01 Jan 2016 21:30:01 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">http://codecraft.co/?p=6168</guid>
  <ns2:encoded>A while back, I wrote a post on &lt;a href="http://codecraft.co/2013/05/06/why-your-software-should-cry/"&gt;why software should feel pain&lt;/a&gt;. Since then, I've had that lesson reinforced in my mind, and I've also understood some nuances that weren't obvious to me before, so I'm revisiting the topic.

&lt;strong&gt;The Reinforcer&lt;/strong&gt;

What brought this topic back to my mind was a root cause analysis I did to diagnose a recent system failure. I'll spare you the gory details, but here's what happened in a nutshell: a daemon got bad data files and began behaving strangely as a result. The replication process for its data files had been impaired because the app producing the data files finished much later than normal. That app in turn was impacted by anomalous network brownouts which began with a partly damaged network cable.

&lt;strong&gt;The Obvious but Naive Lesson&lt;/strong&gt;

The final step in my root cause analysis was to make recommendations, and I was quick to offer some: the daemon should double-check the integrity of its data file; the originating app should monitor its timing and complain about anomalies.

The more I thought about it, however, the more unhappy I became. Surely, such monitoring is a good idea. So why did I &lt;em&gt;not&lt;/em&gt; believe my recommendations would really make things better?

[caption id="attachment_6224" align="aligncenter" width="418"]&lt;img class=" size-full wp-image-6224 aligncenter" src="https://codecraft.co/wp-content/uploads/2016/01/descartes-reflex.jpeg" alt="Descartes-reflex" width="418" height="442" /&gt; The pain pathway is more than nerves in the toes; it runs all the way back to the brain. From René Descartes's &lt;em&gt;Treatise of Man&lt;/em&gt;. (Wikimedia Commons)[/caption]

&lt;!--more--&gt;Eventually, a light went on: the &lt;em&gt;real&lt;/em&gt; root cause wasn't just the frayed cable--it was a lack of human attention. We already had rudimentary pain signals in the form of log files and alerts, but nobody was paying attention. It was like nerves with no link back to the brain. Building better alarms was only half a solution; my recommendations needed to cover changes in the behavior of &lt;em&gt;people&lt;/em&gt; to really make a difference.

&lt;strong&gt;The Deeper Lesson&lt;/strong&gt;

This evolution of thinking, in which I initially focus on technical details, but &lt;a href="http://codecraft.co/2012/10/23/on-seps-squirrels-and-meta-questions/"&gt;come to zen&lt;/a&gt; only as I recognize &lt;a href="http://codecraft.co/2008/06/25/why-people-are-part-of-a-software-architecture/"&gt;the role of people in software architecture&lt;/a&gt;, has repeated several times in my career, but I guess I needed to discover it again.

In my original post on pain sensors in software, I suggested several creative ways to apply the principle. I still think ideas like &lt;a href="http://codecraft.co/2013/05/06/why-your-software-should-cry/"&gt;&lt;em&gt;error memory, &lt;/em&gt;&lt;em&gt;error gestalt&lt;/em&gt;, and &lt;em&gt;protective fear&lt;/em&gt;&lt;/a&gt; are worth pondering, but I now realize that they are not going to deliver significant value unless we connect them to people.

When we diagram systems as part of architecture and design activities, we rarely include boxes for users. Even if we are UX-savvy and include "users", we almost always take the &lt;a href="http://codecraft.co/2012/09/04/users-arent-the-only-people-in-your-software/"&gt;other human actors&lt;/a&gt; in our systems for granted. When was the last time your architecture diagrams included an org chart, or discussed the maintenance plan for holiday downtime, or contemplated the way anomalies would surface in IT dashboards, or identified success criteria for install+configure phases of the system, or surfaced symptoms of &lt;a href="http://codecraft.co/2012/09/28/the-8th-characteristic/"&gt;system obsolescence and death&lt;/a&gt; that its owners should watch?

&lt;strong&gt;Recommendation&lt;/strong&gt;

I propose that we add two new documents to the artifacts that we use to describe our architecture:
&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;Health Checklist&lt;/strong&gt;: lists key indicators of health, and troubling symptoms that ought to be watched. For example, "needs about 100Mbps of network capacity during peak business hours; 50 Mbps is problematic, and &amp;lt;25 Mbps is a crisis."&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Who's Who&lt;/strong&gt;: lists people (NOT just users) that have a role in the lifecycle of the app, and their responsibilities. For example, "App is installed by IT, who have to set up DNS and mail relay for it. IT typically won't hear anything about the app after initial config, but may receive zenoss alarms about DNS and mail relay failures. Also depends on data dumps that are uploaded at the end of each business day by accounting; accounting only sees the web upload dialog and may be out of the office on holidays."&lt;/li&gt;
&lt;/ul&gt;
Do you think such artifacts would be helpful? Do you have any ideas to enhance the nerve~brain connections in your software systems?</ns2:encoded>
  <ns0:post_id>6168</ns0:post_id>
  <ns0:post_date>2016-01-01 14:30:01</ns0:post_date>
  <ns0:post_name>on-pains-and-brains</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>post</ns0:post_type>
  <category domain="post_tag" nicename="brain">brain</category>
  <category domain="category" nicename="development-process-and-people">Development Process and People</category>
  <category domain="post_tag" nicename="pain">pain</category>
  <category domain="post_tag" nicename="people">people</category>
  <category domain="post_tag" nicename="root-cause-analysis">root-cause analysis</category>
  <category domain="category" nicename="software-architecture">Software Architecture</category>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_job_id</ns0:meta_key>
    <ns0:meta_value>18321221527</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_rest_api_client_id</ns0:meta_key>
    <ns0:meta_value>-1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>publicize_linkedin_url</ns0:meta_key>
    <ns0:meta_value>https://www.linkedin.com/updates?discuss=&amp;scope=1061311&amp;stype=M&amp;topic=6088803199173607424&amp;type=U&amp;a=yPW3</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_2094206</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_external</ns0:meta_key>
    <ns0:meta_value>a:1:{s:8:"facebook";a:1:{i:1511184;s:38:"https://facebook.com/10153769159690912";}}</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_done_2094213</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_rest_api_published</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
  <ns0:postmeta>
    <ns0:meta_key>_last_editor_used_jetpack</ns0:meta_key>
    <ns0:meta_value>block-editor</ns0:meta_value>
  </ns0:postmeta>
</item>
<item>
  <title>Custom Styles</title>
  <link>http://codecraft.co/2022/09/05/wp-global-styles-pub%2fsorbet/</link>
  <pubDate>Mon, 05 Sep 2022 13:41:43 +0000</pubDate>
  <dc:creator>dhh11289</dc:creator>
  <guid isPermaLink="false">https://codecraft.co/2022/09/05/wp-global-styles-pub%2fsorbet/</guid>
  <ns2:encoded>{"version":2,"isGlobalStylesUserThemeJSON":true}</ns2:encoded>
  <ns0:post_id>6859</ns0:post_id>
  <ns0:post_date>2022-09-05 07:41:43</ns0:post_date>
  <ns0:post_name>wp-global-styles-pub%2fsorbet</ns0:post_name>
  <ns0:status>publish</ns0:status>
  <ns0:post_type>wp_global_styles</ns0:post_type>
  <category domain="wp_theme" nicename="sorbet">sorbet</category>
  <ns0:postmeta>
    <ns0:meta_key>_publicize_pending</ns0:meta_key>
    <ns0:meta_value>1</ns0:meta_value>
  </ns0:postmeta>
</item>
  </channel>
</rss>